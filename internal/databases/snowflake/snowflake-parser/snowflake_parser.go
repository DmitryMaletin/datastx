// Code generated from java-escape by ANTLR 4.11.1. DO NOT EDIT.

package parser // SnowflakeParser

import (
	"fmt"
	"strconv"
  "sync"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}


type SnowflakeParser struct {
	*antlr.BaseParser
}

var snowflakeparserParserStaticData struct {
  once                   sync.Once
  serializedATN          []int32
  literalNames           []string
  symbolicNames          []string
  ruleNames              []string
  predictionContextCache *antlr.PredictionContextCache
  atn                    *antlr.ATN
  decisionToDFA          []*antlr.DFA
}

func snowflakeparserParserInit() {
  staticData := &snowflakeparserParserStaticData
  staticData.literalNames = []string{
    "", "''AAD_PROVISIONER''", "'ABORT'", "'ABORT_AFTER_WAIT'", "'ABORT_DETACHED_QUERY'", 
    "'ABORT_STATEMENT'", "'ABSENT'", "'ABSOLUTE'", "'ACCESS'", "'ACCOUNT'", 
    "'ACCOUNTS'", "'ACTION'", "'ACTIVE'", "'ADD'", "'ADMIN_NAME'", "'ADMIN_PASSWORD'", 
    "'ADMINISTER'", "'AES'", "'AFTER'", "'AGGREGATE'", "'ALL'", "'ALLOW_CLIENT_MFA_CACHING'", 
    "'ALLOW_CONNECTIONS'", "'ALLOW_DUPLICATE'", "'ALLOW_ID_TOKEN'", "'ALLOW_MULTIPLE_EVENT_LOSS'", 
    "'ALLOW_OVERLAPPING_EXECUTION'", "'ALLOW_SINGLE_EVENT_LOSS'", "'ALLOWED'", 
    "'ALLOWED_ACCOUNTS'", "'ALLOWED_DATABASES'", "'ALLOWED_INTEGRATION_TYPES'", 
    "'ALLOWED_IP_LIST'", "'ALLOWED_SHARES'", "'ALLOWED_VALUES'", "'ALTER'", 
    "'ALWAYS'", "'AND'", "'ANONYMOUS'", "'ANSI_DEFAULTS'", "'ANY'", "'API'", 
    "'API_ALLOWED_PREFIXES'", "'API_AWS_ROLE_ARN'", "'API_BLOCKED_PREFIXES'", 
    "'API_INTEGRATION'", "'API_KEY'", "'API_PROVIDER'", "'APP_NAME'", "'APPEND'", 
    "'APPEND_ONLY'", "'APPLICATION'", "'APPLY'", "'AS'", "'ASC'", "'AT'", 
    "'ATTACH'", "'AUTHORIZATION'", "'AUTHORIZATIONS'", "'AUTO'", "'AUTO_COMPRESS'", 
    "'AUTO_DETECT'", "'AUTO_INGEST'", "'AUTO_REFRESH'", "'AUTO_RESUME'", 
    "'AUTO_SUSPEND'", "'AUTOCOMMIT'", "'AUTOCOMMIT_API_SUPPORTED'", "'AUTOINCREMENT'", 
    "'AVG'", "'AVRO'", "'AWS_KEY_ID'", "'AWS_ROLE'", "'AWS_SECRET_KEY'", 
    "'AWS_SNS'", "'AWS_SNS_ROLE_ARN'", "'AWS_SNS_TOPIC'", "'AWS_SNS_TOPIC_ARN'", 
    "'AWS_TOKEN'", "'AZURE'", "'AZURE_AD_APPLICATION_ID'", "'AZURE_EVENT_GRID'", 
    "'AZURE_EVENT_GRID_TOPIC_ENDPOINT'", "''AZURE''", "'AZURE_SAS_TOKEN'", 
    "'AZURE_STORAGE_QUEUE_PRIMARY_URI'", "'AZURE_TENANT_ID'", "'BASE64'", 
    "'BEFORE'", "'BEGIN'", "'BERNOULLI'", "'BETWEEN'", "'BINARY_AS_TEXT'", 
    "'BINARY_CHECKSUM'", "'BINARY_FORMAT'", "'BINARY_INPUT_FORMAT'", "'BINARY_OUTPUT_FORMAT'", 
    "'BINDING'", "'BLOCK'", "'BLOCKED_IP_LIST'", "'BLOCKED_ROLES_LIST'", 
    "'BODY'", "'BROTLI'", "'BUSINESS_CRITICAL'", "'BY'", "'BZ2'", "'CACHE'", 
    "'CALL'", "'CALLED'", "'CALLER'", "'CASCADE'", "'CASE'", "'CASE_INSENSITIVE'", 
    "'CASE_SENSITIVE'", "'CAST'", "'CATCH'", "'CERTIFICATE'", "'CHANGE'", 
    "'CHANGE_RETENTION'", "'CHANGE_TRACKING'", "'CHANGES'", "'CHANGETABLE'", 
    "'CHAR'", "'CHARACTER'", "'CHARINDEX'", "'CHECK'", "'CHECK_EXPIRATION'", 
    "'CHECK_POLICY'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLASSIFIER_FUNCTION'", 
    "'CLEANUP'", "'CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS'", "'CLIENT_ENCRYPTION_KEY_SIZE'", 
    "'CLIENT_MEMORY_LIMIT'", "'CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX'", 
    "'CLIENT_METADATA_USE_SESSION_DATABASE'", "'CLIENT_PREFETCH_THREADS'", 
    "'CLIENT_RESULT_CHUNK_SIZE'", "'CLIENT_RESULT_COLUMN_CASE_INSENSITIVE'", 
    "'CLIENT_SESSION_KEEP_ALIVE'", "'CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY'", 
    "'CLIENT_TIMESTAMP_TYPE_MAPPING'", "'CLONE'", "'CLOSE'", "'CLUSTER'", 
    "'CLUSTERED'", "'CLUSTERING'", "'COALESCE'", "'COL_LENGTH'", "'COL_NAME'", 
    "'COLLATE'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", 
    "'COMMITTED'", "'COMPRESS'", "'COMPRESSION'", "'CONCAT'", "'CONCAT_NULL_YIELDS_NULL'", 
    "'CONCAT_WS'", "'CONFIGURATION'", "'CONNECT'", "'CONNECTION'", "'CONNECTIONS'", 
    "'CONSTRAINT'", "'CONTAINMENT'", "'CONTAINS'", "'CONTENT'", "'CONTEXT'", 
    "'CONTEXT_HEADERS'", "'CONTEXT_INFO'", "'CONTINUE'", "'CONTROL'", "'CONVERSATION'", 
    "'COOKIE'", "'COPY'", "'COPY_ONLY'", "'COPY_OPTIONS'", "'COUNT'", "'COUNT_BIG'", 
    "'CREATE'", "'CREDENTIALS'", "'CREDIT_QUOTA'", "'CROSS'", "'CSV'", "'CUBE'", 
    "'CUME_DIST'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
    "'CURRENT_USER'", "'CURSOR'", "'CUSTOM'", "'DAILY'", "'DATA'", "'DATA_RETENTION_TIME_IN_DAYS'", 
    "'DATABASE'", "'DATABASES'", "'DATE_FORMAT'", "'DATE_INPUT_FORMAT'", 
    "'DATE_OUTPUT_FORMAT'", "'DATEADD'", "'DATEDIFF'", "'DATENAME'", "'DATEPART'", 
    "'DAYS'", "'DAYS_TO_EXPIRY'", "'DECLARE'", "'DEFAULT'", "'DEFAULT_DDL_COLLATION'", 
    "'DEFAULT_NAMESPACE'", "'DEFAULT_ROLE'", "'DEFAULT_WAREHOUSE'", "'DEFERRABLE'", 
    "'DEFERRED'", "'DEFINE'", "'DEFINITION'", "'DEFLATE'", "'DELEGATED'", 
    "'DELETE'", "'DELTA'", "'DENSE_RANK'", "'DESC'", "'DESCRIBE'", "'DIRECTION'", 
    "'DIRECTORY'", "'DISABLE'", "'DISABLE_AUTO_CONVERT'", "'DISABLE_SNOWFLAKE_DATA'", 
    "'DISABLED'", "'DISK'", "'DISPLAY_NAME'", "'DISTINCT'", "'DO'", "'DOUBLE'", 
    "'DROP'", "'ECONOMY'", "'EDITION'", "'ELSE'", "'EMAIL'", "'EMPTY'", 
    "'EMPTY_FIELD_AS_NULL'", "'ENABLE'", "'ENABLE_FOR_PRIVILEGE'", "'ENABLE_INTERNAL_STAGES_PRIVATELINK'", 
    "'ENABLE_OCTAL'", "'ENABLE_QUERY_ACCELERATION'", "'ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION'", 
    "'ENABLED'", "'ENCODING'", "'ENCRYPTION'", "'END'", "'END_TIMESTAMP'", 
    "'ENDPOINT'", "'ENFORCE_LENGTH'", "'ENFORCE_SESSION_POLICY'", "'ENFORCED'", 
    "'ENTERPRISE'", "'EQUALITY'", "'ERROR_INTEGRATION'", "'ERROR_ON_COLUMN_COUNT_MISMATCH'", 
    "'ERROR_ON_NONDETERMINISTIC_MERGE'", "'ERROR_ON_NONDETERMINISTIC_UPDATE'", 
    "'ESCAPE'", "'ESCAPE_UNENCLOSED_FIELD'", "'EXCEPT'", "'EXCHANGE'", "", 
    "'EXECUTION'", "'EXIST'", "'EXISTS'", "'EXIT'", "'EXPAND'", "'EXPIRY_DATE'", 
    "'EXPLAIN'", "'EXPLICIT'", "'EXTERNAL'", "'EXTERNAL_OAUTH'", "'EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST'", 
    "'EXTERNAL_OAUTH_ALLOWED_ROLES_LIST'", "'EXTERNAL_OAUTH_ANY_ROLE_MODE'", 
    "'EXTERNAL_OAUTH_AUDIENCE_LIST'", "'EXTERNAL_OAUTH_BLOCKED_ROLES_LIST'", 
    "'EXTERNAL_OAUTH_ISSUER'", "'EXTERNAL_OAUTH_JWS_KEYS_URL'", "'EXTERNAL_OAUTH_RSA_PUBLIC_KEY'", 
    "'EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2'", "'EXTERNAL_OAUTH_SCOPE_DELIMITER'", 
    "'EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE'", "'EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM'", 
    "'EXTERNAL_OAUTH_TYPE'", "'EXTERNAL_STAGE'", "'FAIL_OPERATION'", "'FAILOVER'", 
    "'FAILOVER_MODE'", "'FALSE'", "'FETCH'", "'FIELD_DELIMITER'", "'FIELD_OPTIONALLY_ENCLOSED_BY'", 
    "'FILE'", "'FILE_EXTENSION'", "'FILE_FORMAT'", "'FILES'", "'FILTER'", 
    "'FIRST'", "'FIRST_NAME'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FORMAT'", 
    "'FORMAT_NAME'", "'FORMATS'", "'FREQUENCY'", "'FROM'", "'FULL'", "'FUNCTION'", 
    "'FUNCTIONS'", "'FUTURE'", "'GCP_PUBSUB'", "'GCP_PUBSUB_SUBSCRIPTION_NAME'", 
    "'GCP_PUBSUB_TOPIC_NAME'", "'GCS'", "''GENERIC''", "''GENERIC_SCIM_PROVISIONER''", 
    "'GEO'", "'GEOGRAPHY_OUTPUT_FORMAT'", "'GEOMETRY_OUTPUT_FORMAT'", "'GET'", 
    "'GET_FILESTREAM_TRANSACTION_CONTEXT'", "'GLOBAL'", "'GOOGLE_AUDIENCE'", 
    "'GOTO'", "'GRANT'", "'GRANTS'", "'GROUP'", "'GROUPING'", "'GROUPING_ID'", 
    "'GROUPS'", "'GZIP'", "'HAVING'", "'HEADER'", "'HEADERS'", "'HEX'", 
    "'HIERARCHYID'", "'HIGH'", "'HISTORY'", "'HOURS'", "'IDENTITY'", "'IF'", 
    "'IGNORE'", "'IGNORE_CONSTRAINTS'", "'IGNORE_DUP_KEY'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
    "'IGNORE_TRIGGERS'", "'IGNORE_UTF8_ERRORS'", "'IMMEDIATE'", "'IMMEDIATELY'", 
    "'IMMUTABLE'", "'IMPLICIT'", "'IMPORT'", "'IMPORTED'", "'IN'", "'INCREMENT'", 
    "'INDEX'", "'INFORMATION'", "'INIT'", "'INITIAL_REPLICATION_SIZE_LIMIT_IN_TB'", 
    "'INITIALLY'", "'INITIALLY_SUSPENDED'", "'INNER'", "'INPUT'", "'INSERT'", 
    "'INSERT_ONLY'", "'INSTEAD'", "'INT'", "'INTEGRATION'", "'INTEGRATIONS'", 
    "'INTERSECT'", "'INTO'", "'IS'", "'ISNULL'", "'ISNUMERIC'", "'ISOLATION'", 
    "'JDBC_TREAT_DECIMAL_AS_INT'", "'JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC'", 
    "'JDBC_USE_SESSION_TIMEZONE'", "'JOIN'", "'JS_TREAT_INTEGER_AS_BIGINT'", 
    "'JSON'", "'JSON_INDENT'", "'KB'", "'KEEP'", "'KEY'", "'KEYS'", "'KEYSET'", 
    "'KMS_KEY_ID'", "'LAG'", "'LANGUAGE'", "'LARGE'", "'LAST'", "'LAST_NAME'", 
    "'LAST_QUERY_ID'", "'LAST_VALUE'", "'LATERAL'", "'LEAD'", "'LEFT'", 
    "'LEN'", "'LEVEL'", "'LIKE'", "'LIMIT'", "'LINENO'", "'LIST'", "'LISTENER_IP'", 
    "'LISTENER_PORT'", "'LISTING'", "'LOAD'", "'LOCAL'", "'LOCAL_SERVICE_NAME'", 
    "'LOCATION'", "'LOCK_TIMEOUT'", "'LOCKS'", "'LOG'", "'LOGIN'", "'LOGIN_NAME'", 
    "'LOOKER'", "'LOW'", "'LOWER'", "'LTRIM'", "'LZO'", "'MANAGE'", "'MANAGED'", 
    "'MASK'", "'MASKED'", "'MASKING'", "'MASTER'", "'MASTER_KEY'", "'MATCH'", 
    "'MATCH_BY_COLUMN_NAME'", "'MATCH_RECOGNIZE'", "'MATCHED'", "'MATCHES'", 
    "'MATERIALIZED'", "'MAX_BATCH_ROWS'", "'MAX_CLUSTER_COUNT'", "'MAX_CONCURRENCY_LEVEL'", 
    "'MAX_DATA_EXTENSION_TIME_IN_DAYS'", "'MAX_SIZE'", "'MEASURES'", "'MEDIUM'", 
    "'MERGE'", "'MIDDLE_NAME'", "'MIN'", "'MIN_CLUSTER_COUNT'", "'MIN_DATA_RETENTION_TIME_IN_DAYS'", 
    "'MINS_TO_BYPASS_MFA'", "'MINS_TO_UNLOCK'", "'MINUS'", "'MINUTES'", 
    "'MODE'", "'MODIFIED_AFTER'", "'MODIFY'", "'MONITOR'", "'MONITORS'", 
    "'MONTHLY'", "'MOVE'", "'MULTI_STATEMENT_COUNT'", "'MULTI_USER'", "'MUST_CHANGE'", 
    "'MUST_CHANGE_PASSWORD'", "'NAME'", "'NATURAL'", "'NCHAR'", "'NESTED_TRIGGERS'", 
    "'NETWORK'", "'NETWORK_POLICY'", "'NEVER'", "'NEW_ACCOUNT'", "'NEW_BROKER'", 
    "'NEW_PASSWORD'", "'NEWID'", "'NEWNAME'", "'NEWSEQUENTIALID'", "'NEXT'", 
    "'NEXTVAL'", "'NO'", "'NONE'", "'NORELY'", "'NOT'", "'NOTIFICATION'", 
    "'NOTIFICATION_INTEGRATION'", "'NOTIFICATION_PROVIDER'", "'NOTIFICATIONS'", 
    "'NOTIFY'", "'NOTIFY_USERS'", "'NOVALIDATE'", "'NTILE'", "'NULL'", "'NULL_IF'", 
    "'NULLIF'", "'NULLS'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
    "'OAUTH'", "'OAUTH_ALLOW_NON_TLS_REDIRECT_URI'", "'OAUTH_CLIENT'", "'OAUTH_CLIENT_RSA_PUBLIC_KEY'", 
    "'OAUTH_CLIENT_RSA_PUBLIC_KEY_2'", "'OAUTH_ENFORCE_PKCE'", "'OAUTH_ISSUE_REFRESH_TOKENS'", 
    "'OAUTH_REDIRECT_URI'", "'OAUTH_REFRESH_TOKEN_VALIDITY'", "'OAUTH_USE_SECONDARY_ROLES'", 
    "'OBJECT'", "'OBJECT_TYPES'", "'OBJECTS'", "'OF'", "'OFF'", "'OFFSET'", 
    "'OFFSETS'", "'OKTA'", "''OKTA_PROVISIONER''", "''OKTA''", "'OLD'", 
    "'OLD_ACCOUNT'", "'OLD_PASSWORD'", "'OMIT'", "'ON'", "'ON_ERROR'", "'ON_FAILURE'", 
    "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPERATE'", "'OPERATIONS'", 
    "'OPTIMIZATION'", "'OPTION'", "'OR'", "'ORC'", "'ORDER'", "'ORGANIZATION'", 
    "'OUTBOUND'", "'OUTER'", "'OVER'", "'OVERRIDE'", "'OVERWRITE'", "'OWNER'", 
    "'OWNERSHIP'", "'PAGE'", "'PARALLEL'", "'PARAM_NODE'", "'PARAMETERS'", 
    "'PARQUET'", "'PARTIAL'", "'PARTITION'", "'PARTITION_TYPE'", "'PARTITIONS'", 
    "'PASSWORD'", "'PAST'", "'PATH'", "'PATTERN'", "'PER'", "'PERCENT'", 
    "'PERCENT_RANK'", "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERIODIC_DATA_REKEYING'", 
    "'PERMISSION_SET'", "'PERSIST_SAMPLE_PERCENT'", "'PERSISTED'", "'PING_FEDERATE'", 
    "'PIPE'", "'PIPE_EXECUTION_PAUSED'", "'PIPES'", "'PIVOT'", "'PLAN'", 
    "'PLATFORM'", "'POLICIES'", "'POLICY'", "'POOL'", "'PORT'", "'PRE_AUTHORIZED_ROLES_LIST'", 
    "'PRECEDING'", "'PRECISION'", "'PREDICATE'", "'PREFIX'", "'PRESERVE_SPACE'", 
    "'PREVENT_UNLOAD_TO_INLINE_URL'", "'PREVENT_UNLOAD_TO_INTERNAL_STAGES'", 
    "'PRIMARY'", "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", 
    "'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROC'", "'PROCEDURE'", 
    "'PROCEDURE_NAME'", "'PROCEDURES'", "'PROCESS'", "'PROFILE'", "'PROPERTY'", 
    "'PROVIDER'", "'PROVIDER_KEY_NAME'", "'PUBLIC'", "'PURGE'", "'PUT'", 
    "'PYTHON'", "'QUALIFY'", "'QUERIES'", "'QUERY'", "'QUERY_ACCELERATION_MAX_SCALE_FACTOR'", 
    "'QUERY_TAG'", "'QUEUE'", "'QUOTED_IDENTIFIERS_IGNORE_CASE'", "'RANGE'", 
    "'RANK'", "'RAW'", "'RAW_DEFLATE'", "'READ'", "'READ_COMMITTED_SNAPSHOT'", 
    "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", "'READ_WRITE'", "'READER'", 
    "'READONLY'", "'READPAST'", "'READTEXT'", "'READWRITE'", "'REBUILD'", 
    "'RECEIVE'", "'RECLUSTER'", "'RECOMPILE'", "'RECONFIGURE'", "'RECORD_DELIMITER'", 
    "'RECOVERY'", "'RECURSIVE'", "'RECURSIVE_TRIGGERS'", "'REFERENCE_USAGE'", 
    "'REFERENCES'", "'REFRESH'", "'REFRESH_ON_CREATE'", "'REGION'", "'REGION_GROUP'", 
    "'REGIONS'", "'RELATIVE'", "'RELY'", "'REMOTE'", "'REMOTE_PROC_TRANSACTIONS'", 
    "'REMOTE_SERVICE_NAME'", "'REMOVE'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", 
    "'REPLACE_INVALID_CHARACTERS'", "'REPLICA'", "'REPLICATION'", "'REPLICATION_SCHEDULE'", 
    "'REQUEST_TRANSLATOR'", "'REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION'", 
    "'REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION'", "'REQUIRED'", "'RESET'", 
    "'RESOURCE'", "'RESOURCE_MONITOR'", "'RESOURCES'", "'RESPONSE_TRANSLATOR'", 
    "'RESTART'", "'RESTORE'", "'RESTRICT'", "'RESTRICTIONS'", "'RESULT'", 
    "'RESUME'", "'RETAINDAYS'", "'RETURN'", "'RETURN_ALL_ERRORS'", "'RETURN_ERRORS'", 
    "'RETURN_FAILED_ONLY'", "", "'RETURN_ROWS'", "'RETURNS'", "'REVERSE'", 
    "'REVERT'", "'REVOKE'", "'REWIND'", "'RIGHT'", "'ROLE'", "'ROLES'", 
    "'ROLLBACK'", "'ROLLUP'", "'ROOT'", "'ROW'", "'ROW_NUMBER'", "'ROWCOUNT'", 
    "'ROWGUID'", "'ROWLOCK'", "'ROWS'", "'ROWS_PER_RESULTSET'", "'RSA_PUBLIC_KEY'", 
    "'RSA_PUBLIC_KEY_2'", "'RTRIM'", "'RUN_AS_ROLE'", "''S3''", "'SAFE'", 
    "'SAFETY'", "'SAML2'", "'SAML2_ENABLE_SP_INITIATED'", "'SAML2_FORCE_AUTHN'", 
    "'SAML2_ISSUER'", "'SAML2_POST_LOGOUT_REDIRECT_URL'", "'SAML2_PROVIDER'", 
    "'SAML2_REQUESTED_NAMEID_FORMAT'", "'SAML2_SIGN_REQUEST'", "'SAML2_SNOWFLAKE_ACS_URL'", 
    "'SAML2_SNOWFLAKE_ISSUER_URL'", "'SAML2_SNOWFLAKE_X509_CERT'", "'SAML2_SP_INITIATED_LOGIN_PAGE_LABEL'", 
    "'SAML2_SSO_URL'", "'SAML2_X509_CERT'", "'SAML_IDENTITY_PROVIDER'", 
    "'SAMPLE'", "'SAVE_OLD_URL'", "'SCALING_POLICY'", "'SCHEDULE'", "'SCHEDULER'", 
    "'SCHEMA'", "'SCHEMAS'", "'SCHEME'", "'SCIM'", "'SCIM_CLIENT'", "'SCRIPT'", 
    "'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", 
    "'SECRET'", "'SECURE'", "'SECURITY'", "'SEED'", "'SELECT'", "'SELF'", 
    "'SEQUENCE'", "'SEQUENCES'", "'SERVER'", "'SERVICE'", "'SESSION'", "'SESSION_IDLE_TIMEOUT_MINS'", 
    "'SESSION_POLICY'", "'SESSION_UI_IDLE_TIMEOUT_MINS'", "'SET'", "'SETS'", 
    "'SETUSER'", "'SHARE'", "'SHARE_RESTRICTIONS'", "'SHARED'", "'SHARES'", 
    "'SHOW'", "'SHOW_INITIAL_ROWS'", "'SHOWPLAN'", "'SHOWPLAN_ALL'", "'SHOWPLAN_TEXT'", 
    "'SHOWPLAN_XML'", "'SIGNATURE'", "'SIMPLE'", "'SIMULATED_DATA_SHARING_CONSUMER'", 
    "'SINGLE_USER'", "'SIZE'", "'SIZE_LIMIT'", "'SKIP'", "'SKIP_BLANK_LINES'", 
    "'SKIP_BYTE_ORDER_MARK'", "'SKIP_FILE'", "", "'SKIP_HEADER'", "'SMALL'", 
    "'SNAPPY'", "'SNAPPY_COMPRESSION'", "'SOME'", "'SOUNDEX'", "'SOURCE'", 
    "'SOURCE_COMPRESSION'", "'SPACE'", "'SPARSE'", "'SPECIFICATION'", "'SPLIT'", 
    "'SQL'", "'SSO_LOGIN_PAGE'", "'STAGE'", "'STAGE_COPY_OPTIONS'", "'STAGE_FILE_FORMAT'", 
    "'STAGES'", "'STANDARD'", "'STANDBY'", "'START'", "'START_DATE'", "'START_TIMESTAMP'", 
    "'STARTED'", "'STARTS'", "'STATE'", "'STATEMENT'", "'STATEMENT_QUEUED_TIMEOUT_IN_SECONDS'", 
    "'STATEMENT_TIMEOUT_IN_SECONDS'", "'STATIC'", "'STATISTICS'", "'STATS'", 
    "'STATS_DATE'", "'STATS_STREAM'", "'STATUS'", "'STATUSONLY'", "'STDEV'", 
    "'STDEVP'", "'STOP'", "'STOPLIST'", "'STOPPED'", "'STORAGE'", "'STORAGE_ALLOWED_LOCATIONS'", 
    "'STORAGE_AWS_OBJECT_ACL'", "'STORAGE_AWS_ROLE_ARN'", "'STORAGE_BLOCKED_LOCATIONS'", 
    "'STORAGE_INTEGRATION'", "'STORAGE_PROVIDER'", "'STR'", "'STREAM'", 
    "'STREAMS'", "'STRICT'", "'STRICT_JSON_OUTPUT'", "'STRING_AGG'", "'STRING_ESCAPE'", 
    "'STRIP_NULL_VALUES'", "'STRIP_OUTER_ARRAY'", "'STRIP_OUTER_ELEMENT'", 
    "'SUBSTRING'", "'SUM'", "'SUPPORTED'", "'SUSPEND'", "'SUSPEND_IMMEDIATE'", 
    "'SUSPEND_TASK_AFTER_NUM_FAILURES'", "'SUSPENDED'", "'SWAP'", "'SWITCH'", 
    "'SYNC_PASSWORD'", "'SYSTEM'", "'SYSTEM_USER'", "'TABLE'", "'TABLE_FORMAT'", 
    "'TABLEAU_DESKTOP'", "'TABLEAU_SERVER'", "'TABLES'", "'TABLESAMPLE'", 
    "'TABULAR'", "'TAG'", "'TAGS'", "'TARGET'", "'TASK'", "'TASKS'", "'TEMP'", 
    "'TEMPORARY'", "'TERSE'", "'TEXTSIZE'", "'THEN'", "'TIES'", "'TIME'", 
    "'TIME_FORMAT'", "'TIME_INPUT_FORMAT'", "'TIME_OUTPUT_FORMAT'", "'TIMEOUT'", 
    "'TIMER'", "'TIMESTAMP'", "'TIMESTAMP_DAY_IS_ALWAYS_24H'", "'TIMESTAMP_FORMAT'", 
    "'TIMESTAMP_INPUT_FORMAT'", "'TIMESTAMP_LTZ'", "'TIMESTAMP_LTZ_OUTPUT_FORMAT'", 
    "'TIMESTAMP_NTZ'", "'TIMESTAMP_NTZ_OUTPUT_FORMAT'", "'TIMESTAMP_OUTPUT_FORMAT'", 
    "'TIMESTAMP_TYPE_MAPPING'", "'TIMESTAMP_TZ'", "'TIMESTAMP_TZ_OUTPUT_FORMAT'", 
    "'TIMEZONE'", "'TO'", "'TOP'", "'TORN_PAGE_DETECTION'", "'TRACK_CAUSALITY'", 
    "'TRACKING'", "'TRAN'", "'TRANSACTION'", "'TRANSACTION_ABORT_ON_ERROR'", 
    "'TRANSACTION_DEFAULT_ISOLATION_LEVEL'", "'TRANSACTION_ID'", "'TRANSACTIONS'", 
    "'TRANSFORM_NOISE_WORDS'", "'TRANSIENT'", "'TRANSLATE'", "'TRIGGER'", 
    "'TRIGGERS'", "'TRIM'", "'TRIM_SPACE'", "'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", 
    "'TRUE'", "'TRUNCATE'", "'TRUNCATECOLUMNS'", "'TRUSTWORTHY'", "'TRY'", 
    "'TSEQUAL'", "'TSQL'", "'TWO_DIGIT_CENTURY_START'", "'TWO_DIGIT_YEAR_CUTOFF'", 
    "'TYPE'", "'TYPE_ID'", "'TYPE_NAME'", "'TYPE_WARNING'", "'TYPEPROPERTY'", 
    "'UN'", "'UNBOUNDED'", "'UNCHECKED'", "'UNCOMMITTED'", "'UNDROP'", "'UNICODE'", 
    "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNLIMITED'", "'UNLOCK'", "'UNMASK'", 
    "'UNMATCHED'", "'UNPIVOT'", "'UNSAFE'", "'UNSET'", "'UNSUPPORTED_DDL_ACTION'", 
    "'UOW'", "'UPDATE'", "'UPDLOCK'", "'UPPER'", "'URL'", "'USAGE'", "'USE'", 
    "'USE_ANY_ROLE'", "'USE_CACHED_RESULT'", "'USED'", "'USER'", "'USER_SPECIFIED'", 
    "'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE'", "'USER_TASK_TIMEOUT_MS'", 
    "'USERS'", "'USING'", "'UTF8'", "'VALID_XML'", "'VALIDATE'", "'VALIDATION'", 
    "'VALIDATION_MODE'", "'VALUE'", "'VALUES'", "'VAR'", "'VARIABLES'", 
    "'VARP'", "'VARYING'", "'VERSION'", "'VIEW'", "'VIEW_METADATA'", "'VIEWS'", 
    "'VISIBILITY'", "'VOLATILE'", "'WAIT'", "'WAREHOUSE'", "'WAREHOUSE_SIZE'", 
    "'WAREHOUSES'", "'WEEK_OF_YEAR_POLICY'", "'WEEK_START'", "'WEEKLY'", 
    "'WELL_FORMED_XML'", "'WHEN'", "'WHERE'", "'WITH'", "'WITHIN'", "'WITHOUT'", 
    "'WITHOUT_ARRAY_WRAPPER'", "'WORK'", "'WORKLOAD'", "'WRITE'", "'X4LARGE'", 
    "'X5LARGE'", "'X6LARGE'", "'XLARGE'", "'XLOCK'", "'XML'", "'XSMALL'", 
    "'XXLARGE'", "'XXXLARGE'", "'YEARLY'", "'ZSTD'", "'ARRAY'", "'BIGINT'", 
    "'BINARY'", "'BOOLEAN'", "'BYTEINT'", "'CHAR VARYING'", "'DATE'", "'DATETIME'", 
    "'DECIMAL'", "'FLOAT4'", "'FLOAT8'", "'FLOAT'", "'GEOGRAPHY'", "'GEOMETRY'", 
    "'INTEGER'", "'NCHAR VARYING'", "'NUMERIC'", "'NVARCHAR2'", "'NVARCHAR'", 
    "'REAL'", "'SMALLINT'", "'STRING'", "'TEXT'", "'TINYINT'", "'VARBINARY'", 
    "'VARCHAR'", "'VARIANT'", "'LISTAGG'", "'DUMMY'", "", "", "", "", "", 
    "'\"\"'", "'''", "", "", "''s3://''", "''gcs://''", "''azure://''", 
    "'file://'", "", "", "", "", "", "", "'->'", "'=>'", "'!='", "'<>'", 
    "'='", "'>'", "'>='", "'<'", "'<='", "'!'", "'||'", "'.'", "'_'", "'@'", 
    "'$'", "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "';'", "':'", 
    "'::'", "'*'", "'/'", "'%'", "'+'", "'-'", "'?'",
  }
  staticData.symbolicNames = []string{
    "", "AAD_PROVISIONER_Q", "ABORT", "ABORT_AFTER_WAIT", "ABORT_DETACHED_QUERY", 
    "ABORT_STATEMENT", "ABSENT", "ABSOLUTE", "ACCESS", "ACCOUNT", "ACCOUNTS", 
    "ACTION", "ACTIVE", "ADD", "ADMIN_NAME", "ADMIN_PASSWORD", "ADMINISTER", 
    "AES", "AFTER", "AGGREGATE", "ALL", "ALLOW_CLIENT_MFA_CACHING", "ALLOW_CONNECTIONS", 
    "ALLOW_DUPLICATE", "ALLOW_ID_TOKEN", "ALLOW_MULTIPLE_EVENT_LOSS", "ALLOW_OVERLAPPING_EXECUTION", 
    "ALLOW_SINGLE_EVENT_LOSS", "ALLOWED", "ALLOWED_ACCOUNTS", "ALLOWED_DATABASES", 
    "ALLOWED_INTEGRATION_TYPES", "ALLOWED_IP_LIST", "ALLOWED_SHARES", "ALLOWED_VALUES", 
    "ALTER", "ALWAYS", "AND", "ANONYMOUS", "ANSI_DEFAULTS", "ANY", "API", 
    "API_ALLOWED_PREFIXES", "API_AWS_ROLE_ARN", "API_BLOCKED_PREFIXES", 
    "API_INTEGRATION", "API_KEY", "API_PROVIDER", "APP_NAME", "APPEND", 
    "APPEND_ONLY", "APPLICATION", "APPLY", "AS", "ASC", "AT_KEYWORD", "ATTACH", 
    "AUTHORIZATION", "AUTHORIZATIONS", "AUTO", "AUTO_COMPRESS", "AUTO_DETECT", 
    "AUTO_INGEST", "AUTO_REFRESH", "AUTO_RESUME", "AUTO_SUSPEND", "AUTOCOMMIT", 
    "AUTOCOMMIT_API_SUPPORTED", "AUTOINCREMENT", "AVG", "AVRO", "AWS_KEY_ID", 
    "AWS_ROLE", "AWS_SECRET_KEY", "AWS_SNS", "AWS_SNS_ROLE_ARN", "AWS_SNS_TOPIC", 
    "AWS_SNS_TOPIC_ARN", "AWS_TOKEN", "AZURE", "AZURE_AD_APPLICATION_ID", 
    "AZURE_EVENT_GRID", "AZURE_EVENT_GRID_TOPIC_ENDPOINT", "AZURE_Q", "AZURE_SAS_TOKEN", 
    "AZURE_STORAGE_QUEUE_PRIMARY_URI", "AZURE_TENANT_ID", "BASE64", "BEFORE", 
    "BEGIN", "BERNOULLI", "BETWEEN", "BINARY_AS_TEXT", "BINARY_CHECKSUM", 
    "BINARY_FORMAT", "BINARY_INPUT_FORMAT", "BINARY_OUTPUT_FORMAT", "BINDING", 
    "BLOCK", "BLOCKED_IP_LIST", "BLOCKED_ROLES_LIST", "BODY", "BROTLI", 
    "BUSINESS_CRITICAL", "BY", "BZ2", "CACHE", "CALL", "CALLED", "CALLER", 
    "CASCADE", "CASE", "CASE_INSENSITIVE", "CASE_SENSITIVE", "CAST", "CATCH", 
    "CERTIFICATE", "CHANGE", "CHANGE_RETENTION", "CHANGE_TRACKING", "CHANGES", 
    "CHANGETABLE", "CHAR", "CHARACTER", "CHARINDEX", "CHECK", "CHECK_EXPIRATION", 
    "CHECK_POLICY", "CHECKSUM", "CHECKSUM_AGG", "CLASSIFIER_FUNCTION", "CLEANUP", 
    "CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS", "CLIENT_ENCRYPTION_KEY_SIZE", 
    "CLIENT_MEMORY_LIMIT", "CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX", 
    "CLIENT_METADATA_USE_SESSION_DATABASE", "CLIENT_PREFETCH_THREADS", "CLIENT_RESULT_CHUNK_SIZE", 
    "CLIENT_RESULT_COLUMN_CASE_INSENSITIVE", "CLIENT_SESSION_KEEP_ALIVE", 
    "CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY", "CLIENT_TIMESTAMP_TYPE_MAPPING", 
    "CLONE", "CLOSE", "CLUSTER", "CLUSTERED", "CLUSTERING", "COALESCE", 
    "COL_LENGTH", "COL_NAME", "COLLATE", "COLLECTION", "COLUMN", "COLUMNS", 
    "COMMENT", "COMMIT", "COMMITTED", "COMPRESS", "COMPRESSION", "CONCAT", 
    "CONCAT_NULL_YIELDS_NULL", "CONCAT_WS", "CONFIGURATION", "CONNECT", 
    "CONNECTION", "CONNECTIONS", "CONSTRAINT", "CONTAINMENT", "CONTAINS", 
    "CONTENT", "CONTEXT", "CONTEXT_HEADERS", "CONTEXT_INFO", "CONTINUE", 
    "CONTROL", "CONVERSATION", "COOKIE", "COPY", "COPY_ONLY", "COPY_OPTIONS_", 
    "COUNT", "COUNT_BIG", "CREATE", "CREDENTIALS", "CREDIT_QUOTA", "CROSS", 
    "CSV", "CUBE", "CUME_DIST", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
    "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CUSTOM", "DAILY", "DATA", 
    "DATA_RETENTION_TIME_IN_DAYS", "DATABASE", "DATABASES", "DATE_FORMAT", 
    "DATE_INPUT_FORMAT", "DATE_OUTPUT_FORMAT", "DATEADD", "DATEDIFF", "DATENAME", 
    "DATEPART", "DAYS", "DAYS_TO_EXPIRY", "DECLARE", "DEFAULT", "DEFAULT_DDL_COLLATION_", 
    "DEFAULT_NAMESPACE", "DEFAULT_ROLE", "DEFAULT_WAREHOUSE", "DEFERRABLE", 
    "DEFERRED", "DEFINE", "DEFINITION", "DEFLATE", "DELEGATED", "DELETE", 
    "DELTA", "DENSE_RANK", "DESC", "DESCRIBE", "DIRECTION", "DIRECTORY", 
    "DISABLE", "DISABLE_AUTO_CONVERT", "DISABLE_SNOWFLAKE_DATA", "DISABLED", 
    "DISK", "DISPLAY_NAME", "DISTINCT", "DO", "DOUBLE", "DROP", "ECONOMY", 
    "EDITION", "ELSE", "EMAIL", "EMPTY", "EMPTY_FIELD_AS_NULL", "ENABLE", 
    "ENABLE_FOR_PRIVILEGE", "ENABLE_INTERNAL_STAGES_PRIVATELINK", "ENABLE_OCTAL", 
    "ENABLE_QUERY_ACCELERATION", "ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION", 
    "ENABLED", "ENCODING", "ENCRYPTION", "END", "END_TIMESTAMP", "ENDPOINT", 
    "ENFORCE_LENGTH", "ENFORCE_SESSION_POLICY", "ENFORCED", "ENTERPRISE", 
    "EQUALITY", "ERROR_INTEGRATION", "ERROR_ON_COLUMN_COUNT_MISMATCH", "ERROR_ON_NONDETERMINISTIC_MERGE", 
    "ERROR_ON_NONDETERMINISTIC_UPDATE", "ESCAPE", "ESCAPE_UNENCLOSED_FIELD", 
    "EXCEPT", "EXCHANGE", "EXECUTE", "EXECUTION", "EXIST", "EXISTS", "EXIT", 
    "EXPAND", "EXPIRY_DATE", "EXPLAIN", "EXPLICIT", "EXTERNAL", "EXTERNAL_OAUTH", 
    "EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST", "EXTERNAL_OAUTH_ALLOWED_ROLES_LIST", 
    "EXTERNAL_OAUTH_ANY_ROLE_MODE", "EXTERNAL_OAUTH_AUDIENCE_LIST", "EXTERNAL_OAUTH_BLOCKED_ROLES_LIST", 
    "EXTERNAL_OAUTH_ISSUER", "EXTERNAL_OAUTH_JWS_KEYS_URL", "EXTERNAL_OAUTH_RSA_PUBLIC_KEY", 
    "EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2", "EXTERNAL_OAUTH_SCOPE_DELIMITER", 
    "EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE", "EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM", 
    "EXTERNAL_OAUTH_TYPE", "EXTERNAL_STAGE", "FAIL_OPERATION", "FAILOVER", 
    "FAILOVER_MODE", "FALSE", "FETCH", "FIELD_DELIMITER", "FIELD_OPTIONALLY_ENCLOSED_BY", 
    "FILE", "FILE_EXTENSION", "FILE_FORMAT", "FILES", "FILTER", "FIRST", 
    "FIRST_NAME", "FOR", "FORCE", "FOREIGN", "FORMAT", "FORMAT_NAME", "FORMATS", 
    "FREQUENCY", "FROM", "FULL", "FUNCTION", "FUNCTIONS", "FUTURE", "GCP_PUBSUB", 
    "GCP_PUBSUB_SUBSCRIPTION_NAME", "GCP_PUBSUB_TOPIC_NAME", "GCS", "GENERIC_Q", 
    "GENERIC_SCIM_PROVISIONER_Q", "GEO", "GEOGRAPHY_OUTPUT_FORMAT", "GEOMETRY_OUTPUT_FORMAT", 
    "GET", "GET_FILESTREAM_TRANSACTION_CONTEXT", "GLOBAL", "GOOGLE_AUDIENCE", 
    "GOTO", "GRANT", "GRANTS", "GROUP", "GROUPING", "GROUPING_ID", "GROUPS", 
    "GZIP", "HAVING", "HEADER", "HEADERS", "HEX", "HIERARCHYID", "HIGH", 
    "HISTORY", "HOURS", "IDENTITY", "IF", "IGNORE", "IGNORE_CONSTRAINTS", 
    "IGNORE_DUP_KEY", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IGNORE_TRIGGERS", 
    "IGNORE_UTF8_ERRORS", "IMMEDIATE", "IMMEDIATELY", "IMMUTABLE", "IMPLICIT", 
    "IMPORT", "IMPORTED", "IN", "INCREMENT", "INDEX", "INFORMATION", "INIT", 
    "INITIAL_REPLICATION_SIZE_LIMIT_IN_TB", "INITIALLY", "INITIALLY_SUSPENDED", 
    "INNER", "INPUT", "INSERT", "INSERT_ONLY", "INSTEAD", "INT", "INTEGRATION", 
    "INTEGRATIONS", "INTERSECT", "INTO", "IS", "ISNULL", "ISNUMERIC", "ISOLATION", 
    "JDBC_TREAT_DECIMAL_AS_INT", "JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC", "JDBC_USE_SESSION_TIMEZONE", 
    "JOIN", "JS_TREAT_INTEGER_AS_BIGINT", "JSON", "JSON_INDENT", "KB", "KEEP", 
    "KEY", "KEYS", "KEYSET", "KMS_KEY_ID", "LAG", "LANGUAGE", "LARGE", "LAST", 
    "LAST_NAME", "LAST_QUERY_ID", "LAST_VALUE", "LATERAL", "LEAD", "LEFT", 
    "LEN", "LEVEL", "LIKE", "LIMIT", "LINENO", "LIST", "LISTENER_IP", "LISTENER_PORT", 
    "LISTING", "LOAD", "LOCAL", "LOCAL_SERVICE_NAME", "LOCATION", "LOCK_TIMEOUT", 
    "LOCKS", "LOG", "LOGIN", "LOGIN_NAME", "LOOKER", "LOW", "LOWER", "LTRIM", 
    "LZO", "MANAGE", "MANAGED", "MASK", "MASKED", "MASKING", "MASTER", "MASTER_KEY", 
    "MATCH", "MATCH_BY_COLUMN_NAME", "MATCH_RECOGNIZE", "MATCHED", "MATCHES", 
    "MATERIALIZED", "MAX_BATCH_ROWS", "MAX_CLUSTER_COUNT", "MAX_CONCURRENCY_LEVEL", 
    "MAX_DATA_EXTENSION_TIME_IN_DAYS", "MAX_SIZE", "MEASURES", "MEDIUM", 
    "MERGE", "MIDDLE_NAME", "MIN", "MIN_CLUSTER_COUNT", "MIN_DATA_RETENTION_TIME_IN_DAYS", 
    "MINS_TO_BYPASS_MFA", "MINS_TO_UNLOCK", "MINUS_", "MINUTES", "MODE", 
    "MODIFIED_AFTER", "MODIFY", "MONITOR", "MONITORS", "MONTHLY", "MOVE", 
    "MULTI_STATEMENT_COUNT", "MULTI_USER", "MUST_CHANGE", "MUST_CHANGE_PASSWORD", 
    "NAME", "NATURAL", "NCHAR", "NESTED_TRIGGERS", "NETWORK", "NETWORK_POLICY", 
    "NEVER", "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", "NEWID", "NEWNAME", 
    "NEWSEQUENTIALID", "NEXT", "NEXTVAL", "NO", "NONE", "NORELY", "NOT", 
    "NOTIFICATION", "NOTIFICATION_INTEGRATION", "NOTIFICATION_PROVIDER", 
    "NOTIFICATIONS", "NOTIFY", "NOTIFY_USERS", "NOVALIDATE", "NTILE", "NULL_", 
    "NULL_IF", "NULLIF", "NULLS", "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", 
    "OAUTH", "OAUTH_ALLOW_NON_TLS_REDIRECT_URI", "OAUTH_CLIENT", "OAUTH_CLIENT_RSA_PUBLIC_KEY", 
    "OAUTH_CLIENT_RSA_PUBLIC_KEY_2", "OAUTH_ENFORCE_PKCE", "OAUTH_ISSUE_REFRESH_TOKENS", 
    "OAUTH_REDIRECT_URI", "OAUTH_REFRESH_TOKEN_VALIDITY", "OAUTH_USE_SECONDARY_ROLES", 
    "OBJECT", "OBJECT_TYPES", "OBJECTS", "OF", "OFF", "OFFSET", "OFFSETS", 
    "OKTA", "OKTA_PROVISIONER_Q", "OKTA_Q", "OLD", "OLD_ACCOUNT", "OLD_PASSWORD", 
    "OMIT", "ON", "ON_ERROR", "ON_FAILURE", "ONE", "ONLINE", "ONLY", "OPEN", 
    "OPERATE", "OPERATIONS", "OPTIMIZATION", "OPTION", "OR", "ORC", "ORDER", 
    "ORGANIZATION", "OUTBOUND", "OUTER", "OVER", "OVERRIDE", "OVERWRITE", 
    "OWNER", "OWNERSHIP", "PAGE", "PARALLEL", "PARAM_NODE", "PARAMETERS", 
    "PARQUET", "PARTIAL", "PARTITION", "PARTITION_TYPE", "PARTITIONS", "PASSWORD", 
    "PAST", "PATH_", "PATTERN", "PER", "PERCENT", "PERCENT_RANK", "PERCENTILE_CONT", 
    "PERCENTILE_DISC", "PERIODIC_DATA_REKEYING", "PERMISSION_SET", "PERSIST_SAMPLE_PERCENT", 
    "PERSISTED", "PING_FEDERATE", "PIPE", "PIPE_EXECUTION_PAUSED", "PIPES", 
    "PIVOT", "PLAN", "PLATFORM", "POLICIES", "POLICY", "POOL", "PORT", "PRE_AUTHORIZED_ROLES_LIST", 
    "PRECEDING", "PRECISION", "PREDICATE", "PREFIX", "PRESERVE_SPACE", "PREVENT_UNLOAD_TO_INLINE_URL", 
    "PREVENT_UNLOAD_TO_INTERNAL_STAGES", "PRIMARY", "PRIMARY_ROLE", "PRIOR", 
    "PRIORITY", "PRIORITY_LEVEL", "PRIVATE", "PRIVATE_KEY", "PRIVILEGES", 
    "PROC", "PROCEDURE", "PROCEDURE_NAME", "PROCEDURES", "PROCESS", "PROFILE", 
    "PROPERTY", "PROVIDER", "PROVIDER_KEY_NAME", "PUBLIC", "PURGE", "PUT", 
    "PYTHON", "QUALIFY", "QUERIES", "QUERY", "QUERY_ACCELERATION_MAX_SCALE_FACTOR", 
    "QUERY_TAG", "QUEUE", "QUOTED_IDENTIFIERS_IGNORE_CASE", "RANGE", "RANK", 
    "RAW", "RAW_DEFLATE", "READ", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
    "READ_ONLY_ROUTING_LIST", "READ_WRITE", "READER", "READONLY", "READPAST", 
    "READTEXT", "READWRITE", "REBUILD", "RECEIVE", "RECLUSTER", "RECOMPILE", 
    "RECONFIGURE", "RECORD_DELIMITER", "RECOVERY", "RECURSIVE", "RECURSIVE_TRIGGERS", 
    "REFERENCE_USAGE", "REFERENCES", "REFRESH", "REFRESH_ON_CREATE", "REGION", 
    "REGION_GROUP", "REGIONS", "RELATIVE", "RELY", "REMOTE", "REMOTE_PROC_TRANSACTIONS", 
    "REMOTE_SERVICE_NAME", "REMOVE", "RENAME", "REPEATABLE", "REPLACE", 
    "REPLACE_INVALID_CHARACTERS", "REPLICA", "REPLICATION", "REPLICATION_SCHEDULE", 
    "REQUEST_TRANSLATOR", "REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION", 
    "REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION", "REQUIRED", "RESET", 
    "RESOURCE", "RESOURCE_MONITOR", "RESOURCES", "RESPONSE_TRANSLATOR", 
    "RESTART", "RESTORE", "RESTRICT", "RESTRICTIONS", "RESULT", "RESUME", 
    "RETAINDAYS", "RETURN", "RETURN_ALL_ERRORS", "RETURN_ERRORS", "RETURN_FAILED_ONLY", 
    "RETURN_N_ROWS", "RETURN_ROWS", "RETURNS", "REVERSE", "REVERT", "REVOKE", 
    "REWIND", "RIGHT", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROOT", "ROW", 
    "ROW_NUMBER", "ROWCOUNT", "ROWGUID", "ROWLOCK", "ROWS", "ROWS_PER_RESULTSET", 
    "RSA_PUBLIC_KEY", "RSA_PUBLIC_KEY_2", "RTRIM", "RUN_AS_ROLE", "S3", 
    "SAFE", "SAFETY", "SAML2", "SAML2_ENABLE_SP_INITIATED", "SAML2_FORCE_AUTHN", 
    "SAML2_ISSUER", "SAML2_POST_LOGOUT_REDIRECT_URL", "SAML2_PROVIDER", 
    "SAML2_REQUESTED_NAMEID_FORMAT", "SAML2_SIGN_REQUEST", "SAML2_SNOWFLAKE_ACS_URL", 
    "SAML2_SNOWFLAKE_ISSUER_URL", "SAML2_SNOWFLAKE_X509_CERT", "SAML2_SP_INITIATED_LOGIN_PAGE_LABEL", 
    "SAML2_SSO_URL", "SAML2_X509_CERT", "SAML_IDENTITY_PROVIDER", "SAMPLE", 
    "SAVE_OLD_URL", "SCALING_POLICY", "SCHEDULE", "SCHEDULER", "SCHEMA", 
    "SCHEMAS", "SCHEME", "SCIM", "SCIM_CLIENT", "SCRIPT", "SEARCH", "SECONDARY", 
    "SECONDARY_ONLY", "SECONDARY_ROLE", "SECONDS", "SECRET", "SECURE", "SECURITY", 
    "SEED", "SELECT", "SELF", "SEQUENCE", "SEQUENCES", "SERVER", "SERVICE", 
    "SESSION", "SESSION_IDLE_TIMEOUT_MINS", "SESSION_POLICY", "SESSION_UI_IDLE_TIMEOUT_MINS", 
    "SET", "SETS", "SETUSER", "SHARE", "SHARE_RESTRICTIONS", "SHARED", "SHARES", 
    "SHOW", "SHOW_INITIAL_ROWS", "SHOWPLAN", "SHOWPLAN_ALL", "SHOWPLAN_TEXT", 
    "SHOWPLAN_XML", "SIGNATURE", "SIMPLE", "SIMULATED_DATA_SHARING_CONSUMER", 
    "SINGLE_USER", "SIZE", "SIZE_LIMIT", "SKIP_", "SKIP_BLANK_LINES", "SKIP_BYTE_ORDER_MARK", 
    "SKIP_FILE", "SKIP_FILE_N", "SKIP_HEADER", "SMALL", "SNAPPY", "SNAPPY_COMPRESSION", 
    "SOME", "SOUNDEX", "SOURCE", "SOURCE_COMPRESSION", "SPACE_KEYWORD", 
    "SPARSE", "SPECIFICATION", "SPLIT", "SQL", "SSO_LOGIN_PAGE", "STAGE", 
    "STAGE_COPY_OPTIONS", "STAGE_FILE_FORMAT", "STAGES", "STANDARD", "STANDBY", 
    "START", "START_DATE", "START_TIMESTAMP", "STARTED", "STARTS", "STATE", 
    "STATEMENT", "STATEMENT_QUEUED_TIMEOUT_IN_SECONDS", "STATEMENT_TIMEOUT_IN_SECONDS", 
    "STATIC", "STATISTICS", "STATS", "STATS_DATE", "STATS_STREAM", "STATUS", 
    "STATUSONLY", "STDEV", "STDEVP", "STOP", "STOPLIST", "STOPPED", "STORAGE", 
    "STORAGE_ALLOWED_LOCATIONS", "STORAGE_AWS_OBJECT_ACL", "STORAGE_AWS_ROLE_ARN", 
    "STORAGE_BLOCKED_LOCATIONS", "STORAGE_INTEGRATION", "STORAGE_PROVIDER", 
    "STR", "STREAM", "STREAMS", "STRICT", "STRICT_JSON_OUTPUT", "STRING_AGG", 
    "STRING_ESCAPE", "STRIP_NULL_VALUES", "STRIP_OUTER_ARRAY", "STRIP_OUTER_ELEMENT", 
    "SUBSTRING", "SUM", "SUPPORTED", "SUSPEND", "SUSPEND_IMMEDIATE", "SUSPEND_TASK_AFTER_NUM_FAILURES", 
    "SUSPENDED", "SWAP", "SWITCH", "SYNC_PASSWORD", "SYSTEM", "SYSTEM_USER", 
    "TABLE", "TABLE_FORMAT", "TABLEAU_DESKTOP", "TABLEAU_SERVER", "TABLES", 
    "TABLESAMPLE", "TABULAR", "TAG", "TAGS", "TARGET", "TASK", "TASKS", 
    "TEMP", "TEMPORARY", "TERSE", "TEXTSIZE", "THEN", "TIES", "TIME", "TIME_FORMAT", 
    "TIME_INPUT_FORMAT", "TIME_OUTPUT_FORMAT", "TIMEOUT", "TIMER", "TIMESTAMP", 
    "TIMESTAMP_DAY_IS_ALWAYS_24H", "TIMESTAMP_FORMAT", "TIMESTAMP_INPUT_FORMAT", 
    "TIMESTAMP_LTZ", "TIMESTAMP_LTZ_OUTPUT_FORMAT", "TIMESTAMP_NTZ", "TIMESTAMP_NTZ_OUTPUT_FORMAT", 
    "TIMESTAMP_OUTPUT_FORMAT", "TIMESTAMP_TYPE_MAPPING", "TIMESTAMP_TZ", 
    "TIMESTAMP_TZ_OUTPUT_FORMAT", "TIMEZONE", "TO", "TOP", "TORN_PAGE_DETECTION", 
    "TRACK_CAUSALITY", "TRACKING", "TRAN", "TRANSACTION", "TRANSACTION_ABORT_ON_ERROR", 
    "TRANSACTION_DEFAULT_ISOLATION_LEVEL", "TRANSACTION_ID", "TRANSACTIONS", 
    "TRANSFORM_NOISE_WORDS", "TRANSIENT", "TRANSLATE", "TRIGGER", "TRIGGERS", 
    "TRIM", "TRIM_SPACE", "TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUE", "TRUNCATE", 
    "TRUNCATECOLUMNS", "TRUSTWORTHY", "TRY", "TSEQUAL", "TSQL", "TWO_DIGIT_CENTURY_START", 
    "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_ID", "TYPE_NAME", "TYPE_WARNING", 
    "TYPEPROPERTY", "UN", "UNBOUNDED", "UNCHECKED", "UNCOMMITTED", "UNDROP", 
    "UNICODE", "UNION", "UNIQUE", "UNKNOWN", "UNLIMITED", "UNLOCK", "UNMASK", 
    "UNMATCHED", "UNPIVOT", "UNSAFE", "UNSET", "UNSUPPORTED_DDL_ACTION", 
    "UOW", "UPDATE", "UPDLOCK", "UPPER", "URL", "USAGE", "USE", "USE_ANY_ROLE", 
    "USE_CACHED_RESULT", "USED", "USER", "USER_SPECIFIED", "USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE", 
    "USER_TASK_TIMEOUT_MS", "USERS", "USING", "UTF8", "VALID_XML", "VALIDATE", 
    "VALIDATION", "VALIDATION_MODE", "VALUE", "VALUES", "VAR", "VARIABLES", 
    "VARP", "VARYING", "VERSION", "VIEW", "VIEW_METADATA", "VIEWS", "VISIBILITY", 
    "VOLATILE", "WAIT", "WAREHOUSE", "WAREHOUSE_SIZE", "WAREHOUSES", "WEEK_OF_YEAR_POLICY", 
    "WEEK_START", "WEEKLY", "WELL_FORMED_XML", "WHEN", "WHERE", "WITH", 
    "WITHIN", "WITHOUT", "WITHOUT_ARRAY_WRAPPER", "WORK", "WORKLOAD", "WRITE", 
    "X4LARGE", "X5LARGE", "X6LARGE", "XLARGE", "XLOCK", "XML", "XSMALL", 
    "XXLARGE", "XXXLARGE", "YEARLY", "ZSTD", "ARRAY", "BIGINT", "BINARY", 
    "BOOLEAN", "BYTEINT", "CHAR_VARYING", "DATE", "DATETIME", "DECIMAL_", 
    "FLOAT4", "FLOAT8", "FLOAT_", "GEOGRAPHY", "GEOMETRY", "INTEGER", "NCHAR_VARYING", 
    "NUMERIC", "NVARCHAR2", "NVARCHAR", "REAL_", "SMALLINT", "STRING_", 
    "TEXT", "TINYINT", "VARBINARY", "VARCHAR", "VARIANT", "LISTAGG", "DUMMY", 
    "SPACE", "SQL_COMMENT", "LINE_COMMENT", "LINE_COMMENT_2", "DOUBLE_QUOTE_ID", 
    "DOUBLE_QUOTE_BLANK", "SINGLE_QUOTE", "ID", "ID2", "S3_PATH", "GCS_PATH", 
    "AZURE_PATH", "FILE_PATH", "DBL_DOLLAR", "STRING", "DECIMAL", "FLOAT", 
    "REAL", "CHAR_LITERAL", "ARROW", "ASSOC", "NE", "LTGT", "EQ", "GT", 
    "GE", "LT", "LE", "EXCLAMATION", "PIPE_PIPE", "DOT", "UNDERLINE", "AT", 
    "DOLLAR", "LR_BRACKET", "RR_BRACKET", "LSB", "RSB", "LCB", "RCB", "COMMA", 
    "SEMI", "COLON", "COLON_COLON", "STAR", "DIVIDE", "MODULE", "PLUS", 
    "MINUS", "PLACEHOLDER", "DEFAULT_DDL_COLLATION",
  }
  staticData.ruleNames = []string{
    "snowflake_file", "batch", "sql_command", "ddl_command", "dml_command", 
    "insert_statement", "insert_multi_table_statement", "into_clause2", 
    "values_list", "value_item", "merge_statement", "merge_matches", "merge_update_delete", 
    "merge_insert", "update_statement", "table_or_query", "delete_statement", 
    "values_builder", "other_command", "copy_into_table", "external_location", 
    "files", "file_format", "format_name", "format_type", "stage_file_format", 
    "copy_into_location", "comment", "comment_object_type", "commit", "execute_immediate", 
    "execute_task", "explain", "parallel", "get", "grant_ownership", "grant_to_role", 
    "global_privileges", "global_privilege", "account_object_privileges", 
    "account_object_privilege", "schema_privileges", "schema_privilege", 
    "schema_object_privileges", "schema_object_privilege", "grant_to_share", 
    "object_privilege", "grant_role", "list", "internal_stage", "external_stage", 
    "put", "remove", "revoke_from_role", "revoke_from_share", "revoke_role", 
    "rollback", "set", "truncate_materialized_view", "truncate_table", "unset", 
    "alter_command", "account_params", "object_params", "default_ddl_collation", 
    "object_properties", "session_params", "alter_account", "enabled_true_false", 
    "alter_api_integration", "api_integration_property", "alter_connection", 
    "alter_database", "database_property", "account_id_list", "alter_external_table", 
    "ignore_edition_check", "replication_schedule", "db_name_list", "share_name_list", 
    "full_acct_list", "alter_failover_group", "alter_file_format", "alter_function", 
    "alter_function_signature", "data_type_list", "alter_masking_policy", 
    "alter_materialized_view", "alter_network_policy", "alter_notification_integration", 
    "alter_pipe", "alter_procedure", "alter_replication_group", "credit_quota", 
    "frequency", "notify_users", "triggerDefinition", "alter_resource_monitor", 
    "alter_role", "alter_row_access_policy", "alter_schema", "schema_property", 
    "alter_security_integration", "alter_security_integration_external_oauth", 
    "security_integration_external_oauth_property", "alter_security_integration_snowflake_oauth", 
    "security_integration_snowflake_oauth_property", "alter_security_integration_saml2", 
    "alter_security_integration_scim", "security_integration_scim_property", 
    "alter_sequence", "alter_session", "alter_session_policy", "alter_share", 
    "alter_stage", "alter_storage_integration", "alter_stream", "alter_table", 
    "clustering_action", "table_column_action", "inline_constraint", "constraint_properties", 
    "ext_table_column_action", "constraint_action", "outofline_constraint", 
    "search_optimization_action", "search_method_with_target", "alter_table_alter_column", 
    "alter_column_decl_list", "alter_column_decl", "alter_column_opts", 
    "column_set_tags", "column_unset_tags", "alter_tag", "alter_task", "alter_user", 
    "alter_view", "alter_modify", "alter_warehouse", "alter_connection_opts", 
    "alter_user_opts", "alter_tag_opts", "alter_network_policy_opts", "alter_warehouse_opts", 
    "alter_account_opts", "set_tags", "tag_decl_list", "unset_tags", "create_command", 
    "create_account", "create_api_integration", "create_object_clone", "create_connection", 
    "create_database", "clone_at_before", "at_before1", "header_decl", "compression_type", 
    "compression", "create_external_function", "create_external_table", 
    "external_table_column_decl", "external_table_column_decl_list", "full_acct", 
    "integration_type_name", "create_failover_group", "create_file_format", 
    "arg_decl", "col_decl", "function_definition", "create_function", "create_managed_account", 
    "create_masking_policy", "tag_decl", "column_list_in_parentheses", "create_materialized_view", 
    "create_network_policy", "cloud_provider_params_auto", "cloud_provider_params_push", 
    "create_notification_integration", "create_pipe", "caller_owner", "executa_as", 
    "procedure_definition", "create_procedure", "create_replication_group", 
    "create_resource_monitor", "create_role", "create_row_access_policy", 
    "create_schema", "create_security_integration_external_oauth", "implicit_none", 
    "create_security_integration_snowflake_oauth", "create_security_integration_saml2", 
    "create_security_integration_scim", "network_policy", "partner_application", 
    "start_with", "increment_by", "create_sequence", "create_session_policy", 
    "create_share", "character", "format_type_options", "copy_options", 
    "internal_stage_params", "stage_type", "stage_master_key", "stage_kms_key", 
    "stage_encryption_opts_aws", "aws_token", "aws_key_id", "aws_secret_key", 
    "aws_role", "external_stage_params", "true_false", "enable", "refresh_on_create", 
    "auto_refresh", "notification_integration", "directory_table_params", 
    "create_stage", "cloud_provider_params", "cloud_provider_params2", "cloud_provider_params3", 
    "create_storage_integration", "copy_grants", "append_only", "insert_only", 
    "show_initial_rows", "stream_time", "create_stream", "temporary", "table_type", 
    "with_tags", "with_row_access_policy", "cluster_by", "change_tracking", 
    "with_masking_policy", "collate", "not_null", "default_value", "foreign_key", 
    "out_of_line_constraint", "full_col_decl", "column_decl_item", "column_decl_item_list", 
    "create_table", "create_tag", "session_parameter", "session_parameter_list", 
    "session_parameter_init_list", "session_parameter_init", "create_task", 
    "sql", "call", "create_user", "view_col", "create_view", "create_warehouse", 
    "wh_properties", "wh_params", "trigger_definition", "object_type_name", 
    "object_type_plural", "drop_command", "drop_object", "drop_connection", 
    "drop_database", "drop_external_table", "drop_failover_group", "drop_file_format", 
    "drop_function", "drop_integration", "drop_managed_account", "drop_masking_policy", 
    "drop_materialized_view", "drop_network_policy", "drop_pipe", "drop_procedure", 
    "drop_replication_group", "drop_resource_monitor", "drop_role", "drop_row_access_policy", 
    "drop_schema", "drop_sequence", "drop_session_policy", "drop_share", 
    "drop_stage", "drop_stream", "drop_table", "drop_tag", "drop_task", 
    "drop_user", "drop_view", "drop_warehouse", "cascade_restrict", "arg_types", 
    "undrop_command", "undrop_database", "undrop_schema", "undrop_table", 
    "undrop_tag", "use_command", "use_database", "use_role", "use_schema", 
    "use_secondary_roles", "use_warehouse", "comment_clause", "if_suspended", 
    "if_exists", "if_not_exists", "or_replace", "describe", "describe_command", 
    "describe_database", "describe_external_table", "describe_file_format", 
    "describe_function", "describe_integration", "describe_masking_policy", 
    "describe_materialized_view", "describe_network_policy", "describe_pipe", 
    "describe_procedure", "describe_result", "describe_row_access_policy", 
    "describe_schema", "describe_search_optimization", "describe_sequence", 
    "describe_session_policy", "describe_share", "describe_stage", "describe_stream", 
    "describe_table", "describe_task", "describe_transaction", "describe_user", 
    "describe_view", "describe_warehouse", "show_command", "show_columns", 
    "show_connections", "starts_with", "limit_rows", "show_databases", "show_databases_in_failover_group", 
    "show_databases_in_replication_group", "show_delegated_authorizations", 
    "show_external_functions", "show_external_tables", "show_failover_groups", 
    "show_file_formats", "show_functions", "show_global_accounts", "show_grants", 
    "show_grants_opts", "show_integrations", "show_locks", "show_managed_accounts", 
    "show_masking_policies", "in_obj", "in_obj_2", "show_materialized_views", 
    "show_network_policies", "show_objects", "show_organization_accounts", 
    "in_for", "show_parameters", "show_pipes", "show_primary_keys", "show_procedures", 
    "show_regions", "show_replication_accounts", "show_replication_databases", 
    "show_replication_groups", "show_resource_monitors", "show_roles", "show_row_access_policies", 
    "show_schemas", "show_sequences", "show_session_policies", "show_shares", 
    "show_shares_in_failover_group", "show_shares_in_replication_group", 
    "show_stages", "show_streams", "show_tables", "show_tags", "show_tasks", 
    "show_transactions", "show_user_functions", "show_users", "show_variables", 
    "show_views", "show_warehouses", "like_pattern", "account_identifier", 
    "schema_name", "object_type", "object_type_list", "tag_value", "arg_data_type", 
    "arg_name", "param_name", "region_group_id", "snowflake_region_id", 
    "string", "string_list", "id_", "keyword", "pattern", "column_name", 
    "column_list", "object_name", "num", "expr_list", "expr", "json_literal", 
    "kv_pair", "value", "arr_literal", "data_type", "primitive_expression", 
    "order_by_expr", "asc_desc", "over_clause", "function_call", "ranking_windowed_function", 
    "aggregate_function", "literal", "sign", "full_column_name", "bracket_expression", 
    "case_expression", "switch_search_condition_section", "switch_section", 
    "query_statement", "with_expression", "common_table_expression", "select_statement", 
    "set_operators", "select_optional_clauses", "select_clause", "select_top_clause", 
    "select_list_no_top", "select_list_top", "select_list", "select_list_elem", 
    "column_elem", "as_alias", "expression_elem", "column_position", "all_distinct", 
    "top_clause", "into_clause", "var_list", "var", "from_clause", "table_sources", 
    "table_source", "table_source_item_joined", "object_ref", "prior_list", 
    "prior_item", "outer_join", "join_type", "join_clause", "at_before", 
    "end", "changes", "default_append_only", "partition_by", "alias", "expr_alias_list", 
    "measures", "match_opts", "row_match", "first_last", "symbol", "after_match", 
    "symbol_list", "define", "match_recognize", "val", "pivot_unpivot", 
    "column_alias_list_in_brackets", "expr_list_in_parentheses", "values", 
    "sample_method", "repeatable_seed", "sample_opts", "sample", "search_condition", 
    "comparison_operator", "null_not_null", "subquery", "predicate", "where_clause", 
    "group_item", "group_by_clause", "having_clause", "qualify_clause", 
    "order_item", "order_by_clause", "row_rows", "first_next", "limit_clause",
  }
  staticData.predictionContextCache = antlr.NewPredictionContextCache()
  staticData.serializedATN = []int32{
	4, 1, 1079, 11201, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 
	7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 
	7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 
	15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 
	2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 
	26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 
	7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 
	36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 
	2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 
	47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 
	7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 
	57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 
	2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 
	68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 
	7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 
	78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 
	2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 
	89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 
	7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 
	99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 
	104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 
	108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2, 
	113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 
	117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2, 
	122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 
	126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2, 
	131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7, 
	135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2, 
	140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7, 
	144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2, 
	149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7, 
	153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2, 
	158, 7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7, 
	162, 2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2, 
	167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7, 
	171, 2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2, 
	176, 7, 176, 2, 177, 7, 177, 2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7, 
	180, 2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 2, 
	185, 7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 189, 7, 
	189, 2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193, 7, 193, 2, 
	194, 7, 194, 2, 195, 7, 195, 2, 196, 7, 196, 2, 197, 7, 197, 2, 198, 7, 
	198, 2, 199, 7, 199, 2, 200, 7, 200, 2, 201, 7, 201, 2, 202, 7, 202, 2, 
	203, 7, 203, 2, 204, 7, 204, 2, 205, 7, 205, 2, 206, 7, 206, 2, 207, 7, 
	207, 2, 208, 7, 208, 2, 209, 7, 209, 2, 210, 7, 210, 2, 211, 7, 211, 2, 
	212, 7, 212, 2, 213, 7, 213, 2, 214, 7, 214, 2, 215, 7, 215, 2, 216, 7, 
	216, 2, 217, 7, 217, 2, 218, 7, 218, 2, 219, 7, 219, 2, 220, 7, 220, 2, 
	221, 7, 221, 2, 222, 7, 222, 2, 223, 7, 223, 2, 224, 7, 224, 2, 225, 7, 
	225, 2, 226, 7, 226, 2, 227, 7, 227, 2, 228, 7, 228, 2, 229, 7, 229, 2, 
	230, 7, 230, 2, 231, 7, 231, 2, 232, 7, 232, 2, 233, 7, 233, 2, 234, 7, 
	234, 2, 235, 7, 235, 2, 236, 7, 236, 2, 237, 7, 237, 2, 238, 7, 238, 2, 
	239, 7, 239, 2, 240, 7, 240, 2, 241, 7, 241, 2, 242, 7, 242, 2, 243, 7, 
	243, 2, 244, 7, 244, 2, 245, 7, 245, 2, 246, 7, 246, 2, 247, 7, 247, 2, 
	248, 7, 248, 2, 249, 7, 249, 2, 250, 7, 250, 2, 251, 7, 251, 2, 252, 7, 
	252, 2, 253, 7, 253, 2, 254, 7, 254, 2, 255, 7, 255, 2, 256, 7, 256, 2, 
	257, 7, 257, 2, 258, 7, 258, 2, 259, 7, 259, 2, 260, 7, 260, 2, 261, 7, 
	261, 2, 262, 7, 262, 2, 263, 7, 263, 2, 264, 7, 264, 2, 265, 7, 265, 2, 
	266, 7, 266, 2, 267, 7, 267, 2, 268, 7, 268, 2, 269, 7, 269, 2, 270, 7, 
	270, 2, 271, 7, 271, 2, 272, 7, 272, 2, 273, 7, 273, 2, 274, 7, 274, 2, 
	275, 7, 275, 2, 276, 7, 276, 2, 277, 7, 277, 2, 278, 7, 278, 2, 279, 7, 
	279, 2, 280, 7, 280, 2, 281, 7, 281, 2, 282, 7, 282, 2, 283, 7, 283, 2, 
	284, 7, 284, 2, 285, 7, 285, 2, 286, 7, 286, 2, 287, 7, 287, 2, 288, 7, 
	288, 2, 289, 7, 289, 2, 290, 7, 290, 2, 291, 7, 291, 2, 292, 7, 292, 2, 
	293, 7, 293, 2, 294, 7, 294, 2, 295, 7, 295, 2, 296, 7, 296, 2, 297, 7, 
	297, 2, 298, 7, 298, 2, 299, 7, 299, 2, 300, 7, 300, 2, 301, 7, 301, 2, 
	302, 7, 302, 2, 303, 7, 303, 2, 304, 7, 304, 2, 305, 7, 305, 2, 306, 7, 
	306, 2, 307, 7, 307, 2, 308, 7, 308, 2, 309, 7, 309, 2, 310, 7, 310, 2, 
	311, 7, 311, 2, 312, 7, 312, 2, 313, 7, 313, 2, 314, 7, 314, 2, 315, 7, 
	315, 2, 316, 7, 316, 2, 317, 7, 317, 2, 318, 7, 318, 2, 319, 7, 319, 2, 
	320, 7, 320, 2, 321, 7, 321, 2, 322, 7, 322, 2, 323, 7, 323, 2, 324, 7, 
	324, 2, 325, 7, 325, 2, 326, 7, 326, 2, 327, 7, 327, 2, 328, 7, 328, 2, 
	329, 7, 329, 2, 330, 7, 330, 2, 331, 7, 331, 2, 332, 7, 332, 2, 333, 7, 
	333, 2, 334, 7, 334, 2, 335, 7, 335, 2, 336, 7, 336, 2, 337, 7, 337, 2, 
	338, 7, 338, 2, 339, 7, 339, 2, 340, 7, 340, 2, 341, 7, 341, 2, 342, 7, 
	342, 2, 343, 7, 343, 2, 344, 7, 344, 2, 345, 7, 345, 2, 346, 7, 346, 2, 
	347, 7, 347, 2, 348, 7, 348, 2, 349, 7, 349, 2, 350, 7, 350, 2, 351, 7, 
	351, 2, 352, 7, 352, 2, 353, 7, 353, 2, 354, 7, 354, 2, 355, 7, 355, 2, 
	356, 7, 356, 2, 357, 7, 357, 2, 358, 7, 358, 2, 359, 7, 359, 2, 360, 7, 
	360, 2, 361, 7, 361, 2, 362, 7, 362, 2, 363, 7, 363, 2, 364, 7, 364, 2, 
	365, 7, 365, 2, 366, 7, 366, 2, 367, 7, 367, 2, 368, 7, 368, 2, 369, 7, 
	369, 2, 370, 7, 370, 2, 371, 7, 371, 2, 372, 7, 372, 2, 373, 7, 373, 2, 
	374, 7, 374, 2, 375, 7, 375, 2, 376, 7, 376, 2, 377, 7, 377, 2, 378, 7, 
	378, 2, 379, 7, 379, 2, 380, 7, 380, 2, 381, 7, 381, 2, 382, 7, 382, 2, 
	383, 7, 383, 2, 384, 7, 384, 2, 385, 7, 385, 2, 386, 7, 386, 2, 387, 7, 
	387, 2, 388, 7, 388, 2, 389, 7, 389, 2, 390, 7, 390, 2, 391, 7, 391, 2, 
	392, 7, 392, 2, 393, 7, 393, 2, 394, 7, 394, 2, 395, 7, 395, 2, 396, 7, 
	396, 2, 397, 7, 397, 2, 398, 7, 398, 2, 399, 7, 399, 2, 400, 7, 400, 2, 
	401, 7, 401, 2, 402, 7, 402, 2, 403, 7, 403, 2, 404, 7, 404, 2, 405, 7, 
	405, 2, 406, 7, 406, 2, 407, 7, 407, 2, 408, 7, 408, 2, 409, 7, 409, 2, 
	410, 7, 410, 2, 411, 7, 411, 2, 412, 7, 412, 2, 413, 7, 413, 2, 414, 7, 
	414, 2, 415, 7, 415, 2, 416, 7, 416, 2, 417, 7, 417, 2, 418, 7, 418, 2, 
	419, 7, 419, 2, 420, 7, 420, 2, 421, 7, 421, 2, 422, 7, 422, 2, 423, 7, 
	423, 2, 424, 7, 424, 2, 425, 7, 425, 2, 426, 7, 426, 2, 427, 7, 427, 2, 
	428, 7, 428, 2, 429, 7, 429, 2, 430, 7, 430, 2, 431, 7, 431, 2, 432, 7, 
	432, 2, 433, 7, 433, 2, 434, 7, 434, 2, 435, 7, 435, 2, 436, 7, 436, 2, 
	437, 7, 437, 2, 438, 7, 438, 2, 439, 7, 439, 2, 440, 7, 440, 2, 441, 7, 
	441, 2, 442, 7, 442, 2, 443, 7, 443, 2, 444, 7, 444, 2, 445, 7, 445, 2, 
	446, 7, 446, 2, 447, 7, 447, 2, 448, 7, 448, 2, 449, 7, 449, 2, 450, 7, 
	450, 2, 451, 7, 451, 2, 452, 7, 452, 2, 453, 7, 453, 2, 454, 7, 454, 2, 
	455, 7, 455, 2, 456, 7, 456, 2, 457, 7, 457, 2, 458, 7, 458, 2, 459, 7, 
	459, 2, 460, 7, 460, 2, 461, 7, 461, 2, 462, 7, 462, 2, 463, 7, 463, 2, 
	464, 7, 464, 2, 465, 7, 465, 2, 466, 7, 466, 2, 467, 7, 467, 2, 468, 7, 
	468, 2, 469, 7, 469, 2, 470, 7, 470, 2, 471, 7, 471, 2, 472, 7, 472, 2, 
	473, 7, 473, 2, 474, 7, 474, 2, 475, 7, 475, 2, 476, 7, 476, 2, 477, 7, 
	477, 2, 478, 7, 478, 2, 479, 7, 479, 2, 480, 7, 480, 2, 481, 7, 481, 2, 
	482, 7, 482, 2, 483, 7, 483, 2, 484, 7, 484, 2, 485, 7, 485, 2, 486, 7, 
	486, 2, 487, 7, 487, 2, 488, 7, 488, 2, 489, 7, 489, 2, 490, 7, 490, 2, 
	491, 7, 491, 2, 492, 7, 492, 2, 493, 7, 493, 2, 494, 7, 494, 2, 495, 7, 
	495, 2, 496, 7, 496, 2, 497, 7, 497, 2, 498, 7, 498, 2, 499, 7, 499, 2, 
	500, 7, 500, 2, 501, 7, 501, 2, 502, 7, 502, 2, 503, 7, 503, 2, 504, 7, 
	504, 2, 505, 7, 505, 2, 506, 7, 506, 2, 507, 7, 507, 2, 508, 7, 508, 1, 
	0, 5, 0, 1020, 8, 0, 10, 0, 12, 0, 1023, 9, 0, 1, 0, 1, 0, 1, 1, 1, 1, 
	3, 1, 1029, 8, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 1037, 8, 2, 
	1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 1043, 8, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 
	1, 4, 3, 4, 1051, 8, 4, 1, 5, 1, 5, 3, 5, 1055, 8, 5, 1, 5, 1, 5, 1, 5, 
	1, 5, 1, 5, 1, 5, 3, 5, 1063, 8, 5, 1, 5, 1, 5, 3, 5, 1067, 8, 5, 1, 6, 
	1, 6, 3, 6, 1071, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 1077, 8, 6, 1, 6, 
	1, 6, 1, 6, 1, 6, 1, 6, 4, 6, 1084, 8, 6, 11, 6, 12, 6, 1085, 4, 6, 1088, 
	8, 6, 11, 6, 12, 6, 1089, 1, 6, 1, 6, 3, 6, 1094, 8, 6, 1, 6, 1, 6, 3, 
	6, 1098, 8, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 1106, 8, 7, 1, 
	7, 3, 7, 1109, 8, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 5, 8, 1116, 8, 8, 10, 
	8, 12, 8, 1119, 9, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 3, 9, 1126, 8, 9, 1, 
	10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 
	1, 11, 1, 11, 3, 11, 1141, 8, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 
	11, 1, 11, 3, 11, 1150, 8, 11, 1, 11, 1, 11, 3, 11, 1154, 8, 11, 1, 12, 
	1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 5, 12, 1165, 8, 
	12, 10, 12, 12, 12, 1168, 9, 12, 1, 12, 3, 12, 1171, 8, 12, 1, 13, 1, 13, 
	1, 13, 1, 13, 1, 13, 3, 13, 1178, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 
	13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 
	1, 14, 5, 14, 1196, 8, 14, 10, 14, 12, 14, 1199, 9, 14, 1, 14, 1, 14, 3, 
	14, 1203, 8, 14, 1, 14, 1, 14, 3, 14, 1207, 8, 14, 1, 15, 1, 15, 1, 15, 
	1, 15, 1, 15, 3, 15, 1214, 8, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 
	16, 1, 16, 3, 16, 1223, 8, 16, 3, 16, 1225, 8, 16, 1, 16, 1, 16, 3, 16, 
	1229, 8, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 
	17, 3, 17, 1240, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 
	1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 
	18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 1265, 8, 18, 1, 19, 1, 19, 
	1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 1274, 8, 19, 1, 19, 3, 19, 1277, 
	8, 19, 1, 19, 3, 19, 1280, 8, 19, 1, 19, 3, 19, 1283, 8, 19, 1, 19, 5, 
	19, 1286, 8, 19, 10, 19, 12, 19, 1289, 9, 19, 1, 19, 1, 19, 1, 19, 3, 19, 
	1294, 8, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 1303, 
	8, 19, 1, 19, 3, 19, 1306, 8, 19, 1, 19, 3, 19, 1309, 8, 19, 1, 19, 3, 
	19, 1312, 8, 19, 1, 19, 5, 19, 1315, 8, 19, 10, 19, 12, 19, 1318, 9, 19, 
	3, 19, 1320, 8, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 
	21, 5, 21, 1330, 8, 21, 10, 21, 12, 21, 1333, 9, 21, 1, 21, 1, 21, 1, 22, 
	1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 1342, 8, 22, 1, 22, 1, 22, 1, 23, 1, 
	23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 1354, 8, 24, 10, 24, 
	12, 24, 1357, 9, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 
	25, 1, 25, 1, 25, 4, 25, 1369, 8, 25, 11, 25, 12, 25, 1370, 1, 25, 1, 25, 
	3, 25, 1375, 8, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 1382, 8, 
	26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 1390, 8, 26, 1, 26, 
	3, 26, 1393, 8, 26, 1, 26, 3, 26, 1396, 8, 26, 1, 26, 3, 26, 1399, 8, 26, 
	1, 26, 1, 26, 1, 26, 3, 26, 1404, 8, 26, 1, 26, 3, 26, 1407, 8, 26, 1, 
	27, 1, 27, 3, 27, 1411, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 
	1, 27, 1, 27, 3, 27, 1421, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 
	27, 3, 27, 1429, 8, 27, 1, 28, 1, 28, 1, 29, 1, 29, 3, 29, 1435, 8, 29, 
	1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 5, 30, 1445, 8, 
	30, 10, 30, 12, 30, 1448, 9, 30, 1, 30, 1, 30, 3, 30, 1452, 8, 30, 1, 30, 
	1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 5, 30, 1462, 8, 30, 10, 
	30, 12, 30, 1465, 9, 30, 1, 30, 1, 30, 3, 30, 1469, 8, 30, 1, 30, 1, 30, 
	1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 5, 30, 1479, 8, 30, 10, 30, 12, 
	30, 1482, 9, 30, 1, 30, 1, 30, 3, 30, 1486, 8, 30, 3, 30, 1488, 8, 30, 
	1, 31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 3, 32, 1497, 8, 32, 1, 
	32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 3, 34, 
	1509, 8, 34, 1, 34, 3, 34, 1512, 8, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 
	35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 1527, 
	8, 35, 3, 35, 1529, 8, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 
	35, 1, 35, 3, 35, 1539, 8, 35, 3, 35, 1541, 8, 35, 1, 35, 1, 35, 1, 35, 
	1, 35, 1, 35, 1, 35, 3, 35, 1549, 8, 35, 1, 36, 1, 36, 1, 36, 1, 36, 3, 
	36, 1555, 8, 36, 3, 36, 1557, 8, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 
	3, 36, 1564, 8, 36, 3, 36, 1566, 8, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 
	36, 1, 36, 1, 36, 3, 36, 1575, 8, 36, 1, 36, 1, 36, 1, 36, 1, 36, 3, 36, 
	1581, 8, 36, 3, 36, 1583, 8, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 
	36, 1, 36, 1, 36, 3, 36, 1593, 8, 36, 1, 36, 1, 36, 1, 36, 3, 36, 1598, 
	8, 36, 3, 36, 1600, 8, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 
	36, 1, 36, 1, 36, 3, 36, 1611, 8, 36, 3, 36, 1613, 8, 36, 1, 36, 1, 36, 
	1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 3, 36, 1626, 
	8, 36, 3, 36, 1628, 8, 36, 1, 36, 1, 36, 1, 36, 3, 36, 1633, 8, 36, 3, 
	36, 1635, 8, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 
	3, 36, 1645, 8, 36, 3, 36, 1647, 8, 36, 1, 36, 1, 36, 3, 36, 1651, 8, 36, 
	1, 36, 1, 36, 1, 36, 1, 36, 3, 36, 1657, 8, 36, 1, 37, 1, 37, 1, 37, 5, 
	37, 1662, 8, 37, 10, 37, 12, 37, 1665, 9, 37, 1, 38, 1, 38, 1, 38, 1, 38, 
	1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 1680, 
	8, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 
	38, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 1696, 8, 38, 1, 38, 1, 38, 1, 38, 
	1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 1709, 8, 
	38, 3, 38, 1711, 8, 38, 1, 39, 1, 39, 1, 39, 5, 39, 1716, 8, 39, 10, 39, 
	12, 39, 1719, 9, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 
	40, 1, 40, 3, 40, 1730, 8, 40, 1, 41, 1, 41, 1, 41, 5, 41, 1735, 8, 41, 
	10, 41, 12, 41, 1738, 9, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 
	1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 
	42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 
	3, 42, 1767, 8, 42, 1, 42, 1, 42, 1, 42, 3, 42, 1772, 8, 42, 1, 43, 1, 
	43, 1, 43, 5, 43, 1777, 8, 43, 10, 43, 12, 43, 1780, 9, 43, 1, 44, 1, 44, 
	1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 1792, 8, 
	44, 1, 44, 1, 44, 1, 44, 3, 44, 1797, 8, 44, 1, 45, 1, 45, 1, 45, 1, 45, 
	1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 
	45, 1, 45, 3, 45, 1815, 8, 45, 1, 45, 1, 45, 3, 45, 1819, 8, 45, 1, 45, 
	1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 
	47, 1, 47, 1, 47, 3, 47, 1835, 8, 47, 1, 48, 1, 48, 1, 48, 3, 48, 1840, 
	8, 48, 1, 48, 3, 48, 1843, 8, 48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 50, 1, 
	50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 1859, 
	8, 51, 1, 51, 1, 51, 1, 51, 3, 51, 1864, 8, 51, 1, 51, 1, 51, 1, 51, 3, 
	51, 1869, 8, 51, 1, 51, 1, 51, 1, 51, 3, 51, 1874, 8, 51, 1, 52, 1, 52, 
	1, 52, 3, 52, 1879, 8, 52, 1, 52, 3, 52, 1882, 8, 52, 1, 53, 1, 53, 1, 
	53, 1, 53, 3, 53, 1888, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1893, 8, 53, 
	3, 53, 1895, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1902, 8, 
	53, 3, 53, 1904, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 
	1912, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1918, 8, 53, 3, 53, 1920, 
	8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1930, 
	8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1935, 8, 53, 3, 53, 1937, 8, 53, 1, 
	53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1947, 8, 53, 
	3, 53, 1949, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 
	53, 1, 53, 1, 53, 3, 53, 1961, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1966, 
	8, 53, 3, 53, 1968, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 
	53, 1, 53, 3, 53, 1978, 8, 53, 3, 53, 1980, 8, 53, 1, 53, 1, 53, 3, 53, 
	1984, 8, 53, 1, 53, 1, 53, 3, 53, 1988, 8, 53, 1, 54, 1, 54, 1, 54, 1, 
	54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 
	3, 54, 2004, 8, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 3, 
	54, 2013, 8, 54, 3, 54, 2015, 8, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 55, 
	1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 3, 55, 2029, 8, 55, 1, 
	56, 1, 56, 3, 56, 2033, 8, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 
	1, 57, 1, 57, 1, 57, 1, 57, 5, 57, 2045, 8, 57, 10, 57, 12, 57, 2048, 9, 
	57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 5, 57, 2056, 8, 57, 10, 57, 
	12, 57, 2059, 9, 57, 1, 57, 1, 57, 3, 57, 2063, 8, 57, 1, 58, 1, 58, 1, 
	58, 1, 58, 1, 58, 1, 59, 1, 59, 3, 59, 2072, 8, 59, 1, 59, 3, 59, 2075, 
	8, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 5, 
	60, 2086, 8, 60, 10, 60, 12, 60, 2089, 9, 60, 1, 60, 1, 60, 3, 60, 2093, 
	8, 60, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 
	61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 
	1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 
	61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 2133, 8, 61, 
	1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 
	62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 
	1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 
	62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 
	3, 62, 2177, 8, 62, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 
	63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 
	1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 3, 63, 2204, 8, 63, 1, 
	64, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 
	1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 
	65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 
	1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 
	65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 
	1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 3, 65, 2264, 8, 65, 1, 66, 1, 66, 1, 
	66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 
	1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 
	66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 
	1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 
	66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 
	1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 
	66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 
	1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 
	66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 3, 66, 2359, 8, 66, 1, 67, 
	1, 67, 1, 67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 3, 69, 2371, 
	8, 69, 1, 69, 1, 69, 3, 69, 2375, 8, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 
	69, 3, 69, 2382, 8, 69, 1, 69, 1, 69, 1, 69, 3, 69, 2387, 8, 69, 1, 69, 
	1, 69, 1, 69, 3, 69, 2392, 8, 69, 1, 69, 3, 69, 2395, 8, 69, 1, 69, 1, 
	69, 1, 69, 1, 69, 1, 69, 1, 69, 3, 69, 2403, 8, 69, 1, 69, 1, 69, 1, 69, 
	1, 69, 1, 69, 1, 69, 3, 69, 2411, 8, 69, 1, 69, 3, 69, 2414, 8, 69, 1, 
	69, 1, 69, 3, 69, 2418, 8, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 
	3, 69, 2426, 8, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 3, 69, 2434, 
	8, 69, 1, 69, 1, 69, 3, 69, 2438, 8, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 
	69, 5, 69, 2445, 8, 69, 10, 69, 12, 69, 2448, 9, 69, 3, 69, 2450, 8, 69, 
	1, 70, 1, 70, 1, 71, 1, 71, 1, 71, 1, 71, 1, 72, 1, 72, 1, 72, 3, 72, 2461, 
	8, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 2471, 
	8, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 2481, 
	8, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 2488, 8, 72, 1, 72, 1, 
	72, 1, 72, 3, 72, 2493, 8, 72, 1, 72, 3, 72, 2496, 8, 72, 1, 72, 3, 72, 
	2499, 8, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 
	72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 2514, 8, 72, 1, 72, 1, 72, 1, 72, 
	1, 72, 1, 72, 5, 72, 2521, 8, 72, 10, 72, 12, 72, 2524, 9, 72, 1, 72, 1, 
	72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 
	2537, 8, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 
	72, 2547, 8, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 
	1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 
	72, 1, 72, 1, 72, 1, 72, 3, 72, 2571, 8, 72, 1, 72, 1, 72, 1, 72, 1, 72, 
	1, 72, 3, 72, 2578, 8, 72, 1, 73, 1, 73, 1, 74, 1, 74, 1, 74, 5, 74, 2585, 
	8, 74, 10, 74, 12, 74, 2588, 9, 74, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 
	2594, 8, 75, 1, 75, 1, 75, 1, 75, 3, 75, 2599, 8, 75, 1, 75, 1, 75, 1, 
	75, 1, 75, 3, 75, 2605, 8, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 
	1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 2618, 8, 75, 1, 75, 1, 75, 1, 
	75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 2631, 
	8, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 2638, 8, 75, 1, 75, 3, 
	75, 2641, 8, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 2647, 8, 75, 1, 75, 
	1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 2657, 8, 75, 1, 
	75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 
	5, 75, 2670, 8, 75, 10, 75, 12, 75, 2673, 9, 75, 1, 75, 1, 75, 1, 75, 1, 
	75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 2684, 8, 75, 1, 75, 1, 75, 
	1, 75, 1, 75, 1, 75, 3, 75, 2691, 8, 75, 1, 76, 1, 76, 1, 76, 1, 76, 1, 
	77, 1, 77, 1, 77, 1, 77, 1, 78, 1, 78, 1, 78, 5, 78, 2704, 8, 78, 10, 78, 
	12, 78, 2707, 9, 78, 1, 79, 1, 79, 1, 79, 5, 79, 2712, 8, 79, 10, 79, 12, 
	79, 2715, 9, 79, 1, 80, 1, 80, 1, 80, 5, 80, 2720, 8, 80, 10, 80, 12, 80, 
	2723, 9, 80, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 2729, 8, 81, 1, 81, 1, 
	81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 2740, 8, 81, 
	1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 2747, 8, 81, 1, 81, 3, 81, 2750, 
	8, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 2756, 8, 81, 1, 81, 1, 81, 1, 
	81, 1, 81, 1, 81, 1, 81, 3, 81, 2764, 8, 81, 1, 81, 1, 81, 1, 81, 1, 81, 
	3, 81, 2770, 8, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 
	81, 1, 81, 1, 81, 3, 81, 2782, 8, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 
	1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 2797, 8, 
	81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 
	3, 81, 2809, 8, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 
	81, 1, 81, 1, 81, 3, 81, 2821, 8, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 
	1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 2836, 8, 
	81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 
	3, 81, 2848, 8, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 2856, 
	8, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 2862, 8, 81, 1, 81, 1, 81, 1, 
	81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 2874, 8, 81, 
	1, 81, 1, 81, 1, 81, 3, 81, 2879, 8, 81, 1, 82, 1, 82, 1, 82, 1, 82, 3, 
	82, 2885, 8, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 
	1, 82, 3, 82, 2896, 8, 82, 1, 82, 1, 82, 1, 82, 5, 82, 2901, 8, 82, 10, 
	82, 12, 82, 2904, 9, 82, 1, 82, 3, 82, 2907, 8, 82, 3, 82, 2909, 8, 82, 
	1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 
	83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 
	1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 5, 83, 2940, 8, 
	83, 10, 83, 12, 83, 2943, 9, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 
	83, 1, 83, 1, 83, 5, 83, 2953, 8, 83, 10, 83, 12, 83, 2956, 9, 83, 1, 83, 
	1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 
	83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 
	1, 83, 1, 83, 3, 83, 2982, 8, 83, 1, 84, 1, 84, 1, 84, 3, 84, 2987, 8, 
	84, 1, 84, 1, 84, 1, 84, 3, 84, 2992, 8, 84, 1, 84, 1, 84, 1, 85, 1, 85, 
	1, 85, 5, 85, 2999, 8, 85, 10, 85, 12, 85, 3002, 9, 85, 1, 86, 1, 86, 1, 
	86, 1, 86, 3, 86, 3008, 8, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 
	1, 86, 1, 86, 1, 86, 1, 86, 3, 86, 3020, 8, 86, 1, 86, 1, 86, 1, 86, 1, 
	86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 3, 86, 3031, 8, 86, 1, 86, 1, 86, 
	1, 86, 1, 86, 3, 86, 3037, 8, 86, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 
	87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 
	1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 3, 87, 3063, 8, 
	87, 1, 87, 3, 87, 3066, 8, 87, 1, 87, 1, 87, 3, 87, 3070, 8, 87, 1, 88, 
	1, 88, 1, 88, 1, 88, 1, 88, 1, 89, 1, 89, 3, 89, 3079, 8, 89, 1, 89, 1, 
	89, 3, 89, 3083, 8, 89, 1, 89, 1, 89, 1, 89, 3, 89, 3088, 8, 89, 1, 89, 
	1, 89, 3, 89, 3092, 8, 89, 1, 89, 1, 89, 3, 89, 3096, 8, 89, 1, 89, 1, 
	89, 3, 89, 3100, 8, 89, 1, 89, 1, 89, 1, 89, 3, 89, 3105, 8, 89, 1, 89, 
	1, 89, 3, 89, 3109, 8, 89, 1, 89, 1, 89, 3, 89, 3113, 8, 89, 1, 89, 1, 
	89, 1, 89, 1, 89, 1, 89, 1, 89, 3, 89, 3121, 8, 89, 1, 89, 1, 89, 1, 89, 
	1, 89, 1, 89, 1, 89, 3, 89, 3129, 8, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 
	89, 1, 89, 3, 89, 3137, 8, 89, 1, 90, 1, 90, 1, 90, 3, 90, 3142, 8, 90, 
	1, 90, 1, 90, 1, 90, 3, 90, 3147, 8, 90, 1, 90, 3, 90, 3150, 8, 90, 1, 
	90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 
	1, 90, 1, 90, 3, 90, 3165, 8, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 
	90, 1, 90, 1, 90, 1, 90, 3, 90, 3176, 8, 90, 1, 90, 1, 90, 1, 90, 1, 90, 
	1, 90, 1, 90, 1, 90, 3, 90, 3185, 8, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 
	90, 3, 90, 3192, 8, 90, 1, 90, 1, 90, 1, 90, 3, 90, 3197, 8, 90, 3, 90, 
	3199, 8, 90, 1, 91, 1, 91, 1, 91, 3, 91, 3204, 8, 91, 1, 91, 1, 91, 1, 
	91, 3, 91, 3209, 8, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 
	1, 91, 3, 91, 3219, 8, 91, 1, 91, 1, 91, 1, 91, 3, 91, 3224, 8, 91, 1, 
	91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 3, 91, 3235, 
	8, 91, 1, 91, 1, 91, 1, 91, 3, 91, 3240, 8, 91, 1, 91, 1, 91, 1, 91, 1, 
	91, 1, 91, 1, 91, 1, 91, 3, 91, 3249, 8, 91, 1, 91, 1, 91, 1, 91, 3, 91, 
	3254, 8, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 3, 91, 3261, 8, 91, 1, 
	92, 1, 92, 1, 92, 1, 92, 3, 92, 3267, 8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 
	1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 3, 92, 3278, 8, 92, 1, 92, 1, 92, 1, 
	92, 1, 92, 1, 92, 3, 92, 3285, 8, 92, 1, 92, 1, 92, 1, 92, 3, 92, 3290, 
	8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 3, 92, 3296, 8, 92, 1, 92, 1, 92, 1, 
	92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 5, 92, 3308, 8, 92, 
	10, 92, 12, 92, 3311, 9, 92, 1, 92, 1, 92, 1, 92, 3, 92, 3316, 8, 92, 1, 
	92, 1, 92, 1, 92, 1, 92, 3, 92, 3322, 8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 
	1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 3, 92, 3334, 8, 92, 1, 92, 1, 
	92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 
	1, 92, 3, 92, 3349, 8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 
	92, 1, 92, 1, 92, 1, 92, 3, 92, 3361, 8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 
	1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 3, 92, 3373, 8, 92, 1, 92, 1, 
	92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 
	1, 92, 3, 92, 3388, 8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 
	92, 1, 92, 1, 92, 1, 92, 3, 92, 3400, 8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 
	1, 92, 1, 92, 3, 92, 3408, 8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 3, 92, 3414, 
	8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 
	92, 3, 92, 3426, 8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 
	3, 92, 3435, 8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 3, 
	92, 3444, 8, 92, 1, 92, 1, 92, 1, 92, 3, 92, 3449, 8, 92, 1, 93, 1, 93, 
	1, 93, 1, 93, 1, 94, 1, 94, 1, 94, 1, 94, 1, 95, 1, 95, 1, 95, 1, 95, 1, 
	95, 1, 95, 5, 95, 3465, 8, 95, 10, 95, 12, 95, 3468, 9, 95, 1, 95, 1, 95, 
	1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 97, 1, 97, 1, 97, 1, 97, 3, 
	97, 3482, 8, 97, 1, 97, 1, 97, 1, 97, 3, 97, 3487, 8, 97, 1, 97, 3, 97, 
	3490, 8, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 3, 97, 3498, 8, 
	97, 1, 97, 1, 97, 1, 97, 3, 97, 3503, 8, 97, 3, 97, 3505, 8, 97, 1, 97, 
	1, 97, 1, 97, 1, 97, 1, 97, 5, 97, 3512, 8, 97, 10, 97, 12, 97, 3515, 9, 
	97, 3, 97, 3517, 8, 97, 3, 97, 3519, 8, 97, 1, 98, 1, 98, 1, 98, 3, 98, 
	3524, 8, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 3, 
	98, 3534, 8, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 3, 98, 
	3543, 8, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 3, 98, 3552, 
	8, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 3, 98, 3560, 8, 98, 1, 
	98, 1, 98, 1, 98, 3, 98, 3565, 8, 98, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 
	3, 99, 3572, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 
	99, 1, 99, 1, 99, 1, 99, 3, 99, 3585, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 
	1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 3597, 8, 99, 1, 99, 1, 
	99, 1, 99, 1, 99, 3, 99, 3603, 8, 99, 1, 100, 1, 100, 1, 100, 3, 100, 3608, 
	8, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 
	3, 100, 3618, 8, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 
	100, 1, 100, 3, 100, 3628, 8, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 
	3, 100, 3635, 8, 100, 1, 100, 1, 100, 1, 100, 3, 100, 3640, 8, 100, 1, 
	100, 3, 100, 3643, 8, 100, 1, 100, 3, 100, 3646, 8, 100, 1, 100, 1, 100, 
	1, 100, 3, 100, 3651, 8, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 
	100, 3, 100, 3659, 8, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 
	3, 100, 3667, 8, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 5, 100, 3674, 
	8, 100, 10, 100, 12, 100, 3677, 9, 100, 1, 100, 1, 100, 1, 100, 3, 100, 
	3682, 8, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 3, 100, 3689, 8, 
	100, 1, 101, 1, 101, 1, 102, 1, 102, 1, 102, 3, 102, 3696, 8, 102, 1, 102, 
	1, 102, 1, 102, 1, 102, 1, 102, 1, 102, 1, 102, 1, 102, 3, 102, 3706, 8, 
	102, 1, 102, 1, 102, 3, 102, 3710, 8, 102, 1, 102, 1, 102, 3, 102, 3714, 
	8, 102, 1, 102, 3, 102, 3717, 8, 102, 1, 102, 3, 102, 3720, 8, 102, 1, 
	102, 1, 102, 1, 102, 3, 102, 3725, 8, 102, 1, 102, 1, 102, 1, 102, 1, 102, 
	1, 102, 1, 102, 1, 102, 3, 102, 3734, 8, 102, 1, 102, 1, 102, 1, 102, 1, 
	102, 3, 102, 3740, 8, 102, 1, 103, 1, 103, 3, 103, 3744, 8, 103, 1, 103, 
	1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 3753, 8, 103, 1, 
	103, 1, 103, 1, 103, 3, 103, 3758, 8, 103, 1, 103, 1, 103, 1, 103, 3, 103, 
	3763, 8, 103, 1, 103, 1, 103, 1, 103, 3, 103, 3768, 8, 103, 1, 103, 1, 
	103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 3777, 8, 103, 3, 103, 
	3779, 8, 103, 1, 103, 1, 103, 1, 103, 3, 103, 3784, 8, 103, 1, 103, 1, 
	103, 1, 103, 3, 103, 3789, 8, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 
	1, 103, 1, 103, 3, 103, 3798, 8, 103, 3, 103, 3800, 8, 103, 1, 103, 1, 
	103, 1, 103, 3, 103, 3805, 8, 103, 1, 103, 1, 103, 1, 103, 3, 103, 3810, 
	8, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 3818, 8, 
	103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 3826, 8, 103, 
	1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 3834, 8, 103, 1, 
	103, 1, 103, 1, 103, 3, 103, 3839, 8, 103, 1, 103, 1, 103, 1, 103, 3, 103, 
	3844, 8, 103, 1, 103, 1, 103, 3, 103, 3848, 8, 103, 1, 103, 1, 103, 3, 
	103, 3852, 8, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 5, 103, 3859, 
	8, 103, 10, 103, 12, 103, 3862, 9, 103, 1, 103, 1, 103, 3, 103, 3866, 8, 
	103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 3874, 8, 103, 
	1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 3880, 8, 103, 1, 104, 1, 104, 1, 
	104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 3890, 8, 104, 1, 105, 
	1, 105, 3, 105, 3894, 8, 105, 1, 105, 1, 105, 3, 105, 3898, 8, 105, 1, 
	105, 1, 105, 1, 105, 1, 105, 1, 105, 3, 105, 3905, 8, 105, 1, 105, 3, 105, 
	3908, 8, 105, 1, 105, 1, 105, 1, 105, 3, 105, 3913, 8, 105, 1, 105, 1, 
	105, 1, 105, 3, 105, 3918, 8, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 
	1, 105, 1, 105, 3, 105, 3927, 8, 105, 3, 105, 3929, 8, 105, 1, 105, 1, 
	105, 1, 105, 3, 105, 3934, 8, 105, 1, 105, 1, 105, 1, 105, 3, 105, 3939, 
	8, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 3, 105, 
	3948, 8, 105, 3, 105, 3950, 8, 105, 1, 105, 1, 105, 1, 105, 3, 105, 3955, 
	8, 105, 1, 105, 1, 105, 1, 105, 3, 105, 3960, 8, 105, 1, 105, 1, 105, 1, 
	105, 1, 105, 1, 105, 1, 105, 3, 105, 3968, 8, 105, 1, 105, 1, 105, 1, 105, 
	1, 105, 1, 105, 1, 105, 3, 105, 3976, 8, 105, 1, 105, 1, 105, 1, 105, 1, 
	105, 1, 105, 1, 105, 3, 105, 3984, 8, 105, 1, 105, 1, 105, 1, 105, 1, 105, 
	1, 105, 3, 105, 3991, 8, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 
	105, 3, 105, 3999, 8, 105, 1, 105, 1, 105, 3, 105, 4003, 8, 105, 1, 105, 
	1, 105, 1, 105, 1, 105, 1, 105, 5, 105, 4010, 8, 105, 10, 105, 12, 105, 
	4013, 9, 105, 1, 105, 1, 105, 3, 105, 4017, 8, 105, 1, 105, 1, 105, 1, 
	105, 1, 105, 1, 105, 1, 105, 3, 105, 4025, 8, 105, 1, 105, 1, 105, 1, 105, 
	1, 105, 3, 105, 4031, 8, 105, 1, 106, 1, 106, 1, 107, 1, 107, 3, 107, 4037, 
	8, 107, 1, 107, 1, 107, 3, 107, 4041, 8, 107, 1, 107, 1, 107, 1, 107, 1, 
	107, 1, 107, 3, 107, 4048, 8, 107, 1, 107, 3, 107, 4051, 8, 107, 1, 107, 
	1, 107, 1, 107, 3, 107, 4056, 8, 107, 1, 107, 1, 107, 1, 107, 3, 107, 4061, 
	8, 107, 1, 107, 1, 107, 1, 107, 3, 107, 4066, 8, 107, 1, 107, 1, 107, 1, 
	107, 3, 107, 4071, 8, 107, 1, 107, 1, 107, 1, 107, 3, 107, 4076, 8, 107, 
	1, 107, 1, 107, 1, 107, 3, 107, 4081, 8, 107, 1, 107, 1, 107, 1, 107, 3, 
	107, 4086, 8, 107, 1, 107, 1, 107, 1, 107, 3, 107, 4091, 8, 107, 1, 107, 
	1, 107, 1, 107, 3, 107, 4096, 8, 107, 1, 107, 1, 107, 1, 107, 3, 107, 4101, 
	8, 107, 1, 107, 1, 107, 1, 107, 3, 107, 4106, 8, 107, 1, 107, 1, 107, 1, 
	107, 3, 107, 4111, 8, 107, 1, 107, 1, 107, 1, 107, 3, 107, 4116, 8, 107, 
	1, 107, 1, 107, 3, 107, 4120, 8, 107, 1, 107, 1, 107, 3, 107, 4124, 8, 
	107, 1, 107, 1, 107, 1, 107, 1, 107, 1, 107, 1, 107, 3, 107, 4132, 8, 107, 
	1, 107, 1, 107, 1, 107, 1, 107, 1, 107, 1, 107, 3, 107, 4140, 8, 107, 1, 
	107, 1, 107, 1, 107, 1, 107, 3, 107, 4146, 8, 107, 1, 108, 1, 108, 3, 108, 
	4150, 8, 108, 1, 108, 1, 108, 3, 108, 4154, 8, 108, 1, 108, 1, 108, 1, 
	108, 1, 108, 1, 108, 3, 108, 4161, 8, 108, 1, 108, 1, 108, 1, 108, 3, 108, 
	4166, 8, 108, 1, 108, 3, 108, 4169, 8, 108, 1, 108, 1, 108, 3, 108, 4173, 
	8, 108, 1, 108, 1, 108, 3, 108, 4177, 8, 108, 1, 108, 1, 108, 1, 108, 1, 
	108, 1, 108, 5, 108, 4184, 8, 108, 10, 108, 12, 108, 4187, 9, 108, 1, 108, 
	1, 108, 3, 108, 4191, 8, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 
	108, 3, 108, 4199, 8, 108, 1, 108, 1, 108, 1, 108, 1, 108, 3, 108, 4205, 
	8, 108, 1, 109, 1, 109, 1, 110, 1, 110, 1, 110, 3, 110, 4212, 8, 110, 1, 
	110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 3, 110, 4222, 
	8, 110, 1, 110, 1, 110, 3, 110, 4226, 8, 110, 1, 110, 1, 110, 3, 110, 4230, 
	8, 110, 1, 110, 3, 110, 4233, 8, 110, 1, 110, 3, 110, 4236, 8, 110, 1, 
	110, 1, 110, 1, 110, 3, 110, 4241, 8, 110, 1, 110, 1, 110, 1, 110, 1, 110, 
	1, 110, 1, 110, 1, 110, 3, 110, 4250, 8, 110, 1, 110, 1, 110, 1, 110, 1, 
	110, 3, 110, 4256, 8, 110, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 
	1, 111, 1, 111, 1, 111, 1, 111, 5, 111, 4268, 8, 111, 10, 111, 12, 111, 
	4271, 9, 111, 3, 111, 4273, 8, 111, 1, 112, 1, 112, 1, 112, 1, 112, 3, 
	112, 4279, 8, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 3, 112, 4286, 
	8, 112, 1, 112, 1, 112, 1, 112, 3, 112, 4291, 8, 112, 1, 112, 3, 112, 4294, 
	8, 112, 1, 112, 1, 112, 1, 112, 1, 112, 3, 112, 4300, 8, 112, 1, 112, 1, 
	112, 1, 112, 1, 112, 1, 112, 3, 112, 4307, 8, 112, 1, 113, 1, 113, 1, 113, 
	3, 113, 4312, 8, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 
	113, 5, 113, 4321, 8, 113, 10, 113, 12, 113, 4324, 9, 113, 1, 113, 1, 113, 
	1, 113, 3, 113, 4329, 8, 113, 1, 113, 1, 113, 1, 113, 3, 113, 4334, 8, 
	113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 5, 113, 4343, 
	8, 113, 10, 113, 12, 113, 4346, 9, 113, 1, 113, 1, 113, 1, 113, 3, 113, 
	4351, 8, 113, 1, 113, 1, 113, 1, 113, 3, 113, 4356, 8, 113, 1, 113, 1, 
	113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 5, 113, 4365, 8, 113, 10, 
	113, 12, 113, 4368, 9, 113, 3, 113, 4370, 8, 113, 1, 113, 3, 113, 4373, 
	8, 113, 1, 113, 1, 113, 1, 113, 3, 113, 4378, 8, 113, 1, 113, 1, 113, 1, 
	113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 3, 
	113, 4391, 8, 113, 1, 113, 1, 113, 1, 113, 1, 113, 3, 113, 4397, 8, 113, 
	1, 114, 1, 114, 1, 114, 3, 114, 4402, 8, 114, 1, 114, 1, 114, 1, 114, 1, 
	114, 1, 114, 1, 114, 1, 114, 1, 114, 3, 114, 4412, 8, 114, 1, 114, 1, 114, 
	1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 
	3, 114, 4425, 8, 114, 1, 114, 1, 114, 1, 114, 3, 114, 4430, 8, 114, 1, 
	114, 3, 114, 4433, 8, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 
	3, 114, 4441, 8, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 3, 114, 4448, 
	8, 114, 1, 114, 1, 114, 1, 114, 3, 114, 4453, 8, 114, 1, 114, 3, 114, 4456, 
	8, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 3, 114, 4464, 8, 
	114, 1, 114, 3, 114, 4467, 8, 114, 3, 114, 4469, 8, 114, 1, 115, 1, 115, 
	3, 115, 4473, 8, 115, 1, 115, 1, 115, 3, 115, 4477, 8, 115, 1, 115, 1, 
	115, 1, 115, 3, 115, 4482, 8, 115, 1, 115, 3, 115, 4485, 8, 115, 1, 115, 
	1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 3, 115, 4493, 8, 115, 1, 115, 1, 
	115, 1, 115, 1, 115, 1, 115, 1, 115, 3, 115, 4501, 8, 115, 1, 115, 3, 115, 
	4504, 8, 115, 1, 115, 1, 115, 3, 115, 4508, 8, 115, 1, 115, 1, 115, 3, 
	115, 4512, 8, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 3, 115, 4519, 
	8, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 3, 115, 4527, 8, 
	115, 1, 115, 1, 115, 3, 115, 4531, 8, 115, 1, 115, 1, 115, 1, 115, 1, 115, 
	3, 115, 4537, 8, 115, 1, 116, 1, 116, 1, 116, 3, 116, 4542, 8, 116, 1, 
	116, 1, 116, 1, 116, 3, 116, 4547, 8, 116, 1, 116, 3, 116, 4550, 8, 116, 
	1, 116, 1, 116, 1, 116, 3, 116, 4555, 8, 116, 1, 116, 1, 116, 1, 116, 1, 
	116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 3, 116, 4568, 
	8, 116, 1, 116, 1, 116, 1, 116, 1, 116, 3, 116, 4574, 8, 116, 1, 117, 1, 
	117, 1, 117, 3, 117, 4579, 8, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 
	1, 117, 1, 117, 1, 117, 3, 117, 4589, 8, 117, 1, 117, 1, 117, 1, 117, 1, 
	117, 1, 117, 1, 117, 1, 117, 1, 117, 3, 117, 4599, 8, 117, 1, 117, 1, 117, 
	1, 117, 1, 117, 3, 117, 4605, 8, 117, 1, 117, 1, 117, 1, 117, 3, 117, 4610, 
	8, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 3, 117, 4618, 8, 
	117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 3, 117, 4626, 8, 117, 
	1, 117, 1, 117, 1, 117, 3, 117, 4631, 8, 117, 1, 117, 1, 117, 1, 117, 1, 
	117, 1, 117, 1, 117, 3, 117, 4639, 8, 117, 1, 117, 1, 117, 1, 117, 3, 117, 
	4644, 8, 117, 1, 117, 1, 117, 1, 117, 3, 117, 4649, 8, 117, 1, 117, 1, 
	117, 1, 117, 3, 117, 4654, 8, 117, 1, 117, 3, 117, 4657, 8, 117, 1, 117, 
	3, 117, 4660, 8, 117, 1, 117, 1, 117, 1, 117, 3, 117, 4665, 8, 117, 1, 
	117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 3, 117, 4673, 8, 117, 1, 117, 
	1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 3, 117, 4681, 8, 117, 1, 117, 1, 
	117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 3, 117, 4691, 8, 117, 
	1, 117, 1, 117, 1, 117, 3, 117, 4696, 8, 117, 1, 117, 1, 117, 1, 117, 1, 
	117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 3, 
	117, 4710, 8, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 
	1, 117, 1, 117, 1, 117, 3, 117, 4722, 8, 117, 1, 117, 1, 117, 1, 117, 1, 
	117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 
	117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 3, 117, 4742, 8, 117, 1, 117, 
	1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 1, 117, 3, 117, 4751, 8, 117, 1, 
	118, 1, 118, 1, 118, 1, 118, 1, 118, 1, 118, 1, 118, 1, 118, 1, 118, 1, 
	118, 3, 118, 4763, 8, 118, 1, 118, 1, 118, 3, 118, 4767, 8, 118, 1, 118, 
	1, 118, 1, 118, 1, 118, 1, 118, 3, 118, 4774, 8, 118, 1, 119, 1, 119, 3, 
	119, 4778, 8, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 
	1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 
	3, 119, 4796, 8, 119, 3, 119, 4798, 8, 119, 1, 119, 3, 119, 4801, 8, 119, 
	1, 119, 3, 119, 4804, 8, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 
	119, 1, 119, 1, 119, 1, 119, 1, 119, 3, 119, 4816, 8, 119, 3, 119, 4818, 
	8, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 
	3, 119, 4828, 8, 119, 1, 119, 3, 119, 4831, 8, 119, 1, 119, 1, 119, 1, 
	119, 1, 119, 1, 119, 3, 119, 4838, 8, 119, 1, 119, 1, 119, 1, 119, 1, 119, 
	1, 119, 1, 119, 1, 119, 1, 119, 3, 119, 4848, 8, 119, 1, 119, 1, 119, 3, 
	119, 4852, 8, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 3, 119, 4859, 
	8, 119, 1, 119, 1, 119, 3, 119, 4863, 8, 119, 1, 119, 1, 119, 1, 119, 3, 
	119, 4868, 8, 119, 1, 119, 3, 119, 4871, 8, 119, 1, 119, 1, 119, 1, 119, 
	3, 119, 4876, 8, 119, 1, 119, 1, 119, 1, 119, 1, 119, 3, 119, 4882, 8, 
	119, 1, 119, 1, 119, 1, 119, 1, 119, 3, 119, 4888, 8, 119, 1, 119, 1, 119, 
	1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 
	1, 119, 1, 119, 1, 119, 3, 119, 4904, 8, 119, 1, 119, 3, 119, 4907, 8, 
	119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 
	119, 1, 119, 1, 119, 5, 119, 4920, 8, 119, 10, 119, 12, 119, 4923, 9, 119, 
	1, 119, 1, 119, 1, 119, 1, 119, 5, 119, 4929, 8, 119, 10, 119, 12, 119, 
	4932, 9, 119, 1, 119, 1, 119, 3, 119, 4936, 8, 119, 1, 119, 3, 119, 4939, 
	8, 119, 1, 120, 1, 120, 3, 120, 4943, 8, 120, 1, 120, 1, 120, 3, 120, 4947, 
	8, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 3, 120, 4954, 8, 120, 1, 
	120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 3, 120, 4962, 8, 120, 3, 120, 
	4964, 8, 120, 1, 120, 3, 120, 4967, 8, 120, 1, 121, 3, 121, 4970, 8, 121, 
	1, 121, 1, 121, 3, 121, 4974, 8, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 
	121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 
	121, 3, 121, 4990, 8, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 
	1, 121, 1, 121, 1, 121, 3, 121, 5001, 8, 121, 1, 121, 1, 121, 1, 121, 1, 
	121, 1, 121, 1, 121, 3, 121, 5009, 8, 121, 1, 122, 1, 122, 3, 122, 5013, 
	8, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 
	1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 3, 122, 5030, 8, 
	122, 1, 122, 3, 122, 5033, 8, 122, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 
	1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 
	1, 123, 1, 123, 3, 123, 5051, 8, 123, 1, 123, 1, 123, 3, 123, 5055, 8, 
	123, 1, 123, 3, 123, 5058, 8, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 
	1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 3, 123, 5071, 8, 123, 1, 
	123, 1, 123, 3, 123, 5075, 8, 123, 3, 123, 5077, 8, 123, 1, 124, 1, 124, 
	3, 124, 5081, 8, 124, 1, 124, 1, 124, 3, 124, 5085, 8, 124, 1, 124, 1, 
	124, 1, 124, 3, 124, 5090, 8, 124, 1, 124, 1, 124, 3, 124, 5094, 8, 124, 
	1, 124, 3, 124, 5097, 8, 124, 1, 124, 1, 124, 1, 124, 3, 124, 5102, 8, 
	124, 3, 124, 5104, 8, 124, 1, 124, 3, 124, 5107, 8, 124, 1, 125, 1, 125, 
	1, 125, 1, 125, 1, 125, 1, 125, 1, 125, 5, 125, 5116, 8, 125, 10, 125, 
	12, 125, 5119, 9, 125, 3, 125, 5121, 8, 125, 1, 125, 1, 125, 1, 125, 1, 
	125, 1, 125, 1, 125, 1, 125, 5, 125, 5130, 8, 125, 10, 125, 12, 125, 5133, 
	9, 125, 3, 125, 5135, 8, 125, 3, 125, 5137, 8, 125, 1, 126, 1, 126, 1, 
	126, 1, 126, 3, 126, 5143, 8, 126, 1, 126, 1, 126, 1, 127, 1, 127, 1, 127, 
	1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 3, 127, 5156, 8, 127, 1, 
	127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 
	127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 3, 127, 5175, 
	8, 127, 1, 127, 3, 127, 5178, 8, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 
	127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 
	127, 1, 127, 1, 127, 1, 127, 5, 127, 5197, 8, 127, 10, 127, 12, 127, 5200, 
	9, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 5, 127, 
	5209, 8, 127, 10, 127, 12, 127, 5212, 9, 127, 3, 127, 5214, 8, 127, 1, 
	128, 1, 128, 1, 128, 5, 128, 5219, 8, 128, 10, 128, 12, 128, 5222, 9, 128, 
	1, 129, 3, 129, 5225, 8, 129, 1, 129, 1, 129, 1, 129, 1, 130, 1, 130, 1, 
	130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 3, 130, 5239, 8, 130, 
	1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 3, 130, 5246, 8, 130, 1, 130, 1, 
	130, 3, 130, 5250, 8, 130, 1, 130, 3, 130, 5253, 8, 130, 1, 130, 1, 130, 
	1, 130, 1, 130, 3, 130, 5259, 8, 130, 1, 131, 3, 131, 5262, 8, 131, 1, 
	131, 1, 131, 1, 131, 1, 132, 1, 132, 1, 132, 1, 132, 1, 133, 1, 133, 1, 
	133, 1, 133, 1, 134, 1, 134, 1, 134, 3, 134, 5278, 8, 134, 1, 134, 1, 134, 
	1, 134, 1, 134, 1, 134, 1, 134, 3, 134, 5286, 8, 134, 1, 134, 1, 134, 1, 
	134, 1, 134, 1, 134, 1, 134, 1, 134, 1, 134, 1, 134, 1, 134, 1, 134, 3, 
	134, 5299, 8, 134, 1, 134, 1, 134, 1, 134, 1, 134, 1, 134, 3, 134, 5306, 
	8, 134, 1, 134, 1, 134, 1, 134, 3, 134, 5311, 8, 134, 1, 134, 1, 134, 1, 
	134, 3, 134, 5316, 8, 134, 1, 134, 1, 134, 1, 134, 3, 134, 5321, 8, 134, 
	1, 134, 1, 134, 1, 134, 3, 134, 5326, 8, 134, 1, 134, 3, 134, 5329, 8, 
	134, 1, 134, 3, 134, 5332, 8, 134, 1, 134, 1, 134, 1, 134, 3, 134, 5337, 
	8, 134, 1, 134, 1, 134, 1, 134, 3, 134, 5342, 8, 134, 1, 134, 3, 134, 5345, 
	8, 134, 1, 134, 3, 134, 5348, 8, 134, 1, 134, 3, 134, 5351, 8, 134, 1, 
	134, 3, 134, 5354, 8, 134, 1, 134, 3, 134, 5357, 8, 134, 1, 134, 3, 134, 
	5360, 8, 134, 1, 134, 1, 134, 1, 134, 3, 134, 5365, 8, 134, 1, 134, 1, 
	134, 1, 134, 1, 134, 1, 134, 1, 134, 3, 134, 5373, 8, 134, 1, 134, 1, 134, 
	1, 134, 1, 134, 1, 134, 1, 134, 3, 134, 5381, 8, 134, 1, 134, 1, 134, 1, 
	134, 1, 134, 1, 134, 1, 134, 1, 134, 1, 134, 3, 134, 5391, 8, 134, 1, 134, 
	1, 134, 1, 134, 1, 134, 1, 134, 3, 134, 5398, 8, 134, 1, 135, 1, 135, 1, 
	135, 3, 135, 5403, 8, 135, 1, 135, 1, 135, 1, 135, 1, 136, 1, 136, 1, 136, 
	3, 136, 5411, 8, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 
	136, 1, 136, 3, 136, 5421, 8, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 
	1, 136, 1, 136, 3, 136, 5430, 8, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 
	136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 
	136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 3, 136, 5451, 8, 136, 1, 136, 
	1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 3, 136, 5459, 8, 136, 1, 136, 1, 
	136, 1, 136, 1, 136, 1, 136, 1, 136, 3, 136, 5467, 8, 136, 1, 136, 1, 136, 
	1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 
	1, 136, 3, 136, 5481, 8, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 
	136, 1, 136, 1, 136, 1, 136, 1, 136, 3, 136, 5493, 8, 136, 1, 136, 1, 136, 
	1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 
	1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 3, 136, 5513, 8, 
	136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 
	136, 1, 136, 1, 136, 1, 136, 3, 136, 5527, 8, 136, 1, 136, 1, 136, 1, 136, 
	1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 
	3, 136, 5541, 8, 136, 1, 136, 3, 136, 5544, 8, 136, 1, 136, 1, 136, 1, 
	136, 1, 136, 1, 136, 3, 136, 5551, 8, 136, 1, 136, 1, 136, 1, 136, 1, 136, 
	1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 3, 136, 5563, 8, 136, 1, 
	136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 
	136, 1, 136, 3, 136, 5576, 8, 136, 1, 137, 1, 137, 1, 138, 1, 138, 1, 138, 
	3, 138, 5583, 8, 138, 1, 138, 1, 138, 1, 139, 1, 139, 1, 139, 1, 139, 1, 
	139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 5, 
	139, 5600, 8, 139, 10, 139, 12, 139, 5603, 9, 139, 1, 139, 3, 139, 5606, 
	8, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 
	1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 3, 139, 5621, 8, 139, 1, 139, 1, 
	139, 1, 139, 1, 139, 3, 139, 5627, 8, 139, 1, 139, 1, 139, 1, 139, 1, 139, 
	1, 139, 3, 139, 5634, 8, 139, 1, 139, 1, 139, 1, 139, 1, 139, 3, 139, 5640, 
	8, 139, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 
	1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 
	1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 
	3, 140, 5668, 8, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 3, 
	140, 5676, 8, 140, 1, 141, 3, 141, 5679, 8, 141, 1, 141, 1, 141, 1, 141, 
	1, 141, 1, 141, 1, 141, 3, 141, 5687, 8, 141, 1, 141, 1, 141, 1, 141, 1, 
	141, 1, 141, 1, 141, 5, 141, 5695, 8, 141, 10, 141, 12, 141, 5698, 9, 141, 
	1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 
	1, 141, 1, 141, 1, 141, 1, 141, 5, 141, 5713, 8, 141, 10, 141, 12, 141, 
	5716, 9, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 
	141, 1, 141, 5, 141, 5727, 8, 141, 10, 141, 12, 141, 5730, 9, 141, 1, 141, 
	3, 141, 5733, 8, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 3, 141, 5740, 
	8, 141, 1, 141, 1, 141, 1, 141, 1, 141, 3, 141, 5746, 8, 141, 1, 142, 3, 
	142, 5749, 8, 142, 1, 142, 1, 142, 1, 142, 1, 142, 1, 142, 1, 142, 1, 142, 
	1, 142, 3, 142, 5759, 8, 142, 1, 142, 1, 142, 1, 142, 1, 142, 1, 142, 1, 
	142, 3, 142, 5767, 8, 142, 1, 142, 3, 142, 5770, 8, 142, 1, 142, 3, 142, 
	5773, 8, 142, 1, 142, 1, 142, 1, 142, 1, 142, 1, 142, 1, 142, 1, 142, 1, 
	142, 1, 142, 3, 142, 5784, 8, 142, 1, 143, 3, 143, 5787, 8, 143, 1, 143, 
	1, 143, 1, 143, 3, 143, 5792, 8, 143, 3, 143, 5794, 8, 143, 1, 143, 3, 
	143, 5797, 8, 143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 
	1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 143, 
	1, 143, 1, 143, 1, 143, 5, 143, 5818, 8, 143, 10, 143, 12, 143, 5821, 9, 
	143, 3, 143, 5823, 8, 143, 1, 144, 1, 144, 3, 144, 5827, 8, 144, 1, 144, 
	3, 144, 5830, 8, 144, 1, 144, 3, 144, 5833, 8, 144, 1, 144, 1, 144, 1, 
	144, 1, 144, 3, 144, 5839, 8, 144, 1, 144, 1, 144, 1, 144, 1, 144, 1, 144, 
	1, 144, 1, 144, 1, 144, 1, 144, 1, 144, 1, 144, 1, 144, 1, 144, 3, 144, 
	5854, 8, 144, 1, 144, 1, 144, 1, 144, 1, 144, 1, 144, 3, 144, 5861, 8, 
	144, 1, 145, 1, 145, 1, 145, 1, 146, 1, 146, 1, 146, 1, 146, 1, 146, 1, 
	146, 1, 146, 1, 146, 1, 146, 5, 146, 5875, 8, 146, 10, 146, 12, 146, 5878, 
	9, 146, 1, 147, 1, 147, 1, 147, 1, 147, 1, 147, 5, 147, 5885, 8, 147, 10, 
	147, 12, 147, 5888, 9, 147, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 
	148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 
	148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 
	148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 
	148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 3, 148, 5928, 8, 148, 1, 149, 
	1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 
	1, 149, 1, 149, 3, 149, 5942, 8, 149, 1, 149, 1, 149, 1, 149, 3, 149, 5947, 
	8, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 3, 149, 5955, 8, 
	149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 3, 149, 5963, 8, 149, 
	1, 149, 1, 149, 1, 149, 3, 149, 5968, 8, 149, 1, 149, 3, 149, 5971, 8, 
	149, 1, 150, 1, 150, 3, 150, 5975, 8, 150, 1, 150, 1, 150, 1, 150, 3, 150, 
	5980, 8, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 
	150, 1, 150, 1, 150, 3, 150, 5992, 8, 150, 1, 150, 1, 150, 1, 150, 1, 150, 
	1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 3, 150, 6005, 8, 
	150, 1, 150, 1, 150, 1, 150, 1, 150, 3, 150, 6011, 8, 150, 1, 150, 1, 150, 
	3, 150, 6015, 8, 150, 1, 150, 1, 150, 1, 150, 3, 150, 6020, 8, 150, 1, 
	150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 
	150, 1, 150, 1, 150, 1, 150, 3, 150, 6035, 8, 150, 1, 150, 1, 150, 1, 150, 
	1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 3, 150, 
	6048, 8, 150, 1, 150, 1, 150, 1, 150, 1, 150, 3, 150, 6054, 8, 150, 1, 
	150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 
	150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 
	150, 1, 150, 1, 150, 1, 150, 1, 150, 3, 150, 6079, 8, 150, 1, 150, 1, 150, 
	1, 150, 1, 150, 3, 150, 6085, 8, 150, 3, 150, 6087, 8, 150, 1, 151, 1, 
	151, 3, 151, 6091, 8, 151, 1, 151, 1, 151, 3, 151, 6095, 8, 151, 1, 151, 
	1, 151, 1, 151, 1, 151, 1, 151, 1, 151, 1, 151, 1, 151, 1, 151, 1, 151, 
	1, 151, 1, 151, 1, 151, 1, 151, 3, 151, 6111, 8, 151, 1, 151, 1, 151, 3, 
	151, 6115, 8, 151, 1, 151, 1, 151, 3, 151, 6119, 8, 151, 1, 151, 1, 151, 
	1, 151, 1, 151, 1, 151, 1, 151, 3, 151, 6127, 8, 151, 1, 151, 3, 151, 6130, 
	8, 151, 1, 151, 1, 151, 1, 151, 1, 151, 3, 151, 6136, 8, 151, 1, 152, 1, 
	152, 1, 152, 3, 152, 6141, 8, 152, 1, 152, 1, 152, 1, 152, 1, 152, 3, 152, 
	6147, 8, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 
	152, 1, 152, 1, 152, 1, 152, 3, 152, 6160, 8, 152, 3, 152, 6162, 8, 152, 
	1, 153, 1, 153, 3, 153, 6166, 8, 153, 1, 153, 3, 153, 6169, 8, 153, 1, 
	153, 1, 153, 3, 153, 6173, 8, 153, 1, 153, 1, 153, 3, 153, 6177, 8, 153, 
	1, 153, 1, 153, 1, 153, 3, 153, 6182, 8, 153, 1, 153, 1, 153, 1, 153, 3, 
	153, 6187, 8, 153, 1, 153, 3, 153, 6190, 8, 153, 1, 153, 3, 153, 6193, 
	8, 153, 1, 153, 3, 153, 6196, 8, 153, 1, 154, 1, 154, 1, 154, 1, 154, 1, 
	154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 3, 
	154, 6211, 8, 154, 1, 154, 1, 154, 3, 154, 6215, 8, 154, 1, 155, 1, 155, 
	1, 156, 1, 156, 1, 156, 1, 156, 1, 157, 1, 157, 1, 158, 1, 158, 1, 158, 
	1, 158, 1, 159, 1, 159, 3, 159, 6231, 8, 159, 1, 159, 3, 159, 6234, 8, 
	159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 
	159, 1, 159, 5, 159, 6246, 8, 159, 10, 159, 12, 159, 6249, 9, 159, 3, 159, 
	6251, 8, 159, 1, 159, 1, 159, 1, 159, 1, 159, 3, 159, 6257, 8, 159, 1, 
	159, 3, 159, 6260, 8, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 
	1, 159, 1, 159, 1, 159, 1, 159, 3, 159, 6272, 8, 159, 3, 159, 6274, 8, 
	159, 1, 159, 3, 159, 6277, 8, 159, 1, 159, 3, 159, 6280, 8, 159, 1, 159, 
	1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 5, 159, 
	6291, 8, 159, 10, 159, 12, 159, 6294, 9, 159, 1, 159, 1, 159, 3, 159, 6298, 
	8, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 5, 159, 6306, 8, 
	159, 10, 159, 12, 159, 6309, 9, 159, 1, 159, 1, 159, 3, 159, 6313, 8, 159, 
	1, 159, 1, 159, 1, 159, 3, 159, 6318, 8, 159, 1, 159, 3, 159, 6321, 8, 
	159, 1, 159, 1, 159, 1, 159, 3, 159, 6326, 8, 159, 1, 159, 1, 159, 1, 159, 
	3, 159, 6331, 8, 159, 1, 159, 1, 159, 1, 159, 1, 160, 1, 160, 3, 160, 6338, 
	8, 160, 1, 160, 1, 160, 1, 160, 3, 160, 6343, 8, 160, 1, 160, 1, 160, 1, 
	160, 1, 160, 1, 160, 3, 160, 6350, 8, 160, 1, 160, 3, 160, 6353, 8, 160, 
	1, 160, 3, 160, 6356, 8, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 
	160, 3, 160, 6364, 8, 160, 1, 160, 1, 160, 1, 160, 3, 160, 6369, 8, 160, 
	1, 160, 3, 160, 6372, 8, 160, 1, 160, 1, 160, 1, 160, 1, 160, 3, 160, 6378, 
	8, 160, 1, 160, 3, 160, 6381, 8, 160, 1, 160, 3, 160, 6384, 8, 160, 1, 
	160, 3, 160, 6387, 8, 160, 1, 160, 3, 160, 6390, 8, 160, 1, 160, 1, 160, 
	3, 160, 6394, 8, 160, 1, 160, 1, 160, 1, 160, 3, 160, 6399, 8, 160, 1, 
	160, 1, 160, 1, 160, 1, 160, 1, 160, 3, 160, 6406, 8, 160, 1, 160, 3, 160, 
	6409, 8, 160, 1, 160, 3, 160, 6412, 8, 160, 1, 160, 1, 160, 1, 160, 1, 
	160, 1, 160, 1, 160, 1, 160, 1, 160, 3, 160, 6422, 8, 160, 1, 160, 3, 160, 
	6425, 8, 160, 1, 160, 3, 160, 6428, 8, 160, 1, 160, 3, 160, 6431, 8, 160, 
	1, 160, 1, 160, 3, 160, 6435, 8, 160, 1, 160, 1, 160, 1, 160, 3, 160, 6440, 
	8, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 3, 160, 6447, 8, 160, 1, 
	160, 3, 160, 6450, 8, 160, 1, 160, 3, 160, 6453, 8, 160, 1, 160, 1, 160, 
	1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 3, 160, 
	6465, 8, 160, 1, 160, 3, 160, 6468, 8, 160, 1, 160, 3, 160, 6471, 8, 160, 
	1, 160, 3, 160, 6474, 8, 160, 1, 160, 3, 160, 6477, 8, 160, 3, 160, 6479, 
	8, 160, 1, 161, 1, 161, 1, 161, 1, 161, 1, 161, 3, 161, 6486, 8, 161, 1, 
	161, 3, 161, 6489, 8, 161, 1, 162, 1, 162, 1, 162, 5, 162, 6494, 8, 162, 
	10, 162, 12, 162, 6497, 9, 162, 1, 163, 1, 163, 1, 163, 1, 163, 1, 164, 
	1, 164, 1, 164, 1, 164, 3, 164, 6507, 8, 164, 1, 165, 1, 165, 1, 165, 1, 
	165, 3, 165, 6513, 8, 165, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 
	5, 165, 6521, 8, 165, 10, 165, 12, 165, 6524, 9, 165, 1, 165, 1, 165, 1, 
	165, 1, 165, 1, 165, 5, 165, 6531, 8, 165, 10, 165, 12, 165, 6534, 9, 165, 
	3, 165, 6536, 8, 165, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 5, 165, 6543, 
	8, 165, 10, 165, 12, 165, 6546, 9, 165, 3, 165, 6548, 8, 165, 1, 165, 1, 
	165, 1, 165, 1, 165, 1, 165, 5, 165, 6555, 8, 165, 10, 165, 12, 165, 6558, 
	9, 165, 3, 165, 6560, 8, 165, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 5, 
	165, 6567, 8, 165, 10, 165, 12, 165, 6570, 9, 165, 1, 165, 1, 165, 1, 165, 
	3, 165, 6575, 8, 165, 1, 165, 1, 165, 1, 165, 3, 165, 6580, 8, 165, 1, 
	165, 1, 165, 1, 165, 1, 165, 3, 165, 6586, 8, 165, 1, 165, 1, 165, 1, 165, 
	1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 3, 165, 6598, 8, 
	165, 1, 166, 1, 166, 3, 166, 6602, 8, 166, 1, 166, 1, 166, 1, 166, 3, 166, 
	6607, 8, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 3, 166, 6614, 8, 
	166, 1, 166, 3, 166, 6617, 8, 166, 1, 167, 1, 167, 1, 167, 1, 168, 1, 168, 
	1, 168, 1, 169, 1, 169, 3, 169, 6627, 8, 169, 1, 170, 1, 170, 3, 170, 6631, 
	8, 170, 1, 170, 3, 170, 6634, 8, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 
	170, 1, 170, 5, 170, 6642, 8, 170, 10, 170, 12, 170, 6645, 9, 170, 3, 170, 
	6647, 8, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 
	170, 5, 170, 6657, 8, 170, 10, 170, 12, 170, 6660, 9, 170, 3, 170, 6662, 
	8, 170, 1, 170, 3, 170, 6665, 8, 170, 1, 170, 3, 170, 6668, 8, 170, 1, 
	170, 3, 170, 6671, 8, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 
	1, 170, 1, 170, 1, 170, 1, 170, 3, 170, 6683, 8, 170, 1, 170, 3, 170, 6686, 
	8, 170, 1, 170, 3, 170, 6689, 8, 170, 1, 170, 1, 170, 1, 170, 1, 171, 1, 
	171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 
	171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 3, 
	171, 6713, 8, 171, 1, 172, 1, 172, 3, 172, 6717, 8, 172, 1, 172, 1, 172, 
	1, 172, 3, 172, 6722, 8, 172, 1, 172, 1, 172, 1, 172, 1, 172, 1, 172, 1, 
	172, 1, 172, 1, 172, 1, 172, 3, 172, 6733, 8, 172, 1, 172, 1, 172, 1, 172, 
	1, 172, 1, 172, 1, 172, 3, 172, 6741, 8, 172, 1, 173, 1, 173, 1, 173, 1, 
	173, 1, 174, 1, 174, 1, 174, 1, 174, 1, 175, 1, 175, 3, 175, 6753, 8, 175, 
	1, 175, 3, 175, 6756, 8, 175, 1, 175, 1, 175, 1, 175, 3, 175, 6761, 8, 
	175, 1, 175, 1, 175, 3, 175, 6765, 8, 175, 1, 175, 3, 175, 6768, 8, 175, 
	1, 175, 3, 175, 6771, 8, 175, 1, 175, 3, 175, 6774, 8, 175, 1, 175, 3, 
	175, 6777, 8, 175, 1, 175, 3, 175, 6780, 8, 175, 1, 175, 1, 175, 1, 175, 
	1, 176, 1, 176, 3, 176, 6787, 8, 176, 1, 176, 1, 176, 1, 176, 1, 176, 1, 
	176, 1, 176, 1, 176, 3, 176, 6796, 8, 176, 1, 176, 1, 176, 1, 176, 1, 176, 
	1, 176, 3, 176, 6803, 8, 176, 1, 176, 3, 176, 6806, 8, 176, 1, 176, 3, 
	176, 6809, 8, 176, 1, 177, 1, 177, 1, 177, 1, 177, 1, 177, 1, 177, 1, 177, 
	1, 177, 1, 177, 1, 177, 1, 177, 1, 177, 1, 177, 1, 177, 1, 177, 1, 177, 
	3, 177, 6827, 8, 177, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 
	178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 
	178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 
	178, 1, 178, 3, 178, 6855, 8, 178, 1, 179, 1, 179, 3, 179, 6859, 8, 179, 
	1, 179, 1, 179, 1, 179, 3, 179, 6864, 8, 179, 1, 179, 1, 179, 1, 179, 1, 
	179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 3, 179, 6875, 8, 179, 1, 179, 
	1, 179, 3, 179, 6879, 8, 179, 1, 179, 1, 179, 1, 179, 3, 179, 6884, 8, 
	179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 
	179, 1, 179, 1, 179, 1, 179, 3, 179, 6898, 8, 179, 3, 179, 6900, 8, 179, 
	1, 180, 1, 180, 3, 180, 6904, 8, 180, 1, 180, 1, 180, 3, 180, 6908, 8, 
	180, 1, 180, 1, 180, 1, 180, 1, 180, 3, 180, 6914, 8, 180, 1, 180, 1, 180, 
	1, 180, 3, 180, 6919, 8, 180, 1, 180, 1, 180, 1, 180, 3, 180, 6924, 8, 
	180, 1, 180, 1, 180, 1, 180, 3, 180, 6929, 8, 180, 1, 180, 3, 180, 6932, 
	8, 180, 1, 180, 1, 180, 1, 180, 1, 181, 1, 181, 1, 182, 1, 182, 1, 182, 
	1, 182, 1, 183, 1, 183, 3, 183, 6945, 8, 183, 1, 184, 1, 184, 3, 184, 6949, 
	8, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 5, 184, 6957, 8, 
	184, 10, 184, 12, 184, 6960, 9, 184, 3, 184, 6962, 8, 184, 1, 184, 1, 184, 
	1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 5, 184, 6972, 8, 184, 10, 
	184, 12, 184, 6975, 9, 184, 3, 184, 6977, 8, 184, 1, 184, 3, 184, 6980, 
	8, 184, 1, 184, 1, 184, 3, 184, 6984, 8, 184, 1, 184, 1, 184, 1, 184, 1, 
	184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 3, 
	184, 6998, 8, 184, 1, 184, 3, 184, 7001, 8, 184, 1, 184, 3, 184, 7004, 
	8, 184, 1, 184, 3, 184, 7007, 8, 184, 1, 184, 1, 184, 1, 184, 1, 185, 1, 
	185, 1, 185, 1, 185, 3, 185, 7016, 8, 185, 1, 185, 1, 185, 1, 185, 1, 185, 
	1, 185, 1, 185, 5, 185, 7024, 8, 185, 10, 185, 12, 185, 7027, 9, 185, 1, 
	185, 1, 185, 1, 185, 1, 185, 1, 185, 5, 185, 7034, 8, 185, 10, 185, 12, 
	185, 7037, 9, 185, 3, 185, 7039, 8, 185, 1, 185, 1, 185, 1, 185, 1, 185, 
	1, 185, 5, 185, 7046, 8, 185, 10, 185, 12, 185, 7049, 9, 185, 3, 185, 7051, 
	8, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 5, 185, 7058, 8, 185, 10, 
	185, 12, 185, 7061, 9, 185, 3, 185, 7063, 8, 185, 1, 185, 1, 185, 1, 185, 
	1, 185, 1, 185, 5, 185, 7070, 8, 185, 10, 185, 12, 185, 7073, 9, 185, 1, 
	185, 1, 185, 1, 185, 3, 185, 7078, 8, 185, 1, 185, 1, 185, 1, 185, 3, 185, 
	7083, 8, 185, 1, 185, 1, 185, 1, 185, 1, 185, 3, 185, 7089, 8, 185, 1, 
	185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 
	185, 3, 185, 7101, 8, 185, 1, 186, 1, 186, 3, 186, 7105, 8, 186, 1, 186, 
	1, 186, 1, 186, 1, 186, 1, 186, 3, 186, 7112, 8, 186, 1, 186, 3, 186, 7115, 
	8, 186, 1, 186, 1, 186, 1, 186, 1, 186, 3, 186, 7121, 8, 186, 3, 186, 7123, 
	8, 186, 1, 186, 1, 186, 1, 186, 3, 186, 7128, 8, 186, 1, 186, 3, 186, 7131, 
	8, 186, 1, 186, 1, 186, 4, 186, 7135, 8, 186, 11, 186, 12, 186, 7136, 3, 
	186, 7139, 8, 186, 1, 187, 1, 187, 3, 187, 7143, 8, 187, 1, 187, 1, 187, 
	3, 187, 7147, 8, 187, 1, 187, 1, 187, 3, 187, 7151, 8, 187, 1, 187, 1, 
	187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 5, 
	187, 7163, 8, 187, 10, 187, 12, 187, 7166, 9, 187, 1, 187, 1, 187, 3, 187, 
	7170, 8, 187, 1, 187, 1, 187, 1, 187, 3, 187, 7175, 8, 187, 1, 188, 1, 
	188, 3, 188, 7179, 8, 188, 1, 188, 1, 188, 1, 188, 1, 188, 3, 188, 7185, 
	8, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 5, 188, 7193, 8, 
	188, 10, 188, 12, 188, 7196, 9, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 
	188, 1, 188, 3, 188, 7204, 8, 188, 1, 189, 1, 189, 3, 189, 7208, 8, 189, 
	1, 189, 3, 189, 7211, 8, 189, 1, 189, 1, 189, 3, 189, 7215, 8, 189, 1, 
	189, 1, 189, 3, 189, 7219, 8, 189, 1, 189, 1, 189, 1, 189, 3, 189, 7224, 
	8, 189, 1, 189, 1, 189, 1, 189, 3, 189, 7229, 8, 189, 1, 189, 1, 189, 1, 
	189, 3, 189, 7234, 8, 189, 1, 189, 3, 189, 7237, 8, 189, 1, 189, 3, 189, 
	7240, 8, 189, 1, 189, 3, 189, 7243, 8, 189, 1, 190, 1, 190, 3, 190, 7247, 
	8, 190, 1, 190, 1, 190, 1, 190, 3, 190, 7252, 8, 190, 1, 190, 1, 190, 1, 
	190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 
	190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 3, 
	190, 7274, 8, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 3, 190, 
	7282, 8, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 3, 
	190, 7291, 8, 190, 3, 190, 7293, 8, 190, 1, 190, 1, 190, 1, 190, 1, 190, 
	1, 190, 1, 190, 3, 190, 7301, 8, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 
	190, 1, 190, 3, 190, 7309, 8, 190, 1, 190, 1, 190, 1, 190, 3, 190, 7314, 
	8, 190, 1, 190, 1, 190, 1, 190, 3, 190, 7319, 8, 190, 1, 190, 1, 190, 1, 
	190, 1, 190, 1, 190, 1, 190, 3, 190, 7327, 8, 190, 1, 190, 1, 190, 1, 190, 
	3, 190, 7332, 8, 190, 1, 190, 1, 190, 1, 190, 3, 190, 7337, 8, 190, 1, 
	191, 1, 191, 1, 192, 1, 192, 3, 192, 7343, 8, 192, 1, 192, 1, 192, 1, 192, 
	3, 192, 7348, 8, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 
	192, 1, 192, 1, 192, 1, 192, 1, 192, 3, 192, 7361, 8, 192, 1, 192, 1, 192, 
	1, 192, 3, 192, 7366, 8, 192, 1, 192, 1, 192, 1, 192, 3, 192, 7371, 8, 
	192, 1, 192, 1, 192, 1, 192, 3, 192, 7376, 8, 192, 1, 192, 1, 192, 1, 192, 
	1, 192, 1, 192, 1, 192, 3, 192, 7384, 8, 192, 1, 192, 3, 192, 7387, 8, 
	192, 1, 192, 1, 192, 3, 192, 7391, 8, 192, 1, 192, 1, 192, 1, 192, 3, 192, 
	7396, 8, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 
	192, 1, 192, 1, 192, 1, 192, 3, 192, 7409, 8, 192, 1, 192, 1, 192, 1, 192, 
	3, 192, 7414, 8, 192, 1, 192, 1, 192, 1, 192, 3, 192, 7419, 8, 192, 1, 
	192, 1, 192, 1, 192, 3, 192, 7424, 8, 192, 1, 192, 1, 192, 1, 192, 1, 192, 
	1, 192, 1, 192, 3, 192, 7432, 8, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 
	192, 1, 192, 3, 192, 7440, 8, 192, 1, 192, 1, 192, 1, 192, 3, 192, 7445, 
	8, 192, 1, 192, 1, 192, 1, 192, 3, 192, 7450, 8, 192, 1, 192, 3, 192, 7453, 
	8, 192, 1, 192, 1, 192, 1, 192, 3, 192, 7458, 8, 192, 1, 192, 1, 192, 1, 
	192, 3, 192, 7463, 8, 192, 1, 192, 3, 192, 7466, 8, 192, 3, 192, 7468, 
	8, 192, 1, 193, 1, 193, 3, 193, 7472, 8, 193, 1, 193, 1, 193, 1, 193, 3, 
	193, 7477, 8, 193, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 
	1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 
	1, 193, 1, 193, 1, 193, 3, 193, 7498, 8, 193, 1, 193, 1, 193, 1, 193, 3, 
	193, 7503, 8, 193, 1, 193, 1, 193, 1, 193, 3, 193, 7508, 8, 193, 1, 193, 
	1, 193, 1, 193, 3, 193, 7513, 8, 193, 1, 193, 1, 193, 1, 193, 3, 193, 7518, 
	8, 193, 1, 193, 1, 193, 1, 193, 3, 193, 7523, 8, 193, 1, 193, 1, 193, 1, 
	193, 3, 193, 7528, 8, 193, 1, 193, 1, 193, 1, 193, 3, 193, 7533, 8, 193, 
	1, 193, 1, 193, 1, 193, 3, 193, 7538, 8, 193, 1, 194, 1, 194, 3, 194, 7542, 
	8, 194, 1, 194, 1, 194, 1, 194, 3, 194, 7547, 8, 194, 1, 194, 1, 194, 1, 
	194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 3, 
	194, 7560, 8, 194, 1, 194, 1, 194, 1, 194, 3, 194, 7565, 8, 194, 1, 194, 
	3, 194, 7568, 8, 194, 1, 195, 1, 195, 1, 195, 1, 195, 1, 196, 1, 196, 1, 
	197, 1, 197, 3, 197, 7578, 8, 197, 1, 197, 3, 197, 7581, 8, 197, 1, 197, 
	1, 197, 1, 198, 1, 198, 3, 198, 7587, 8, 198, 1, 198, 3, 198, 7590, 8, 
	198, 1, 198, 1, 198, 1, 199, 1, 199, 3, 199, 7596, 8, 199, 1, 199, 1, 199, 
	3, 199, 7600, 8, 199, 1, 199, 1, 199, 3, 199, 7604, 8, 199, 1, 199, 3, 
	199, 7607, 8, 199, 1, 199, 3, 199, 7610, 8, 199, 1, 199, 3, 199, 7613, 
	8, 199, 1, 200, 1, 200, 3, 200, 7617, 8, 200, 1, 200, 1, 200, 1, 200, 3, 
	200, 7622, 8, 200, 1, 200, 1, 200, 1, 200, 1, 200, 3, 200, 7628, 8, 200, 
	1, 200, 1, 200, 1, 200, 3, 200, 7633, 8, 200, 1, 200, 3, 200, 7636, 8, 
	200, 1, 201, 1, 201, 3, 201, 7640, 8, 201, 1, 201, 1, 201, 1, 201, 3, 201, 
	7645, 8, 201, 1, 202, 1, 202, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 
	203, 1, 203, 3, 203, 7656, 8, 203, 1, 203, 1, 203, 1, 203, 1, 203, 3, 203, 
	7662, 8, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 
	203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 3, 203, 7677, 8, 203, 1, 203, 
	1, 203, 1, 203, 1, 203, 3, 203, 7683, 8, 203, 1, 203, 1, 203, 1, 203, 1, 
	203, 3, 203, 7689, 8, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 
	1, 203, 3, 203, 7698, 8, 203, 1, 203, 1, 203, 1, 203, 1, 203, 3, 203, 7704, 
	8, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 3, 203, 
	7713, 8, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 
	203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 
	203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 
	203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 
	203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 
	203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 
	203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 
	203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 
	203, 3, 203, 7786, 8, 203, 1, 204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 204, 
	1, 204, 3, 204, 7795, 8, 204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 
	204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 
	204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 204, 3, 
	204, 7820, 8, 204, 1, 205, 1, 205, 1, 205, 1, 205, 1, 205, 1, 205, 1, 205, 
	1, 205, 3, 205, 7830, 8, 205, 1, 206, 1, 206, 1, 206, 1, 206, 1, 207, 1, 
	207, 1, 207, 1, 207, 1, 208, 1, 208, 1, 208, 1, 208, 1, 209, 1, 209, 1, 
	209, 1, 209, 3, 209, 7848, 8, 209, 1, 209, 1, 209, 3, 209, 7852, 8, 209, 
	1, 209, 1, 209, 3, 209, 7856, 8, 209, 3, 209, 7858, 8, 209, 1, 209, 3, 
	209, 7861, 8, 209, 3, 209, 7863, 8, 209, 1, 209, 1, 209, 1, 210, 1, 210, 
	1, 210, 1, 210, 1, 211, 1, 211, 1, 211, 1, 211, 1, 212, 1, 212, 1, 212, 
	1, 212, 1, 213, 1, 213, 1, 213, 1, 213, 1, 214, 1, 214, 1, 214, 1, 214, 
	1, 214, 1, 214, 1, 214, 1, 214, 1, 214, 1, 214, 1, 214, 1, 214, 3, 214, 
	7895, 8, 214, 1, 214, 3, 214, 7898, 8, 214, 1, 214, 1, 214, 3, 214, 7902, 
	8, 214, 1, 214, 3, 214, 7905, 8, 214, 1, 214, 1, 214, 1, 214, 1, 214, 1, 
	214, 1, 214, 3, 214, 7913, 8, 214, 1, 214, 1, 214, 1, 214, 1, 214, 3, 214, 
	7919, 8, 214, 1, 214, 1, 214, 1, 214, 3, 214, 7924, 8, 214, 1, 214, 1, 
	214, 1, 214, 3, 214, 7929, 8, 214, 3, 214, 7931, 8, 214, 3, 214, 7933, 
	8, 214, 1, 214, 1, 214, 1, 214, 1, 214, 1, 214, 1, 214, 1, 214, 1, 214, 
	1, 214, 1, 214, 1, 214, 1, 214, 3, 214, 7947, 8, 214, 1, 214, 3, 214, 7950, 
	8, 214, 1, 214, 1, 214, 1, 214, 1, 214, 1, 214, 3, 214, 7957, 8, 214, 1, 
	214, 1, 214, 1, 214, 3, 214, 7962, 8, 214, 1, 214, 1, 214, 1, 214, 3, 214, 
	7967, 8, 214, 1, 214, 3, 214, 7970, 8, 214, 3, 214, 7972, 8, 214, 1, 215, 
	1, 215, 1, 216, 1, 216, 1, 216, 1, 216, 1, 217, 1, 217, 1, 217, 1, 217, 
	1, 218, 1, 218, 1, 218, 1, 218, 1, 219, 1, 219, 1, 219, 1, 219, 1, 220, 
	1, 220, 1, 220, 1, 220, 1, 220, 3, 220, 7997, 8, 220, 1, 220, 1, 220, 1, 
	220, 1, 220, 1, 220, 1, 220, 1, 220, 3, 220, 8006, 8, 220, 1, 220, 3, 220, 
	8009, 8, 220, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 3, 
	220, 8018, 8, 220, 1, 220, 3, 220, 8021, 8, 220, 1, 220, 3, 220, 8024, 
	8, 220, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 3, 220, 
	8033, 8, 220, 1, 220, 3, 220, 8036, 8, 220, 1, 220, 3, 220, 8039, 8, 220, 
	1, 220, 1, 220, 3, 220, 8043, 8, 220, 1, 221, 1, 221, 3, 221, 8047, 8, 
	221, 1, 221, 3, 221, 8050, 8, 221, 1, 221, 1, 221, 3, 221, 8054, 8, 221, 
	1, 221, 1, 221, 3, 221, 8058, 8, 221, 1, 221, 3, 221, 8061, 8, 221, 1, 
	221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 
	221, 5, 221, 8073, 8, 221, 10, 221, 12, 221, 8076, 9, 221, 3, 221, 8078, 
	8, 221, 1, 221, 3, 221, 8081, 8, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 
	221, 1, 221, 3, 221, 8089, 8, 221, 1, 221, 3, 221, 8092, 8, 221, 1, 221, 
	3, 221, 8095, 8, 221, 1, 221, 1, 221, 3, 221, 8099, 8, 221, 1, 221, 3, 
	221, 8102, 8, 221, 1, 221, 1, 221, 3, 221, 8106, 8, 221, 1, 221, 1, 221, 
	1, 221, 3, 221, 8111, 8, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 
	221, 1, 221, 1, 221, 1, 221, 1, 221, 5, 221, 8123, 8, 221, 10, 221, 12, 
	221, 8126, 9, 221, 3, 221, 8128, 8, 221, 1, 221, 3, 221, 8131, 8, 221, 
	1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 3, 221, 8139, 8, 221, 1, 
	221, 3, 221, 8142, 8, 221, 1, 221, 3, 221, 8145, 8, 221, 3, 221, 8147, 
	8, 221, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 
	1, 222, 3, 222, 8158, 8, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 
	222, 1, 222, 1, 222, 1, 222, 3, 222, 8169, 8, 222, 1, 223, 1, 223, 1, 223, 
	1, 223, 1, 223, 1, 223, 3, 223, 8177, 8, 223, 1, 223, 1, 223, 1, 223, 3, 
	223, 8182, 8, 223, 1, 224, 1, 224, 1, 224, 1, 224, 1, 225, 1, 225, 3, 225, 
	8190, 8, 225, 1, 225, 1, 225, 1, 225, 3, 225, 8195, 8, 225, 1, 225, 1, 
	225, 1, 225, 1, 225, 1, 225, 1, 225, 1, 225, 1, 225, 1, 225, 1, 225, 1, 
	225, 1, 225, 1, 225, 1, 225, 1, 225, 1, 225, 1, 225, 1, 225, 1, 225, 3, 
	225, 8216, 8, 225, 1, 225, 3, 225, 8219, 8, 225, 1, 226, 1, 226, 1, 226, 
	1, 227, 1, 227, 1, 227, 1, 227, 1, 228, 1, 228, 1, 228, 1, 228, 1, 229, 
	1, 229, 1, 229, 1, 229, 1, 230, 1, 230, 1, 230, 1, 230, 1, 230, 1, 230, 
	1, 230, 1, 230, 1, 230, 1, 230, 1, 230, 1, 230, 1, 230, 1, 230, 3, 230, 
	8250, 8, 230, 1, 230, 1, 230, 1, 231, 1, 231, 3, 231, 8256, 8, 231, 1, 
	231, 1, 231, 3, 231, 8260, 8, 231, 1, 231, 1, 231, 3, 231, 8264, 8, 231, 
	1, 231, 1, 231, 1, 231, 1, 231, 3, 231, 8270, 8, 231, 1, 231, 3, 231, 8273, 
	8, 231, 1, 231, 3, 231, 8276, 8, 231, 1, 231, 3, 231, 8279, 8, 231, 1, 
	231, 1, 231, 3, 231, 8283, 8, 231, 1, 231, 1, 231, 3, 231, 8287, 8, 231, 
	1, 231, 1, 231, 3, 231, 8291, 8, 231, 1, 231, 1, 231, 1, 231, 1, 231, 1, 
	231, 3, 231, 8298, 8, 231, 1, 231, 3, 231, 8301, 8, 231, 1, 231, 3, 231, 
	8304, 8, 231, 1, 231, 1, 231, 3, 231, 8308, 8, 231, 1, 231, 1, 231, 1, 
	231, 1, 231, 3, 231, 8314, 8, 231, 1, 231, 1, 231, 1, 231, 1, 231, 3, 231, 
	8320, 8, 231, 1, 231, 1, 231, 1, 231, 1, 231, 1, 231, 1, 231, 3, 231, 8328, 
	8, 231, 1, 231, 1, 231, 1, 231, 1, 231, 3, 231, 8334, 8, 231, 1, 231, 3, 
	231, 8337, 8, 231, 1, 231, 3, 231, 8340, 8, 231, 1, 231, 3, 231, 8343, 
	8, 231, 3, 231, 8345, 8, 231, 1, 232, 1, 232, 1, 233, 1, 233, 1, 233, 3, 
	233, 8352, 8, 233, 1, 233, 3, 233, 8355, 8, 233, 1, 234, 3, 234, 8358, 
	8, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 5, 234, 8365, 8, 234, 10, 
	234, 12, 234, 8368, 9, 234, 1, 234, 1, 234, 1, 235, 3, 235, 8373, 8, 235, 
	1, 235, 1, 235, 1, 235, 1, 235, 1, 235, 1, 235, 1, 235, 1, 235, 1, 235, 
	5, 235, 8384, 8, 235, 10, 235, 12, 235, 8387, 9, 235, 1, 235, 1, 235, 1, 
	236, 1, 236, 1, 236, 1, 236, 1, 237, 1, 237, 1, 237, 1, 237, 1, 238, 3, 
	238, 8400, 8, 238, 1, 238, 1, 238, 1, 238, 1, 238, 1, 238, 3, 238, 8407, 
	8, 238, 1, 239, 1, 239, 1, 239, 1, 240, 1, 240, 1, 240, 1, 241, 1, 241, 
	1, 241, 1, 241, 1, 241, 1, 241, 1, 241, 1, 241, 1, 241, 1, 241, 1, 241, 
	1, 241, 1, 241, 1, 241, 3, 241, 8429, 8, 241, 3, 241, 8431, 8, 241, 1, 
	242, 1, 242, 1, 242, 1, 243, 1, 243, 3, 243, 8438, 8, 243, 1, 243, 1, 243, 
	3, 243, 8442, 8, 243, 1, 243, 1, 243, 1, 243, 3, 243, 8447, 8, 243, 1, 
	243, 3, 243, 8450, 8, 243, 1, 243, 3, 243, 8453, 8, 243, 1, 243, 1, 243, 
	1, 243, 3, 243, 8458, 8, 243, 3, 243, 8460, 8, 243, 1, 243, 3, 243, 8463, 
	8, 243, 1, 244, 1, 244, 3, 244, 8467, 8, 244, 1, 244, 3, 244, 8470, 8, 
	244, 1, 244, 3, 244, 8473, 8, 244, 1, 244, 3, 244, 8476, 8, 244, 1, 244, 
	3, 244, 8479, 8, 244, 1, 244, 3, 244, 8482, 8, 244, 1, 244, 3, 244, 8485, 
	8, 244, 1, 245, 1, 245, 3, 245, 8489, 8, 245, 1, 246, 1, 246, 1, 246, 5, 
	246, 8494, 8, 246, 10, 246, 12, 246, 8497, 9, 246, 1, 247, 1, 247, 3, 247, 
	8501, 8, 247, 1, 247, 3, 247, 8504, 8, 247, 1, 247, 1, 247, 3, 247, 8508, 
	8, 247, 1, 247, 1, 247, 1, 247, 1, 247, 1, 247, 3, 247, 8515, 8, 247, 1, 
	247, 3, 247, 8518, 8, 247, 1, 247, 1, 247, 1, 247, 1, 247, 1, 247, 1, 247, 
	3, 247, 8526, 8, 247, 1, 247, 1, 247, 1, 247, 3, 247, 8531, 8, 247, 1, 
	247, 1, 247, 1, 247, 3, 247, 8536, 8, 247, 1, 247, 3, 247, 8539, 8, 247, 
	1, 247, 3, 247, 8542, 8, 247, 1, 247, 3, 247, 8545, 8, 247, 1, 247, 3, 
	247, 8548, 8, 247, 1, 247, 3, 247, 8551, 8, 247, 1, 247, 3, 247, 8554, 
	8, 247, 1, 248, 1, 248, 3, 248, 8558, 8, 248, 1, 248, 1, 248, 3, 248, 8562, 
	8, 248, 1, 248, 1, 248, 1, 248, 1, 248, 3, 248, 8568, 8, 248, 1, 248, 1, 
	248, 3, 248, 8572, 8, 248, 1, 248, 1, 248, 3, 248, 8576, 8, 248, 1, 248, 
	1, 248, 1, 248, 1, 248, 1, 248, 5, 248, 8583, 8, 248, 10, 248, 12, 248, 
	8586, 9, 248, 3, 248, 8588, 8, 248, 3, 248, 8590, 8, 248, 1, 249, 1, 249, 
	1, 250, 1, 250, 1, 250, 5, 250, 8597, 8, 250, 10, 250, 12, 250, 8600, 9, 
	250, 1, 251, 1, 251, 1, 251, 5, 251, 8605, 8, 251, 10, 251, 12, 251, 8608, 
	9, 251, 1, 252, 1, 252, 1, 252, 1, 252, 1, 253, 1, 253, 3, 253, 8616, 8, 
	253, 1, 253, 1, 253, 3, 253, 8620, 8, 253, 1, 253, 1, 253, 1, 253, 1, 253, 
	1, 253, 1, 253, 1, 253, 3, 253, 8629, 8, 253, 1, 253, 1, 253, 1, 253, 3, 
	253, 8634, 8, 253, 1, 253, 1, 253, 1, 253, 3, 253, 8639, 8, 253, 1, 253, 
	3, 253, 8642, 8, 253, 1, 253, 1, 253, 1, 253, 3, 253, 8647, 8, 253, 1, 
	253, 1, 253, 1, 253, 3, 253, 8652, 8, 253, 1, 253, 1, 253, 1, 253, 3, 253, 
	8657, 8, 253, 1, 253, 3, 253, 8660, 8, 253, 1, 253, 3, 253, 8663, 8, 253, 
	1, 253, 1, 253, 1, 253, 1, 253, 5, 253, 8669, 8, 253, 10, 253, 12, 253, 
	8672, 9, 253, 3, 253, 8674, 8, 253, 1, 253, 1, 253, 3, 253, 8678, 8, 253, 
	1, 253, 1, 253, 1, 253, 1, 254, 1, 254, 1, 254, 3, 254, 8686, 8, 254, 1, 
	255, 1, 255, 1, 255, 1, 255, 3, 255, 8692, 8, 255, 1, 255, 1, 255, 1, 256, 
	1, 256, 3, 256, 8698, 8, 256, 1, 256, 1, 256, 3, 256, 8702, 8, 256, 1, 
	256, 1, 256, 3, 256, 8706, 8, 256, 1, 256, 3, 256, 8709, 8, 256, 1, 256, 
	3, 256, 8712, 8, 256, 1, 257, 1, 257, 1, 257, 1, 257, 1, 258, 1, 258, 3, 
	258, 8720, 8, 258, 1, 258, 3, 258, 8723, 8, 258, 1, 258, 3, 258, 8726, 
	8, 258, 1, 258, 1, 258, 3, 258, 8730, 8, 258, 1, 258, 1, 258, 1, 258, 1, 
	258, 1, 258, 3, 258, 8737, 8, 258, 1, 258, 5, 258, 8740, 8, 258, 10, 258, 
	12, 258, 8743, 9, 258, 1, 258, 3, 258, 8746, 8, 258, 1, 258, 3, 258, 8749, 
	8, 258, 1, 258, 3, 258, 8752, 8, 258, 1, 258, 3, 258, 8755, 8, 258, 1, 
	258, 1, 258, 1, 258, 1, 259, 1, 259, 3, 259, 8762, 8, 259, 1, 259, 1, 259, 
	3, 259, 8766, 8, 259, 1, 259, 1, 259, 3, 259, 8770, 8, 259, 1, 259, 4, 
	259, 8773, 8, 259, 11, 259, 12, 259, 8774, 3, 259, 8777, 8, 259, 1, 259, 
	5, 259, 8780, 8, 259, 10, 259, 12, 259, 8783, 9, 259, 1, 260, 1, 260, 1, 
	260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 
	260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 3, 260, 8802, 8, 260, 1, 260, 
	1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 
	1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 3, 260, 8820, 8, 260, 1, 
	261, 1, 261, 1, 261, 1, 261, 1, 261, 1, 261, 1, 261, 1, 261, 1, 261, 1, 
	261, 3, 261, 8832, 8, 261, 3, 261, 8834, 8, 261, 1, 262, 1, 262, 1, 262, 
	1, 262, 1, 262, 1, 262, 1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 
	1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 
	1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 
	1, 263, 1, 263, 1, 263, 3, 263, 8869, 8, 263, 1, 264, 1, 264, 1, 265, 1, 
	265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 
	265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 
	265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 265, 1, 
	265, 1, 265, 3, 265, 8903, 8, 265, 1, 266, 1, 266, 1, 266, 1, 266, 1, 266, 
	3, 266, 8910, 8, 266, 1, 267, 1, 267, 1, 267, 3, 267, 8915, 8, 267, 1, 
	267, 1, 267, 1, 268, 1, 268, 1, 268, 3, 268, 8922, 8, 268, 1, 268, 1, 268, 
	3, 268, 8926, 8, 268, 1, 269, 1, 269, 1, 269, 1, 269, 3, 269, 8932, 8, 
	269, 1, 269, 1, 269, 3, 269, 8936, 8, 269, 1, 270, 1, 270, 1, 270, 1, 270, 
	3, 270, 8942, 8, 270, 1, 270, 1, 270, 1, 271, 1, 271, 1, 271, 1, 271, 3, 
	271, 8950, 8, 271, 1, 271, 1, 271, 1, 272, 1, 272, 1, 272, 3, 272, 8957, 
	8, 272, 1, 272, 1, 272, 1, 272, 1, 273, 1, 273, 3, 273, 8964, 8, 273, 1, 
	273, 1, 273, 3, 273, 8968, 8, 273, 1, 273, 1, 273, 1, 274, 1, 274, 1, 274, 
	1, 274, 1, 274, 1, 275, 1, 275, 1, 275, 1, 275, 1, 275, 1, 276, 1, 276, 
	1, 276, 1, 276, 3, 276, 8986, 8, 276, 1, 276, 1, 276, 1, 277, 1, 277, 1, 
	277, 1, 277, 3, 277, 8994, 8, 277, 1, 277, 1, 277, 1, 278, 1, 278, 1, 278, 
	3, 278, 9001, 8, 278, 1, 278, 1, 278, 1, 279, 1, 279, 1, 279, 3, 279, 9008, 
	8, 279, 1, 279, 1, 279, 1, 279, 1, 280, 1, 280, 1, 280, 1, 280, 3, 280, 
	9017, 8, 280, 1, 280, 1, 280, 1, 281, 1, 281, 1, 281, 1, 281, 1, 281, 1, 
	282, 1, 282, 1, 282, 3, 282, 9029, 8, 282, 1, 282, 1, 282, 1, 283, 1, 283, 
	1, 283, 1, 283, 1, 283, 3, 283, 9038, 8, 283, 1, 283, 1, 283, 1, 284, 1, 
	284, 1, 284, 3, 284, 9045, 8, 284, 1, 284, 1, 284, 3, 284, 9049, 8, 284, 
	1, 285, 1, 285, 1, 285, 3, 285, 9054, 8, 285, 1, 285, 1, 285, 3, 285, 9058, 
	8, 285, 1, 286, 1, 286, 1, 286, 1, 286, 3, 286, 9064, 8, 286, 1, 286, 1, 
	286, 1, 287, 1, 287, 1, 287, 1, 287, 1, 288, 1, 288, 1, 288, 3, 288, 9075, 
	8, 288, 1, 288, 1, 288, 1, 289, 1, 289, 1, 289, 3, 289, 9082, 8, 289, 1, 
	289, 1, 289, 1, 290, 1, 290, 1, 290, 3, 290, 9089, 8, 290, 1, 290, 1, 290, 
	3, 290, 9093, 8, 290, 1, 291, 1, 291, 1, 291, 3, 291, 9098, 8, 291, 1, 
	291, 1, 291, 1, 292, 1, 292, 1, 292, 3, 292, 9105, 8, 292, 1, 292, 1, 292, 
	1, 293, 1, 293, 1, 293, 3, 293, 9112, 8, 293, 1, 293, 1, 293, 1, 294, 1, 
	294, 1, 294, 3, 294, 9119, 8, 294, 1, 294, 1, 294, 1, 295, 1, 295, 1, 295, 
	3, 295, 9126, 8, 295, 1, 295, 1, 295, 1, 296, 1, 296, 1, 297, 1, 297, 3, 
	297, 9134, 8, 297, 1, 297, 1, 297, 1, 298, 1, 298, 1, 298, 1, 298, 3, 298, 
	9142, 8, 298, 1, 299, 1, 299, 1, 299, 1, 299, 1, 300, 1, 300, 1, 300, 1, 
	300, 1, 301, 1, 301, 1, 301, 1, 301, 1, 302, 1, 302, 1, 302, 1, 302, 1, 
	303, 1, 303, 1, 303, 1, 303, 1, 303, 3, 303, 9165, 8, 303, 1, 304, 1, 304, 
	1, 304, 1, 304, 1, 305, 1, 305, 1, 305, 1, 305, 1, 306, 1, 306, 3, 306, 
	9177, 8, 306, 1, 306, 1, 306, 1, 306, 3, 306, 9182, 8, 306, 1, 306, 1, 
	306, 1, 307, 1, 307, 1, 307, 1, 307, 1, 307, 1, 308, 1, 308, 1, 308, 1, 
	308, 1, 309, 1, 309, 1, 309, 1, 309, 1, 310, 1, 310, 1, 310, 1, 311, 1, 
	311, 1, 311, 1, 312, 1, 312, 1, 312, 1, 312, 1, 313, 1, 313, 1, 313, 1, 
	314, 1, 314, 1, 315, 1, 315, 1, 315, 1, 315, 1, 315, 1, 315, 1, 315, 1, 
	315, 1, 315, 1, 315, 1, 315, 1, 315, 1, 315, 1, 315, 1, 315, 1, 315, 1, 
	315, 1, 315, 1, 315, 1, 315, 1, 315, 1, 315, 1, 315, 1, 315, 1, 315, 3, 
	315, 9239, 8, 315, 1, 316, 1, 316, 1, 316, 1, 316, 1, 317, 1, 317, 3, 317, 
	9247, 8, 317, 1, 317, 1, 317, 1, 317, 1, 317, 1, 317, 3, 317, 9254, 8, 
	317, 1, 318, 1, 318, 1, 318, 1, 318, 1, 318, 1, 319, 1, 319, 1, 319, 1, 
	319, 1, 319, 1, 320, 1, 320, 3, 320, 9268, 8, 320, 1, 320, 1, 320, 1, 320, 
	1, 321, 1, 321, 1, 321, 1, 321, 1, 321, 1, 322, 1, 322, 1, 322, 1, 322, 
	1, 322, 1, 323, 1, 323, 1, 323, 1, 323, 1, 323, 1, 324, 1, 324, 1, 324, 
	1, 324, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 326, 1, 326, 1, 326, 
	1, 326, 1, 326, 1, 326, 3, 326, 9303, 8, 326, 1, 327, 1, 327, 1, 327, 1, 
	327, 1, 327, 1, 327, 1, 328, 1, 328, 1, 328, 1, 328, 1, 329, 1, 329, 1, 
	329, 1, 329, 1, 329, 1, 329, 1, 330, 1, 330, 1, 330, 1, 330, 1, 331, 1, 
	331, 1, 331, 1, 331, 1, 331, 1, 332, 1, 332, 1, 332, 1, 332, 1, 333, 1, 
	333, 1, 333, 1, 333, 1, 334, 1, 334, 1, 334, 1, 334, 1, 335, 1, 335, 1, 
	335, 1, 335, 1, 335, 1, 335, 3, 335, 9348, 8, 335, 1, 336, 1, 336, 1, 336, 
	1, 336, 1, 337, 1, 337, 1, 337, 1, 337, 1, 338, 1, 338, 1, 338, 1, 338, 
	1, 339, 1, 339, 1, 339, 1, 339, 1, 340, 1, 340, 1, 340, 1, 340, 1, 341, 
	1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 
	1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 
	1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 
	1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 
	1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 
	1, 341, 1, 341, 1, 341, 3, 341, 9419, 8, 341, 1, 342, 1, 342, 1, 342, 3, 
	342, 9424, 8, 342, 1, 342, 1, 342, 1, 342, 1, 342, 3, 342, 9430, 8, 342, 
	1, 342, 1, 342, 3, 342, 9434, 8, 342, 1, 342, 1, 342, 3, 342, 9438, 8, 
	342, 1, 342, 1, 342, 1, 342, 3, 342, 9443, 8, 342, 1, 342, 3, 342, 9446, 
	8, 342, 3, 342, 9448, 8, 342, 1, 343, 1, 343, 1, 343, 3, 343, 9453, 8, 
	343, 1, 344, 1, 344, 1, 344, 1, 344, 1, 345, 1, 345, 1, 345, 1, 345, 3, 
	345, 9463, 8, 345, 1, 346, 1, 346, 3, 346, 9467, 8, 346, 1, 346, 1, 346, 
	3, 346, 9471, 8, 346, 1, 346, 3, 346, 9474, 8, 346, 1, 346, 3, 346, 9477, 
	8, 346, 1, 346, 3, 346, 9480, 8, 346, 1, 347, 1, 347, 1, 347, 1, 347, 1, 
	347, 1, 347, 1, 347, 1, 348, 1, 348, 1, 348, 1, 348, 1, 348, 1, 348, 1, 
	348, 1, 349, 1, 349, 1, 349, 1, 349, 1, 349, 1, 349, 1, 349, 1, 349, 1, 
	349, 1, 349, 1, 349, 1, 349, 1, 349, 1, 349, 1, 349, 1, 349, 3, 349, 9512, 
	8, 349, 1, 350, 1, 350, 1, 350, 1, 350, 3, 350, 9518, 8, 350, 1, 351, 1, 
	351, 3, 351, 9522, 8, 351, 1, 351, 1, 351, 1, 351, 3, 351, 9527, 8, 351, 
	1, 351, 1, 351, 1, 351, 1, 351, 3, 351, 9533, 8, 351, 1, 351, 3, 351, 9536, 
	8, 351, 1, 351, 3, 351, 9539, 8, 351, 3, 351, 9541, 8, 351, 3, 351, 9543, 
	8, 351, 1, 351, 3, 351, 9546, 8, 351, 1, 351, 3, 351, 9549, 8, 351, 1, 
	352, 1, 352, 1, 352, 1, 352, 1, 352, 1, 352, 3, 352, 9557, 8, 352, 1, 353, 
	1, 353, 1, 353, 1, 353, 3, 353, 9563, 8, 353, 1, 353, 1, 353, 1, 353, 1, 
	353, 1, 353, 1, 353, 1, 353, 1, 353, 1, 353, 3, 353, 9574, 8, 353, 3, 353, 
	9576, 8, 353, 1, 354, 1, 354, 1, 354, 3, 354, 9581, 8, 354, 1, 354, 1, 
	354, 1, 354, 1, 354, 1, 354, 1, 354, 1, 354, 1, 354, 1, 354, 3, 354, 9592, 
	8, 354, 3, 354, 9594, 8, 354, 1, 355, 1, 355, 1, 355, 1, 355, 3, 355, 9600, 
	8, 355, 1, 356, 1, 356, 1, 356, 3, 356, 9605, 8, 356, 1, 356, 1, 356, 1, 
	356, 1, 356, 1, 356, 1, 356, 1, 356, 1, 356, 1, 356, 1, 356, 1, 356, 1, 
	356, 3, 356, 9619, 8, 356, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 
	1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 3, 357, 9634, 8, 
	357, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 3, 357, 9642, 8, 357, 
	1, 358, 1, 358, 3, 358, 9646, 8, 358, 1, 358, 1, 358, 3, 358, 9650, 8, 
	358, 1, 359, 1, 359, 1, 359, 1, 359, 3, 359, 9656, 8, 359, 1, 360, 1, 360, 
	1, 360, 1, 360, 3, 360, 9662, 8, 360, 1, 361, 1, 361, 1, 361, 1, 361, 3, 
	361, 9668, 8, 361, 1, 361, 3, 361, 9671, 8, 361, 1, 362, 1, 362, 1, 362, 
	1, 362, 1, 362, 1, 362, 1, 362, 1, 362, 1, 362, 3, 362, 9682, 8, 362, 1, 
	363, 1, 363, 1, 363, 1, 363, 3, 363, 9688, 8, 363, 1, 363, 1, 363, 3, 363, 
	9692, 8, 363, 1, 363, 1, 363, 1, 363, 3, 363, 9697, 8, 363, 1, 364, 1, 
	364, 1, 364, 1, 364, 3, 364, 9703, 8, 364, 1, 364, 3, 364, 9706, 8, 364, 
	1, 365, 1, 365, 1, 365, 1, 365, 1, 366, 1, 366, 1, 366, 3, 366, 9715, 8, 
	366, 1, 366, 3, 366, 9718, 8, 366, 1, 367, 1, 367, 1, 367, 1, 367, 3, 367, 
	9724, 8, 367, 1, 368, 1, 368, 1, 369, 1, 369, 1, 369, 3, 369, 9731, 8, 
	369, 1, 369, 1, 369, 1, 369, 1, 369, 1, 369, 3, 369, 9738, 8, 369, 1, 369, 
	1, 369, 3, 369, 9742, 8, 369, 1, 369, 1, 369, 3, 369, 9746, 8, 369, 3, 
	369, 9748, 8, 369, 1, 370, 1, 370, 1, 370, 3, 370, 9753, 8, 370, 1, 370, 
	3, 370, 9756, 8, 370, 1, 371, 1, 371, 3, 371, 9760, 8, 371, 1, 371, 1, 
	371, 1, 371, 3, 371, 9765, 8, 371, 1, 372, 1, 372, 1, 372, 3, 372, 9770, 
	8, 372, 1, 372, 3, 372, 9773, 8, 372, 1, 373, 1, 373, 1, 373, 3, 373, 9778, 
	8, 373, 1, 374, 1, 374, 1, 374, 1, 374, 3, 374, 9784, 8, 374, 1, 375, 1, 
	375, 1, 375, 1, 375, 3, 375, 9790, 8, 375, 1, 375, 1, 375, 1, 375, 1, 375, 
	1, 375, 1, 375, 3, 375, 9798, 8, 375, 1, 376, 1, 376, 1, 376, 1, 376, 1, 
	376, 1, 376, 3, 376, 9806, 8, 376, 1, 377, 1, 377, 1, 377, 1, 377, 3, 377, 
	9812, 8, 377, 1, 378, 1, 378, 1, 378, 3, 378, 9817, 8, 378, 1, 379, 1, 
	379, 1, 379, 1, 379, 1, 379, 3, 379, 9824, 8, 379, 1, 379, 3, 379, 9827, 
	8, 379, 1, 380, 1, 380, 3, 380, 9831, 8, 380, 1, 380, 1, 380, 3, 380, 9835, 
	8, 380, 1, 380, 3, 380, 9838, 8, 380, 1, 380, 1, 380, 1, 380, 1, 380, 3, 
	380, 9844, 8, 380, 3, 380, 9846, 8, 380, 3, 380, 9848, 8, 380, 1, 380, 
	3, 380, 9851, 8, 380, 1, 380, 3, 380, 9854, 8, 380, 1, 381, 1, 381, 1, 
	381, 3, 381, 9859, 8, 381, 1, 381, 3, 381, 9862, 8, 381, 1, 382, 1, 382, 
	1, 382, 1, 382, 1, 383, 1, 383, 1, 383, 3, 383, 9871, 8, 383, 1, 384, 1, 
	384, 1, 384, 1, 384, 1, 384, 1, 384, 1, 384, 1, 385, 1, 385, 1, 385, 1, 
	385, 1, 385, 1, 385, 1, 385, 1, 386, 1, 386, 1, 386, 3, 386, 9890, 8, 386, 
	1, 386, 3, 386, 9893, 8, 386, 1, 387, 1, 387, 1, 387, 3, 387, 9898, 8, 
	387, 1, 387, 3, 387, 9901, 8, 387, 1, 388, 1, 388, 1, 388, 3, 388, 9906, 
	8, 388, 1, 388, 3, 388, 9909, 8, 388, 1, 389, 1, 389, 1, 389, 3, 389, 9914, 
	8, 389, 1, 389, 1, 389, 1, 389, 1, 389, 1, 389, 1, 389, 1, 389, 1, 389, 
	1, 389, 3, 389, 9925, 8, 389, 1, 390, 1, 390, 3, 390, 9929, 8, 390, 1, 
	390, 1, 390, 3, 390, 9933, 8, 390, 1, 390, 1, 390, 1, 390, 1, 390, 3, 390, 
	9939, 8, 390, 1, 390, 3, 390, 9942, 8, 390, 1, 390, 3, 390, 9945, 8, 390, 
	3, 390, 9947, 8, 390, 3, 390, 9949, 8, 390, 1, 390, 3, 390, 9952, 8, 390, 
	1, 390, 3, 390, 9955, 8, 390, 1, 391, 1, 391, 1, 391, 1, 391, 3, 391, 9961, 
	8, 391, 1, 392, 1, 392, 1, 392, 1, 392, 3, 392, 9967, 8, 392, 1, 392, 3, 
	392, 9970, 8, 392, 1, 393, 1, 393, 3, 393, 9974, 8, 393, 1, 393, 1, 393, 
	3, 393, 9978, 8, 393, 1, 393, 1, 393, 1, 393, 3, 393, 9983, 8, 393, 1, 
	393, 1, 393, 3, 393, 9987, 8, 393, 1, 393, 1, 393, 3, 393, 9991, 8, 393, 
	1, 394, 1, 394, 1, 394, 3, 394, 9996, 8, 394, 1, 395, 1, 395, 3, 395, 10000, 
	8, 395, 1, 395, 1, 395, 3, 395, 10004, 8, 395, 1, 395, 1, 395, 1, 395, 
	1, 395, 3, 395, 10010, 8, 395, 1, 395, 3, 395, 10013, 8, 395, 1, 395, 3, 
	395, 10016, 8, 395, 3, 395, 10018, 8, 395, 3, 395, 10020, 8, 395, 1, 395, 
	3, 395, 10023, 8, 395, 1, 395, 3, 395, 10026, 8, 395, 1, 396, 1, 396, 1, 
	396, 3, 396, 10031, 8, 396, 1, 397, 1, 397, 1, 397, 1, 398, 1, 398, 1, 
	399, 1, 399, 1, 399, 1, 399, 1, 399, 3, 399, 10043, 8, 399, 1, 400, 1, 
	400, 1, 400, 1, 400, 1, 400, 1, 400, 1, 400, 1, 400, 1, 400, 1, 400, 1, 
	400, 1, 400, 3, 400, 10057, 8, 400, 1, 401, 1, 401, 1, 401, 5, 401, 10062, 
	8, 401, 10, 401, 12, 401, 10065, 9, 401, 1, 402, 1, 402, 1, 403, 1, 403, 
	1, 404, 1, 404, 1, 405, 1, 405, 1, 406, 1, 406, 1, 407, 1, 407, 1, 408, 
	1, 408, 1, 409, 1, 409, 1, 409, 5, 409, 10084, 8, 409, 10, 409, 12, 409, 
	10087, 9, 409, 1, 410, 1, 410, 1, 410, 1, 410, 3, 410, 10093, 8, 410, 1, 
	411, 1, 411, 1, 412, 1, 412, 1, 412, 1, 412, 1, 413, 1, 413, 1, 414, 1, 
	414, 1, 414, 5, 414, 10106, 8, 414, 10, 414, 12, 414, 10109, 9, 414, 1, 
	415, 1, 415, 1, 415, 1, 415, 1, 415, 1, 415, 1, 415, 1, 415, 1, 415, 1, 
	415, 1, 415, 3, 415, 10122, 8, 415, 1, 416, 1, 416, 1, 417, 1, 417, 1, 
	417, 5, 417, 10129, 8, 417, 10, 417, 12, 417, 10132, 9, 417, 1, 418, 1, 
	418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 
	418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 3, 418, 10152, 
	8, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 
	1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 
	1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 1, 418, 5, 418, 10177, 8, 418, 
	10, 418, 12, 418, 10180, 9, 418, 1, 419, 1, 419, 1, 419, 1, 419, 5, 419, 
	10186, 8, 419, 10, 419, 12, 419, 10189, 9, 419, 1, 419, 1, 419, 1, 419, 
	1, 419, 3, 419, 10195, 8, 419, 1, 420, 1, 420, 1, 420, 1, 420, 1, 421, 
	1, 421, 1, 422, 1, 422, 1, 422, 1, 422, 5, 422, 10207, 8, 422, 10, 422, 
	12, 422, 10210, 9, 422, 1, 422, 1, 422, 1, 422, 1, 422, 3, 422, 10216, 
	8, 422, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 
	1, 423, 1, 423, 1, 423, 3, 423, 10229, 8, 423, 1, 423, 1, 423, 3, 423, 
	10233, 8, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 3, 423, 10240, 8, 
	423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 
	423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1, 
	423, 1, 423, 1, 423, 1, 423, 3, 423, 10263, 8, 423, 1, 424, 1, 424, 1, 
	424, 1, 424, 3, 424, 10269, 8, 424, 1, 425, 1, 425, 1, 425, 1, 425, 1, 
	426, 1, 426, 1, 427, 1, 427, 1, 427, 3, 427, 10280, 8, 427, 1, 427, 1, 
	427, 3, 427, 10284, 8, 427, 1, 427, 1, 427, 1, 428, 1, 428, 1, 428, 1, 
	428, 1, 428, 3, 428, 10293, 8, 428, 1, 428, 1, 428, 3, 428, 10297, 8, 428, 
	1, 429, 1, 429, 1, 429, 1, 429, 1, 429, 1, 429, 1, 429, 1, 429, 1, 429, 
	1, 429, 3, 429, 10309, 8, 429, 1, 430, 1, 430, 1, 430, 3, 430, 10314, 8, 
	430, 1, 430, 1, 430, 1, 430, 1, 430, 1, 430, 1, 430, 1, 430, 1, 430, 1, 
	430, 1, 430, 1, 430, 3, 430, 10327, 8, 430, 1, 430, 1, 430, 1, 430, 3, 
	430, 10332, 8, 430, 1, 430, 1, 430, 1, 430, 1, 430, 1, 430, 1, 430, 1, 
	430, 3, 430, 10341, 8, 430, 3, 430, 10343, 8, 430, 1, 431, 1, 431, 3, 431, 
	10347, 8, 431, 1, 431, 1, 431, 3, 431, 10351, 8, 431, 1, 431, 1, 431, 1, 
	431, 3, 431, 10356, 8, 431, 1, 432, 1, 432, 1, 433, 3, 433, 10361, 8, 433, 
	1, 433, 1, 433, 3, 433, 10365, 8, 433, 1, 433, 1, 433, 3, 433, 10369, 8, 
	433, 1, 433, 1, 433, 1, 433, 3, 433, 10374, 8, 433, 1, 433, 1, 433, 3, 
	433, 10378, 8, 433, 1, 433, 1, 433, 1, 433, 3, 433, 10383, 8, 433, 1, 433, 
	1, 433, 1, 433, 3, 433, 10388, 8, 433, 1, 434, 1, 434, 1, 434, 1, 434, 
	1, 434, 1, 434, 1, 434, 1, 434, 3, 434, 10398, 8, 434, 1, 435, 1, 435, 
	1, 435, 4, 435, 10403, 8, 435, 11, 435, 12, 435, 10404, 1, 435, 1, 435, 
	3, 435, 10409, 8, 435, 1, 435, 1, 435, 1, 435, 1, 435, 4, 435, 10415, 8, 
	435, 11, 435, 12, 435, 10416, 1, 435, 1, 435, 3, 435, 10421, 8, 435, 1, 
	435, 1, 435, 3, 435, 10425, 8, 435, 1, 436, 1, 436, 1, 436, 1, 436, 1, 
	436, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 438, 3, 438, 10438, 8, 
	438, 1, 438, 1, 438, 5, 438, 10442, 8, 438, 10, 438, 12, 438, 10445, 9, 
	438, 1, 439, 1, 439, 1, 439, 1, 439, 5, 439, 10451, 8, 439, 10, 439, 12, 
	439, 10454, 9, 439, 1, 440, 1, 440, 1, 440, 1, 440, 1, 440, 3, 440, 10461, 
	8, 440, 1, 440, 1, 440, 1, 440, 1, 440, 1, 440, 1, 441, 1, 441, 1, 441, 
	3, 441, 10471, 8, 441, 1, 441, 1, 441, 1, 441, 3, 441, 10476, 8, 441, 1, 
	442, 1, 442, 3, 442, 10480, 8, 442, 1, 442, 1, 442, 3, 442, 10484, 8, 442, 
	1, 442, 1, 442, 1, 442, 1, 442, 1, 442, 3, 442, 10491, 8, 442, 1, 443, 
	3, 443, 10494, 8, 443, 1, 443, 3, 443, 10497, 8, 443, 1, 443, 3, 443, 10500, 
	8, 443, 1, 443, 3, 443, 10503, 8, 443, 1, 443, 3, 443, 10506, 8, 443, 1, 
	443, 3, 443, 10509, 8, 443, 1, 444, 1, 444, 1, 444, 1, 445, 1, 445, 1, 
	445, 1, 446, 3, 446, 10518, 8, 446, 1, 446, 1, 446, 1, 447, 3, 447, 10523, 
	8, 447, 1, 447, 3, 447, 10526, 8, 447, 1, 447, 1, 447, 1, 448, 1, 448, 
	1, 448, 5, 448, 10533, 8, 448, 10, 448, 12, 448, 10536, 9, 448, 1, 449, 
	1, 449, 3, 449, 10540, 8, 449, 1, 450, 1, 450, 1, 450, 1, 450, 3, 450, 
	10546, 8, 450, 1, 450, 1, 450, 1, 450, 1, 450, 1, 450, 3, 450, 10553, 8, 
	450, 1, 450, 1, 450, 3, 450, 10557, 8, 450, 1, 450, 1, 450, 1, 450, 1, 
	450, 3, 450, 10563, 8, 450, 1, 450, 1, 450, 1, 450, 3, 450, 10568, 8, 450, 
	3, 450, 10570, 8, 450, 1, 451, 3, 451, 10573, 8, 451, 1, 451, 1, 451, 1, 
	452, 1, 452, 3, 452, 10579, 8, 452, 1, 453, 1, 453, 1, 454, 1, 454, 1, 
	455, 1, 455, 1, 455, 1, 456, 1, 456, 1, 456, 1, 457, 1, 457, 1, 457, 1, 
	457, 1, 458, 1, 458, 1, 458, 1, 459, 1, 459, 1, 459, 1, 460, 1, 460, 1, 
	460, 5, 460, 10604, 8, 460, 10, 460, 12, 460, 10607, 9, 460, 1, 461, 1, 
	461, 1, 462, 1, 462, 5, 462, 10613, 8, 462, 10, 462, 12, 462, 10616, 9, 
	462, 1, 462, 1, 462, 1, 462, 1, 462, 5, 462, 10622, 8, 462, 10, 462, 12, 
	462, 10625, 9, 462, 3, 462, 10627, 8, 462, 1, 463, 1, 463, 3, 463, 10631, 
	8, 463, 1, 463, 3, 463, 10634, 8, 463, 1, 463, 3, 463, 10637, 8, 463, 1, 
	463, 3, 463, 10640, 8, 463, 1, 463, 3, 463, 10643, 8, 463, 1, 463, 3, 463, 
	10646, 8, 463, 1, 463, 1, 463, 1, 463, 1, 463, 1, 463, 1, 463, 1, 463, 
	3, 463, 10655, 8, 463, 1, 463, 1, 463, 1, 463, 1, 463, 1, 463, 1, 463, 
	1, 463, 1, 463, 3, 463, 10665, 8, 463, 1, 463, 3, 463, 10668, 8, 463, 1, 
	463, 3, 463, 10671, 8, 463, 1, 463, 1, 463, 1, 463, 1, 463, 3, 463, 10677, 
	8, 463, 1, 463, 3, 463, 10680, 8, 463, 1, 463, 1, 463, 1, 463, 1, 463, 
	3, 463, 10686, 8, 463, 3, 463, 10688, 8, 463, 1, 464, 1, 464, 1, 464, 5, 
	464, 10693, 8, 464, 10, 464, 12, 464, 10696, 9, 464, 1, 465, 3, 465, 10699, 
	8, 465, 1, 465, 1, 465, 1, 465, 3, 465, 10704, 8, 465, 1, 465, 1, 465, 
	1, 466, 1, 466, 3, 466, 10710, 8, 466, 1, 467, 1, 467, 3, 467, 10714, 8, 
	467, 1, 468, 3, 468, 10717, 8, 468, 1, 468, 1, 468, 1, 468, 1, 468, 3, 
	468, 10723, 8, 468, 1, 468, 1, 468, 1, 468, 1, 468, 1, 468, 3, 468, 10730, 
	8, 468, 3, 468, 10732, 8, 468, 1, 468, 1, 468, 3, 468, 10736, 8, 468, 1, 
	468, 1, 468, 1, 468, 1, 468, 1, 468, 3, 468, 10743, 8, 468, 1, 469, 1, 
	469, 1, 469, 1, 469, 1, 469, 1, 469, 1, 469, 1, 469, 1, 469, 1, 469, 1, 
	469, 1, 469, 1, 469, 1, 469, 3, 469, 10759, 8, 469, 1, 469, 1, 469, 1, 
	469, 1, 469, 1, 469, 1, 469, 1, 469, 1, 469, 1, 469, 3, 469, 10770, 8, 
	469, 1, 470, 1, 470, 1, 470, 1, 470, 1, 470, 1, 470, 1, 470, 1, 470, 1, 
	470, 1, 470, 1, 470, 1, 470, 1, 470, 3, 470, 10785, 8, 470, 1, 471, 1, 
	471, 1, 471, 1, 471, 1, 471, 1, 471, 1, 471, 1, 471, 3, 471, 10795, 8, 
	471, 1, 472, 1, 472, 1, 472, 3, 472, 10800, 8, 472, 1, 473, 1, 473, 1, 
	473, 1, 473, 1, 474, 1, 474, 1, 475, 1, 475, 3, 475, 10810, 8, 475, 1, 
	475, 1, 475, 1, 475, 1, 475, 3, 475, 10816, 8, 475, 1, 475, 1, 475, 5, 
	475, 10820, 8, 475, 10, 475, 12, 475, 10823, 9, 475, 1, 476, 1, 476, 1, 
	476, 1, 477, 1, 477, 1, 477, 1, 477, 1, 477, 1, 477, 1, 477, 1, 477, 1, 
	477, 3, 477, 10837, 8, 477, 1, 478, 1, 478, 1, 478, 1, 478, 1, 478, 1, 
	478, 1, 478, 1, 478, 3, 478, 10847, 8, 478, 1, 478, 3, 478, 10850, 8, 478, 
	1, 479, 1, 479, 1, 480, 1, 480, 1, 481, 1, 481, 1, 481, 1, 481, 1, 481, 
	1, 481, 1, 481, 1, 481, 1, 481, 1, 481, 1, 481, 3, 481, 10867, 8, 481, 
	1, 481, 3, 481, 10870, 8, 481, 1, 482, 1, 482, 1, 482, 1, 482, 1, 482, 
	1, 482, 1, 482, 1, 482, 5, 482, 10880, 8, 482, 10, 482, 12, 482, 10883, 
	9, 482, 1, 483, 1, 483, 1, 483, 1, 484, 1, 484, 1, 484, 3, 484, 10891, 
	8, 484, 1, 484, 3, 484, 10894, 8, 484, 1, 484, 3, 484, 10897, 8, 484, 1, 
	484, 3, 484, 10900, 8, 484, 1, 484, 3, 484, 10903, 8, 484, 1, 484, 3, 484, 
	10906, 8, 484, 1, 484, 3, 484, 10909, 8, 484, 1, 484, 1, 484, 1, 485, 1, 
	485, 1, 486, 1, 486, 1, 486, 1, 486, 1, 486, 1, 486, 1, 486, 1, 486, 1, 
	486, 1, 486, 1, 486, 1, 486, 1, 486, 5, 486, 10928, 8, 486, 10, 486, 12, 
	486, 10931, 9, 486, 1, 486, 1, 486, 1, 486, 1, 486, 1, 486, 1, 486, 1, 
	486, 1, 486, 1, 486, 1, 486, 1, 486, 1, 486, 1, 486, 1, 486, 3, 486, 10947, 
	8, 486, 1, 487, 1, 487, 1, 487, 1, 487, 5, 487, 10953, 8, 487, 10, 487, 
	12, 487, 10956, 9, 487, 1, 487, 1, 487, 1, 488, 1, 488, 1, 488, 1, 488, 
	1, 489, 1, 489, 1, 489, 1, 489, 5, 489, 10968, 8, 489, 10, 489, 12, 489, 
	10971, 9, 489, 1, 489, 3, 489, 10974, 8, 489, 1, 489, 3, 489, 10977, 8, 
	489, 1, 490, 1, 490, 3, 490, 10981, 8, 490, 1, 491, 1, 491, 1, 491, 1, 
	491, 1, 491, 1, 492, 1, 492, 1, 492, 1, 492, 1, 492, 3, 492, 10993, 8, 
	492, 1, 492, 1, 492, 3, 492, 10997, 8, 492, 1, 493, 1, 493, 3, 493, 11001, 
	8, 493, 1, 493, 1, 493, 1, 494, 1, 494, 5, 494, 11007, 8, 494, 10, 494, 
	12, 494, 11010, 9, 494, 1, 494, 1, 494, 1, 494, 1, 494, 1, 494, 3, 494, 
	11017, 8, 494, 1, 494, 1, 494, 1, 494, 1, 494, 1, 494, 1, 494, 5, 494, 
	11025, 8, 494, 10, 494, 12, 494, 11028, 9, 494, 1, 495, 1, 495, 1, 496, 
	3, 496, 11033, 8, 496, 1, 496, 1, 496, 1, 497, 1, 497, 1, 498, 1, 498, 
	1, 498, 1, 498, 1, 498, 1, 498, 1, 498, 1, 498, 1, 498, 1, 498, 1, 498, 
	1, 498, 1, 498, 1, 498, 1, 498, 1, 498, 1, 498, 1, 498, 5, 498, 11057, 
	8, 498, 10, 498, 12, 498, 11060, 9, 498, 1, 498, 1, 498, 1, 498, 1, 498, 
	1, 498, 1, 498, 1, 498, 5, 498, 11069, 8, 498, 10, 498, 12, 498, 11072, 
	9, 498, 1, 498, 1, 498, 1, 498, 1, 498, 3, 498, 11078, 8, 498, 1, 498, 
	1, 498, 1, 498, 1, 498, 5, 498, 11084, 8, 498, 10, 498, 12, 498, 11087, 
	9, 498, 1, 498, 1, 498, 1, 498, 1, 498, 3, 498, 11093, 8, 498, 1, 498, 
	1, 498, 1, 498, 1, 498, 3, 498, 11099, 8, 498, 1, 499, 1, 499, 1, 499, 
	1, 500, 1, 500, 1, 500, 3, 500, 11107, 8, 500, 1, 501, 1, 501, 1, 501, 
	1, 501, 1, 501, 5, 501, 11114, 8, 501, 10, 501, 12, 501, 11117, 9, 501, 
	1, 501, 3, 501, 11120, 8, 501, 1, 501, 1, 501, 1, 501, 1, 501, 1, 501, 
	1, 501, 3, 501, 11128, 8, 501, 1, 501, 1, 501, 1, 501, 1, 501, 5, 501, 
	11134, 8, 501, 10, 501, 12, 501, 11137, 9, 501, 1, 501, 1, 501, 3, 501, 
	11141, 8, 501, 1, 502, 1, 502, 1, 502, 1, 503, 1, 503, 1, 503, 1, 504, 
	1, 504, 1, 504, 3, 504, 11152, 8, 504, 1, 504, 3, 504, 11155, 8, 504, 1, 
	504, 1, 504, 3, 504, 11159, 8, 504, 1, 505, 1, 505, 1, 505, 1, 505, 1, 
	505, 5, 505, 11166, 8, 505, 10, 505, 12, 505, 11169, 9, 505, 1, 506, 1, 
	506, 1, 507, 1, 507, 1, 508, 1, 508, 1, 508, 1, 508, 3, 508, 11179, 8, 
	508, 1, 508, 1, 508, 3, 508, 11183, 8, 508, 1, 508, 3, 508, 11186, 8, 508, 
	1, 508, 1, 508, 3, 508, 11190, 8, 508, 1, 508, 1, 508, 3, 508, 11194, 8, 
	508, 1, 508, 3, 508, 11197, 8, 508, 3, 508, 11199, 8, 508, 1, 508, 0, 2, 
	836, 988, 509, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 
	32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 
	68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 
	104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 
	134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 
	164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 
	194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 
	224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 
	254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 
	284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 
	314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 
	344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 
	374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 
	404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 
	434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 
	464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 
	494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 
	524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 
	554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 
	584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 
	614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 
	644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 
	674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 
	704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 
	734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 
	764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 
	794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 
	824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 
	854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 
	884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 
	914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 
	944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 
	974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 
	1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 0, 80, 2, 0, 20, 20, 308, 
	308, 2, 0, 682, 683, 685, 685, 1, 0, 1038, 1040, 6, 0, 70, 70, 187, 187, 
	392, 392, 543, 543, 557, 557, 994, 994, 3, 0, 392, 392, 857, 857, 1022, 
	1022, 2, 0, 178, 178, 690, 690, 2, 0, 272, 272, 944, 944, 3, 0, 645, 645, 
	747, 747, 944, 944, 8, 0, 61, 61, 102, 102, 105, 105, 221, 221, 342, 342, 
	489, 489, 625, 625, 999, 999, 4, 0, 44, 44, 46, 46, 155, 155, 252, 252, 
	4, 0, 155, 155, 199, 199, 213, 213, 449, 449, 4, 0, 594, 594, 647, 647, 
	679, 679, 842, 842, 2, 0, 155, 155, 744, 744, 2, 0, 665, 665, 673, 673, 
	8, 0, 155, 155, 159, 159, 172, 172, 345, 345, 446, 446, 665, 665, 673, 
	673, 744, 744, 2, 0, 155, 155, 252, 252, 5, 0, 197, 197, 467, 467, 479, 
	479, 978, 978, 998, 998, 2, 0, 496, 496, 842, 843, 2, 0, 230, 230, 246, 
	246, 4, 0, 79, 79, 196, 196, 524, 524, 575, 575, 2, 0, 230, 230, 246, 247, 
	2, 0, 362, 362, 489, 489, 2, 0, 252, 252, 285, 285, 3, 0, 155, 155, 478, 
	478, 848, 848, 2, 0, 757, 757, 937, 937, 2, 0, 13, 13, 657, 657, 3, 0, 
	155, 155, 252, 252, 826, 826, 2, 0, 679, 679, 842, 842, 2, 0, 68, 68, 351, 
	351, 2, 0, 218, 218, 359, 359, 3, 0, 318, 318, 558, 558, 771, 771, 2, 0, 
	498, 498, 957, 957, 2, 0, 490, 490, 653, 653, 3, 0, 262, 262, 328, 328, 
	839, 839, 2, 0, 35, 35, 464, 464, 2, 0, 13, 13, 239, 239, 3, 0, 103, 103, 
	261, 261, 799, 799, 3, 0, 200, 200, 732, 732, 851, 851, 2, 0, 88, 88, 1061, 
	1061, 4, 0, 59, 59, 221, 221, 342, 342, 489, 489, 2, 0, 361, 361, 971, 
	971, 2, 0, 109, 109, 551, 551, 3, 0, 83, 83, 326, 326, 526, 526, 3, 0, 
	1, 1, 327, 327, 525, 525, 2, 0, 428, 428, 853, 854, 8, 0, 59, 59, 102, 
	102, 105, 105, 221, 221, 342, 342, 489, 489, 625, 625, 999, 999, 3, 0, 
	87, 87, 346, 346, 955, 955, 2, 0, 299, 299, 908, 908, 1, 0, 863, 864, 2, 
	0, 333, 333, 420, 420, 50, 0, 4, 4, 21, 21, 24, 24, 66, 67, 95, 96, 132, 
	142, 199, 199, 203, 204, 248, 248, 251, 251, 259, 259, 265, 266, 282, 282, 
	329, 330, 370, 370, 387, 389, 391, 391, 393, 393, 423, 423, 448, 449, 457, 
	457, 469, 469, 478, 478, 571, 571, 577, 577, 592, 593, 619, 619, 621, 621, 
	666, 667, 704, 704, 726, 726, 761, 761, 772, 772, 794, 794, 808, 809, 833, 
	833, 844, 844, 871, 872, 876, 876, 878, 878, 880, 880, 882, 884, 886, 887, 
	895, 896, 915, 915, 938, 938, 947, 947, 951, 952, 976, 977, 1079, 1079, 
	5, 0, 402, 402, 452, 452, 782, 782, 989, 992, 995, 997, 11, 0, 201, 201, 
	380, 380, 694, 694, 733, 733, 798, 798, 831, 831, 855, 855, 862, 862, 953, 
	953, 969, 969, 975, 975, 4, 0, 41, 41, 492, 492, 745, 745, 822, 822, 2, 
	0, 110, 110, 676, 676, 2, 0, 20, 20, 489, 489, 1, 0, 226, 227, 2, 0, 154, 
	154, 795, 795, 2, 0, 310, 310, 365, 365, 4, 0, 200, 200, 732, 732, 861, 
	861, 973, 973, 3, 0, 378, 378, 795, 795, 1001, 1001, 1, 0, 1076, 1077, 
	1, 0, 1073, 1075, 2, 0, 1058, 1058, 1076, 1077, 3, 0, 505, 505, 1008, 1008, 
	1016, 1016, 2, 0, 54, 54, 226, 226, 3, 0, 225, 225, 623, 623, 699, 699, 
	1, 0, 1045, 1046, 2, 0, 269, 269, 460, 460, 2, 0, 20, 20, 236, 236, 3, 
	0, 318, 318, 409, 409, 692, 692, 2, 0, 308, 308, 403, 403, 2, 0, 90, 90, 
	698, 698, 2, 0, 98, 98, 849, 849, 2, 0, 659, 659, 746, 746, 2, 0, 727, 
	727, 856, 856, 1, 0, 1050, 1056, 3, 0, 20, 20, 40, 40, 785, 785, 2, 0, 
	698, 698, 703, 703, 2, 0, 308, 308, 486, 486, 12916, 0, 1021, 1, 0, 0, 
	0, 2, 1026, 1, 0, 0, 0, 4, 1036, 1, 0, 0, 0, 6, 1042, 1, 0, 0, 0, 8, 1050, 
	1, 0, 0, 0, 10, 1052, 1, 0, 0, 0, 12, 1097, 1, 0, 0, 0, 14, 1099, 1, 0, 
	0, 0, 16, 1110, 1, 0, 0, 0, 18, 1125, 1, 0, 0, 0, 20, 1127, 1, 0, 0, 0, 
	22, 1153, 1, 0, 0, 0, 24, 1170, 1, 0, 0, 0, 26, 1172, 1, 0, 0, 0, 28, 1184, 
	1, 0, 0, 0, 30, 1213, 1, 0, 0, 0, 32, 1215, 1, 0, 0, 0, 34, 1230, 1, 0, 
	0, 0, 36, 1264, 1, 0, 0, 0, 38, 1319, 1, 0, 0, 0, 40, 1321, 1, 0, 0, 0, 
	42, 1323, 1, 0, 0, 0, 44, 1336, 1, 0, 0, 0, 46, 1345, 1, 0, 0, 0, 48, 1349, 
	1, 0, 0, 0, 50, 1374, 1, 0, 0, 0, 52, 1376, 1, 0, 0, 0, 54, 1428, 1, 0, 
	0, 0, 56, 1430, 1, 0, 0, 0, 58, 1432, 1, 0, 0, 0, 60, 1487, 1, 0, 0, 0, 
	62, 1489, 1, 0, 0, 0, 64, 1493, 1, 0, 0, 0, 66, 1500, 1, 0, 0, 0, 68, 1504, 
	1, 0, 0, 0, 70, 1513, 1, 0, 0, 0, 72, 1550, 1, 0, 0, 0, 74, 1658, 1, 0, 
	0, 0, 76, 1710, 1, 0, 0, 0, 78, 1712, 1, 0, 0, 0, 80, 1729, 1, 0, 0, 0, 
	82, 1731, 1, 0, 0, 0, 84, 1771, 1, 0, 0, 0, 86, 1773, 1, 0, 0, 0, 88, 1796, 
	1, 0, 0, 0, 90, 1798, 1, 0, 0, 0, 92, 1824, 1, 0, 0, 0, 94, 1826, 1, 0, 
	0, 0, 96, 1836, 1, 0, 0, 0, 98, 1844, 1, 0, 0, 0, 100, 1848, 1, 0, 0, 0, 
	102, 1852, 1, 0, 0, 0, 104, 1875, 1, 0, 0, 0, 106, 1883, 1, 0, 0, 0, 108, 
	1989, 1, 0, 0, 0, 110, 2020, 1, 0, 0, 0, 112, 2030, 1, 0, 0, 0, 114, 2062, 
	1, 0, 0, 0, 116, 2064, 1, 0, 0, 0, 118, 2069, 1, 0, 0, 0, 120, 2092, 1, 
	0, 0, 0, 122, 2132, 1, 0, 0, 0, 124, 2176, 1, 0, 0, 0, 126, 2203, 1, 0, 
	0, 0, 128, 2205, 1, 0, 0, 0, 130, 2263, 1, 0, 0, 0, 132, 2358, 1, 0, 0, 
	0, 134, 2360, 1, 0, 0, 0, 136, 2364, 1, 0, 0, 0, 138, 2449, 1, 0, 0, 0, 
	140, 2451, 1, 0, 0, 0, 142, 2453, 1, 0, 0, 0, 144, 2577, 1, 0, 0, 0, 146, 
	2579, 1, 0, 0, 0, 148, 2581, 1, 0, 0, 0, 150, 2690, 1, 0, 0, 0, 152, 2692, 
	1, 0, 0, 0, 154, 2696, 1, 0, 0, 0, 156, 2700, 1, 0, 0, 0, 158, 2708, 1, 
	0, 0, 0, 160, 2716, 1, 0, 0, 0, 162, 2878, 1, 0, 0, 0, 164, 2908, 1, 0, 
	0, 0, 166, 2981, 1, 0, 0, 0, 168, 2983, 1, 0, 0, 0, 170, 2995, 1, 0, 0, 
	0, 172, 3036, 1, 0, 0, 0, 174, 3038, 1, 0, 0, 0, 176, 3071, 1, 0, 0, 0, 
	178, 3136, 1, 0, 0, 0, 180, 3198, 1, 0, 0, 0, 182, 3260, 1, 0, 0, 0, 184, 
	3448, 1, 0, 0, 0, 186, 3450, 1, 0, 0, 0, 188, 3454, 1, 0, 0, 0, 190, 3458, 
	1, 0, 0, 0, 192, 3471, 1, 0, 0, 0, 194, 3477, 1, 0, 0, 0, 196, 3564, 1, 
	0, 0, 0, 198, 3602, 1, 0, 0, 0, 200, 3688, 1, 0, 0, 0, 202, 3690, 1, 0, 
	0, 0, 204, 3739, 1, 0, 0, 0, 206, 3879, 1, 0, 0, 0, 208, 3889, 1, 0, 0, 
	0, 210, 4030, 1, 0, 0, 0, 212, 4032, 1, 0, 0, 0, 214, 4145, 1, 0, 0, 0, 
	216, 4204, 1, 0, 0, 0, 218, 4206, 1, 0, 0, 0, 220, 4255, 1, 0, 0, 0, 222, 
	4272, 1, 0, 0, 0, 224, 4306, 1, 0, 0, 0, 226, 4396, 1, 0, 0, 0, 228, 4468, 
	1, 0, 0, 0, 230, 4536, 1, 0, 0, 0, 232, 4573, 1, 0, 0, 0, 234, 4750, 1, 
	0, 0, 0, 236, 4773, 1, 0, 0, 0, 238, 4938, 1, 0, 0, 0, 240, 4942, 1, 0, 
	0, 0, 242, 5008, 1, 0, 0, 0, 244, 5032, 1, 0, 0, 0, 246, 5076, 1, 0, 0, 
	0, 248, 5080, 1, 0, 0, 0, 250, 5136, 1, 0, 0, 0, 252, 5138, 1, 0, 0, 0, 
	254, 5213, 1, 0, 0, 0, 256, 5215, 1, 0, 0, 0, 258, 5224, 1, 0, 0, 0, 260, 
	5258, 1, 0, 0, 0, 262, 5261, 1, 0, 0, 0, 264, 5266, 1, 0, 0, 0, 266, 5270, 
	1, 0, 0, 0, 268, 5397, 1, 0, 0, 0, 270, 5399, 1, 0, 0, 0, 272, 5575, 1, 
	0, 0, 0, 274, 5577, 1, 0, 0, 0, 276, 5579, 1, 0, 0, 0, 278, 5639, 1, 0, 
	0, 0, 280, 5675, 1, 0, 0, 0, 282, 5745, 1, 0, 0, 0, 284, 5783, 1, 0, 0, 
	0, 286, 5822, 1, 0, 0, 0, 288, 5860, 1, 0, 0, 0, 290, 5862, 1, 0, 0, 0, 
	292, 5865, 1, 0, 0, 0, 294, 5879, 1, 0, 0, 0, 296, 5927, 1, 0, 0, 0, 298, 
	5929, 1, 0, 0, 0, 300, 6086, 1, 0, 0, 0, 302, 6135, 1, 0, 0, 0, 304, 6137, 
	1, 0, 0, 0, 306, 6163, 1, 0, 0, 0, 308, 6197, 1, 0, 0, 0, 310, 6216, 1, 
	0, 0, 0, 312, 6218, 1, 0, 0, 0, 314, 6222, 1, 0, 0, 0, 316, 6224, 1, 0, 
	0, 0, 318, 6228, 1, 0, 0, 0, 320, 6478, 1, 0, 0, 0, 322, 6480, 1, 0, 0, 
	0, 324, 6490, 1, 0, 0, 0, 326, 6498, 1, 0, 0, 0, 328, 6506, 1, 0, 0, 0, 
	330, 6597, 1, 0, 0, 0, 332, 6599, 1, 0, 0, 0, 334, 6618, 1, 0, 0, 0, 336, 
	6621, 1, 0, 0, 0, 338, 6626, 1, 0, 0, 0, 340, 6628, 1, 0, 0, 0, 342, 6693, 
	1, 0, 0, 0, 344, 6714, 1, 0, 0, 0, 346, 6742, 1, 0, 0, 0, 348, 6746, 1, 
	0, 0, 0, 350, 6750, 1, 0, 0, 0, 352, 6784, 1, 0, 0, 0, 354, 6826, 1, 0, 
	0, 0, 356, 6854, 1, 0, 0, 0, 358, 6899, 1, 0, 0, 0, 360, 6901, 1, 0, 0, 
	0, 362, 6936, 1, 0, 0, 0, 364, 6938, 1, 0, 0, 0, 366, 6944, 1, 0, 0, 0, 
	368, 6946, 1, 0, 0, 0, 370, 7100, 1, 0, 0, 0, 372, 7102, 1, 0, 0, 0, 374, 
	7140, 1, 0, 0, 0, 376, 7176, 1, 0, 0, 0, 378, 7205, 1, 0, 0, 0, 380, 7244, 
	1, 0, 0, 0, 382, 7338, 1, 0, 0, 0, 384, 7467, 1, 0, 0, 0, 386, 7469, 1, 
	0, 0, 0, 388, 7539, 1, 0, 0, 0, 390, 7569, 1, 0, 0, 0, 392, 7573, 1, 0, 
	0, 0, 394, 7575, 1, 0, 0, 0, 396, 7584, 1, 0, 0, 0, 398, 7593, 1, 0, 0, 
	0, 400, 7614, 1, 0, 0, 0, 402, 7637, 1, 0, 0, 0, 404, 7646, 1, 0, 0, 0, 
	406, 7785, 1, 0, 0, 0, 408, 7819, 1, 0, 0, 0, 410, 7829, 1, 0, 0, 0, 412, 
	7831, 1, 0, 0, 0, 414, 7835, 1, 0, 0, 0, 416, 7839, 1, 0, 0, 0, 418, 7843, 
	1, 0, 0, 0, 420, 7866, 1, 0, 0, 0, 422, 7870, 1, 0, 0, 0, 424, 7874, 1, 
	0, 0, 0, 426, 7878, 1, 0, 0, 0, 428, 7971, 1, 0, 0, 0, 430, 7973, 1, 0, 
	0, 0, 432, 7975, 1, 0, 0, 0, 434, 7979, 1, 0, 0, 0, 436, 7983, 1, 0, 0, 
	0, 438, 7987, 1, 0, 0, 0, 440, 8042, 1, 0, 0, 0, 442, 8146, 1, 0, 0, 0, 
	444, 8168, 1, 0, 0, 0, 446, 8181, 1, 0, 0, 0, 448, 8183, 1, 0, 0, 0, 450, 
	8187, 1, 0, 0, 0, 452, 8220, 1, 0, 0, 0, 454, 8223, 1, 0, 0, 0, 456, 8227, 
	1, 0, 0, 0, 458, 8231, 1, 0, 0, 0, 460, 8235, 1, 0, 0, 0, 462, 8344, 1, 
	0, 0, 0, 464, 8346, 1, 0, 0, 0, 466, 8354, 1, 0, 0, 0, 468, 8357, 1, 0, 
	0, 0, 470, 8372, 1, 0, 0, 0, 472, 8390, 1, 0, 0, 0, 474, 8394, 1, 0, 0, 
	0, 476, 8399, 1, 0, 0, 0, 478, 8408, 1, 0, 0, 0, 480, 8411, 1, 0, 0, 0, 
	482, 8430, 1, 0, 0, 0, 484, 8432, 1, 0, 0, 0, 486, 8437, 1, 0, 0, 0, 488, 
	8464, 1, 0, 0, 0, 490, 8488, 1, 0, 0, 0, 492, 8490, 1, 0, 0, 0, 494, 8498, 
	1, 0, 0, 0, 496, 8589, 1, 0, 0, 0, 498, 8591, 1, 0, 0, 0, 500, 8593, 1, 
	0, 0, 0, 502, 8601, 1, 0, 0, 0, 504, 8609, 1, 0, 0, 0, 506, 8613, 1, 0, 
	0, 0, 508, 8685, 1, 0, 0, 0, 510, 8687, 1, 0, 0, 0, 512, 8695, 1, 0, 0, 
	0, 514, 8713, 1, 0, 0, 0, 516, 8717, 1, 0, 0, 0, 518, 8759, 1, 0, 0, 0, 
	520, 8819, 1, 0, 0, 0, 522, 8833, 1, 0, 0, 0, 524, 8835, 1, 0, 0, 0, 526, 
	8868, 1, 0, 0, 0, 528, 8870, 1, 0, 0, 0, 530, 8902, 1, 0, 0, 0, 532, 8904, 
	1, 0, 0, 0, 534, 8911, 1, 0, 0, 0, 536, 8918, 1, 0, 0, 0, 538, 8927, 1, 
	0, 0, 0, 540, 8937, 1, 0, 0, 0, 542, 8945, 1, 0, 0, 0, 544, 8953, 1, 0, 
	0, 0, 546, 8961, 1, 0, 0, 0, 548, 8971, 1, 0, 0, 0, 550, 8976, 1, 0, 0, 
	0, 552, 8981, 1, 0, 0, 0, 554, 8989, 1, 0, 0, 0, 556, 8997, 1, 0, 0, 0, 
	558, 9004, 1, 0, 0, 0, 560, 9012, 1, 0, 0, 0, 562, 9020, 1, 0, 0, 0, 564, 
	9025, 1, 0, 0, 0, 566, 9032, 1, 0, 0, 0, 568, 9041, 1, 0, 0, 0, 570, 9050, 
	1, 0, 0, 0, 572, 9059, 1, 0, 0, 0, 574, 9067, 1, 0, 0, 0, 576, 9071, 1, 
	0, 0, 0, 578, 9078, 1, 0, 0, 0, 580, 9085, 1, 0, 0, 0, 582, 9094, 1, 0, 
	0, 0, 584, 9101, 1, 0, 0, 0, 586, 9108, 1, 0, 0, 0, 588, 9115, 1, 0, 0, 
	0, 590, 9122, 1, 0, 0, 0, 592, 9129, 1, 0, 0, 0, 594, 9131, 1, 0, 0, 0, 
	596, 9141, 1, 0, 0, 0, 598, 9143, 1, 0, 0, 0, 600, 9147, 1, 0, 0, 0, 602, 
	9151, 1, 0, 0, 0, 604, 9155, 1, 0, 0, 0, 606, 9164, 1, 0, 0, 0, 608, 9166, 
	1, 0, 0, 0, 610, 9170, 1, 0, 0, 0, 612, 9174, 1, 0, 0, 0, 614, 9185, 1, 
	0, 0, 0, 616, 9190, 1, 0, 0, 0, 618, 9194, 1, 0, 0, 0, 620, 9198, 1, 0, 
	0, 0, 622, 9201, 1, 0, 0, 0, 624, 9204, 1, 0, 0, 0, 626, 9208, 1, 0, 0, 
	0, 628, 9211, 1, 0, 0, 0, 630, 9238, 1, 0, 0, 0, 632, 9240, 1, 0, 0, 0, 
	634, 9244, 1, 0, 0, 0, 636, 9255, 1, 0, 0, 0, 638, 9260, 1, 0, 0, 0, 640, 
	9265, 1, 0, 0, 0, 642, 9272, 1, 0, 0, 0, 644, 9277, 1, 0, 0, 0, 646, 9282, 
	1, 0, 0, 0, 648, 9287, 1, 0, 0, 0, 650, 9291, 1, 0, 0, 0, 652, 9296, 1, 
	0, 0, 0, 654, 9304, 1, 0, 0, 0, 656, 9310, 1, 0, 0, 0, 658, 9314, 1, 0, 
	0, 0, 660, 9320, 1, 0, 0, 0, 662, 9324, 1, 0, 0, 0, 664, 9329, 1, 0, 0, 
	0, 666, 9333, 1, 0, 0, 0, 668, 9337, 1, 0, 0, 0, 670, 9341, 1, 0, 0, 0, 
	672, 9349, 1, 0, 0, 0, 674, 9353, 1, 0, 0, 0, 676, 9357, 1, 0, 0, 0, 678, 
	9361, 1, 0, 0, 0, 680, 9365, 1, 0, 0, 0, 682, 9418, 1, 0, 0, 0, 684, 9420, 
	1, 0, 0, 0, 686, 9449, 1, 0, 0, 0, 688, 9454, 1, 0, 0, 0, 690, 9458, 1, 
	0, 0, 0, 692, 9464, 1, 0, 0, 0, 694, 9481, 1, 0, 0, 0, 696, 9488, 1, 0, 
	0, 0, 698, 9511, 1, 0, 0, 0, 700, 9513, 1, 0, 0, 0, 702, 9519, 1, 0, 0, 
	0, 704, 9550, 1, 0, 0, 0, 706, 9558, 1, 0, 0, 0, 708, 9577, 1, 0, 0, 0, 
	710, 9595, 1, 0, 0, 0, 712, 9618, 1, 0, 0, 0, 714, 9641, 1, 0, 0, 0, 716, 
	9643, 1, 0, 0, 0, 718, 9651, 1, 0, 0, 0, 720, 9657, 1, 0, 0, 0, 722, 9663, 
	1, 0, 0, 0, 724, 9672, 1, 0, 0, 0, 726, 9683, 1, 0, 0, 0, 728, 9698, 1, 
	0, 0, 0, 730, 9707, 1, 0, 0, 0, 732, 9711, 1, 0, 0, 0, 734, 9719, 1, 0, 
	0, 0, 736, 9725, 1, 0, 0, 0, 738, 9727, 1, 0, 0, 0, 740, 9749, 1, 0, 0, 
	0, 742, 9757, 1, 0, 0, 0, 744, 9766, 1, 0, 0, 0, 746, 9774, 1, 0, 0, 0, 
	748, 9779, 1, 0, 0, 0, 750, 9785, 1, 0, 0, 0, 752, 9799, 1, 0, 0, 0, 754, 
	9807, 1, 0, 0, 0, 756, 9813, 1, 0, 0, 0, 758, 9818, 1, 0, 0, 0, 760, 9828, 
	1, 0, 0, 0, 762, 9855, 1, 0, 0, 0, 764, 9863, 1, 0, 0, 0, 766, 9867, 1, 
	0, 0, 0, 768, 9872, 1, 0, 0, 0, 770, 9879, 1, 0, 0, 0, 772, 9886, 1, 0, 
	0, 0, 774, 9894, 1, 0, 0, 0, 776, 9902, 1, 0, 0, 0, 778, 9910, 1, 0, 0, 
	0, 780, 9926, 1, 0, 0, 0, 782, 9956, 1, 0, 0, 0, 784, 9962, 1, 0, 0, 0, 
	786, 9971, 1, 0, 0, 0, 788, 9992, 1, 0, 0, 0, 790, 9997, 1, 0, 0, 0, 792, 
	10027, 1, 0, 0, 0, 794, 10032, 1, 0, 0, 0, 796, 10035, 1, 0, 0, 0, 798, 
	10042, 1, 0, 0, 0, 800, 10056, 1, 0, 0, 0, 802, 10058, 1, 0, 0, 0, 804, 
	10066, 1, 0, 0, 0, 806, 10068, 1, 0, 0, 0, 808, 10070, 1, 0, 0, 0, 810, 
	10072, 1, 0, 0, 0, 812, 10074, 1, 0, 0, 0, 814, 10076, 1, 0, 0, 0, 816, 
	10078, 1, 0, 0, 0, 818, 10080, 1, 0, 0, 0, 820, 10092, 1, 0, 0, 0, 822, 
	10094, 1, 0, 0, 0, 824, 10096, 1, 0, 0, 0, 826, 10100, 1, 0, 0, 0, 828, 
	10102, 1, 0, 0, 0, 830, 10121, 1, 0, 0, 0, 832, 10123, 1, 0, 0, 0, 834, 
	10125, 1, 0, 0, 0, 836, 10151, 1, 0, 0, 0, 838, 10194, 1, 0, 0, 0, 840, 
	10196, 1, 0, 0, 0, 842, 10200, 1, 0, 0, 0, 844, 10215, 1, 0, 0, 0, 846, 
	10262, 1, 0, 0, 0, 848, 10268, 1, 0, 0, 0, 850, 10270, 1, 0, 0, 0, 852, 
	10274, 1, 0, 0, 0, 854, 10276, 1, 0, 0, 0, 856, 10296, 1, 0, 0, 0, 858, 
	10308, 1, 0, 0, 0, 860, 10342, 1, 0, 0, 0, 862, 10355, 1, 0, 0, 0, 864, 
	10357, 1, 0, 0, 0, 866, 10387, 1, 0, 0, 0, 868, 10397, 1, 0, 0, 0, 870, 
	10424, 1, 0, 0, 0, 872, 10426, 1, 0, 0, 0, 874, 10431, 1, 0, 0, 0, 876, 
	10437, 1, 0, 0, 0, 878, 10446, 1, 0, 0, 0, 880, 10455, 1, 0, 0, 0, 882, 
	10475, 1, 0, 0, 0, 884, 10490, 1, 0, 0, 0, 886, 10493, 1, 0, 0, 0, 888, 
	10510, 1, 0, 0, 0, 890, 10513, 1, 0, 0, 0, 892, 10517, 1, 0, 0, 0, 894, 
	10522, 1, 0, 0, 0, 896, 10529, 1, 0, 0, 0, 898, 10539, 1, 0, 0, 0, 900, 
	10569, 1, 0, 0, 0, 902, 10572, 1, 0, 0, 0, 904, 10576, 1, 0, 0, 0, 906, 
	10580, 1, 0, 0, 0, 908, 10582, 1, 0, 0, 0, 910, 10584, 1, 0, 0, 0, 912, 
	10587, 1, 0, 0, 0, 914, 10590, 1, 0, 0, 0, 916, 10594, 1, 0, 0, 0, 918, 
	10597, 1, 0, 0, 0, 920, 10600, 1, 0, 0, 0, 922, 10608, 1, 0, 0, 0, 924, 
	10626, 1, 0, 0, 0, 926, 10687, 1, 0, 0, 0, 928, 10689, 1, 0, 0, 0, 930, 
	10698, 1, 0, 0, 0, 932, 10707, 1, 0, 0, 0, 934, 10713, 1, 0, 0, 0, 936, 
	10742, 1, 0, 0, 0, 938, 10769, 1, 0, 0, 0, 940, 10784, 1, 0, 0, 0, 942, 
	10786, 1, 0, 0, 0, 944, 10799, 1, 0, 0, 0, 946, 10801, 1, 0, 0, 0, 948, 
	10805, 1, 0, 0, 0, 950, 10807, 1, 0, 0, 0, 952, 10824, 1, 0, 0, 0, 954, 
	10836, 1, 0, 0, 0, 956, 10846, 1, 0, 0, 0, 958, 10851, 1, 0, 0, 0, 960, 
	10853, 1, 0, 0, 0, 962, 10855, 1, 0, 0, 0, 964, 10871, 1, 0, 0, 0, 966, 
	10884, 1, 0, 0, 0, 968, 10887, 1, 0, 0, 0, 970, 10912, 1, 0, 0, 0, 972, 
	10946, 1, 0, 0, 0, 974, 10948, 1, 0, 0, 0, 976, 10959, 1, 0, 0, 0, 978, 
	10963, 1, 0, 0, 0, 980, 10980, 1, 0, 0, 0, 982, 10982, 1, 0, 0, 0, 984, 
	10987, 1, 0, 0, 0, 986, 10998, 1, 0, 0, 0, 988, 11004, 1, 0, 0, 0, 990, 
	11029, 1, 0, 0, 0, 992, 11032, 1, 0, 0, 0, 994, 11036, 1, 0, 0, 0, 996, 
	11098, 1, 0, 0, 0, 998, 11100, 1, 0, 0, 0, 1000, 11106, 1, 0, 0, 0, 1002, 
	11140, 1, 0, 0, 0, 1004, 11142, 1, 0, 0, 0, 1006, 11145, 1, 0, 0, 0, 1008, 
	11151, 1, 0, 0, 0, 1010, 11160, 1, 0, 0, 0, 1012, 11170, 1, 0, 0, 0, 1014, 
	11172, 1, 0, 0, 0, 1016, 11198, 1, 0, 0, 0, 1018, 1020, 3, 2, 1, 0, 1019, 
	1018, 1, 0, 0, 0, 1020, 1023, 1, 0, 0, 0, 1021, 1019, 1, 0, 0, 0, 1021, 
	1022, 1, 0, 0, 0, 1022, 1024, 1, 0, 0, 0, 1023, 1021, 1, 0, 0, 0, 1024, 
	1025, 5, 0, 0, 1, 1025, 1, 1, 0, 0, 0, 1026, 1028, 3, 4, 2, 0, 1027, 1029, 
	5, 1070, 0, 0, 1028, 1027, 1, 0, 0, 0, 1028, 1029, 1, 0, 0, 0, 1029, 3, 
	1, 0, 0, 0, 1030, 1037, 3, 6, 3, 0, 1031, 1037, 3, 8, 4, 0, 1032, 1037, 
	3, 682, 341, 0, 1033, 1037, 3, 606, 303, 0, 1034, 1037, 3, 630, 315, 0, 
	1035, 1037, 3, 36, 18, 0, 1036, 1030, 1, 0, 0, 0, 1036, 1031, 1, 0, 0, 
	0, 1036, 1032, 1, 0, 0, 0, 1036, 1033, 1, 0, 0, 0, 1036, 1034, 1, 0, 0, 
	0, 1036, 1035, 1, 0, 0, 0, 1037, 5, 1, 0, 0, 0, 1038, 1043, 3, 122, 61, 
	0, 1039, 1043, 3, 296, 148, 0, 1040, 1043, 3, 530, 265, 0, 1041, 1043, 
	3, 596, 298, 0, 1042, 1038, 1, 0, 0, 0, 1042, 1039, 1, 0, 0, 0, 1042, 1040, 
	1, 0, 0, 0, 1042, 1041, 1, 0, 0, 0, 1043, 7, 1, 0, 0, 0, 1044, 1051, 3, 
	876, 438, 0, 1045, 1051, 3, 10, 5, 0, 1046, 1051, 3, 12, 6, 0, 1047, 1051, 
	3, 28, 14, 0, 1048, 1051, 3, 32, 16, 0, 1049, 1051, 3, 20, 10, 0, 1050, 
	1044, 1, 0, 0, 0, 1050, 1045, 1, 0, 0, 0, 1050, 1046, 1, 0, 0, 0, 1050, 
	1047, 1, 0, 0, 0, 1050, 1048, 1, 0, 0, 0, 1050, 1049, 1, 0, 0, 0, 1051, 
	9, 1, 0, 0, 0, 1052, 1054, 5, 375, 0, 0, 1053, 1055, 5, 550, 0, 0, 1054, 
	1053, 1, 0, 0, 0, 1054, 1055, 1, 0, 0, 0, 1055, 1056, 1, 0, 0, 0, 1056, 
	1057, 5, 382, 0, 0, 1057, 1062, 3, 830, 415, 0, 1058, 1059, 5, 1063, 0, 
	0, 1059, 1060, 3, 828, 414, 0, 1060, 1061, 5, 1064, 0, 0, 1061, 1063, 1, 
	0, 0, 0, 1062, 1058, 1, 0, 0, 0, 1062, 1063, 1, 0, 0, 0, 1063, 1066, 1, 
	0, 0, 0, 1064, 1067, 3, 34, 17, 0, 1065, 1067, 3, 882, 441, 0, 1066, 1064, 
	1, 0, 0, 0, 1066, 1065, 1, 0, 0, 0, 1067, 11, 1, 0, 0, 0, 1068, 1070, 5, 
	375, 0, 0, 1069, 1071, 5, 550, 0, 0, 1070, 1069, 1, 0, 0, 0, 1070, 1071, 
	1, 0, 0, 0, 1071, 1072, 1, 0, 0, 0, 1072, 1073, 5, 20, 0, 0, 1073, 1098, 
	3, 14, 7, 0, 1074, 1076, 5, 375, 0, 0, 1075, 1077, 5, 550, 0, 0, 1076, 
	1075, 1, 0, 0, 0, 1076, 1077, 1, 0, 0, 0, 1077, 1078, 1, 0, 0, 0, 1078, 
	1087, 7, 0, 0, 0, 1079, 1080, 5, 980, 0, 0, 1080, 1081, 3, 996, 498, 0, 
	1081, 1083, 5, 867, 0, 0, 1082, 1084, 3, 14, 7, 0, 1083, 1082, 1, 0, 0, 
	0, 1084, 1085, 1, 0, 0, 0, 1085, 1083, 1, 0, 0, 0, 1085, 1086, 1, 0, 0, 
	0, 1086, 1088, 1, 0, 0, 0, 1087, 1079, 1, 0, 0, 0, 1088, 1089, 1, 0, 0, 
	0, 1089, 1087, 1, 0, 0, 0, 1089, 1090, 1, 0, 0, 0, 1090, 1093, 1, 0, 0, 
	0, 1091, 1092, 5, 242, 0, 0, 1092, 1094, 3, 14, 7, 0, 1093, 1091, 1, 0, 
	0, 0, 1093, 1094, 1, 0, 0, 0, 1094, 1095, 1, 0, 0, 0, 1095, 1096, 3, 994, 
	497, 0, 1096, 1098, 1, 0, 0, 0, 1097, 1068, 1, 0, 0, 0, 1097, 1074, 1, 
	0, 0, 0, 1098, 13, 1, 0, 0, 0, 1099, 1100, 5, 382, 0, 0, 1100, 1105, 3, 
	830, 415, 0, 1101, 1102, 5, 1063, 0, 0, 1102, 1103, 3, 828, 414, 0, 1103, 
	1104, 5, 1064, 0, 0, 1104, 1106, 1, 0, 0, 0, 1105, 1101, 1, 0, 0, 0, 1105, 
	1106, 1, 0, 0, 0, 1106, 1108, 1, 0, 0, 0, 1107, 1109, 3, 16, 8, 0, 1108, 
	1107, 1, 0, 0, 0, 1108, 1109, 1, 0, 0, 0, 1109, 15, 1, 0, 0, 0, 1110, 1111, 
	5, 961, 0, 0, 1111, 1112, 5, 1063, 0, 0, 1112, 1117, 3, 18, 9, 0, 1113, 
	1114, 5, 1069, 0, 0, 1114, 1116, 3, 18, 9, 0, 1115, 1113, 1, 0, 0, 0, 1116, 
	1119, 1, 0, 0, 0, 1117, 1115, 1, 0, 0, 0, 1117, 1118, 1, 0, 0, 0, 1118, 
	1120, 1, 0, 0, 0, 1119, 1117, 1, 0, 0, 0, 1120, 1121, 5, 1064, 0, 0, 1121, 
	17, 1, 0, 0, 0, 1122, 1126, 3, 826, 413, 0, 1123, 1126, 5, 212, 0, 0, 1124, 
	1126, 5, 500, 0, 0, 1125, 1122, 1, 0, 0, 0, 1125, 1123, 1, 0, 0, 0, 1125, 
	1124, 1, 0, 0, 0, 1126, 19, 1, 0, 0, 0, 1127, 1128, 5, 453, 0, 0, 1128, 
	1129, 5, 382, 0, 0, 1129, 1130, 3, 830, 415, 0, 1130, 1131, 5, 954, 0, 
	0, 1131, 1132, 3, 922, 461, 0, 1132, 1133, 5, 531, 0, 0, 1133, 1134, 3, 
	988, 494, 0, 1134, 1135, 3, 22, 11, 0, 1135, 21, 1, 0, 0, 0, 1136, 1137, 
	5, 980, 0, 0, 1137, 1140, 5, 443, 0, 0, 1138, 1139, 5, 37, 0, 0, 1139, 
	1141, 3, 988, 494, 0, 1140, 1138, 1, 0, 0, 0, 1140, 1141, 1, 0, 0, 0, 1141, 
	1142, 1, 0, 0, 0, 1142, 1143, 5, 867, 0, 0, 1143, 1154, 3, 24, 12, 0, 1144, 
	1145, 5, 980, 0, 0, 1145, 1146, 5, 491, 0, 0, 1146, 1149, 5, 443, 0, 0, 
	1147, 1148, 5, 37, 0, 0, 1148, 1150, 3, 988, 494, 0, 1149, 1147, 1, 0, 
	0, 0, 1149, 1150, 1, 0, 0, 0, 1150, 1151, 1, 0, 0, 0, 1151, 1152, 5, 867, 
	0, 0, 1152, 1154, 3, 26, 13, 0, 1153, 1136, 1, 0, 0, 0, 1153, 1144, 1, 
	0, 0, 0, 1154, 23, 1, 0, 0, 0, 1155, 1156, 5, 940, 0, 0, 1156, 1157, 5, 
	757, 0, 0, 1157, 1158, 3, 826, 413, 0, 1158, 1159, 5, 1052, 0, 0, 1159, 
	1166, 3, 836, 418, 0, 1160, 1161, 3, 826, 413, 0, 1161, 1162, 5, 1052, 
	0, 0, 1162, 1163, 3, 836, 418, 0, 1163, 1165, 1, 0, 0, 0, 1164, 1160, 1, 
	0, 0, 0, 1165, 1168, 1, 0, 0, 0, 1166, 1164, 1, 0, 0, 0, 1166, 1167, 1, 
	0, 0, 0, 1167, 1171, 1, 0, 0, 0, 1168, 1166, 1, 0, 0, 0, 1169, 1171, 5, 
	223, 0, 0, 1170, 1155, 1, 0, 0, 0, 1170, 1169, 1, 0, 0, 0, 1171, 25, 1, 
	0, 0, 0, 1172, 1177, 5, 375, 0, 0, 1173, 1174, 5, 1063, 0, 0, 1174, 1175, 
	3, 828, 414, 0, 1175, 1176, 5, 1064, 0, 0, 1176, 1178, 1, 0, 0, 0, 1177, 
	1173, 1, 0, 0, 0, 1177, 1178, 1, 0, 0, 0, 1178, 1179, 1, 0, 0, 0, 1179, 
	1180, 5, 961, 0, 0, 1180, 1181, 5, 1063, 0, 0, 1181, 1182, 3, 834, 417, 
	0, 1182, 1183, 5, 1064, 0, 0, 1183, 27, 1, 0, 0, 0, 1184, 1185, 5, 940, 
	0, 0, 1185, 1186, 3, 830, 415, 0, 1186, 1187, 5, 757, 0, 0, 1187, 1188, 
	3, 826, 413, 0, 1188, 1189, 5, 1052, 0, 0, 1189, 1197, 3, 836, 418, 0, 
	1190, 1191, 5, 1069, 0, 0, 1191, 1192, 3, 826, 413, 0, 1192, 1193, 5, 1052, 
	0, 0, 1193, 1194, 3, 836, 418, 0, 1194, 1196, 1, 0, 0, 0, 1195, 1190, 1, 
	0, 0, 0, 1196, 1199, 1, 0, 0, 0, 1197, 1195, 1, 0, 0, 0, 1197, 1198, 1, 
	0, 0, 0, 1198, 1202, 1, 0, 0, 0, 1199, 1197, 1, 0, 0, 0, 1200, 1201, 5, 
	317, 0, 0, 1201, 1203, 3, 920, 460, 0, 1202, 1200, 1, 0, 0, 0, 1202, 1203, 
	1, 0, 0, 0, 1203, 1206, 1, 0, 0, 0, 1204, 1205, 5, 981, 0, 0, 1205, 1207, 
	3, 988, 494, 0, 1206, 1204, 1, 0, 0, 0, 1206, 1207, 1, 0, 0, 0, 1207, 29, 
	1, 0, 0, 0, 1208, 1214, 3, 830, 415, 0, 1209, 1210, 5, 1063, 0, 0, 1210, 
	1211, 3, 994, 497, 0, 1211, 1212, 5, 1064, 0, 0, 1212, 1214, 1, 0, 0, 0, 
	1213, 1208, 1, 0, 0, 0, 1213, 1209, 1, 0, 0, 0, 1214, 31, 1, 0, 0, 0, 1215, 
	1216, 5, 223, 0, 0, 1216, 1217, 5, 317, 0, 0, 1217, 1224, 3, 830, 415, 
	0, 1218, 1219, 5, 954, 0, 0, 1219, 1222, 3, 30, 15, 0, 1220, 1221, 5, 1069, 
	0, 0, 1221, 1223, 3, 30, 15, 0, 1222, 1220, 1, 0, 0, 0, 1222, 1223, 1, 
	0, 0, 0, 1223, 1225, 1, 0, 0, 0, 1224, 1218, 1, 0, 0, 0, 1224, 1225, 1, 
	0, 0, 0, 1225, 1228, 1, 0, 0, 0, 1226, 1227, 5, 981, 0, 0, 1227, 1229, 
	3, 988, 494, 0, 1228, 1226, 1, 0, 0, 0, 1228, 1229, 1, 0, 0, 0, 1229, 33, 
	1, 0, 0, 0, 1230, 1231, 5, 961, 0, 0, 1231, 1232, 5, 1063, 0, 0, 1232, 
	1233, 3, 834, 417, 0, 1233, 1239, 5, 1064, 0, 0, 1234, 1235, 5, 1069, 0, 
	0, 1235, 1236, 5, 1063, 0, 0, 1236, 1237, 3, 834, 417, 0, 1237, 1238, 5, 
	1064, 0, 0, 1238, 1240, 1, 0, 0, 0, 1239, 1234, 1, 0, 0, 0, 1239, 1240, 
	1, 0, 0, 0, 1240, 35, 1, 0, 0, 0, 1241, 1265, 3, 38, 19, 0, 1242, 1265, 
	3, 52, 26, 0, 1243, 1265, 3, 54, 27, 0, 1244, 1265, 3, 58, 29, 0, 1245, 
	1265, 3, 60, 30, 0, 1246, 1265, 3, 62, 31, 0, 1247, 1265, 3, 64, 32, 0, 
	1248, 1265, 3, 68, 34, 0, 1249, 1265, 3, 70, 35, 0, 1250, 1265, 3, 72, 
	36, 0, 1251, 1265, 3, 90, 45, 0, 1252, 1265, 3, 94, 47, 0, 1253, 1265, 
	3, 96, 48, 0, 1254, 1265, 3, 102, 51, 0, 1255, 1265, 3, 104, 52, 0, 1256, 
	1265, 3, 106, 53, 0, 1257, 1265, 3, 108, 54, 0, 1258, 1265, 3, 110, 55, 
	0, 1259, 1265, 3, 112, 56, 0, 1260, 1265, 3, 114, 57, 0, 1261, 1265, 3, 
	116, 58, 0, 1262, 1265, 3, 118, 59, 0, 1263, 1265, 3, 120, 60, 0, 1264, 
	1241, 1, 0, 0, 0, 1264, 1242, 1, 0, 0, 0, 1264, 1243, 1, 0, 0, 0, 1264, 
	1244, 1, 0, 0, 0, 1264, 1245, 1, 0, 0, 0, 1264, 1246, 1, 0, 0, 0, 1264, 
	1247, 1, 0, 0, 0, 1264, 1248, 1, 0, 0, 0, 1264, 1249, 1, 0, 0, 0, 1264, 
	1250, 1, 0, 0, 0, 1264, 1251, 1, 0, 0, 0, 1264, 1252, 1, 0, 0, 0, 1264, 
	1253, 1, 0, 0, 0, 1264, 1254, 1, 0, 0, 0, 1264, 1255, 1, 0, 0, 0, 1264, 
	1256, 1, 0, 0, 0, 1264, 1257, 1, 0, 0, 0, 1264, 1258, 1, 0, 0, 0, 1264, 
	1259, 1, 0, 0, 0, 1264, 1260, 1, 0, 0, 0, 1264, 1261, 1, 0, 0, 0, 1264, 
	1262, 1, 0, 0, 0, 1264, 1263, 1, 0, 0, 0, 1265, 37, 1, 0, 0, 0, 1266, 1267, 
	5, 178, 0, 0, 1267, 1268, 5, 382, 0, 0, 1268, 1269, 3, 830, 415, 0, 1269, 
	1273, 5, 317, 0, 0, 1270, 1274, 3, 98, 49, 0, 1271, 1274, 3, 100, 50, 0, 
	1272, 1274, 3, 40, 20, 0, 1273, 1270, 1, 0, 0, 0, 1273, 1271, 1, 0, 0, 
	0, 1273, 1272, 1, 0, 0, 0, 1274, 1276, 1, 0, 0, 0, 1275, 1277, 3, 42, 21, 
	0, 1276, 1275, 1, 0, 0, 0, 1276, 1277, 1, 0, 0, 0, 1277, 1279, 1, 0, 0, 
	0, 1278, 1280, 3, 824, 412, 0, 1279, 1278, 1, 0, 0, 0, 1279, 1280, 1, 0, 
	0, 0, 1280, 1282, 1, 0, 0, 0, 1281, 1283, 3, 44, 22, 0, 1282, 1281, 1, 
	0, 0, 0, 1282, 1283, 1, 0, 0, 0, 1283, 1287, 1, 0, 0, 0, 1284, 1286, 3, 
	408, 204, 0, 1285, 1284, 1, 0, 0, 0, 1286, 1289, 1, 0, 0, 0, 1287, 1285, 
	1, 0, 0, 0, 1287, 1288, 1, 0, 0, 0, 1288, 1293, 1, 0, 0, 0, 1289, 1287, 
	1, 0, 0, 0, 1290, 1291, 5, 959, 0, 0, 1291, 1292, 5, 1052, 0, 0, 1292, 
	1294, 7, 1, 0, 0, 1293, 1290, 1, 0, 0, 0, 1293, 1294, 1, 0, 0, 0, 1294, 
	1320, 1, 0, 0, 0, 1295, 1296, 5, 178, 0, 0, 1296, 1297, 5, 382, 0, 0, 1297, 
	1302, 3, 830, 415, 0, 1298, 1299, 5, 1063, 0, 0, 1299, 1300, 3, 828, 414, 
	0, 1300, 1301, 5, 1064, 0, 0, 1301, 1303, 1, 0, 0, 0, 1302, 1298, 1, 0, 
	0, 0, 1302, 1303, 1, 0, 0, 0, 1303, 1305, 1, 0, 0, 0, 1304, 1306, 3, 42, 
	21, 0, 1305, 1304, 1, 0, 0, 0, 1305, 1306, 1, 0, 0, 0, 1306, 1308, 1, 0, 
	0, 0, 1307, 1309, 3, 824, 412, 0, 1308, 1307, 1, 0, 0, 0, 1308, 1309, 1, 
	0, 0, 0, 1309, 1311, 1, 0, 0, 0, 1310, 1312, 3, 44, 22, 0, 1311, 1310, 
	1, 0, 0, 0, 1311, 1312, 1, 0, 0, 0, 1312, 1316, 1, 0, 0, 0, 1313, 1315, 
	3, 408, 204, 0, 1314, 1313, 1, 0, 0, 0, 1315, 1318, 1, 0, 0, 0, 1316, 1314, 
	1, 0, 0, 0, 1316, 1317, 1, 0, 0, 0, 1317, 1320, 1, 0, 0, 0, 1318, 1316, 
	1, 0, 0, 0, 1319, 1266, 1, 0, 0, 0, 1319, 1295, 1, 0, 0, 0, 1320, 39, 1, 
	0, 0, 0, 1321, 1322, 7, 2, 0, 0, 1322, 41, 1, 0, 0, 0, 1323, 1324, 5, 306, 
	0, 0, 1324, 1325, 5, 1052, 0, 0, 1325, 1326, 5, 1063, 0, 0, 1326, 1331, 
	3, 816, 408, 0, 1327, 1328, 5, 1069, 0, 0, 1328, 1330, 3, 816, 408, 0, 
	1329, 1327, 1, 0, 0, 0, 1330, 1333, 1, 0, 0, 0, 1331, 1329, 1, 0, 0, 0, 
	1331, 1332, 1, 0, 0, 0, 1332, 1334, 1, 0, 0, 0, 1333, 1331, 1, 0, 0, 0, 
	1334, 1335, 5, 1064, 0, 0, 1335, 43, 1, 0, 0, 0, 1336, 1337, 5, 305, 0, 
	0, 1337, 1338, 5, 1052, 0, 0, 1338, 1341, 5, 1063, 0, 0, 1339, 1342, 3, 
	46, 23, 0, 1340, 1342, 3, 48, 24, 0, 1341, 1339, 1, 0, 0, 0, 1341, 1340, 
	1, 0, 0, 0, 1342, 1343, 1, 0, 0, 0, 1343, 1344, 5, 1064, 0, 0, 1344, 45, 
	1, 0, 0, 0, 1345, 1346, 5, 314, 0, 0, 1346, 1347, 5, 1052, 0, 0, 1347, 
	1348, 3, 816, 408, 0, 1348, 47, 1, 0, 0, 0, 1349, 1350, 5, 917, 0, 0, 1350, 
	1351, 5, 1052, 0, 0, 1351, 1355, 7, 3, 0, 0, 1352, 1354, 3, 406, 203, 0, 
	1353, 1352, 1, 0, 0, 0, 1354, 1357, 1, 0, 0, 0, 1355, 1353, 1, 0, 0, 0, 
	1355, 1356, 1, 0, 0, 0, 1356, 49, 1, 0, 0, 0, 1357, 1355, 1, 0, 0, 0, 1358, 
	1359, 5, 797, 0, 0, 1359, 1360, 5, 1052, 0, 0, 1360, 1361, 5, 1063, 0, 
	0, 1361, 1362, 5, 314, 0, 0, 1362, 1363, 5, 1052, 0, 0, 1363, 1375, 3, 
	816, 408, 0, 1364, 1365, 5, 917, 0, 0, 1365, 1366, 5, 1052, 0, 0, 1366, 
	1368, 7, 3, 0, 0, 1367, 1369, 3, 406, 203, 0, 1368, 1367, 1, 0, 0, 0, 1369, 
	1370, 1, 0, 0, 0, 1370, 1368, 1, 0, 0, 0, 1370, 1371, 1, 0, 0, 0, 1371, 
	1372, 1, 0, 0, 0, 1372, 1373, 5, 1064, 0, 0, 1373, 1375, 1, 0, 0, 0, 1374, 
	1358, 1, 0, 0, 0, 1374, 1364, 1, 0, 0, 0, 1375, 51, 1, 0, 0, 0, 1376, 1377, 
	5, 178, 0, 0, 1377, 1381, 5, 382, 0, 0, 1378, 1382, 3, 98, 49, 0, 1379, 
	1382, 3, 100, 50, 0, 1380, 1382, 3, 40, 20, 0, 1381, 1378, 1, 0, 0, 0, 
	1381, 1379, 1, 0, 0, 0, 1381, 1380, 1, 0, 0, 0, 1382, 1383, 1, 0, 0, 0, 
	1383, 1389, 5, 317, 0, 0, 1384, 1390, 3, 830, 415, 0, 1385, 1386, 5, 1063, 
	0, 0, 1386, 1387, 3, 876, 438, 0, 1387, 1388, 5, 1064, 0, 0, 1388, 1390, 
	1, 0, 0, 0, 1389, 1384, 1, 0, 0, 0, 1389, 1385, 1, 0, 0, 0, 1390, 1392, 
	1, 0, 0, 0, 1391, 1393, 3, 946, 473, 0, 1392, 1391, 1, 0, 0, 0, 1392, 1393, 
	1, 0, 0, 0, 1393, 1395, 1, 0, 0, 0, 1394, 1396, 3, 44, 22, 0, 1395, 1394, 
	1, 0, 0, 0, 1395, 1396, 1, 0, 0, 0, 1396, 1398, 1, 0, 0, 0, 1397, 1399, 
	3, 408, 204, 0, 1398, 1397, 1, 0, 0, 0, 1398, 1399, 1, 0, 0, 0, 1399, 1403, 
	1, 0, 0, 0, 1400, 1401, 5, 959, 0, 0, 1401, 1402, 5, 1052, 0, 0, 1402, 
	1404, 5, 686, 0, 0, 1403, 1400, 1, 0, 0, 0, 1403, 1404, 1, 0, 0, 0, 1404, 
	1406, 1, 0, 0, 0, 1405, 1407, 5, 344, 0, 0, 1406, 1405, 1, 0, 0, 0, 1406, 
	1407, 1, 0, 0, 0, 1407, 53, 1, 0, 0, 0, 1408, 1410, 5, 155, 0, 0, 1409, 
	1411, 3, 622, 311, 0, 1410, 1409, 1, 0, 0, 0, 1410, 1411, 1, 0, 0, 0, 1411, 
	1412, 1, 0, 0, 0, 1412, 1413, 5, 531, 0, 0, 1413, 1414, 3, 56, 28, 0, 1414, 
	1415, 3, 830, 415, 0, 1415, 1416, 5, 383, 0, 0, 1416, 1417, 3, 816, 408, 
	0, 1417, 1429, 1, 0, 0, 0, 1418, 1420, 5, 155, 0, 0, 1419, 1421, 3, 622, 
	311, 0, 1420, 1419, 1, 0, 0, 0, 1420, 1421, 1, 0, 0, 0, 1421, 1422, 1, 
	0, 0, 0, 1422, 1423, 5, 531, 0, 0, 1423, 1424, 5, 153, 0, 0, 1424, 1425, 
	3, 826, 413, 0, 1425, 1426, 5, 383, 0, 0, 1426, 1427, 3, 816, 408, 0, 1427, 
	1429, 1, 0, 0, 0, 1428, 1408, 1, 0, 0, 0, 1428, 1418, 1, 0, 0, 0, 1429, 
	55, 1, 0, 0, 0, 1430, 1431, 5, 851, 0, 0, 1431, 57, 1, 0, 0, 0, 1432, 1434, 
	5, 156, 0, 0, 1433, 1435, 5, 986, 0, 0, 1434, 1433, 1, 0, 0, 0, 1434, 1435, 
	1, 0, 0, 0, 1435, 59, 1, 0, 0, 0, 1436, 1437, 5, 271, 0, 0, 1437, 1438, 
	5, 359, 0, 0, 1438, 1451, 3, 816, 408, 0, 1439, 1440, 5, 954, 0, 0, 1440, 
	1441, 5, 1063, 0, 0, 1441, 1446, 3, 820, 410, 0, 1442, 1443, 5, 1069, 0, 
	0, 1443, 1445, 3, 820, 410, 0, 1444, 1442, 1, 0, 0, 0, 1445, 1448, 1, 0, 
	0, 0, 1446, 1444, 1, 0, 0, 0, 1446, 1447, 1, 0, 0, 0, 1447, 1449, 1, 0, 
	0, 0, 1448, 1446, 1, 0, 0, 0, 1449, 1450, 5, 1064, 0, 0, 1450, 1452, 1, 
	0, 0, 0, 1451, 1439, 1, 0, 0, 0, 1451, 1452, 1, 0, 0, 0, 1452, 1488, 1, 
	0, 0, 0, 1453, 1454, 5, 271, 0, 0, 1454, 1455, 5, 359, 0, 0, 1455, 1468, 
	3, 820, 410, 0, 1456, 1457, 5, 954, 0, 0, 1457, 1458, 5, 1063, 0, 0, 1458, 
	1463, 3, 820, 410, 0, 1459, 1460, 5, 1069, 0, 0, 1460, 1462, 3, 820, 410, 
	0, 1461, 1459, 1, 0, 0, 0, 1462, 1465, 1, 0, 0, 0, 1463, 1461, 1, 0, 0, 
	0, 1463, 1464, 1, 0, 0, 0, 1464, 1466, 1, 0, 0, 0, 1465, 1463, 1, 0, 0, 
	0, 1466, 1467, 5, 1064, 0, 0, 1467, 1469, 1, 0, 0, 0, 1468, 1456, 1, 0, 
	0, 0, 1468, 1469, 1, 0, 0, 0, 1469, 1488, 1, 0, 0, 0, 1470, 1471, 5, 271, 
	0, 0, 1471, 1472, 5, 359, 0, 0, 1472, 1485, 5, 1037, 0, 0, 1473, 1474, 
	5, 954, 0, 0, 1474, 1475, 5, 1063, 0, 0, 1475, 1480, 3, 820, 410, 0, 1476, 
	1477, 5, 1069, 0, 0, 1477, 1479, 3, 820, 410, 0, 1478, 1476, 1, 0, 0, 0, 
	1479, 1482, 1, 0, 0, 0, 1480, 1478, 1, 0, 0, 0, 1480, 1481, 1, 0, 0, 0, 
	1481, 1483, 1, 0, 0, 0, 1482, 1480, 1, 0, 0, 0, 1483, 1484, 5, 1064, 0, 
	0, 1484, 1486, 1, 0, 0, 0, 1485, 1473, 1, 0, 0, 0, 1485, 1486, 1, 0, 0, 
	0, 1486, 1488, 1, 0, 0, 0, 1487, 1436, 1, 0, 0, 0, 1487, 1453, 1, 0, 0, 
	0, 1487, 1470, 1, 0, 0, 0, 1488, 61, 1, 0, 0, 0, 1489, 1490, 5, 271, 0, 
	0, 1490, 1491, 5, 861, 0, 0, 1491, 1492, 3, 830, 415, 0, 1492, 63, 1, 0, 
	0, 0, 1493, 1496, 5, 278, 0, 0, 1494, 1495, 5, 954, 0, 0, 1495, 1497, 7, 
	4, 0, 0, 1496, 1494, 1, 0, 0, 0, 1496, 1497, 1, 0, 0, 0, 1497, 1498, 1, 
	0, 0, 0, 1498, 1499, 3, 4, 2, 0, 1499, 65, 1, 0, 0, 0, 1500, 1501, 5, 554, 
	0, 0, 1501, 1502, 5, 1052, 0, 0, 1502, 1503, 3, 832, 416, 0, 1503, 67, 
	1, 0, 0, 0, 1504, 1505, 5, 331, 0, 0, 1505, 1506, 3, 98, 49, 0, 1506, 1508, 
	5, 1041, 0, 0, 1507, 1509, 3, 66, 33, 0, 1508, 1507, 1, 0, 0, 0, 1508, 
	1509, 1, 0, 0, 0, 1509, 1511, 1, 0, 0, 0, 1510, 1512, 3, 824, 412, 0, 1511, 
	1510, 1, 0, 0, 0, 1511, 1512, 1, 0, 0, 0, 1512, 69, 1, 0, 0, 0, 1513, 1514, 
	5, 336, 0, 0, 1514, 1540, 5, 552, 0, 0, 1515, 1528, 5, 531, 0, 0, 1516, 
	1517, 3, 526, 263, 0, 1517, 1518, 3, 830, 415, 0, 1518, 1529, 1, 0, 0, 
	0, 1519, 1520, 5, 20, 0, 0, 1520, 1521, 3, 528, 264, 0, 1521, 1526, 5, 
	365, 0, 0, 1522, 1523, 5, 200, 0, 0, 1523, 1527, 3, 820, 410, 0, 1524, 
	1525, 5, 732, 0, 0, 1525, 1527, 3, 798, 399, 0, 1526, 1522, 1, 0, 0, 0, 
	1526, 1524, 1, 0, 0, 0, 1527, 1529, 1, 0, 0, 0, 1528, 1516, 1, 0, 0, 0, 
	1528, 1519, 1, 0, 0, 0, 1529, 1541, 1, 0, 0, 0, 1530, 1531, 5, 531, 0, 
	0, 1531, 1532, 5, 321, 0, 0, 1532, 1533, 3, 528, 264, 0, 1533, 1538, 5, 
	365, 0, 0, 1534, 1535, 5, 200, 0, 0, 1535, 1539, 3, 820, 410, 0, 1536, 
	1537, 5, 732, 0, 0, 1537, 1539, 3, 798, 399, 0, 1538, 1534, 1, 0, 0, 0, 
	1538, 1536, 1, 0, 0, 0, 1539, 1541, 1, 0, 0, 0, 1540, 1515, 1, 0, 0, 0, 
	1540, 1530, 1, 0, 0, 0, 1541, 1542, 1, 0, 0, 0, 1542, 1543, 5, 888, 0, 
	0, 1543, 1544, 5, 693, 0, 0, 1544, 1548, 3, 820, 410, 0, 1545, 1546, 7, 
	5, 0, 0, 1546, 1547, 5, 190, 0, 0, 1547, 1549, 5, 337, 0, 0, 1548, 1545, 
	1, 0, 0, 0, 1548, 1549, 1, 0, 0, 0, 1549, 71, 1, 0, 0, 0, 1550, 1646, 5, 
	336, 0, 0, 1551, 1557, 3, 74, 37, 0, 1552, 1554, 5, 20, 0, 0, 1553, 1555, 
	5, 601, 0, 0, 1554, 1553, 1, 0, 0, 0, 1554, 1555, 1, 0, 0, 0, 1555, 1557, 
	1, 0, 0, 0, 1556, 1551, 1, 0, 0, 0, 1556, 1552, 1, 0, 0, 0, 1557, 1558, 
	1, 0, 0, 0, 1558, 1559, 5, 531, 0, 0, 1559, 1647, 5, 9, 0, 0, 1560, 1566, 
	3, 78, 39, 0, 1561, 1563, 5, 20, 0, 0, 1562, 1564, 5, 601, 0, 0, 1563, 
	1562, 1, 0, 0, 0, 1563, 1564, 1, 0, 0, 0, 1564, 1566, 1, 0, 0, 0, 1565, 
	1560, 1, 0, 0, 0, 1565, 1561, 1, 0, 0, 0, 1566, 1567, 1, 0, 0, 0, 1567, 
	1574, 5, 531, 0, 0, 1568, 1575, 5, 949, 0, 0, 1569, 1570, 5, 670, 0, 0, 
	1570, 1575, 5, 465, 0, 0, 1571, 1575, 5, 973, 0, 0, 1572, 1575, 5, 200, 
	0, 0, 1573, 1575, 5, 379, 0, 0, 1574, 1568, 1, 0, 0, 0, 1574, 1569, 1, 
	0, 0, 0, 1574, 1571, 1, 0, 0, 0, 1574, 1572, 1, 0, 0, 0, 1574, 1573, 1, 
	0, 0, 0, 1575, 1576, 1, 0, 0, 0, 1576, 1647, 3, 830, 415, 0, 1577, 1583, 
	3, 82, 41, 0, 1578, 1580, 5, 20, 0, 0, 1579, 1581, 5, 601, 0, 0, 1580, 
	1579, 1, 0, 0, 0, 1580, 1581, 1, 0, 0, 0, 1581, 1583, 1, 0, 0, 0, 1582, 
	1577, 1, 0, 0, 0, 1582, 1578, 1, 0, 0, 0, 1583, 1584, 1, 0, 0, 0, 1584, 
	1592, 5, 531, 0, 0, 1585, 1586, 5, 732, 0, 0, 1586, 1593, 3, 798, 399, 
	0, 1587, 1588, 5, 20, 0, 0, 1588, 1589, 5, 733, 0, 0, 1589, 1590, 5, 365, 
	0, 0, 1590, 1591, 5, 200, 0, 0, 1591, 1593, 3, 820, 410, 0, 1592, 1585, 
	1, 0, 0, 0, 1592, 1587, 1, 0, 0, 0, 1593, 1647, 1, 0, 0, 0, 1594, 1600, 
	3, 82, 41, 0, 1595, 1597, 5, 20, 0, 0, 1596, 1598, 5, 601, 0, 0, 1597, 
	1596, 1, 0, 0, 0, 1597, 1598, 1, 0, 0, 0, 1598, 1600, 1, 0, 0, 0, 1599, 
	1594, 1, 0, 0, 0, 1599, 1595, 1, 0, 0, 0, 1600, 1601, 1, 0, 0, 0, 1601, 
	1602, 5, 531, 0, 0, 1602, 1603, 5, 321, 0, 0, 1603, 1604, 5, 733, 0, 0, 
	1604, 1605, 5, 365, 0, 0, 1605, 1606, 5, 200, 0, 0, 1606, 1647, 3, 820, 
	410, 0, 1607, 1613, 3, 86, 43, 0, 1608, 1610, 5, 20, 0, 0, 1609, 1611, 
	5, 601, 0, 0, 1610, 1609, 1, 0, 0, 0, 1610, 1611, 1, 0, 0, 0, 1611, 1613, 
	1, 0, 0, 0, 1612, 1607, 1, 0, 0, 0, 1612, 1608, 1, 0, 0, 0, 1613, 1614, 
	1, 0, 0, 0, 1614, 1627, 5, 531, 0, 0, 1615, 1616, 3, 800, 400, 0, 1616, 
	1617, 3, 830, 415, 0, 1617, 1628, 1, 0, 0, 0, 1618, 1619, 5, 20, 0, 0, 
	1619, 1620, 3, 528, 264, 0, 1620, 1625, 5, 365, 0, 0, 1621, 1622, 5, 200, 
	0, 0, 1622, 1626, 3, 820, 410, 0, 1623, 1624, 5, 732, 0, 0, 1624, 1626, 
	3, 798, 399, 0, 1625, 1621, 1, 0, 0, 0, 1625, 1623, 1, 0, 0, 0, 1626, 1628, 
	1, 0, 0, 0, 1627, 1615, 1, 0, 0, 0, 1627, 1618, 1, 0, 0, 0, 1628, 1647, 
	1, 0, 0, 0, 1629, 1635, 3, 86, 43, 0, 1630, 1632, 5, 20, 0, 0, 1631, 1633, 
	5, 601, 0, 0, 1632, 1631, 1, 0, 0, 0, 1632, 1633, 1, 0, 0, 0, 1633, 1635, 
	1, 0, 0, 0, 1634, 1629, 1, 0, 0, 0, 1634, 1630, 1, 0, 0, 0, 1635, 1636, 
	1, 0, 0, 0, 1636, 1637, 5, 531, 0, 0, 1637, 1638, 5, 321, 0, 0, 1638, 1639, 
	3, 528, 264, 0, 1639, 1644, 5, 365, 0, 0, 1640, 1641, 5, 200, 0, 0, 1641, 
	1645, 3, 820, 410, 0, 1642, 1643, 5, 732, 0, 0, 1643, 1645, 3, 798, 399, 
	0, 1644, 1640, 1, 0, 0, 0, 1644, 1642, 1, 0, 0, 0, 1645, 1647, 1, 0, 0, 
	0, 1646, 1556, 1, 0, 0, 0, 1646, 1565, 1, 0, 0, 0, 1646, 1582, 1, 0, 0, 
	0, 1646, 1599, 1, 0, 0, 0, 1646, 1612, 1, 0, 0, 0, 1646, 1634, 1, 0, 0, 
	0, 1647, 1648, 1, 0, 0, 0, 1648, 1650, 5, 888, 0, 0, 1649, 1651, 5, 693, 
	0, 0, 1650, 1649, 1, 0, 0, 0, 1650, 1651, 1, 0, 0, 0, 1651, 1652, 1, 0, 
	0, 0, 1652, 1656, 3, 820, 410, 0, 1653, 1654, 5, 982, 0, 0, 1654, 1655, 
	5, 336, 0, 0, 1655, 1657, 5, 541, 0, 0, 1656, 1653, 1, 0, 0, 0, 1656, 1657, 
	1, 0, 0, 0, 1657, 73, 1, 0, 0, 0, 1658, 1663, 3, 76, 38, 0, 1659, 1660, 
	5, 1069, 0, 0, 1660, 1662, 3, 76, 38, 0, 1661, 1659, 1, 0, 0, 0, 1662, 
	1665, 1, 0, 0, 0, 1663, 1661, 1, 0, 0, 0, 1663, 1664, 1, 0, 0, 0, 1664, 
	75, 1, 0, 0, 0, 1665, 1663, 1, 0, 0, 0, 1666, 1679, 5, 183, 0, 0, 1667, 
	1680, 5, 9, 0, 0, 1668, 1669, 5, 198, 0, 0, 1669, 1670, 5, 270, 0, 0, 1670, 
	1680, 5, 418, 0, 0, 1671, 1680, 5, 200, 0, 0, 1672, 1680, 5, 379, 0, 0, 
	1673, 1674, 5, 477, 0, 0, 1674, 1680, 5, 583, 0, 0, 1675, 1680, 5, 693, 
	0, 0, 1676, 1680, 5, 760, 0, 0, 1677, 1680, 5, 949, 0, 0, 1678, 1680, 5, 
	973, 0, 0, 1679, 1667, 1, 0, 0, 0, 1679, 1668, 1, 0, 0, 0, 1679, 1671, 
	1, 0, 0, 0, 1679, 1672, 1, 0, 0, 0, 1679, 1673, 1, 0, 0, 0, 1679, 1675, 
	1, 0, 0, 0, 1679, 1676, 1, 0, 0, 0, 1679, 1677, 1, 0, 0, 0, 1679, 1678, 
	1, 0, 0, 0, 1680, 1711, 1, 0, 0, 0, 1681, 1682, 5, 52, 0, 0, 1682, 1683, 
	5, 437, 0, 0, 1683, 1696, 5, 583, 0, 0, 1684, 1685, 5, 52, 0, 0, 1685, 
	1686, 5, 698, 0, 0, 1686, 1687, 5, 8, 0, 0, 1687, 1696, 5, 583, 0, 0, 1688, 
	1689, 5, 52, 0, 0, 1689, 1690, 5, 753, 0, 0, 1690, 1696, 5, 583, 0, 0, 
	1691, 1692, 5, 52, 0, 0, 1692, 1696, 5, 858, 0, 0, 1693, 1694, 5, 56, 0, 
	0, 1694, 1696, 5, 583, 0, 0, 1695, 1681, 1, 0, 0, 0, 1695, 1684, 1, 0, 
	0, 0, 1695, 1688, 1, 0, 0, 0, 1695, 1691, 1, 0, 0, 0, 1695, 1693, 1, 0, 
	0, 0, 1696, 1711, 1, 0, 0, 0, 1697, 1698, 5, 271, 0, 0, 1698, 1709, 5, 
	861, 0, 0, 1699, 1700, 5, 363, 0, 0, 1700, 1709, 5, 760, 0, 0, 1701, 1702, 
	5, 433, 0, 0, 1702, 1709, 5, 337, 0, 0, 1703, 1704, 5, 465, 0, 0, 1704, 
	1709, 7, 6, 0, 0, 1705, 1706, 5, 549, 0, 0, 1706, 1707, 5, 760, 0, 0, 1707, 
	1709, 5, 677, 0, 0, 1708, 1697, 1, 0, 0, 0, 1708, 1699, 1, 0, 0, 0, 1708, 
	1701, 1, 0, 0, 0, 1708, 1703, 1, 0, 0, 0, 1708, 1705, 1, 0, 0, 0, 1709, 
	1711, 1, 0, 0, 0, 1710, 1666, 1, 0, 0, 0, 1710, 1695, 1, 0, 0, 0, 1710, 
	1708, 1, 0, 0, 0, 1711, 77, 1, 0, 0, 0, 1712, 1717, 3, 80, 40, 0, 1713, 
	1714, 5, 1069, 0, 0, 1714, 1716, 3, 80, 40, 0, 1715, 1713, 1, 0, 0, 0, 
	1716, 1719, 1, 0, 0, 0, 1717, 1715, 1, 0, 0, 0, 1717, 1718, 1, 0, 0, 0, 
	1718, 79, 1, 0, 0, 0, 1719, 1717, 1, 0, 0, 0, 1720, 1730, 5, 465, 0, 0, 
	1721, 1730, 5, 464, 0, 0, 1722, 1730, 5, 944, 0, 0, 1723, 1730, 5, 538, 
	0, 0, 1724, 1725, 5, 183, 0, 0, 1725, 1730, 5, 732, 0, 0, 1726, 1727, 5, 
	364, 0, 0, 1727, 1730, 5, 601, 0, 0, 1728, 1730, 5, 946, 0, 0, 1729, 1720, 
	1, 0, 0, 0, 1729, 1721, 1, 0, 0, 0, 1729, 1722, 1, 0, 0, 0, 1729, 1723, 
	1, 0, 0, 0, 1729, 1724, 1, 0, 0, 0, 1729, 1726, 1, 0, 0, 0, 1729, 1728, 
	1, 0, 0, 0, 1730, 81, 1, 0, 0, 0, 1731, 1736, 3, 84, 42, 0, 1732, 1733, 
	5, 1069, 0, 0, 1733, 1735, 3, 84, 42, 0, 1734, 1732, 1, 0, 0, 0, 1735, 
	1738, 1, 0, 0, 0, 1736, 1734, 1, 0, 0, 0, 1736, 1737, 1, 0, 0, 0, 1737, 
	83, 1, 0, 0, 0, 1738, 1736, 1, 0, 0, 0, 1739, 1772, 5, 464, 0, 0, 1740, 
	1772, 5, 465, 0, 0, 1741, 1772, 5, 944, 0, 0, 1742, 1766, 5, 183, 0, 0, 
	1743, 1767, 5, 851, 0, 0, 1744, 1745, 5, 280, 0, 0, 1745, 1767, 5, 851, 
	0, 0, 1746, 1767, 5, 967, 0, 0, 1747, 1748, 5, 445, 0, 0, 1748, 1767, 5, 
	967, 0, 0, 1749, 1750, 5, 437, 0, 0, 1750, 1767, 5, 583, 0, 0, 1751, 1752, 
	5, 698, 0, 0, 1752, 1753, 5, 8, 0, 0, 1753, 1767, 5, 583, 0, 0, 1754, 1755, 
	5, 753, 0, 0, 1755, 1767, 5, 583, 0, 0, 1756, 1767, 5, 858, 0, 0, 1757, 
	1767, 5, 749, 0, 0, 1758, 1767, 5, 319, 0, 0, 1759, 1767, 5, 603, 0, 0, 
	1760, 1761, 5, 303, 0, 0, 1761, 1767, 5, 313, 0, 0, 1762, 1767, 5, 795, 
	0, 0, 1763, 1767, 5, 576, 0, 0, 1764, 1767, 5, 830, 0, 0, 1765, 1767, 5, 
	861, 0, 0, 1766, 1743, 1, 0, 0, 0, 1766, 1744, 1, 0, 0, 0, 1766, 1746, 
	1, 0, 0, 0, 1766, 1747, 1, 0, 0, 0, 1766, 1749, 1, 0, 0, 0, 1766, 1751, 
	1, 0, 0, 0, 1766, 1754, 1, 0, 0, 0, 1766, 1756, 1, 0, 0, 0, 1766, 1757, 
	1, 0, 0, 0, 1766, 1758, 1, 0, 0, 0, 1766, 1759, 1, 0, 0, 0, 1766, 1760, 
	1, 0, 0, 0, 1766, 1762, 1, 0, 0, 0, 1766, 1763, 1, 0, 0, 0, 1766, 1764, 
	1, 0, 0, 0, 1766, 1765, 1, 0, 0, 0, 1767, 1772, 1, 0, 0, 0, 1768, 1769, 
	5, 13, 0, 0, 1769, 1770, 5, 738, 0, 0, 1770, 1772, 5, 540, 0, 0, 1771, 
	1739, 1, 0, 0, 0, 1771, 1740, 1, 0, 0, 0, 1771, 1741, 1, 0, 0, 0, 1771, 
	1742, 1, 0, 0, 0, 1771, 1768, 1, 0, 0, 0, 1772, 85, 1, 0, 0, 0, 1773, 1778, 
	3, 88, 44, 0, 1774, 1775, 5, 1069, 0, 0, 1775, 1777, 3, 88, 44, 0, 1776, 
	1774, 1, 0, 0, 0, 1777, 1780, 1, 0, 0, 0, 1778, 1776, 1, 0, 0, 0, 1778, 
	1779, 1, 0, 0, 0, 1779, 87, 1, 0, 0, 0, 1780, 1778, 1, 0, 0, 0, 1781, 1797, 
	5, 747, 0, 0, 1782, 1797, 5, 375, 0, 0, 1783, 1797, 5, 940, 0, 0, 1784, 
	1797, 5, 223, 0, 0, 1785, 1797, 5, 909, 0, 0, 1786, 1797, 5, 646, 0, 0, 
	1787, 1797, 5, 944, 0, 0, 1788, 1791, 5, 626, 0, 0, 1789, 1790, 5, 1069, 
	0, 0, 1790, 1792, 5, 988, 0, 0, 1791, 1789, 1, 0, 0, 0, 1791, 1792, 1, 
	0, 0, 0, 1792, 1797, 1, 0, 0, 0, 1793, 1797, 5, 465, 0, 0, 1794, 1797, 
	5, 538, 0, 0, 1795, 1797, 5, 52, 0, 0, 1796, 1781, 1, 0, 0, 0, 1796, 1782, 
	1, 0, 0, 0, 1796, 1783, 1, 0, 0, 0, 1796, 1784, 1, 0, 0, 0, 1796, 1785, 
	1, 0, 0, 0, 1796, 1786, 1, 0, 0, 0, 1796, 1787, 1, 0, 0, 0, 1796, 1788, 
	1, 0, 0, 0, 1796, 1793, 1, 0, 0, 0, 1796, 1794, 1, 0, 0, 0, 1796, 1795, 
	1, 0, 0, 0, 1797, 89, 1, 0, 0, 0, 1798, 1799, 5, 336, 0, 0, 1799, 1800, 
	3, 92, 46, 0, 1800, 1818, 5, 531, 0, 0, 1801, 1802, 5, 200, 0, 0, 1802, 
	1819, 3, 820, 410, 0, 1803, 1804, 5, 732, 0, 0, 1804, 1819, 3, 820, 410, 
	0, 1805, 1806, 5, 319, 0, 0, 1806, 1819, 3, 820, 410, 0, 1807, 1808, 5, 
	851, 0, 0, 1808, 1815, 3, 830, 415, 0, 1809, 1810, 5, 20, 0, 0, 1810, 1811, 
	5, 855, 0, 0, 1811, 1812, 5, 365, 0, 0, 1812, 1813, 5, 732, 0, 0, 1813, 
	1815, 3, 798, 399, 0, 1814, 1807, 1, 0, 0, 0, 1814, 1809, 1, 0, 0, 0, 1815, 
	1819, 1, 0, 0, 0, 1816, 1817, 5, 967, 0, 0, 1817, 1819, 3, 820, 410, 0, 
	1818, 1801, 1, 0, 0, 0, 1818, 1803, 1, 0, 0, 0, 1818, 1805, 1, 0, 0, 0, 
	1818, 1814, 1, 0, 0, 0, 1818, 1816, 1, 0, 0, 0, 1819, 1820, 1, 0, 0, 0, 
	1820, 1821, 5, 888, 0, 0, 1821, 1822, 5, 760, 0, 0, 1822, 1823, 3, 820, 
	410, 0, 1823, 91, 1, 0, 0, 0, 1824, 1825, 7, 7, 0, 0, 1825, 93, 1, 0, 0, 
	0, 1826, 1827, 5, 336, 0, 0, 1827, 1828, 5, 693, 0, 0, 1828, 1829, 3, 820, 
	410, 0, 1829, 1834, 5, 888, 0, 0, 1830, 1831, 5, 693, 0, 0, 1831, 1835, 
	3, 820, 410, 0, 1832, 1833, 5, 949, 0, 0, 1833, 1835, 3, 820, 410, 0, 1834, 
	1830, 1, 0, 0, 0, 1834, 1832, 1, 0, 0, 0, 1834, 1835, 1, 0, 0, 0, 1835, 
	95, 1, 0, 0, 0, 1836, 1839, 5, 415, 0, 0, 1837, 1840, 3, 98, 49, 0, 1838, 
	1840, 3, 100, 50, 0, 1839, 1837, 1, 0, 0, 0, 1839, 1838, 1, 0, 0, 0, 1840, 
	1842, 1, 0, 0, 0, 1841, 1843, 3, 824, 412, 0, 1842, 1841, 1, 0, 0, 0, 1842, 
	1843, 1, 0, 0, 0, 1843, 97, 1, 0, 0, 0, 1844, 1845, 5, 1061, 0, 0, 1845, 
	1846, 3, 820, 410, 0, 1846, 1847, 5, 1074, 0, 0, 1847, 99, 1, 0, 0, 0, 
	1848, 1849, 5, 1061, 0, 0, 1849, 1850, 3, 820, 410, 0, 1850, 1851, 5, 1074, 
	0, 0, 1851, 101, 1, 0, 0, 0, 1852, 1853, 5, 613, 0, 0, 1853, 1854, 5, 1041, 
	0, 0, 1854, 1858, 3, 98, 49, 0, 1855, 1856, 5, 554, 0, 0, 1856, 1857, 5, 
	1052, 0, 0, 1857, 1859, 3, 832, 416, 0, 1858, 1855, 1, 0, 0, 0, 1858, 1859, 
	1, 0, 0, 0, 1859, 1863, 1, 0, 0, 0, 1860, 1861, 5, 60, 0, 0, 1861, 1862, 
	5, 1052, 0, 0, 1862, 1864, 3, 430, 215, 0, 1863, 1860, 1, 0, 0, 0, 1863, 
	1864, 1, 0, 0, 0, 1864, 1868, 1, 0, 0, 0, 1865, 1866, 5, 788, 0, 0, 1866, 
	1867, 5, 1052, 0, 0, 1867, 1869, 7, 8, 0, 0, 1868, 1865, 1, 0, 0, 0, 1868, 
	1869, 1, 0, 0, 0, 1869, 1873, 1, 0, 0, 0, 1870, 1871, 5, 550, 0, 0, 1871, 
	1872, 5, 1052, 0, 0, 1872, 1874, 3, 430, 215, 0, 1873, 1870, 1, 0, 0, 0, 
	1873, 1874, 1, 0, 0, 0, 1874, 103, 1, 0, 0, 0, 1875, 1878, 5, 657, 0, 0, 
	1876, 1879, 3, 98, 49, 0, 1877, 1879, 3, 100, 50, 0, 1878, 1876, 1, 0, 
	0, 0, 1878, 1877, 1, 0, 0, 0, 1879, 1881, 1, 0, 0, 0, 1880, 1882, 3, 824, 
	412, 0, 1881, 1880, 1, 0, 0, 0, 1881, 1882, 1, 0, 0, 0, 1882, 105, 1, 0, 
	0, 0, 1883, 1887, 5, 690, 0, 0, 1884, 1885, 5, 336, 0, 0, 1885, 1886, 5, 
	541, 0, 0, 1886, 1888, 5, 310, 0, 0, 1887, 1884, 1, 0, 0, 0, 1887, 1888, 
	1, 0, 0, 0, 1888, 1979, 1, 0, 0, 0, 1889, 1895, 3, 76, 38, 0, 1890, 1892, 
	5, 20, 0, 0, 1891, 1893, 5, 601, 0, 0, 1892, 1891, 1, 0, 0, 0, 1892, 1893, 
	1, 0, 0, 0, 1893, 1895, 1, 0, 0, 0, 1894, 1889, 1, 0, 0, 0, 1894, 1890, 
	1, 0, 0, 0, 1895, 1896, 1, 0, 0, 0, 1896, 1897, 5, 531, 0, 0, 1897, 1980, 
	5, 9, 0, 0, 1898, 1904, 3, 78, 39, 0, 1899, 1901, 5, 20, 0, 0, 1900, 1902, 
	5, 601, 0, 0, 1901, 1900, 1, 0, 0, 0, 1901, 1902, 1, 0, 0, 0, 1902, 1904, 
	1, 0, 0, 0, 1903, 1898, 1, 0, 0, 0, 1903, 1899, 1, 0, 0, 0, 1904, 1905, 
	1, 0, 0, 0, 1905, 1911, 5, 531, 0, 0, 1906, 1907, 5, 670, 0, 0, 1907, 1912, 
	5, 465, 0, 0, 1908, 1912, 5, 973, 0, 0, 1909, 1912, 5, 200, 0, 0, 1910, 
	1912, 5, 379, 0, 0, 1911, 1906, 1, 0, 0, 0, 1911, 1908, 1, 0, 0, 0, 1911, 
	1909, 1, 0, 0, 0, 1911, 1910, 1, 0, 0, 0, 1912, 1913, 1, 0, 0, 0, 1913, 
	1980, 3, 830, 415, 0, 1914, 1920, 3, 82, 41, 0, 1915, 1917, 5, 20, 0, 0, 
	1916, 1918, 5, 601, 0, 0, 1917, 1916, 1, 0, 0, 0, 1917, 1918, 1, 0, 0, 
	0, 1918, 1920, 1, 0, 0, 0, 1919, 1914, 1, 0, 0, 0, 1919, 1915, 1, 0, 0, 
	0, 1920, 1921, 1, 0, 0, 0, 1921, 1929, 5, 531, 0, 0, 1922, 1923, 5, 732, 
	0, 0, 1923, 1930, 3, 798, 399, 0, 1924, 1925, 5, 20, 0, 0, 1925, 1926, 
	5, 733, 0, 0, 1926, 1927, 5, 365, 0, 0, 1927, 1928, 5, 200, 0, 0, 1928, 
	1930, 3, 820, 410, 0, 1929, 1922, 1, 0, 0, 0, 1929, 1924, 1, 0, 0, 0, 1930, 
	1980, 1, 0, 0, 0, 1931, 1937, 3, 82, 41, 0, 1932, 1934, 5, 20, 0, 0, 1933, 
	1935, 5, 601, 0, 0, 1934, 1933, 1, 0, 0, 0, 1934, 1935, 1, 0, 0, 0, 1935, 
	1937, 1, 0, 0, 0, 1936, 1931, 1, 0, 0, 0, 1936, 1932, 1, 0, 0, 0, 1937, 
	1938, 1, 0, 0, 0, 1938, 1939, 5, 531, 0, 0, 1939, 1940, 5, 321, 0, 0, 1940, 
	1941, 5, 733, 0, 0, 1941, 1942, 5, 365, 0, 0, 1942, 1980, 5, 200, 0, 0, 
	1943, 1949, 3, 86, 43, 0, 1944, 1946, 5, 20, 0, 0, 1945, 1947, 5, 601, 
	0, 0, 1946, 1945, 1, 0, 0, 0, 1946, 1947, 1, 0, 0, 0, 1947, 1949, 1, 0, 
	0, 0, 1948, 1943, 1, 0, 0, 0, 1948, 1944, 1, 0, 0, 0, 1949, 1950, 1, 0, 
	0, 0, 1950, 1960, 5, 531, 0, 0, 1951, 1952, 3, 800, 400, 0, 1952, 1953, 
	3, 830, 415, 0, 1953, 1961, 1, 0, 0, 0, 1954, 1955, 5, 20, 0, 0, 1955, 
	1956, 3, 528, 264, 0, 1956, 1957, 5, 365, 0, 0, 1957, 1958, 5, 732, 0, 
	0, 1958, 1959, 3, 798, 399, 0, 1959, 1961, 1, 0, 0, 0, 1960, 1951, 1, 0, 
	0, 0, 1960, 1954, 1, 0, 0, 0, 1961, 1980, 1, 0, 0, 0, 1962, 1968, 3, 86, 
	43, 0, 1963, 1965, 5, 20, 0, 0, 1964, 1966, 5, 601, 0, 0, 1965, 1964, 1, 
	0, 0, 0, 1965, 1966, 1, 0, 0, 0, 1966, 1968, 1, 0, 0, 0, 1967, 1962, 1, 
	0, 0, 0, 1967, 1963, 1, 0, 0, 0, 1968, 1969, 1, 0, 0, 0, 1969, 1970, 5, 
	531, 0, 0, 1970, 1971, 5, 321, 0, 0, 1971, 1972, 3, 528, 264, 0, 1972, 
	1977, 5, 365, 0, 0, 1973, 1974, 5, 200, 0, 0, 1974, 1978, 3, 820, 410, 
	0, 1975, 1976, 5, 732, 0, 0, 1976, 1978, 3, 798, 399, 0, 1977, 1973, 1, 
	0, 0, 0, 1977, 1975, 1, 0, 0, 0, 1978, 1980, 1, 0, 0, 0, 1979, 1894, 1, 
	0, 0, 0, 1979, 1903, 1, 0, 0, 0, 1979, 1919, 1, 0, 0, 0, 1979, 1936, 1, 
	0, 0, 0, 1979, 1948, 1, 0, 0, 0, 1979, 1967, 1, 0, 0, 0, 1980, 1981, 1, 
	0, 0, 0, 1981, 1983, 5, 317, 0, 0, 1982, 1984, 5, 693, 0, 0, 1983, 1982, 
	1, 0, 0, 0, 1983, 1984, 1, 0, 0, 0, 1984, 1985, 1, 0, 0, 0, 1985, 1987, 
	3, 820, 410, 0, 1986, 1988, 3, 592, 296, 0, 1987, 1986, 1, 0, 0, 0, 1987, 
	1988, 1, 0, 0, 0, 1988, 107, 1, 0, 0, 0, 1989, 1990, 5, 690, 0, 0, 1990, 
	1991, 3, 92, 46, 0, 1991, 2014, 5, 531, 0, 0, 1992, 1993, 5, 200, 0, 0, 
	1993, 2015, 3, 820, 410, 0, 1994, 1995, 5, 732, 0, 0, 1995, 2015, 3, 798, 
	399, 0, 1996, 1997, 5, 851, 0, 0, 1997, 2004, 3, 830, 415, 0, 1998, 1999, 
	5, 20, 0, 0, 1999, 2000, 5, 855, 0, 0, 2000, 2001, 5, 365, 0, 0, 2001, 
	2002, 5, 732, 0, 0, 2002, 2004, 3, 798, 399, 0, 2003, 1996, 1, 0, 0, 0, 
	2003, 1998, 1, 0, 0, 0, 2004, 2015, 1, 0, 0, 0, 2005, 2006, 5, 967, 0, 
	0, 2006, 2013, 3, 830, 415, 0, 2007, 2008, 5, 20, 0, 0, 2008, 2009, 5, 
	969, 0, 0, 2009, 2010, 5, 365, 0, 0, 2010, 2011, 5, 732, 0, 0, 2011, 2013, 
	3, 798, 399, 0, 2012, 2005, 1, 0, 0, 0, 2012, 2007, 1, 0, 0, 0, 2013, 2015, 
	1, 0, 0, 0, 2014, 1992, 1, 0, 0, 0, 2014, 1994, 1, 0, 0, 0, 2014, 2003, 
	1, 0, 0, 0, 2014, 2012, 1, 0, 0, 0, 2015, 2016, 1, 0, 0, 0, 2016, 2017, 
	5, 317, 0, 0, 2017, 2018, 5, 760, 0, 0, 2018, 2019, 3, 820, 410, 0, 2019, 
	109, 1, 0, 0, 0, 2020, 2021, 5, 690, 0, 0, 2021, 2022, 5, 693, 0, 0, 2022, 
	2023, 3, 820, 410, 0, 2023, 2028, 5, 317, 0, 0, 2024, 2025, 5, 693, 0, 
	0, 2025, 2029, 3, 820, 410, 0, 2026, 2027, 5, 949, 0, 0, 2027, 2029, 3, 
	820, 410, 0, 2028, 2024, 1, 0, 0, 0, 2028, 2026, 1, 0, 0, 0, 2029, 111, 
	1, 0, 0, 0, 2030, 2032, 5, 695, 0, 0, 2031, 2033, 5, 986, 0, 0, 2032, 2031, 
	1, 0, 0, 0, 2032, 2033, 1, 0, 0, 0, 2033, 113, 1, 0, 0, 0, 2034, 2035, 
	5, 757, 0, 0, 2035, 2036, 3, 820, 410, 0, 2036, 2037, 5, 1052, 0, 0, 2037, 
	2038, 3, 836, 418, 0, 2038, 2063, 1, 0, 0, 0, 2039, 2040, 5, 757, 0, 0, 
	2040, 2041, 5, 1063, 0, 0, 2041, 2046, 3, 820, 410, 0, 2042, 2043, 5, 1069, 
	0, 0, 2043, 2045, 3, 820, 410, 0, 2044, 2042, 1, 0, 0, 0, 2045, 2048, 1, 
	0, 0, 0, 2046, 2044, 1, 0, 0, 0, 2046, 2047, 1, 0, 0, 0, 2047, 2049, 1, 
	0, 0, 0, 2048, 2046, 1, 0, 0, 0, 2049, 2050, 5, 1064, 0, 0, 2050, 2051, 
	5, 1052, 0, 0, 2051, 2052, 5, 1063, 0, 0, 2052, 2057, 3, 836, 418, 0, 2053, 
	2054, 5, 1069, 0, 0, 2054, 2056, 3, 836, 418, 0, 2055, 2053, 1, 0, 0, 0, 
	2056, 2059, 1, 0, 0, 0, 2057, 2055, 1, 0, 0, 0, 2057, 2058, 1, 0, 0, 0, 
	2058, 2060, 1, 0, 0, 0, 2059, 2057, 1, 0, 0, 0, 2060, 2061, 5, 1064, 0, 
	0, 2061, 2063, 1, 0, 0, 0, 2062, 2034, 1, 0, 0, 0, 2062, 2039, 1, 0, 0, 
	0, 2063, 115, 1, 0, 0, 0, 2064, 2065, 5, 909, 0, 0, 2065, 2066, 5, 445, 
	0, 0, 2066, 2067, 5, 967, 0, 0, 2067, 2068, 3, 830, 415, 0, 2068, 117, 
	1, 0, 0, 0, 2069, 2071, 5, 909, 0, 0, 2070, 2072, 5, 851, 0, 0, 2071, 2070, 
	1, 0, 0, 0, 2071, 2072, 1, 0, 0, 0, 2072, 2074, 1, 0, 0, 0, 2073, 2075, 
	3, 622, 311, 0, 2074, 2073, 1, 0, 0, 0, 2074, 2075, 1, 0, 0, 0, 2075, 2076, 
	1, 0, 0, 0, 2076, 2077, 3, 830, 415, 0, 2077, 119, 1, 0, 0, 0, 2078, 2079, 
	5, 937, 0, 0, 2079, 2093, 3, 820, 410, 0, 2080, 2081, 5, 937, 0, 0, 2081, 
	2082, 5, 1063, 0, 0, 2082, 2087, 3, 820, 410, 0, 2083, 2084, 5, 1069, 0, 
	0, 2084, 2086, 3, 820, 410, 0, 2085, 2083, 1, 0, 0, 0, 2086, 2089, 1, 0, 
	0, 0, 2087, 2085, 1, 0, 0, 0, 2087, 2088, 1, 0, 0, 0, 2088, 2090, 1, 0, 
	0, 0, 2089, 2087, 1, 0, 0, 0, 2090, 2091, 5, 1064, 0, 0, 2091, 2093, 1, 
	0, 0, 0, 2092, 2078, 1, 0, 0, 0, 2092, 2080, 1, 0, 0, 0, 2093, 121, 1, 
	0, 0, 0, 2094, 2133, 3, 134, 67, 0, 2095, 2133, 3, 138, 69, 0, 2096, 2133, 
	3, 142, 71, 0, 2097, 2133, 3, 144, 72, 0, 2098, 2133, 3, 150, 75, 0, 2099, 
	2133, 3, 162, 81, 0, 2100, 2133, 3, 164, 82, 0, 2101, 2133, 3, 166, 83, 
	0, 2102, 2133, 3, 172, 86, 0, 2103, 2133, 3, 174, 87, 0, 2104, 2133, 3, 
	176, 88, 0, 2105, 2133, 3, 178, 89, 0, 2106, 2133, 3, 180, 90, 0, 2107, 
	2133, 3, 182, 91, 0, 2108, 2133, 3, 184, 92, 0, 2109, 2133, 3, 194, 97, 
	0, 2110, 2133, 3, 196, 98, 0, 2111, 2133, 3, 198, 99, 0, 2112, 2133, 3, 
	200, 100, 0, 2113, 2133, 3, 204, 102, 0, 2114, 2133, 3, 206, 103, 0, 2115, 
	2133, 3, 210, 105, 0, 2116, 2133, 3, 214, 107, 0, 2117, 2133, 3, 216, 108, 
	0, 2118, 2133, 3, 220, 110, 0, 2119, 2133, 3, 222, 111, 0, 2120, 2133, 
	3, 224, 112, 0, 2121, 2133, 3, 226, 113, 0, 2122, 2133, 3, 228, 114, 0, 
	2123, 2133, 3, 230, 115, 0, 2124, 2133, 3, 232, 116, 0, 2125, 2133, 3, 
	234, 117, 0, 2126, 2133, 3, 254, 127, 0, 2127, 2133, 3, 266, 133, 0, 2128, 
	2133, 3, 268, 134, 0, 2129, 2133, 3, 270, 135, 0, 2130, 2133, 3, 272, 136, 
	0, 2131, 2133, 3, 276, 138, 0, 2132, 2094, 1, 0, 0, 0, 2132, 2095, 1, 0, 
	0, 0, 2132, 2096, 1, 0, 0, 0, 2132, 2097, 1, 0, 0, 0, 2132, 2098, 1, 0, 
	0, 0, 2132, 2099, 1, 0, 0, 0, 2132, 2100, 1, 0, 0, 0, 2132, 2101, 1, 0, 
	0, 0, 2132, 2102, 1, 0, 0, 0, 2132, 2103, 1, 0, 0, 0, 2132, 2104, 1, 0, 
	0, 0, 2132, 2105, 1, 0, 0, 0, 2132, 2106, 1, 0, 0, 0, 2132, 2107, 1, 0, 
	0, 0, 2132, 2108, 1, 0, 0, 0, 2132, 2109, 1, 0, 0, 0, 2132, 2110, 1, 0, 
	0, 0, 2132, 2111, 1, 0, 0, 0, 2132, 2112, 1, 0, 0, 0, 2132, 2113, 1, 0, 
	0, 0, 2132, 2114, 1, 0, 0, 0, 2132, 2115, 1, 0, 0, 0, 2132, 2116, 1, 0, 
	0, 0, 2132, 2117, 1, 0, 0, 0, 2132, 2118, 1, 0, 0, 0, 2132, 2119, 1, 0, 
	0, 0, 2132, 2120, 1, 0, 0, 0, 2132, 2121, 1, 0, 0, 0, 2132, 2122, 1, 0, 
	0, 0, 2132, 2123, 1, 0, 0, 0, 2132, 2124, 1, 0, 0, 0, 2132, 2125, 1, 0, 
	0, 0, 2132, 2126, 1, 0, 0, 0, 2132, 2127, 1, 0, 0, 0, 2132, 2128, 1, 0, 
	0, 0, 2132, 2129, 1, 0, 0, 0, 2132, 2130, 1, 0, 0, 0, 2132, 2131, 1, 0, 
	0, 0, 2133, 123, 1, 0, 0, 0, 2134, 2135, 5, 24, 0, 0, 2135, 2136, 5, 1052, 
	0, 0, 2136, 2177, 3, 430, 215, 0, 2137, 2138, 5, 133, 0, 0, 2138, 2139, 
	5, 1052, 0, 0, 2139, 2177, 3, 832, 416, 0, 2140, 2141, 5, 259, 0, 0, 2141, 
	2142, 5, 1052, 0, 0, 2142, 2177, 3, 430, 215, 0, 2143, 2144, 5, 282, 0, 
	0, 2144, 2145, 5, 1052, 0, 0, 2145, 2177, 3, 430, 215, 0, 2146, 2147, 5, 
	370, 0, 0, 2147, 2148, 5, 1052, 0, 0, 2148, 2177, 3, 832, 416, 0, 2149, 
	2150, 5, 478, 0, 0, 2150, 2151, 5, 1052, 0, 0, 2151, 2177, 3, 816, 408, 
	0, 2152, 2153, 5, 571, 0, 0, 2153, 2154, 5, 1052, 0, 0, 2154, 2177, 3, 
	430, 215, 0, 2155, 2156, 5, 592, 0, 0, 2156, 2157, 5, 1052, 0, 0, 2157, 
	2177, 3, 430, 215, 0, 2158, 2159, 5, 593, 0, 0, 2159, 2160, 5, 1052, 0, 
	0, 2160, 2177, 3, 430, 215, 0, 2161, 2162, 5, 666, 0, 0, 2162, 2163, 5, 
	1052, 0, 0, 2163, 2177, 3, 430, 215, 0, 2164, 2165, 5, 667, 0, 0, 2165, 
	2166, 5, 1052, 0, 0, 2166, 2177, 3, 430, 215, 0, 2167, 2168, 5, 726, 0, 
	0, 2168, 2169, 5, 1052, 0, 0, 2169, 2177, 3, 838, 419, 0, 2170, 2171, 5, 
	755, 0, 0, 2171, 2172, 5, 1052, 0, 0, 2172, 2177, 3, 816, 408, 0, 2173, 
	2174, 5, 794, 0, 0, 2174, 2175, 5, 1052, 0, 0, 2175, 2177, 3, 430, 215, 
	0, 2176, 2134, 1, 0, 0, 0, 2176, 2137, 1, 0, 0, 0, 2176, 2140, 1, 0, 0, 
	0, 2176, 2143, 1, 0, 0, 0, 2176, 2146, 1, 0, 0, 0, 2176, 2149, 1, 0, 0, 
	0, 2176, 2152, 1, 0, 0, 0, 2176, 2155, 1, 0, 0, 0, 2176, 2158, 1, 0, 0, 
	0, 2176, 2161, 1, 0, 0, 0, 2176, 2164, 1, 0, 0, 0, 2176, 2167, 1, 0, 0, 
	0, 2176, 2170, 1, 0, 0, 0, 2176, 2173, 1, 0, 0, 0, 2177, 125, 1, 0, 0, 
	0, 2178, 2179, 5, 199, 0, 0, 2179, 2180, 5, 1052, 0, 0, 2180, 2204, 3, 
	832, 416, 0, 2181, 2182, 5, 449, 0, 0, 2182, 2183, 5, 1052, 0, 0, 2183, 
	2204, 3, 832, 416, 0, 2184, 2204, 3, 128, 64, 0, 2185, 2186, 5, 448, 0, 
	0, 2186, 2187, 5, 1052, 0, 0, 2187, 2204, 3, 832, 416, 0, 2188, 2189, 5, 
	478, 0, 0, 2189, 2190, 5, 1052, 0, 0, 2190, 2204, 3, 816, 408, 0, 2191, 
	2192, 5, 577, 0, 0, 2192, 2193, 5, 1052, 0, 0, 2193, 2204, 3, 430, 215, 
	0, 2194, 2195, 5, 755, 0, 0, 2195, 2196, 5, 1052, 0, 0, 2196, 2204, 3, 
	816, 408, 0, 2197, 2198, 5, 808, 0, 0, 2198, 2199, 5, 1052, 0, 0, 2199, 
	2204, 3, 832, 416, 0, 2200, 2201, 5, 809, 0, 0, 2201, 2202, 5, 1052, 0, 
	0, 2202, 2204, 3, 832, 416, 0, 2203, 2178, 1, 0, 0, 0, 2203, 2181, 1, 0, 
	0, 0, 2203, 2184, 1, 0, 0, 0, 2203, 2185, 1, 0, 0, 0, 2203, 2188, 1, 0, 
	0, 0, 2203, 2191, 1, 0, 0, 0, 2203, 2194, 1, 0, 0, 0, 2203, 2197, 1, 0, 
	0, 0, 2203, 2200, 1, 0, 0, 0, 2204, 127, 1, 0, 0, 0, 2205, 2206, 5, 213, 
	0, 0, 2206, 2207, 5, 1052, 0, 0, 2207, 2208, 3, 816, 408, 0, 2208, 129, 
	1, 0, 0, 0, 2209, 2210, 5, 562, 0, 0, 2210, 2211, 5, 1052, 0, 0, 2211, 
	2264, 3, 816, 408, 0, 2212, 2213, 5, 427, 0, 0, 2213, 2214, 5, 1052, 0, 
	0, 2214, 2264, 3, 816, 408, 0, 2215, 2216, 5, 235, 0, 0, 2216, 2217, 5, 
	1052, 0, 0, 2217, 2264, 3, 816, 408, 0, 2218, 2219, 5, 309, 0, 0, 2219, 
	2220, 5, 1052, 0, 0, 2220, 2264, 3, 816, 408, 0, 2221, 2222, 5, 454, 0, 
	0, 2222, 2223, 5, 1052, 0, 0, 2223, 2264, 3, 816, 408, 0, 2224, 2225, 5, 
	404, 0, 0, 2225, 2226, 5, 1052, 0, 0, 2226, 2264, 3, 816, 408, 0, 2227, 
	2228, 5, 243, 0, 0, 2228, 2229, 5, 1052, 0, 0, 2229, 2264, 3, 816, 408, 
	0, 2230, 2231, 5, 472, 0, 0, 2231, 2232, 5, 1052, 0, 0, 2232, 2264, 3, 
	430, 215, 0, 2233, 2234, 5, 233, 0, 0, 2234, 2235, 5, 1052, 0, 0, 2235, 
	2264, 3, 430, 215, 0, 2236, 2237, 5, 210, 0, 0, 2237, 2238, 5, 1052, 0, 
	0, 2238, 2264, 3, 832, 416, 0, 2239, 2240, 5, 459, 0, 0, 2240, 2241, 5, 
	1052, 0, 0, 2241, 2264, 3, 832, 416, 0, 2242, 2243, 5, 216, 0, 0, 2243, 
	2244, 5, 1052, 0, 0, 2244, 2264, 3, 816, 408, 0, 2245, 2246, 5, 214, 0, 
	0, 2246, 2247, 5, 1052, 0, 0, 2247, 2264, 3, 816, 408, 0, 2248, 2249, 5, 
	215, 0, 0, 2249, 2250, 5, 1052, 0, 0, 2250, 2264, 3, 816, 408, 0, 2251, 
	2252, 5, 458, 0, 0, 2252, 2253, 5, 1052, 0, 0, 2253, 2264, 3, 832, 416, 
	0, 2254, 2255, 5, 705, 0, 0, 2255, 2256, 5, 1052, 0, 0, 2256, 2264, 3, 
	816, 408, 0, 2257, 2258, 5, 706, 0, 0, 2258, 2259, 5, 1052, 0, 0, 2259, 
	2264, 3, 816, 408, 0, 2260, 2261, 5, 155, 0, 0, 2261, 2262, 5, 1052, 0, 
	0, 2262, 2264, 3, 816, 408, 0, 2263, 2209, 1, 0, 0, 0, 2263, 2212, 1, 0, 
	0, 0, 2263, 2215, 1, 0, 0, 0, 2263, 2218, 1, 0, 0, 0, 2263, 2221, 1, 0, 
	0, 0, 2263, 2224, 1, 0, 0, 0, 2263, 2227, 1, 0, 0, 0, 2263, 2230, 1, 0, 
	0, 0, 2263, 2233, 1, 0, 0, 0, 2263, 2236, 1, 0, 0, 0, 2263, 2239, 1, 0, 
	0, 0, 2263, 2242, 1, 0, 0, 0, 2263, 2245, 1, 0, 0, 0, 2263, 2248, 1, 0, 
	0, 0, 2263, 2251, 1, 0, 0, 0, 2263, 2254, 1, 0, 0, 0, 2263, 2257, 1, 0, 
	0, 0, 2263, 2260, 1, 0, 0, 0, 2264, 131, 1, 0, 0, 0, 2265, 2266, 5, 4, 
	0, 0, 2266, 2267, 5, 1052, 0, 0, 2267, 2359, 3, 430, 215, 0, 2268, 2269, 
	5, 66, 0, 0, 2269, 2270, 5, 1052, 0, 0, 2270, 2359, 3, 430, 215, 0, 2271, 
	2272, 5, 95, 0, 0, 2272, 2273, 5, 1052, 0, 0, 2273, 2359, 3, 816, 408, 
	0, 2274, 2275, 5, 96, 0, 0, 2275, 2276, 5, 1052, 0, 0, 2276, 2359, 3, 816, 
	408, 0, 2277, 2278, 5, 203, 0, 0, 2278, 2279, 5, 1052, 0, 0, 2279, 2359, 
	3, 816, 408, 0, 2280, 2281, 5, 204, 0, 0, 2281, 2282, 5, 1052, 0, 0, 2282, 
	2359, 3, 816, 408, 0, 2283, 2284, 5, 265, 0, 0, 2284, 2285, 5, 1052, 0, 
	0, 2285, 2359, 3, 430, 215, 0, 2286, 2287, 5, 266, 0, 0, 2287, 2288, 5, 
	1052, 0, 0, 2288, 2359, 3, 430, 215, 0, 2289, 2290, 5, 393, 0, 0, 2290, 
	2291, 5, 1052, 0, 0, 2291, 2359, 3, 832, 416, 0, 2292, 2293, 5, 423, 0, 
	0, 2293, 2294, 5, 1052, 0, 0, 2294, 2359, 3, 832, 416, 0, 2295, 2296, 5, 
	619, 0, 0, 2296, 2297, 5, 1052, 0, 0, 2297, 2359, 3, 816, 408, 0, 2298, 
	2299, 5, 704, 0, 0, 2299, 2300, 5, 1052, 0, 0, 2300, 2359, 3, 832, 416, 
	0, 2301, 2302, 5, 772, 0, 0, 2302, 2303, 5, 1052, 0, 0, 2303, 2359, 3, 
	816, 408, 0, 2304, 2305, 5, 809, 0, 0, 2305, 2306, 5, 1052, 0, 0, 2306, 
	2359, 3, 832, 416, 0, 2307, 2308, 5, 833, 0, 0, 2308, 2309, 5, 1052, 0, 
	0, 2309, 2359, 3, 430, 215, 0, 2310, 2311, 5, 876, 0, 0, 2311, 2312, 5, 
	1052, 0, 0, 2312, 2359, 3, 430, 215, 0, 2313, 2314, 5, 878, 0, 0, 2314, 
	2315, 5, 1052, 0, 0, 2315, 2359, 3, 816, 408, 0, 2316, 2317, 5, 880, 0, 
	0, 2317, 2318, 5, 1052, 0, 0, 2318, 2359, 3, 816, 408, 0, 2319, 2320, 5, 
	882, 0, 0, 2320, 2321, 5, 1052, 0, 0, 2321, 2359, 3, 816, 408, 0, 2322, 
	2323, 5, 883, 0, 0, 2323, 2324, 5, 1052, 0, 0, 2324, 2359, 3, 816, 408, 
	0, 2325, 2326, 5, 884, 0, 0, 2326, 2327, 5, 1052, 0, 0, 2327, 2359, 3, 
	816, 408, 0, 2328, 2329, 5, 886, 0, 0, 2329, 2330, 5, 1052, 0, 0, 2330, 
	2359, 3, 816, 408, 0, 2331, 2332, 5, 887, 0, 0, 2332, 2333, 5, 1052, 0, 
	0, 2333, 2359, 3, 816, 408, 0, 2334, 2335, 5, 871, 0, 0, 2335, 2336, 5, 
	1052, 0, 0, 2336, 2359, 3, 816, 408, 0, 2337, 2338, 5, 872, 0, 0, 2338, 
	2339, 5, 1052, 0, 0, 2339, 2359, 3, 816, 408, 0, 2340, 2341, 5, 896, 0, 
	0, 2341, 2342, 5, 1052, 0, 0, 2342, 2359, 3, 816, 408, 0, 2343, 2344, 5, 
	915, 0, 0, 2344, 2345, 5, 1052, 0, 0, 2345, 2359, 3, 832, 416, 0, 2346, 
	2347, 5, 938, 0, 0, 2347, 2348, 5, 1052, 0, 0, 2348, 2359, 3, 816, 408, 
	0, 2349, 2350, 5, 947, 0, 0, 2350, 2351, 5, 1052, 0, 0, 2351, 2359, 3, 
	430, 215, 0, 2352, 2353, 5, 976, 0, 0, 2353, 2354, 5, 1052, 0, 0, 2354, 
	2359, 3, 832, 416, 0, 2355, 2356, 5, 977, 0, 0, 2356, 2357, 5, 1052, 0, 
	0, 2357, 2359, 3, 832, 416, 0, 2358, 2265, 1, 0, 0, 0, 2358, 2268, 1, 0, 
	0, 0, 2358, 2271, 1, 0, 0, 0, 2358, 2274, 1, 0, 0, 0, 2358, 2277, 1, 0, 
	0, 0, 2358, 2280, 1, 0, 0, 0, 2358, 2283, 1, 0, 0, 0, 2358, 2286, 1, 0, 
	0, 0, 2358, 2289, 1, 0, 0, 0, 2358, 2292, 1, 0, 0, 0, 2358, 2295, 1, 0, 
	0, 0, 2358, 2298, 1, 0, 0, 0, 2358, 2301, 1, 0, 0, 0, 2358, 2304, 1, 0, 
	0, 0, 2358, 2307, 1, 0, 0, 0, 2358, 2310, 1, 0, 0, 0, 2358, 2313, 1, 0, 
	0, 0, 2358, 2316, 1, 0, 0, 0, 2358, 2319, 1, 0, 0, 0, 2358, 2322, 1, 0, 
	0, 0, 2358, 2325, 1, 0, 0, 0, 2358, 2328, 1, 0, 0, 0, 2358, 2331, 1, 0, 
	0, 0, 2358, 2334, 1, 0, 0, 0, 2358, 2337, 1, 0, 0, 0, 2358, 2340, 1, 0, 
	0, 0, 2358, 2343, 1, 0, 0, 0, 2358, 2346, 1, 0, 0, 0, 2358, 2349, 1, 0, 
	0, 0, 2358, 2352, 1, 0, 0, 0, 2358, 2355, 1, 0, 0, 0, 2359, 133, 1, 0, 
	0, 0, 2360, 2361, 5, 35, 0, 0, 2361, 2362, 5, 9, 0, 0, 2362, 2363, 3, 288, 
	144, 0, 2363, 135, 1, 0, 0, 0, 2364, 2365, 5, 252, 0, 0, 2365, 2366, 5, 
	1052, 0, 0, 2366, 2367, 3, 430, 215, 0, 2367, 137, 1, 0, 0, 0, 2368, 2370, 
	5, 35, 0, 0, 2369, 2371, 5, 41, 0, 0, 2370, 2369, 1, 0, 0, 0, 2370, 2371, 
	1, 0, 0, 0, 2371, 2372, 1, 0, 0, 0, 2372, 2374, 5, 379, 0, 0, 2373, 2375, 
	3, 622, 311, 0, 2374, 2373, 1, 0, 0, 0, 2374, 2375, 1, 0, 0, 0, 2375, 2376, 
	1, 0, 0, 0, 2376, 2377, 3, 820, 410, 0, 2377, 2381, 5, 757, 0, 0, 2378, 
	2379, 5, 43, 0, 0, 2379, 2380, 5, 1052, 0, 0, 2380, 2382, 3, 816, 408, 
	0, 2381, 2378, 1, 0, 0, 0, 2381, 2382, 1, 0, 0, 0, 2382, 2386, 1, 0, 0, 
	0, 2383, 2384, 5, 80, 0, 0, 2384, 2385, 5, 1052, 0, 0, 2385, 2387, 3, 816, 
	408, 0, 2386, 2383, 1, 0, 0, 0, 2386, 2387, 1, 0, 0, 0, 2387, 2391, 1, 
	0, 0, 0, 2388, 2389, 5, 46, 0, 0, 2389, 2390, 5, 1052, 0, 0, 2390, 2392, 
	3, 816, 408, 0, 2391, 2388, 1, 0, 0, 0, 2391, 2392, 1, 0, 0, 0, 2392, 2394, 
	1, 0, 0, 0, 2393, 2395, 3, 136, 68, 0, 2394, 2393, 1, 0, 0, 0, 2394, 2395, 
	1, 0, 0, 0, 2395, 2402, 1, 0, 0, 0, 2396, 2397, 5, 42, 0, 0, 2397, 2398, 
	5, 1052, 0, 0, 2398, 2399, 5, 1063, 0, 0, 2399, 2400, 3, 816, 408, 0, 2400, 
	2401, 5, 1064, 0, 0, 2401, 2403, 1, 0, 0, 0, 2402, 2396, 1, 0, 0, 0, 2402, 
	2403, 1, 0, 0, 0, 2403, 2410, 1, 0, 0, 0, 2404, 2405, 5, 44, 0, 0, 2405, 
	2406, 5, 1052, 0, 0, 2406, 2407, 5, 1063, 0, 0, 2407, 2408, 3, 816, 408, 
	0, 2408, 2409, 5, 1064, 0, 0, 2409, 2411, 1, 0, 0, 0, 2410, 2404, 1, 0, 
	0, 0, 2410, 2411, 1, 0, 0, 0, 2411, 2413, 1, 0, 0, 0, 2412, 2414, 3, 618, 
	309, 0, 2413, 2412, 1, 0, 0, 0, 2413, 2414, 1, 0, 0, 0, 2414, 2450, 1, 
	0, 0, 0, 2415, 2417, 5, 35, 0, 0, 2416, 2418, 5, 41, 0, 0, 2417, 2416, 
	1, 0, 0, 0, 2417, 2418, 1, 0, 0, 0, 2418, 2419, 1, 0, 0, 0, 2419, 2420, 
	5, 379, 0, 0, 2420, 2421, 3, 820, 410, 0, 2421, 2422, 3, 290, 145, 0, 2422, 
	2450, 1, 0, 0, 0, 2423, 2425, 5, 35, 0, 0, 2424, 2426, 5, 41, 0, 0, 2425, 
	2424, 1, 0, 0, 0, 2425, 2426, 1, 0, 0, 0, 2426, 2427, 1, 0, 0, 0, 2427, 
	2428, 5, 379, 0, 0, 2428, 2429, 3, 820, 410, 0, 2429, 2430, 3, 294, 147, 
	0, 2430, 2450, 1, 0, 0, 0, 2431, 2433, 5, 35, 0, 0, 2432, 2434, 5, 41, 
	0, 0, 2433, 2432, 1, 0, 0, 0, 2433, 2434, 1, 0, 0, 0, 2434, 2435, 1, 0, 
	0, 0, 2435, 2437, 5, 379, 0, 0, 2436, 2438, 3, 622, 311, 0, 2437, 2436, 
	1, 0, 0, 0, 2437, 2438, 1, 0, 0, 0, 2438, 2439, 1, 0, 0, 0, 2439, 2440, 
	3, 820, 410, 0, 2440, 2441, 5, 937, 0, 0, 2441, 2446, 3, 140, 70, 0, 2442, 
	2443, 5, 1069, 0, 0, 2443, 2445, 3, 140, 70, 0, 2444, 2442, 1, 0, 0, 0, 
	2445, 2448, 1, 0, 0, 0, 2446, 2444, 1, 0, 0, 0, 2446, 2447, 1, 0, 0, 0, 
	2447, 2450, 1, 0, 0, 0, 2448, 2446, 1, 0, 0, 0, 2449, 2368, 1, 0, 0, 0, 
	2449, 2415, 1, 0, 0, 0, 2449, 2423, 1, 0, 0, 0, 2449, 2431, 1, 0, 0, 0, 
	2450, 139, 1, 0, 0, 0, 2451, 2452, 7, 9, 0, 0, 2452, 141, 1, 0, 0, 0, 2453, 
	2454, 5, 35, 0, 0, 2454, 2455, 5, 165, 0, 0, 2455, 2456, 3, 278, 139, 0, 
	2456, 143, 1, 0, 0, 0, 2457, 2458, 5, 35, 0, 0, 2458, 2460, 5, 200, 0, 
	0, 2459, 2461, 3, 622, 311, 0, 2460, 2459, 1, 0, 0, 0, 2460, 2461, 1, 0, 
	0, 0, 2461, 2462, 1, 0, 0, 0, 2462, 2463, 3, 820, 410, 0, 2463, 2464, 5, 
	658, 0, 0, 2464, 2465, 5, 888, 0, 0, 2465, 2466, 3, 820, 410, 0, 2466, 
	2578, 1, 0, 0, 0, 2467, 2468, 5, 35, 0, 0, 2468, 2470, 5, 200, 0, 0, 2469, 
	2471, 3, 622, 311, 0, 2470, 2469, 1, 0, 0, 0, 2470, 2471, 1, 0, 0, 0, 2471, 
	2472, 1, 0, 0, 0, 2472, 2473, 3, 820, 410, 0, 2473, 2474, 5, 846, 0, 0, 
	2474, 2475, 5, 982, 0, 0, 2475, 2476, 3, 820, 410, 0, 2476, 2578, 1, 0, 
	0, 0, 2477, 2478, 5, 35, 0, 0, 2478, 2480, 5, 200, 0, 0, 2479, 2481, 3, 
	622, 311, 0, 2480, 2479, 1, 0, 0, 0, 2480, 2481, 1, 0, 0, 0, 2481, 2482, 
	1, 0, 0, 0, 2482, 2483, 3, 820, 410, 0, 2483, 2487, 5, 757, 0, 0, 2484, 
	2485, 5, 199, 0, 0, 2485, 2486, 5, 1052, 0, 0, 2486, 2488, 3, 832, 416, 
	0, 2487, 2484, 1, 0, 0, 0, 2487, 2488, 1, 0, 0, 0, 2488, 2492, 1, 0, 0, 
	0, 2489, 2490, 5, 449, 0, 0, 2490, 2491, 5, 1052, 0, 0, 2491, 2493, 3, 
	832, 416, 0, 2492, 2489, 1, 0, 0, 0, 2492, 2493, 1, 0, 0, 0, 2493, 2495, 
	1, 0, 0, 0, 2494, 2496, 3, 128, 64, 0, 2495, 2494, 1, 0, 0, 0, 2495, 2496, 
	1, 0, 0, 0, 2496, 2498, 1, 0, 0, 0, 2497, 2499, 3, 618, 309, 0, 2498, 2497, 
	1, 0, 0, 0, 2498, 2499, 1, 0, 0, 0, 2499, 2578, 1, 0, 0, 0, 2500, 2501, 
	5, 35, 0, 0, 2501, 2502, 5, 200, 0, 0, 2502, 2503, 3, 820, 410, 0, 2503, 
	2504, 3, 290, 145, 0, 2504, 2578, 1, 0, 0, 0, 2505, 2506, 5, 35, 0, 0, 
	2506, 2507, 5, 200, 0, 0, 2507, 2508, 3, 820, 410, 0, 2508, 2509, 3, 294, 
	147, 0, 2509, 2578, 1, 0, 0, 0, 2510, 2511, 5, 35, 0, 0, 2511, 2513, 5, 
	200, 0, 0, 2512, 2514, 3, 622, 311, 0, 2513, 2512, 1, 0, 0, 0, 2513, 2514, 
	1, 0, 0, 0, 2514, 2515, 1, 0, 0, 0, 2515, 2516, 3, 820, 410, 0, 2516, 2517, 
	5, 937, 0, 0, 2517, 2522, 3, 146, 73, 0, 2518, 2519, 5, 1069, 0, 0, 2519, 
	2521, 3, 146, 73, 0, 2520, 2518, 1, 0, 0, 0, 2521, 2524, 1, 0, 0, 0, 2522, 
	2520, 1, 0, 0, 0, 2522, 2523, 1, 0, 0, 0, 2523, 2578, 1, 0, 0, 0, 2524, 
	2522, 1, 0, 0, 0, 2525, 2526, 5, 35, 0, 0, 2526, 2527, 5, 200, 0, 0, 2527, 
	2528, 3, 820, 410, 0, 2528, 2529, 5, 246, 0, 0, 2529, 2530, 5, 663, 0, 
	0, 2530, 2531, 5, 888, 0, 0, 2531, 2532, 5, 10, 0, 0, 2532, 2536, 3, 148, 
	74, 0, 2533, 2534, 5, 353, 0, 0, 2534, 2535, 5, 241, 0, 0, 2535, 2537, 
	5, 125, 0, 0, 2536, 2533, 1, 0, 0, 0, 2536, 2537, 1, 0, 0, 0, 2537, 2578, 
	1, 0, 0, 0, 2538, 2539, 5, 35, 0, 0, 2539, 2540, 5, 200, 0, 0, 2540, 2541, 
	3, 820, 410, 0, 2541, 2542, 5, 230, 0, 0, 2542, 2546, 5, 663, 0, 0, 2543, 
	2544, 5, 888, 0, 0, 2544, 2545, 5, 10, 0, 0, 2545, 2547, 3, 148, 74, 0, 
	2546, 2543, 1, 0, 0, 0, 2546, 2547, 1, 0, 0, 0, 2547, 2578, 1, 0, 0, 0, 
	2548, 2549, 5, 35, 0, 0, 2549, 2550, 5, 200, 0, 0, 2550, 2551, 3, 820, 
	410, 0, 2551, 2552, 5, 647, 0, 0, 2552, 2578, 1, 0, 0, 0, 2553, 2554, 5, 
	35, 0, 0, 2554, 2555, 5, 200, 0, 0, 2555, 2556, 3, 820, 410, 0, 2556, 2557, 
	5, 246, 0, 0, 2557, 2558, 5, 297, 0, 0, 2558, 2559, 5, 888, 0, 0, 2559, 
	2560, 5, 10, 0, 0, 2560, 2561, 3, 148, 74, 0, 2561, 2578, 1, 0, 0, 0, 2562, 
	2563, 5, 35, 0, 0, 2563, 2564, 5, 200, 0, 0, 2564, 2565, 3, 820, 410, 0, 
	2565, 2566, 5, 230, 0, 0, 2566, 2570, 5, 297, 0, 0, 2567, 2568, 5, 888, 
	0, 0, 2568, 2569, 5, 10, 0, 0, 2569, 2571, 3, 148, 74, 0, 2570, 2567, 1, 
	0, 0, 0, 2570, 2571, 1, 0, 0, 0, 2571, 2578, 1, 0, 0, 0, 2572, 2573, 5, 
	35, 0, 0, 2573, 2574, 5, 200, 0, 0, 2574, 2575, 3, 820, 410, 0, 2575, 2576, 
	5, 594, 0, 0, 2576, 2578, 1, 0, 0, 0, 2577, 2457, 1, 0, 0, 0, 2577, 2467, 
	1, 0, 0, 0, 2577, 2477, 1, 0, 0, 0, 2577, 2500, 1, 0, 0, 0, 2577, 2505, 
	1, 0, 0, 0, 2577, 2510, 1, 0, 0, 0, 2577, 2525, 1, 0, 0, 0, 2577, 2538, 
	1, 0, 0, 0, 2577, 2548, 1, 0, 0, 0, 2577, 2553, 1, 0, 0, 0, 2577, 2562, 
	1, 0, 0, 0, 2577, 2572, 1, 0, 0, 0, 2578, 145, 1, 0, 0, 0, 2579, 2580, 
	7, 10, 0, 0, 2580, 147, 1, 0, 0, 0, 2581, 2586, 3, 796, 398, 0, 2582, 2583, 
	5, 1069, 0, 0, 2583, 2585, 3, 796, 398, 0, 2584, 2582, 1, 0, 0, 0, 2585, 
	2588, 1, 0, 0, 0, 2586, 2584, 1, 0, 0, 0, 2586, 2587, 1, 0, 0, 0, 2587, 
	149, 1, 0, 0, 0, 2588, 2586, 1, 0, 0, 0, 2589, 2590, 5, 35, 0, 0, 2590, 
	2591, 5, 280, 0, 0, 2591, 2593, 5, 851, 0, 0, 2592, 2594, 3, 622, 311, 
	0, 2593, 2592, 1, 0, 0, 0, 2593, 2594, 1, 0, 0, 0, 2594, 2595, 1, 0, 0, 
	0, 2595, 2596, 3, 830, 415, 0, 2596, 2598, 5, 647, 0, 0, 2597, 2599, 3, 
	816, 408, 0, 2598, 2597, 1, 0, 0, 0, 2598, 2599, 1, 0, 0, 0, 2599, 2691, 
	1, 0, 0, 0, 2600, 2601, 5, 35, 0, 0, 2601, 2602, 5, 280, 0, 0, 2602, 2604, 
	5, 851, 0, 0, 2603, 2605, 3, 622, 311, 0, 2604, 2603, 1, 0, 0, 0, 2604, 
	2605, 1, 0, 0, 0, 2605, 2606, 1, 0, 0, 0, 2606, 2607, 3, 830, 415, 0, 2607, 
	2608, 5, 13, 0, 0, 2608, 2609, 5, 306, 0, 0, 2609, 2610, 5, 1063, 0, 0, 
	2610, 2611, 3, 818, 409, 0, 2611, 2612, 5, 1064, 0, 0, 2612, 2691, 1, 0, 
	0, 0, 2613, 2614, 5, 35, 0, 0, 2614, 2615, 5, 280, 0, 0, 2615, 2617, 5, 
	851, 0, 0, 2616, 2618, 3, 622, 311, 0, 2617, 2616, 1, 0, 0, 0, 2617, 2618, 
	1, 0, 0, 0, 2618, 2619, 1, 0, 0, 0, 2619, 2620, 3, 830, 415, 0, 2620, 2621, 
	5, 657, 0, 0, 2621, 2622, 5, 306, 0, 0, 2622, 2623, 5, 1063, 0, 0, 2623, 
	2624, 3, 818, 409, 0, 2624, 2625, 5, 1064, 0, 0, 2625, 2691, 1, 0, 0, 0, 
	2626, 2627, 5, 35, 0, 0, 2627, 2628, 5, 280, 0, 0, 2628, 2630, 5, 851, 
	0, 0, 2629, 2631, 3, 622, 311, 0, 2630, 2629, 1, 0, 0, 0, 2630, 2631, 1, 
	0, 0, 0, 2631, 2632, 1, 0, 0, 0, 2632, 2633, 3, 830, 415, 0, 2633, 2637, 
	5, 757, 0, 0, 2634, 2635, 5, 63, 0, 0, 2635, 2636, 5, 1052, 0, 0, 2636, 
	2638, 3, 430, 215, 0, 2637, 2634, 1, 0, 0, 0, 2637, 2638, 1, 0, 0, 0, 2638, 
	2640, 1, 0, 0, 0, 2639, 2641, 3, 292, 146, 0, 2640, 2639, 1, 0, 0, 0, 2640, 
	2641, 1, 0, 0, 0, 2641, 2691, 1, 0, 0, 0, 2642, 2643, 5, 35, 0, 0, 2643, 
	2644, 5, 280, 0, 0, 2644, 2646, 5, 851, 0, 0, 2645, 2647, 3, 622, 311, 
	0, 2646, 2645, 1, 0, 0, 0, 2646, 2647, 1, 0, 0, 0, 2647, 2648, 1, 0, 0, 
	0, 2648, 2649, 3, 830, 415, 0, 2649, 2650, 3, 294, 147, 0, 2650, 2691, 
	1, 0, 0, 0, 2651, 2652, 5, 35, 0, 0, 2652, 2653, 5, 280, 0, 0, 2653, 2654, 
	5, 851, 0, 0, 2654, 2656, 3, 830, 415, 0, 2655, 2657, 3, 622, 311, 0, 2656, 
	2655, 1, 0, 0, 0, 2656, 2657, 1, 0, 0, 0, 2657, 2658, 1, 0, 0, 0, 2658, 
	2659, 5, 13, 0, 0, 2659, 2660, 5, 559, 0, 0, 2660, 2661, 5, 1063, 0, 0, 
	2661, 2662, 3, 826, 413, 0, 2662, 2663, 5, 1052, 0, 0, 2663, 2671, 3, 816, 
	408, 0, 2664, 2665, 5, 1069, 0, 0, 2665, 2666, 3, 826, 413, 0, 2666, 2667, 
	5, 1052, 0, 0, 2667, 2668, 3, 816, 408, 0, 2668, 2670, 1, 0, 0, 0, 2669, 
	2664, 1, 0, 0, 0, 2670, 2673, 1, 0, 0, 0, 2671, 2669, 1, 0, 0, 0, 2671, 
	2672, 1, 0, 0, 0, 2672, 2674, 1, 0, 0, 0, 2673, 2671, 1, 0, 0, 0, 2674, 
	2675, 5, 1064, 0, 0, 2675, 2676, 5, 422, 0, 0, 2676, 2677, 3, 816, 408, 
	0, 2677, 2691, 1, 0, 0, 0, 2678, 2679, 5, 35, 0, 0, 2679, 2680, 5, 280, 
	0, 0, 2680, 2681, 5, 851, 0, 0, 2681, 2683, 3, 830, 415, 0, 2682, 2684, 
	3, 622, 311, 0, 2683, 2682, 1, 0, 0, 0, 2683, 2684, 1, 0, 0, 0, 2684, 2685, 
	1, 0, 0, 0, 2685, 2686, 5, 239, 0, 0, 2686, 2687, 5, 559, 0, 0, 2687, 2688, 
	5, 422, 0, 0, 2688, 2689, 3, 816, 408, 0, 2689, 2691, 1, 0, 0, 0, 2690, 
	2589, 1, 0, 0, 0, 2690, 2600, 1, 0, 0, 0, 2690, 2613, 1, 0, 0, 0, 2690, 
	2626, 1, 0, 0, 0, 2690, 2642, 1, 0, 0, 0, 2690, 2651, 1, 0, 0, 0, 2690, 
	2678, 1, 0, 0, 0, 2691, 151, 1, 0, 0, 0, 2692, 2693, 5, 353, 0, 0, 2693, 
	2694, 5, 241, 0, 0, 2694, 2695, 5, 125, 0, 0, 2695, 153, 1, 0, 0, 0, 2696, 
	2697, 5, 664, 0, 0, 2697, 2698, 5, 1052, 0, 0, 2698, 2699, 3, 816, 408, 
	0, 2699, 155, 1, 0, 0, 0, 2700, 2705, 3, 820, 410, 0, 2701, 2702, 5, 1069, 
	0, 0, 2702, 2704, 3, 820, 410, 0, 2703, 2701, 1, 0, 0, 0, 2704, 2707, 1, 
	0, 0, 0, 2705, 2703, 1, 0, 0, 0, 2705, 2706, 1, 0, 0, 0, 2706, 157, 1, 
	0, 0, 0, 2707, 2705, 1, 0, 0, 0, 2708, 2713, 3, 820, 410, 0, 2709, 2710, 
	5, 1069, 0, 0, 2710, 2712, 3, 820, 410, 0, 2711, 2709, 1, 0, 0, 0, 2712, 
	2715, 1, 0, 0, 0, 2713, 2711, 1, 0, 0, 0, 2713, 2714, 1, 0, 0, 0, 2714, 
	159, 1, 0, 0, 0, 2715, 2713, 1, 0, 0, 0, 2716, 2721, 3, 326, 163, 0, 2717, 
	2718, 5, 1069, 0, 0, 2718, 2720, 3, 326, 163, 0, 2719, 2717, 1, 0, 0, 0, 
	2720, 2723, 1, 0, 0, 0, 2721, 2719, 1, 0, 0, 0, 2721, 2722, 1, 0, 0, 0, 
	2722, 161, 1, 0, 0, 0, 2723, 2721, 1, 0, 0, 0, 2724, 2725, 5, 35, 0, 0, 
	2725, 2726, 5, 297, 0, 0, 2726, 2728, 5, 338, 0, 0, 2727, 2729, 3, 622, 
	311, 0, 2728, 2727, 1, 0, 0, 0, 2728, 2729, 1, 0, 0, 0, 2729, 2730, 1, 
	0, 0, 0, 2730, 2731, 3, 820, 410, 0, 2731, 2732, 5, 658, 0, 0, 2732, 2733, 
	5, 888, 0, 0, 2733, 2734, 3, 820, 410, 0, 2734, 2879, 1, 0, 0, 0, 2735, 
	2736, 5, 35, 0, 0, 2736, 2737, 5, 297, 0, 0, 2737, 2739, 5, 338, 0, 0, 
	2738, 2740, 3, 622, 311, 0, 2739, 2738, 1, 0, 0, 0, 2739, 2740, 1, 0, 0, 
	0, 2740, 2741, 1, 0, 0, 0, 2741, 2742, 3, 820, 410, 0, 2742, 2746, 5, 757, 
	0, 0, 2743, 2744, 5, 518, 0, 0, 2744, 2745, 5, 1052, 0, 0, 2745, 2747, 
	3, 802, 401, 0, 2746, 2743, 1, 0, 0, 0, 2746, 2747, 1, 0, 0, 0, 2747, 2749, 
	1, 0, 0, 0, 2748, 2750, 3, 154, 77, 0, 2749, 2748, 1, 0, 0, 0, 2749, 2750, 
	1, 0, 0, 0, 2750, 2879, 1, 0, 0, 0, 2751, 2752, 5, 35, 0, 0, 2752, 2753, 
	5, 297, 0, 0, 2753, 2755, 5, 338, 0, 0, 2754, 2756, 3, 622, 311, 0, 2755, 
	2754, 1, 0, 0, 0, 2755, 2756, 1, 0, 0, 0, 2756, 2757, 1, 0, 0, 0, 2757, 
	2758, 3, 820, 410, 0, 2758, 2759, 5, 757, 0, 0, 2759, 2760, 5, 518, 0, 
	0, 2760, 2761, 5, 1052, 0, 0, 2761, 2763, 3, 802, 401, 0, 2762, 2764, 3, 
	154, 77, 0, 2763, 2762, 1, 0, 0, 0, 2763, 2764, 1, 0, 0, 0, 2764, 2879, 
	1, 0, 0, 0, 2765, 2766, 5, 35, 0, 0, 2766, 2767, 5, 297, 0, 0, 2767, 2769, 
	5, 338, 0, 0, 2768, 2770, 3, 622, 311, 0, 2769, 2768, 1, 0, 0, 0, 2769, 
	2770, 1, 0, 0, 0, 2770, 2771, 1, 0, 0, 0, 2771, 2772, 3, 820, 410, 0, 2772, 
	2773, 5, 13, 0, 0, 2773, 2774, 3, 156, 78, 0, 2774, 2775, 5, 888, 0, 0, 
	2775, 2776, 5, 30, 0, 0, 2776, 2879, 1, 0, 0, 0, 2777, 2778, 5, 35, 0, 
	0, 2778, 2779, 5, 297, 0, 0, 2779, 2781, 5, 338, 0, 0, 2780, 2782, 3, 622, 
	311, 0, 2781, 2780, 1, 0, 0, 0, 2781, 2782, 1, 0, 0, 0, 2782, 2783, 1, 
	0, 0, 0, 2783, 2784, 3, 820, 410, 0, 2784, 2785, 5, 468, 0, 0, 2785, 2786, 
	5, 201, 0, 0, 2786, 2787, 3, 156, 78, 0, 2787, 2788, 5, 888, 0, 0, 2788, 
	2789, 5, 297, 0, 0, 2789, 2790, 5, 338, 0, 0, 2790, 2791, 3, 820, 410, 
	0, 2791, 2879, 1, 0, 0, 0, 2792, 2793, 5, 35, 0, 0, 2793, 2794, 5, 297, 
	0, 0, 2794, 2796, 5, 338, 0, 0, 2795, 2797, 3, 622, 311, 0, 2796, 2795, 
	1, 0, 0, 0, 2796, 2797, 1, 0, 0, 0, 2797, 2798, 1, 0, 0, 0, 2798, 2799, 
	3, 820, 410, 0, 2799, 2800, 5, 657, 0, 0, 2800, 2801, 3, 156, 78, 0, 2801, 
	2802, 5, 317, 0, 0, 2802, 2803, 5, 30, 0, 0, 2803, 2879, 1, 0, 0, 0, 2804, 
	2805, 5, 35, 0, 0, 2805, 2806, 5, 297, 0, 0, 2806, 2808, 5, 338, 0, 0, 
	2807, 2809, 3, 622, 311, 0, 2808, 2807, 1, 0, 0, 0, 2808, 2809, 1, 0, 0, 
	0, 2809, 2810, 1, 0, 0, 0, 2810, 2811, 3, 820, 410, 0, 2811, 2812, 5, 13, 
	0, 0, 2812, 2813, 3, 158, 79, 0, 2813, 2814, 5, 888, 0, 0, 2814, 2815, 
	5, 33, 0, 0, 2815, 2879, 1, 0, 0, 0, 2816, 2817, 5, 35, 0, 0, 2817, 2818, 
	5, 297, 0, 0, 2818, 2820, 5, 338, 0, 0, 2819, 2821, 3, 622, 311, 0, 2820, 
	2819, 1, 0, 0, 0, 2820, 2821, 1, 0, 0, 0, 2821, 2822, 1, 0, 0, 0, 2822, 
	2823, 3, 820, 410, 0, 2823, 2824, 5, 468, 0, 0, 2824, 2825, 5, 763, 0, 
	0, 2825, 2826, 3, 158, 79, 0, 2826, 2827, 5, 888, 0, 0, 2827, 2828, 5, 
	297, 0, 0, 2828, 2829, 5, 338, 0, 0, 2829, 2830, 3, 820, 410, 0, 2830, 
	2879, 1, 0, 0, 0, 2831, 2832, 5, 35, 0, 0, 2832, 2833, 5, 297, 0, 0, 2833, 
	2835, 5, 338, 0, 0, 2834, 2836, 3, 622, 311, 0, 2835, 2834, 1, 0, 0, 0, 
	2835, 2836, 1, 0, 0, 0, 2836, 2837, 1, 0, 0, 0, 2837, 2838, 3, 820, 410, 
	0, 2838, 2839, 5, 657, 0, 0, 2839, 2840, 3, 158, 79, 0, 2840, 2841, 5, 
	317, 0, 0, 2841, 2842, 5, 33, 0, 0, 2842, 2879, 1, 0, 0, 0, 2843, 2844, 
	5, 35, 0, 0, 2844, 2845, 5, 297, 0, 0, 2845, 2847, 5, 338, 0, 0, 2846, 
	2848, 3, 622, 311, 0, 2847, 2846, 1, 0, 0, 0, 2847, 2848, 1, 0, 0, 0, 2848, 
	2849, 1, 0, 0, 0, 2849, 2850, 3, 820, 410, 0, 2850, 2851, 5, 13, 0, 0, 
	2851, 2852, 3, 160, 80, 0, 2852, 2853, 5, 888, 0, 0, 2853, 2855, 5, 29, 
	0, 0, 2854, 2856, 3, 152, 76, 0, 2855, 2854, 1, 0, 0, 0, 2855, 2856, 1, 
	0, 0, 0, 2856, 2879, 1, 0, 0, 0, 2857, 2858, 5, 35, 0, 0, 2858, 2859, 5, 
	297, 0, 0, 2859, 2861, 5, 338, 0, 0, 2860, 2862, 3, 622, 311, 0, 2861, 
	2860, 1, 0, 0, 0, 2861, 2862, 1, 0, 0, 0, 2862, 2863, 1, 0, 0, 0, 2863, 
	2864, 3, 820, 410, 0, 2864, 2865, 5, 657, 0, 0, 2865, 2866, 3, 160, 80, 
	0, 2866, 2867, 5, 317, 0, 0, 2867, 2868, 5, 29, 0, 0, 2868, 2879, 1, 0, 
	0, 0, 2869, 2870, 5, 35, 0, 0, 2870, 2871, 5, 297, 0, 0, 2871, 2873, 5, 
	338, 0, 0, 2872, 2874, 3, 622, 311, 0, 2873, 2872, 1, 0, 0, 0, 2873, 2874, 
	1, 0, 0, 0, 2874, 2875, 1, 0, 0, 0, 2875, 2876, 3, 820, 410, 0, 2876, 2877, 
	7, 11, 0, 0, 2877, 2879, 1, 0, 0, 0, 2878, 2724, 1, 0, 0, 0, 2878, 2735, 
	1, 0, 0, 0, 2878, 2751, 1, 0, 0, 0, 2878, 2765, 1, 0, 0, 0, 2878, 2777, 
	1, 0, 0, 0, 2878, 2792, 1, 0, 0, 0, 2878, 2804, 1, 0, 0, 0, 2878, 2816, 
	1, 0, 0, 0, 2878, 2831, 1, 0, 0, 0, 2878, 2843, 1, 0, 0, 0, 2878, 2857, 
	1, 0, 0, 0, 2878, 2869, 1, 0, 0, 0, 2879, 163, 1, 0, 0, 0, 2880, 2881, 
	5, 35, 0, 0, 2881, 2882, 5, 303, 0, 0, 2882, 2884, 5, 313, 0, 0, 2883, 
	2885, 3, 622, 311, 0, 2884, 2883, 1, 0, 0, 0, 2884, 2885, 1, 0, 0, 0, 2885, 
	2886, 1, 0, 0, 0, 2886, 2887, 3, 820, 410, 0, 2887, 2888, 5, 658, 0, 0, 
	2888, 2889, 5, 888, 0, 0, 2889, 2890, 3, 820, 410, 0, 2890, 2909, 1, 0, 
	0, 0, 2891, 2892, 5, 35, 0, 0, 2892, 2893, 5, 303, 0, 0, 2893, 2895, 5, 
	313, 0, 0, 2894, 2896, 3, 622, 311, 0, 2895, 2894, 1, 0, 0, 0, 2895, 2896, 
	1, 0, 0, 0, 2896, 2897, 1, 0, 0, 0, 2897, 2898, 3, 820, 410, 0, 2898, 2902, 
	5, 757, 0, 0, 2899, 2901, 3, 406, 203, 0, 2900, 2899, 1, 0, 0, 0, 2901, 
	2904, 1, 0, 0, 0, 2902, 2900, 1, 0, 0, 0, 2902, 2903, 1, 0, 0, 0, 2903, 
	2906, 1, 0, 0, 0, 2904, 2902, 1, 0, 0, 0, 2905, 2907, 3, 618, 309, 0, 2906, 
	2905, 1, 0, 0, 0, 2906, 2907, 1, 0, 0, 0, 2907, 2909, 1, 0, 0, 0, 2908, 
	2880, 1, 0, 0, 0, 2908, 2891, 1, 0, 0, 0, 2909, 165, 1, 0, 0, 0, 2910, 
	2911, 3, 168, 84, 0, 2911, 2912, 5, 658, 0, 0, 2912, 2913, 5, 888, 0, 0, 
	2913, 2914, 3, 820, 410, 0, 2914, 2982, 1, 0, 0, 0, 2915, 2916, 3, 168, 
	84, 0, 2916, 2917, 5, 757, 0, 0, 2917, 2918, 3, 618, 309, 0, 2918, 2982, 
	1, 0, 0, 0, 2919, 2920, 3, 168, 84, 0, 2920, 2921, 5, 757, 0, 0, 2921, 
	2922, 5, 744, 0, 0, 2922, 2982, 1, 0, 0, 0, 2923, 2924, 3, 168, 84, 0, 
	2924, 2925, 5, 937, 0, 0, 2925, 2926, 7, 12, 0, 0, 2926, 2982, 1, 0, 0, 
	0, 2927, 2928, 3, 168, 84, 0, 2928, 2929, 5, 757, 0, 0, 2929, 2930, 5, 
	45, 0, 0, 2930, 2931, 5, 1052, 0, 0, 2931, 2932, 3, 820, 410, 0, 2932, 
	2982, 1, 0, 0, 0, 2933, 2934, 3, 168, 84, 0, 2934, 2935, 5, 757, 0, 0, 
	2935, 2936, 5, 345, 0, 0, 2936, 2937, 5, 1052, 0, 0, 2937, 2941, 5, 1063, 
	0, 0, 2938, 2940, 3, 312, 156, 0, 2939, 2938, 1, 0, 0, 0, 2940, 2943, 1, 
	0, 0, 0, 2941, 2939, 1, 0, 0, 0, 2941, 2942, 1, 0, 0, 0, 2942, 2944, 1, 
	0, 0, 0, 2943, 2941, 1, 0, 0, 0, 2944, 2945, 5, 1064, 0, 0, 2945, 2982, 
	1, 0, 0, 0, 2946, 2947, 3, 168, 84, 0, 2947, 2948, 5, 757, 0, 0, 2948, 
	2949, 5, 172, 0, 0, 2949, 2950, 5, 1052, 0, 0, 2950, 2954, 5, 1063, 0, 
	0, 2951, 2953, 3, 820, 410, 0, 2952, 2951, 1, 0, 0, 0, 2953, 2956, 1, 0, 
	0, 0, 2954, 2952, 1, 0, 0, 0, 2954, 2955, 1, 0, 0, 0, 2955, 2957, 1, 0, 
	0, 0, 2956, 2954, 1, 0, 0, 0, 2957, 2958, 5, 1064, 0, 0, 2958, 2982, 1, 
	0, 0, 0, 2959, 2960, 3, 168, 84, 0, 2960, 2961, 5, 757, 0, 0, 2961, 2962, 
	5, 446, 0, 0, 2962, 2963, 5, 1052, 0, 0, 2963, 2964, 3, 832, 416, 0, 2964, 
	2982, 1, 0, 0, 0, 2965, 2966, 3, 168, 84, 0, 2966, 2967, 5, 757, 0, 0, 
	2967, 2968, 5, 159, 0, 0, 2968, 2969, 5, 1052, 0, 0, 2969, 2970, 3, 314, 
	157, 0, 2970, 2982, 1, 0, 0, 0, 2971, 2972, 3, 168, 84, 0, 2972, 2973, 
	5, 757, 0, 0, 2973, 2974, 7, 13, 0, 0, 2974, 2975, 5, 1052, 0, 0, 2975, 
	2976, 3, 820, 410, 0, 2976, 2982, 1, 0, 0, 0, 2977, 2978, 3, 168, 84, 0, 
	2978, 2979, 5, 937, 0, 0, 2979, 2980, 7, 14, 0, 0, 2980, 2982, 1, 0, 0, 
	0, 2981, 2910, 1, 0, 0, 0, 2981, 2915, 1, 0, 0, 0, 2981, 2919, 1, 0, 0, 
	0, 2981, 2923, 1, 0, 0, 0, 2981, 2927, 1, 0, 0, 0, 2981, 2933, 1, 0, 0, 
	0, 2981, 2946, 1, 0, 0, 0, 2981, 2959, 1, 0, 0, 0, 2981, 2965, 1, 0, 0, 
	0, 2981, 2971, 1, 0, 0, 0, 2981, 2977, 1, 0, 0, 0, 2982, 167, 1, 0, 0, 
	0, 2983, 2984, 5, 35, 0, 0, 2984, 2986, 5, 319, 0, 0, 2985, 2987, 3, 622, 
	311, 0, 2986, 2985, 1, 0, 0, 0, 2986, 2987, 1, 0, 0, 0, 2987, 2988, 1, 
	0, 0, 0, 2988, 2989, 3, 820, 410, 0, 2989, 2991, 5, 1063, 0, 0, 2990, 2992, 
	3, 170, 85, 0, 2991, 2990, 1, 0, 0, 0, 2991, 2992, 1, 0, 0, 0, 2992, 2993, 
	1, 0, 0, 0, 2993, 2994, 5, 1064, 0, 0, 2994, 169, 1, 0, 0, 0, 2995, 3000, 
	3, 846, 423, 0, 2996, 2997, 5, 1069, 0, 0, 2997, 2999, 3, 846, 423, 0, 
	2998, 2996, 1, 0, 0, 0, 2999, 3002, 1, 0, 0, 0, 3000, 2998, 1, 0, 0, 0, 
	3000, 3001, 1, 0, 0, 0, 3001, 171, 1, 0, 0, 0, 3002, 3000, 1, 0, 0, 0, 
	3003, 3004, 5, 35, 0, 0, 3004, 3005, 5, 437, 0, 0, 3005, 3007, 5, 583, 
	0, 0, 3006, 3008, 3, 622, 311, 0, 3007, 3006, 1, 0, 0, 0, 3007, 3008, 1, 
	0, 0, 0, 3008, 3009, 1, 0, 0, 0, 3009, 3010, 3, 820, 410, 0, 3010, 3011, 
	5, 757, 0, 0, 3011, 3012, 5, 101, 0, 0, 3012, 3013, 5, 1048, 0, 0, 3013, 
	3014, 3, 836, 418, 0, 3014, 3037, 1, 0, 0, 0, 3015, 3016, 5, 35, 0, 0, 
	3016, 3017, 5, 437, 0, 0, 3017, 3019, 5, 583, 0, 0, 3018, 3020, 3, 622, 
	311, 0, 3019, 3018, 1, 0, 0, 0, 3019, 3020, 1, 0, 0, 0, 3020, 3021, 1, 
	0, 0, 0, 3021, 3022, 3, 820, 410, 0, 3022, 3023, 5, 658, 0, 0, 3023, 3024, 
	5, 888, 0, 0, 3024, 3025, 3, 820, 410, 0, 3025, 3037, 1, 0, 0, 0, 3026, 
	3027, 5, 35, 0, 0, 3027, 3028, 5, 437, 0, 0, 3028, 3030, 5, 583, 0, 0, 
	3029, 3031, 3, 622, 311, 0, 3030, 3029, 1, 0, 0, 0, 3030, 3031, 1, 0, 0, 
	0, 3031, 3032, 1, 0, 0, 0, 3032, 3033, 3, 820, 410, 0, 3033, 3034, 5, 757, 
	0, 0, 3034, 3035, 3, 618, 309, 0, 3035, 3037, 1, 0, 0, 0, 3036, 3003, 1, 
	0, 0, 0, 3036, 3015, 1, 0, 0, 0, 3036, 3026, 1, 0, 0, 0, 3037, 173, 1, 
	0, 0, 0, 3038, 3039, 5, 35, 0, 0, 3039, 3040, 5, 445, 0, 0, 3040, 3041, 
	5, 967, 0, 0, 3041, 3069, 3, 820, 410, 0, 3042, 3043, 5, 658, 0, 0, 3043, 
	3044, 5, 888, 0, 0, 3044, 3070, 3, 820, 410, 0, 3045, 3046, 5, 145, 0, 
	0, 3046, 3047, 5, 104, 0, 0, 3047, 3048, 5, 1063, 0, 0, 3048, 3049, 3, 
	834, 417, 0, 3049, 3050, 5, 1064, 0, 0, 3050, 3070, 1, 0, 0, 0, 3051, 3052, 
	5, 239, 0, 0, 3052, 3053, 5, 147, 0, 0, 3053, 3070, 5, 396, 0, 0, 3054, 
	3055, 5, 842, 0, 0, 3055, 3070, 5, 638, 0, 0, 3056, 3057, 5, 679, 0, 0, 
	3057, 3070, 5, 638, 0, 0, 3058, 3070, 5, 842, 0, 0, 3059, 3070, 5, 679, 
	0, 0, 3060, 3062, 5, 757, 0, 0, 3061, 3063, 5, 744, 0, 0, 3062, 3061, 1, 
	0, 0, 0, 3062, 3063, 1, 0, 0, 0, 3063, 3065, 1, 0, 0, 0, 3064, 3066, 3, 
	618, 309, 0, 3065, 3064, 1, 0, 0, 0, 3065, 3066, 1, 0, 0, 0, 3066, 3070, 
	1, 0, 0, 0, 3067, 3068, 5, 937, 0, 0, 3068, 3070, 7, 12, 0, 0, 3069, 3042, 
	1, 0, 0, 0, 3069, 3045, 1, 0, 0, 0, 3069, 3051, 1, 0, 0, 0, 3069, 3054, 
	1, 0, 0, 0, 3069, 3056, 1, 0, 0, 0, 3069, 3058, 1, 0, 0, 0, 3069, 3059, 
	1, 0, 0, 0, 3069, 3060, 1, 0, 0, 0, 3069, 3067, 1, 0, 0, 0, 3070, 175, 
	1, 0, 0, 0, 3071, 3072, 5, 35, 0, 0, 3072, 3073, 5, 477, 0, 0, 3073, 3074, 
	5, 583, 0, 0, 3074, 3075, 3, 284, 142, 0, 3075, 177, 1, 0, 0, 0, 3076, 
	3078, 5, 35, 0, 0, 3077, 3079, 5, 492, 0, 0, 3078, 3077, 1, 0, 0, 0, 3078, 
	3079, 1, 0, 0, 0, 3079, 3080, 1, 0, 0, 0, 3080, 3082, 5, 379, 0, 0, 3081, 
	3083, 3, 622, 311, 0, 3082, 3081, 1, 0, 0, 0, 3082, 3083, 1, 0, 0, 0, 3083, 
	3084, 1, 0, 0, 0, 3084, 3085, 3, 820, 410, 0, 3085, 3087, 5, 757, 0, 0, 
	3086, 3088, 3, 136, 68, 0, 3087, 3086, 1, 0, 0, 0, 3087, 3088, 1, 0, 0, 
	0, 3088, 3089, 1, 0, 0, 0, 3089, 3091, 3, 354, 177, 0, 3090, 3092, 3, 618, 
	309, 0, 3091, 3090, 1, 0, 0, 0, 3091, 3092, 1, 0, 0, 0, 3092, 3137, 1, 
	0, 0, 0, 3093, 3095, 5, 35, 0, 0, 3094, 3096, 5, 492, 0, 0, 3095, 3094, 
	1, 0, 0, 0, 3095, 3096, 1, 0, 0, 0, 3096, 3097, 1, 0, 0, 0, 3097, 3099, 
	5, 379, 0, 0, 3098, 3100, 3, 622, 311, 0, 3099, 3098, 1, 0, 0, 0, 3099, 
	3100, 1, 0, 0, 0, 3100, 3101, 1, 0, 0, 0, 3101, 3102, 3, 820, 410, 0, 3102, 
	3104, 5, 757, 0, 0, 3103, 3105, 3, 136, 68, 0, 3104, 3103, 1, 0, 0, 0, 
	3104, 3105, 1, 0, 0, 0, 3105, 3106, 1, 0, 0, 0, 3106, 3108, 3, 356, 178, 
	0, 3107, 3109, 3, 618, 309, 0, 3108, 3107, 1, 0, 0, 0, 3108, 3109, 1, 0, 
	0, 0, 3109, 3137, 1, 0, 0, 0, 3110, 3112, 5, 35, 0, 0, 3111, 3113, 5, 492, 
	0, 0, 3112, 3111, 1, 0, 0, 0, 3112, 3113, 1, 0, 0, 0, 3113, 3114, 1, 0, 
	0, 0, 3114, 3115, 5, 379, 0, 0, 3115, 3116, 3, 820, 410, 0, 3116, 3117, 
	3, 290, 145, 0, 3117, 3137, 1, 0, 0, 0, 3118, 3120, 5, 35, 0, 0, 3119, 
	3121, 5, 492, 0, 0, 3120, 3119, 1, 0, 0, 0, 3120, 3121, 1, 0, 0, 0, 3121, 
	3122, 1, 0, 0, 0, 3122, 3123, 5, 379, 0, 0, 3123, 3124, 3, 820, 410, 0, 
	3124, 3125, 3, 294, 147, 0, 3125, 3137, 1, 0, 0, 0, 3126, 3128, 5, 35, 
	0, 0, 3127, 3129, 5, 492, 0, 0, 3128, 3127, 1, 0, 0, 0, 3128, 3129, 1, 
	0, 0, 0, 3129, 3130, 1, 0, 0, 0, 3130, 3131, 5, 379, 0, 0, 3131, 3132, 
	3, 622, 311, 0, 3132, 3133, 3, 820, 410, 0, 3133, 3134, 5, 937, 0, 0, 3134, 
	3135, 7, 15, 0, 0, 3135, 3137, 1, 0, 0, 0, 3136, 3076, 1, 0, 0, 0, 3136, 
	3093, 1, 0, 0, 0, 3136, 3110, 1, 0, 0, 0, 3136, 3118, 1, 0, 0, 0, 3136, 
	3126, 1, 0, 0, 0, 3137, 179, 1, 0, 0, 0, 3138, 3139, 5, 35, 0, 0, 3139, 
	3141, 5, 576, 0, 0, 3140, 3142, 3, 622, 311, 0, 3141, 3140, 1, 0, 0, 0, 
	3141, 3142, 1, 0, 0, 0, 3142, 3143, 1, 0, 0, 0, 3143, 3144, 3, 820, 410, 
	0, 3144, 3146, 5, 757, 0, 0, 3145, 3147, 3, 130, 65, 0, 3146, 3145, 1, 
	0, 0, 0, 3146, 3147, 1, 0, 0, 0, 3147, 3149, 1, 0, 0, 0, 3148, 3150, 3, 
	618, 309, 0, 3149, 3148, 1, 0, 0, 0, 3149, 3150, 1, 0, 0, 0, 3150, 3199, 
	1, 0, 0, 0, 3151, 3152, 5, 35, 0, 0, 3152, 3153, 5, 576, 0, 0, 3153, 3154, 
	3, 820, 410, 0, 3154, 3155, 3, 290, 145, 0, 3155, 3199, 1, 0, 0, 0, 3156, 
	3157, 5, 35, 0, 0, 3157, 3158, 5, 576, 0, 0, 3158, 3159, 3, 820, 410, 0, 
	3159, 3160, 3, 294, 147, 0, 3160, 3199, 1, 0, 0, 0, 3161, 3162, 5, 35, 
	0, 0, 3162, 3164, 5, 576, 0, 0, 3163, 3165, 3, 622, 311, 0, 3164, 3163, 
	1, 0, 0, 0, 3164, 3165, 1, 0, 0, 0, 3165, 3166, 1, 0, 0, 0, 3166, 3167, 
	3, 820, 410, 0, 3167, 3168, 5, 937, 0, 0, 3168, 3169, 5, 577, 0, 0, 3169, 
	3170, 5, 1052, 0, 0, 3170, 3171, 3, 430, 215, 0, 3171, 3199, 1, 0, 0, 0, 
	3172, 3173, 5, 35, 0, 0, 3173, 3175, 5, 576, 0, 0, 3174, 3176, 3, 622, 
	311, 0, 3175, 3174, 1, 0, 0, 0, 3175, 3176, 1, 0, 0, 0, 3176, 3177, 1, 
	0, 0, 0, 3177, 3178, 3, 820, 410, 0, 3178, 3179, 5, 937, 0, 0, 3179, 3180, 
	5, 155, 0, 0, 3180, 3199, 1, 0, 0, 0, 3181, 3182, 5, 35, 0, 0, 3182, 3184, 
	5, 576, 0, 0, 3183, 3185, 3, 622, 311, 0, 3184, 3183, 1, 0, 0, 0, 3184, 
	3185, 1, 0, 0, 0, 3185, 3186, 1, 0, 0, 0, 3186, 3187, 3, 820, 410, 0, 3187, 
	3191, 5, 647, 0, 0, 3188, 3189, 5, 590, 0, 0, 3189, 3190, 5, 1052, 0, 0, 
	3190, 3192, 3, 816, 408, 0, 3191, 3188, 1, 0, 0, 0, 3191, 3192, 1, 0, 0, 
	0, 3192, 3196, 1, 0, 0, 0, 3193, 3194, 5, 463, 0, 0, 3194, 3195, 5, 1052, 
	0, 0, 3195, 3197, 3, 816, 408, 0, 3196, 3193, 1, 0, 0, 0, 3196, 3197, 1, 
	0, 0, 0, 3197, 3199, 1, 0, 0, 0, 3198, 3138, 1, 0, 0, 0, 3198, 3151, 1, 
	0, 0, 0, 3198, 3156, 1, 0, 0, 0, 3198, 3161, 1, 0, 0, 0, 3198, 3172, 1, 
	0, 0, 0, 3198, 3181, 1, 0, 0, 0, 3199, 181, 1, 0, 0, 0, 3200, 3201, 5, 
	35, 0, 0, 3201, 3203, 5, 603, 0, 0, 3202, 3204, 3, 622, 311, 0, 3203, 3202, 
	1, 0, 0, 0, 3203, 3204, 1, 0, 0, 0, 3204, 3205, 1, 0, 0, 0, 3205, 3206, 
	3, 820, 410, 0, 3206, 3208, 5, 1063, 0, 0, 3207, 3209, 3, 170, 85, 0, 3208, 
	3207, 1, 0, 0, 0, 3208, 3209, 1, 0, 0, 0, 3209, 3210, 1, 0, 0, 0, 3210, 
	3211, 5, 1064, 0, 0, 3211, 3212, 5, 658, 0, 0, 3212, 3213, 5, 888, 0, 0, 
	3213, 3214, 3, 820, 410, 0, 3214, 3261, 1, 0, 0, 0, 3215, 3216, 5, 35, 
	0, 0, 3216, 3218, 5, 603, 0, 0, 3217, 3219, 3, 622, 311, 0, 3218, 3217, 
	1, 0, 0, 0, 3218, 3219, 1, 0, 0, 0, 3219, 3220, 1, 0, 0, 0, 3220, 3221, 
	3, 820, 410, 0, 3221, 3223, 5, 1063, 0, 0, 3222, 3224, 3, 170, 85, 0, 3223, 
	3222, 1, 0, 0, 0, 3223, 3224, 1, 0, 0, 0, 3224, 3225, 1, 0, 0, 0, 3225, 
	3226, 5, 1064, 0, 0, 3226, 3227, 5, 757, 0, 0, 3227, 3228, 5, 155, 0, 0, 
	3228, 3229, 5, 1052, 0, 0, 3229, 3230, 3, 816, 408, 0, 3230, 3261, 1, 0, 
	0, 0, 3231, 3232, 5, 35, 0, 0, 3232, 3234, 5, 603, 0, 0, 3233, 3235, 3, 
	622, 311, 0, 3234, 3233, 1, 0, 0, 0, 3234, 3235, 1, 0, 0, 0, 3235, 3236, 
	1, 0, 0, 0, 3236, 3237, 3, 820, 410, 0, 3237, 3239, 5, 1063, 0, 0, 3238, 
	3240, 3, 170, 85, 0, 3239, 3238, 1, 0, 0, 0, 3239, 3240, 1, 0, 0, 0, 3240, 
	3241, 1, 0, 0, 0, 3241, 3242, 5, 1064, 0, 0, 3242, 3243, 5, 937, 0, 0, 
	3243, 3244, 5, 155, 0, 0, 3244, 3261, 1, 0, 0, 0, 3245, 3246, 5, 35, 0, 
	0, 3246, 3248, 5, 603, 0, 0, 3247, 3249, 3, 622, 311, 0, 3248, 3247, 1, 
	0, 0, 0, 3248, 3249, 1, 0, 0, 0, 3249, 3250, 1, 0, 0, 0, 3250, 3251, 3, 
	820, 410, 0, 3251, 3253, 5, 1063, 0, 0, 3252, 3254, 3, 170, 85, 0, 3253, 
	3252, 1, 0, 0, 0, 3253, 3254, 1, 0, 0, 0, 3254, 3255, 1, 0, 0, 0, 3255, 
	3256, 5, 1064, 0, 0, 3256, 3257, 5, 271, 0, 0, 3257, 3258, 5, 53, 0, 0, 
	3258, 3259, 3, 362, 181, 0, 3259, 3261, 1, 0, 0, 0, 3260, 3200, 1, 0, 0, 
	0, 3260, 3215, 1, 0, 0, 0, 3260, 3231, 1, 0, 0, 0, 3260, 3245, 1, 0, 0, 
	0, 3261, 183, 1, 0, 0, 0, 3262, 3263, 5, 35, 0, 0, 3263, 3264, 5, 663, 
	0, 0, 3264, 3266, 5, 338, 0, 0, 3265, 3267, 3, 622, 311, 0, 3266, 3265, 
	1, 0, 0, 0, 3266, 3267, 1, 0, 0, 0, 3267, 3268, 1, 0, 0, 0, 3268, 3269, 
	3, 820, 410, 0, 3269, 3270, 5, 658, 0, 0, 3270, 3271, 5, 888, 0, 0, 3271, 
	3272, 3, 820, 410, 0, 3272, 3449, 1, 0, 0, 0, 3273, 3274, 5, 35, 0, 0, 
	3274, 3275, 5, 663, 0, 0, 3275, 3277, 5, 338, 0, 0, 3276, 3278, 3, 622, 
	311, 0, 3277, 3276, 1, 0, 0, 0, 3277, 3278, 1, 0, 0, 0, 3278, 3279, 1, 
	0, 0, 0, 3279, 3280, 3, 820, 410, 0, 3280, 3284, 5, 757, 0, 0, 3281, 3282, 
	5, 518, 0, 0, 3282, 3283, 5, 1052, 0, 0, 3283, 3285, 3, 802, 401, 0, 3284, 
	3281, 1, 0, 0, 0, 3284, 3285, 1, 0, 0, 0, 3285, 3289, 1, 0, 0, 0, 3286, 
	3287, 5, 664, 0, 0, 3287, 3288, 5, 1052, 0, 0, 3288, 3290, 3, 816, 408, 
	0, 3289, 3286, 1, 0, 0, 0, 3289, 3290, 1, 0, 0, 0, 3290, 3449, 1, 0, 0, 
	0, 3291, 3292, 5, 35, 0, 0, 3292, 3293, 5, 663, 0, 0, 3293, 3295, 5, 338, 
	0, 0, 3294, 3296, 3, 622, 311, 0, 3295, 3294, 1, 0, 0, 0, 3295, 3296, 1, 
	0, 0, 0, 3296, 3297, 1, 0, 0, 0, 3297, 3298, 3, 820, 410, 0, 3298, 3299, 
	5, 757, 0, 0, 3299, 3300, 5, 518, 0, 0, 3300, 3301, 5, 1052, 0, 0, 3301, 
	3302, 3, 802, 401, 0, 3302, 3303, 5, 31, 0, 0, 3303, 3304, 5, 1052, 0, 
	0, 3304, 3309, 3, 328, 164, 0, 3305, 3306, 5, 1069, 0, 0, 3306, 3308, 3, 
	328, 164, 0, 3307, 3305, 1, 0, 0, 0, 3308, 3311, 1, 0, 0, 0, 3309, 3307, 
	1, 0, 0, 0, 3309, 3310, 1, 0, 0, 0, 3310, 3315, 1, 0, 0, 0, 3311, 3309, 
	1, 0, 0, 0, 3312, 3313, 5, 664, 0, 0, 3313, 3314, 5, 1052, 0, 0, 3314, 
	3316, 3, 816, 408, 0, 3315, 3312, 1, 0, 0, 0, 3315, 3316, 1, 0, 0, 0, 3316, 
	3449, 1, 0, 0, 0, 3317, 3318, 5, 35, 0, 0, 3318, 3319, 5, 663, 0, 0, 3319, 
	3321, 5, 338, 0, 0, 3320, 3322, 3, 622, 311, 0, 3321, 3320, 1, 0, 0, 0, 
	3321, 3322, 1, 0, 0, 0, 3322, 3323, 1, 0, 0, 0, 3323, 3324, 3, 820, 410, 
	0, 3324, 3325, 5, 13, 0, 0, 3325, 3326, 3, 156, 78, 0, 3326, 3327, 5, 888, 
	0, 0, 3327, 3328, 5, 30, 0, 0, 3328, 3449, 1, 0, 0, 0, 3329, 3330, 5, 35, 
	0, 0, 3330, 3331, 5, 663, 0, 0, 3331, 3333, 5, 338, 0, 0, 3332, 3334, 3, 
	622, 311, 0, 3333, 3332, 1, 0, 0, 0, 3333, 3334, 1, 0, 0, 0, 3334, 3335, 
	1, 0, 0, 0, 3335, 3336, 3, 820, 410, 0, 3336, 3337, 5, 468, 0, 0, 3337, 
	3338, 5, 201, 0, 0, 3338, 3339, 3, 156, 78, 0, 3339, 3340, 5, 888, 0, 0, 
	3340, 3341, 5, 663, 0, 0, 3341, 3342, 5, 338, 0, 0, 3342, 3343, 3, 820, 
	410, 0, 3343, 3449, 1, 0, 0, 0, 3344, 3345, 5, 35, 0, 0, 3345, 3346, 5, 
	663, 0, 0, 3346, 3348, 5, 338, 0, 0, 3347, 3349, 3, 622, 311, 0, 3348, 
	3347, 1, 0, 0, 0, 3348, 3349, 1, 0, 0, 0, 3349, 3350, 1, 0, 0, 0, 3350, 
	3351, 3, 820, 410, 0, 3351, 3352, 5, 657, 0, 0, 3352, 3353, 3, 156, 78, 
	0, 3353, 3354, 5, 317, 0, 0, 3354, 3355, 5, 30, 0, 0, 3355, 3449, 1, 0, 
	0, 0, 3356, 3357, 5, 35, 0, 0, 3357, 3358, 5, 663, 0, 0, 3358, 3360, 5, 
	338, 0, 0, 3359, 3361, 3, 622, 311, 0, 3360, 3359, 1, 0, 0, 0, 3360, 3361, 
	1, 0, 0, 0, 3361, 3362, 1, 0, 0, 0, 3362, 3363, 3, 820, 410, 0, 3363, 3364, 
	5, 13, 0, 0, 3364, 3365, 3, 158, 79, 0, 3365, 3366, 5, 888, 0, 0, 3366, 
	3367, 5, 33, 0, 0, 3367, 3449, 1, 0, 0, 0, 3368, 3369, 5, 35, 0, 0, 3369, 
	3370, 5, 663, 0, 0, 3370, 3372, 5, 338, 0, 0, 3371, 3373, 3, 622, 311, 
	0, 3372, 3371, 1, 0, 0, 0, 3372, 3373, 1, 0, 0, 0, 3373, 3374, 1, 0, 0, 
	0, 3374, 3375, 3, 820, 410, 0, 3375, 3376, 5, 468, 0, 0, 3376, 3377, 5, 
	763, 0, 0, 3377, 3378, 3, 158, 79, 0, 3378, 3379, 5, 888, 0, 0, 3379, 3380, 
	5, 663, 0, 0, 3380, 3381, 5, 338, 0, 0, 3381, 3382, 3, 820, 410, 0, 3382, 
	3449, 1, 0, 0, 0, 3383, 3384, 5, 35, 0, 0, 3384, 3385, 5, 663, 0, 0, 3385, 
	3387, 5, 338, 0, 0, 3386, 3388, 3, 622, 311, 0, 3387, 3386, 1, 0, 0, 0, 
	3387, 3388, 1, 0, 0, 0, 3388, 3389, 1, 0, 0, 0, 3389, 3390, 3, 820, 410, 
	0, 3390, 3391, 5, 657, 0, 0, 3391, 3392, 3, 158, 79, 0, 3392, 3393, 5, 
	317, 0, 0, 3393, 3394, 5, 33, 0, 0, 3394, 3449, 1, 0, 0, 0, 3395, 3396, 
	5, 35, 0, 0, 3396, 3397, 5, 663, 0, 0, 3397, 3399, 5, 338, 0, 0, 3398, 
	3400, 3, 622, 311, 0, 3399, 3398, 1, 0, 0, 0, 3399, 3400, 1, 0, 0, 0, 3400, 
	3401, 1, 0, 0, 0, 3401, 3402, 3, 820, 410, 0, 3402, 3403, 5, 13, 0, 0, 
	3403, 3404, 3, 148, 74, 0, 3404, 3405, 5, 888, 0, 0, 3405, 3407, 5, 29, 
	0, 0, 3406, 3408, 3, 152, 76, 0, 3407, 3406, 1, 0, 0, 0, 3407, 3408, 1, 
	0, 0, 0, 3408, 3449, 1, 0, 0, 0, 3409, 3410, 5, 35, 0, 0, 3410, 3411, 5, 
	663, 0, 0, 3411, 3413, 5, 338, 0, 0, 3412, 3414, 3, 622, 311, 0, 3413, 
	3412, 1, 0, 0, 0, 3413, 3414, 1, 0, 0, 0, 3414, 3415, 1, 0, 0, 0, 3415, 
	3416, 3, 820, 410, 0, 3416, 3417, 5, 657, 0, 0, 3417, 3418, 3, 148, 74, 
	0, 3418, 3419, 5, 317, 0, 0, 3419, 3420, 5, 29, 0, 0, 3420, 3449, 1, 0, 
	0, 0, 3421, 3422, 5, 35, 0, 0, 3422, 3423, 5, 663, 0, 0, 3423, 3425, 5, 
	338, 0, 0, 3424, 3426, 3, 622, 311, 0, 3425, 3424, 1, 0, 0, 0, 3425, 3426, 
	1, 0, 0, 0, 3426, 3427, 1, 0, 0, 0, 3427, 3428, 3, 820, 410, 0, 3428, 3429, 
	5, 647, 0, 0, 3429, 3449, 1, 0, 0, 0, 3430, 3431, 5, 35, 0, 0, 3431, 3432, 
	5, 663, 0, 0, 3432, 3434, 5, 338, 0, 0, 3433, 3435, 3, 622, 311, 0, 3434, 
	3433, 1, 0, 0, 0, 3434, 3435, 1, 0, 0, 0, 3435, 3436, 1, 0, 0, 0, 3436, 
	3437, 3, 820, 410, 0, 3437, 3438, 5, 842, 0, 0, 3438, 3449, 1, 0, 0, 0, 
	3439, 3440, 5, 35, 0, 0, 3440, 3441, 5, 663, 0, 0, 3441, 3443, 5, 338, 
	0, 0, 3442, 3444, 3, 622, 311, 0, 3443, 3442, 1, 0, 0, 0, 3443, 3444, 1, 
	0, 0, 0, 3444, 3445, 1, 0, 0, 0, 3445, 3446, 3, 820, 410, 0, 3446, 3447, 
	5, 679, 0, 0, 3447, 3449, 1, 0, 0, 0, 3448, 3262, 1, 0, 0, 0, 3448, 3273, 
	1, 0, 0, 0, 3448, 3291, 1, 0, 0, 0, 3448, 3317, 1, 0, 0, 0, 3448, 3329, 
	1, 0, 0, 0, 3448, 3344, 1, 0, 0, 0, 3448, 3356, 1, 0, 0, 0, 3448, 3368, 
	1, 0, 0, 0, 3448, 3383, 1, 0, 0, 0, 3448, 3395, 1, 0, 0, 0, 3448, 3409, 
	1, 0, 0, 0, 3448, 3421, 1, 0, 0, 0, 3448, 3430, 1, 0, 0, 0, 3448, 3439, 
	1, 0, 0, 0, 3449, 185, 1, 0, 0, 0, 3450, 3451, 5, 185, 0, 0, 3451, 3452, 
	5, 1052, 0, 0, 3452, 3453, 3, 832, 416, 0, 3453, 187, 1, 0, 0, 0, 3454, 
	3455, 5, 316, 0, 0, 3455, 3456, 5, 1052, 0, 0, 3456, 3457, 7, 16, 0, 0, 
	3457, 189, 1, 0, 0, 0, 3458, 3459, 5, 497, 0, 0, 3459, 3460, 5, 1052, 0, 
	0, 3460, 3461, 5, 1063, 0, 0, 3461, 3466, 3, 820, 410, 0, 3462, 3463, 5, 
	1069, 0, 0, 3463, 3465, 3, 820, 410, 0, 3464, 3462, 1, 0, 0, 0, 3465, 3468, 
	1, 0, 0, 0, 3466, 3464, 1, 0, 0, 0, 3466, 3467, 1, 0, 0, 0, 3467, 3469, 
	1, 0, 0, 0, 3468, 3466, 1, 0, 0, 0, 3469, 3470, 5, 1064, 0, 0, 3470, 191, 
	1, 0, 0, 0, 3471, 3472, 5, 531, 0, 0, 3472, 3473, 3, 832, 416, 0, 3473, 
	3474, 5, 567, 0, 0, 3474, 3475, 5, 237, 0, 0, 3475, 3476, 7, 17, 0, 0, 
	3476, 193, 1, 0, 0, 0, 3477, 3478, 5, 35, 0, 0, 3478, 3479, 5, 670, 0, 
	0, 3479, 3481, 5, 465, 0, 0, 3480, 3482, 3, 622, 311, 0, 3481, 3480, 1, 
	0, 0, 0, 3481, 3482, 1, 0, 0, 0, 3482, 3483, 1, 0, 0, 0, 3483, 3504, 3, 
	820, 410, 0, 3484, 3486, 5, 757, 0, 0, 3485, 3487, 3, 186, 93, 0, 3486, 
	3485, 1, 0, 0, 0, 3486, 3487, 1, 0, 0, 0, 3487, 3489, 1, 0, 0, 0, 3488, 
	3490, 3, 188, 94, 0, 3489, 3488, 1, 0, 0, 0, 3489, 3490, 1, 0, 0, 0, 3490, 
	3497, 1, 0, 0, 0, 3491, 3492, 5, 803, 0, 0, 3492, 3493, 5, 1052, 0, 0, 
	3493, 3494, 5, 1063, 0, 0, 3494, 3498, 3, 816, 408, 0, 3495, 3496, 5, 360, 
	0, 0, 3496, 3498, 5, 1064, 0, 0, 3497, 3491, 1, 0, 0, 0, 3497, 3495, 1, 
	0, 0, 0, 3497, 3498, 1, 0, 0, 0, 3498, 3502, 1, 0, 0, 0, 3499, 3500, 5, 
	256, 0, 0, 3500, 3501, 5, 1052, 0, 0, 3501, 3503, 3, 816, 408, 0, 3502, 
	3499, 1, 0, 0, 0, 3502, 3503, 1, 0, 0, 0, 3503, 3505, 1, 0, 0, 0, 3504, 
	3484, 1, 0, 0, 0, 3504, 3505, 1, 0, 0, 0, 3505, 3518, 1, 0, 0, 0, 3506, 
	3516, 3, 190, 95, 0, 3507, 3508, 5, 903, 0, 0, 3508, 3513, 3, 192, 96, 
	0, 3509, 3510, 5, 1069, 0, 0, 3510, 3512, 3, 192, 96, 0, 3511, 3509, 1, 
	0, 0, 0, 3512, 3515, 1, 0, 0, 0, 3513, 3511, 1, 0, 0, 0, 3513, 3514, 1, 
	0, 0, 0, 3514, 3517, 1, 0, 0, 0, 3515, 3513, 1, 0, 0, 0, 3516, 3507, 1, 
	0, 0, 0, 3516, 3517, 1, 0, 0, 0, 3517, 3519, 1, 0, 0, 0, 3518, 3506, 1, 
	0, 0, 0, 3518, 3519, 1, 0, 0, 0, 3519, 195, 1, 0, 0, 0, 3520, 3521, 5, 
	35, 0, 0, 3521, 3523, 5, 693, 0, 0, 3522, 3524, 3, 622, 311, 0, 3523, 3522, 
	1, 0, 0, 0, 3523, 3524, 1, 0, 0, 0, 3524, 3525, 1, 0, 0, 0, 3525, 3526, 
	3, 820, 410, 0, 3526, 3527, 5, 658, 0, 0, 3527, 3528, 5, 888, 0, 0, 3528, 
	3529, 3, 820, 410, 0, 3529, 3565, 1, 0, 0, 0, 3530, 3531, 5, 35, 0, 0, 
	3531, 3533, 5, 693, 0, 0, 3532, 3534, 3, 622, 311, 0, 3533, 3532, 1, 0, 
	0, 0, 3533, 3534, 1, 0, 0, 0, 3534, 3535, 1, 0, 0, 0, 3535, 3536, 3, 820, 
	410, 0, 3536, 3537, 5, 757, 0, 0, 3537, 3538, 3, 618, 309, 0, 3538, 3565, 
	1, 0, 0, 0, 3539, 3540, 5, 35, 0, 0, 3540, 3542, 5, 693, 0, 0, 3541, 3543, 
	3, 622, 311, 0, 3542, 3541, 1, 0, 0, 0, 3542, 3543, 1, 0, 0, 0, 3543, 3544, 
	1, 0, 0, 0, 3544, 3545, 3, 820, 410, 0, 3545, 3546, 5, 937, 0, 0, 3546, 
	3547, 5, 155, 0, 0, 3547, 3565, 1, 0, 0, 0, 3548, 3549, 5, 35, 0, 0, 3549, 
	3551, 5, 693, 0, 0, 3550, 3552, 3, 622, 311, 0, 3551, 3550, 1, 0, 0, 0, 
	3551, 3552, 1, 0, 0, 0, 3552, 3553, 1, 0, 0, 0, 3553, 3554, 3, 820, 410, 
	0, 3554, 3555, 3, 290, 145, 0, 3555, 3565, 1, 0, 0, 0, 3556, 3557, 5, 35, 
	0, 0, 3557, 3559, 5, 693, 0, 0, 3558, 3560, 3, 622, 311, 0, 3559, 3558, 
	1, 0, 0, 0, 3559, 3560, 1, 0, 0, 0, 3560, 3561, 1, 0, 0, 0, 3561, 3562, 
	3, 820, 410, 0, 3562, 3563, 3, 294, 147, 0, 3563, 3565, 1, 0, 0, 0, 3564, 
	3520, 1, 0, 0, 0, 3564, 3530, 1, 0, 0, 0, 3564, 3539, 1, 0, 0, 0, 3564, 
	3548, 1, 0, 0, 0, 3564, 3556, 1, 0, 0, 0, 3565, 197, 1, 0, 0, 0, 3566, 
	3567, 5, 35, 0, 0, 3567, 3568, 5, 698, 0, 0, 3568, 3569, 5, 8, 0, 0, 3569, 
	3571, 5, 583, 0, 0, 3570, 3572, 3, 622, 311, 0, 3571, 3570, 1, 0, 0, 0, 
	3571, 3572, 1, 0, 0, 0, 3572, 3573, 1, 0, 0, 0, 3573, 3574, 3, 820, 410, 
	0, 3574, 3575, 5, 757, 0, 0, 3575, 3576, 5, 101, 0, 0, 3576, 3577, 5, 1048, 
	0, 0, 3577, 3578, 3, 836, 418, 0, 3578, 3603, 1, 0, 0, 0, 3579, 3580, 5, 
	35, 0, 0, 3580, 3581, 5, 698, 0, 0, 3581, 3582, 5, 8, 0, 0, 3582, 3584, 
	5, 583, 0, 0, 3583, 3585, 3, 622, 311, 0, 3584, 3583, 1, 0, 0, 0, 3584, 
	3585, 1, 0, 0, 0, 3585, 3586, 1, 0, 0, 0, 3586, 3587, 3, 820, 410, 0, 3587, 
	3588, 5, 658, 0, 0, 3588, 3589, 5, 888, 0, 0, 3589, 3590, 3, 820, 410, 
	0, 3590, 3603, 1, 0, 0, 0, 3591, 3592, 5, 35, 0, 0, 3592, 3593, 5, 698, 
	0, 0, 3593, 3594, 5, 8, 0, 0, 3594, 3596, 5, 583, 0, 0, 3595, 3597, 3, 
	622, 311, 0, 3596, 3595, 1, 0, 0, 0, 3596, 3597, 1, 0, 0, 0, 3597, 3598, 
	1, 0, 0, 0, 3598, 3599, 3, 820, 410, 0, 3599, 3600, 5, 757, 0, 0, 3600, 
	3601, 3, 618, 309, 0, 3601, 3603, 1, 0, 0, 0, 3602, 3566, 1, 0, 0, 0, 3602, 
	3579, 1, 0, 0, 0, 3602, 3591, 1, 0, 0, 0, 3603, 199, 1, 0, 0, 0, 3604, 
	3605, 5, 35, 0, 0, 3605, 3607, 5, 732, 0, 0, 3606, 3608, 3, 622, 311, 0, 
	3607, 3606, 1, 0, 0, 0, 3607, 3608, 1, 0, 0, 0, 3608, 3609, 1, 0, 0, 0, 
	3609, 3610, 3, 798, 399, 0, 3610, 3611, 5, 658, 0, 0, 3611, 3612, 5, 888, 
	0, 0, 3612, 3613, 3, 798, 399, 0, 3613, 3689, 1, 0, 0, 0, 3614, 3615, 5, 
	35, 0, 0, 3615, 3617, 5, 732, 0, 0, 3616, 3618, 3, 622, 311, 0, 3617, 3616, 
	1, 0, 0, 0, 3617, 3618, 1, 0, 0, 0, 3618, 3619, 1, 0, 0, 0, 3619, 3620, 
	3, 798, 399, 0, 3620, 3621, 5, 846, 0, 0, 3621, 3622, 5, 982, 0, 0, 3622, 
	3623, 3, 798, 399, 0, 3623, 3689, 1, 0, 0, 0, 3624, 3625, 5, 35, 0, 0, 
	3625, 3627, 5, 732, 0, 0, 3626, 3628, 3, 622, 311, 0, 3627, 3626, 1, 0, 
	0, 0, 3627, 3628, 1, 0, 0, 0, 3628, 3629, 1, 0, 0, 0, 3629, 3630, 3, 798, 
	399, 0, 3630, 3634, 5, 757, 0, 0, 3631, 3632, 5, 199, 0, 0, 3632, 3633, 
	5, 1052, 0, 0, 3633, 3635, 3, 832, 416, 0, 3634, 3631, 1, 0, 0, 0, 3634, 
	3635, 1, 0, 0, 0, 3635, 3639, 1, 0, 0, 0, 3636, 3637, 5, 449, 0, 0, 3637, 
	3638, 5, 1052, 0, 0, 3638, 3640, 3, 832, 416, 0, 3639, 3636, 1, 0, 0, 0, 
	3639, 3640, 1, 0, 0, 0, 3640, 3642, 1, 0, 0, 0, 3641, 3643, 3, 128, 64, 
	0, 3642, 3641, 1, 0, 0, 0, 3642, 3643, 1, 0, 0, 0, 3643, 3645, 1, 0, 0, 
	0, 3644, 3646, 3, 618, 309, 0, 3645, 3644, 1, 0, 0, 0, 3645, 3646, 1, 0, 
	0, 0, 3646, 3689, 1, 0, 0, 0, 3647, 3648, 5, 35, 0, 0, 3648, 3650, 5, 732, 
	0, 0, 3649, 3651, 3, 622, 311, 0, 3650, 3649, 1, 0, 0, 0, 3650, 3651, 1, 
	0, 0, 0, 3651, 3652, 1, 0, 0, 0, 3652, 3653, 3, 798, 399, 0, 3653, 3654, 
	3, 290, 145, 0, 3654, 3689, 1, 0, 0, 0, 3655, 3656, 5, 35, 0, 0, 3656, 
	3658, 5, 732, 0, 0, 3657, 3659, 3, 622, 311, 0, 3658, 3657, 1, 0, 0, 0, 
	3658, 3659, 1, 0, 0, 0, 3659, 3660, 1, 0, 0, 0, 3660, 3661, 3, 798, 399, 
	0, 3661, 3662, 3, 294, 147, 0, 3662, 3689, 1, 0, 0, 0, 3663, 3664, 5, 35, 
	0, 0, 3664, 3666, 5, 732, 0, 0, 3665, 3667, 3, 622, 311, 0, 3666, 3665, 
	1, 0, 0, 0, 3666, 3667, 1, 0, 0, 0, 3667, 3668, 1, 0, 0, 0, 3668, 3669, 
	3, 798, 399, 0, 3669, 3670, 5, 937, 0, 0, 3670, 3675, 3, 202, 101, 0, 3671, 
	3672, 5, 1069, 0, 0, 3672, 3674, 3, 202, 101, 0, 3673, 3671, 1, 0, 0, 0, 
	3674, 3677, 1, 0, 0, 0, 3675, 3673, 1, 0, 0, 0, 3675, 3676, 1, 0, 0, 0, 
	3676, 3689, 1, 0, 0, 0, 3677, 3675, 1, 0, 0, 0, 3678, 3679, 5, 35, 0, 0, 
	3679, 3681, 5, 732, 0, 0, 3680, 3682, 3, 622, 311, 0, 3681, 3680, 1, 0, 
	0, 0, 3681, 3682, 1, 0, 0, 0, 3682, 3683, 1, 0, 0, 0, 3683, 3684, 3, 798, 
	399, 0, 3684, 3685, 7, 18, 0, 0, 3685, 3686, 5, 434, 0, 0, 3686, 3687, 
	5, 8, 0, 0, 3687, 3689, 1, 0, 0, 0, 3688, 3604, 1, 0, 0, 0, 3688, 3614, 
	1, 0, 0, 0, 3688, 3624, 1, 0, 0, 0, 3688, 3647, 1, 0, 0, 0, 3688, 3655, 
	1, 0, 0, 0, 3688, 3663, 1, 0, 0, 0, 3688, 3678, 1, 0, 0, 0, 3689, 201, 
	1, 0, 0, 0, 3690, 3691, 7, 10, 0, 0, 3691, 203, 1, 0, 0, 0, 3692, 3693, 
	5, 35, 0, 0, 3693, 3695, 5, 749, 0, 0, 3694, 3696, 3, 622, 311, 0, 3695, 
	3694, 1, 0, 0, 0, 3695, 3696, 1, 0, 0, 0, 3696, 3697, 1, 0, 0, 0, 3697, 
	3698, 3, 830, 415, 0, 3698, 3699, 5, 658, 0, 0, 3699, 3700, 5, 888, 0, 
	0, 3700, 3701, 3, 830, 415, 0, 3701, 3740, 1, 0, 0, 0, 3702, 3703, 5, 35, 
	0, 0, 3703, 3705, 5, 749, 0, 0, 3704, 3706, 3, 622, 311, 0, 3705, 3704, 
	1, 0, 0, 0, 3705, 3706, 1, 0, 0, 0, 3706, 3707, 1, 0, 0, 0, 3707, 3709, 
	3, 830, 415, 0, 3708, 3710, 5, 757, 0, 0, 3709, 3708, 1, 0, 0, 0, 3709, 
	3710, 1, 0, 0, 0, 3710, 3719, 1, 0, 0, 0, 3711, 3713, 5, 366, 0, 0, 3712, 
	3714, 5, 104, 0, 0, 3713, 3712, 1, 0, 0, 0, 3713, 3714, 1, 0, 0, 0, 3714, 
	3716, 1, 0, 0, 0, 3715, 3717, 5, 1052, 0, 0, 3716, 3715, 1, 0, 0, 0, 3716, 
	3717, 1, 0, 0, 0, 3717, 3718, 1, 0, 0, 0, 3718, 3720, 3, 832, 416, 0, 3719, 
	3711, 1, 0, 0, 0, 3719, 3720, 1, 0, 0, 0, 3720, 3740, 1, 0, 0, 0, 3721, 
	3722, 5, 35, 0, 0, 3722, 3724, 5, 749, 0, 0, 3723, 3725, 3, 622, 311, 0, 
	3724, 3723, 1, 0, 0, 0, 3724, 3725, 1, 0, 0, 0, 3725, 3726, 1, 0, 0, 0, 
	3726, 3727, 3, 830, 415, 0, 3727, 3728, 5, 757, 0, 0, 3728, 3729, 3, 618, 
	309, 0, 3729, 3740, 1, 0, 0, 0, 3730, 3731, 5, 35, 0, 0, 3731, 3733, 5, 
	749, 0, 0, 3732, 3734, 3, 622, 311, 0, 3733, 3732, 1, 0, 0, 0, 3733, 3734, 
	1, 0, 0, 0, 3734, 3735, 1, 0, 0, 0, 3735, 3736, 3, 830, 415, 0, 3736, 3737, 
	5, 937, 0, 0, 3737, 3738, 5, 155, 0, 0, 3738, 3740, 1, 0, 0, 0, 3739, 3692, 
	1, 0, 0, 0, 3739, 3702, 1, 0, 0, 0, 3739, 3721, 1, 0, 0, 0, 3739, 3730, 
	1, 0, 0, 0, 3740, 205, 1, 0, 0, 0, 3741, 3743, 5, 35, 0, 0, 3742, 3744, 
	5, 745, 0, 0, 3743, 3742, 1, 0, 0, 0, 3743, 3744, 1, 0, 0, 0, 3744, 3745, 
	1, 0, 0, 0, 3745, 3746, 5, 379, 0, 0, 3746, 3747, 3, 622, 311, 0, 3747, 
	3748, 3, 820, 410, 0, 3748, 3752, 5, 757, 0, 0, 3749, 3750, 5, 917, 0, 
	0, 3750, 3751, 5, 1052, 0, 0, 3751, 3753, 5, 281, 0, 0, 3752, 3749, 1, 
	0, 0, 0, 3752, 3753, 1, 0, 0, 0, 3753, 3757, 1, 0, 0, 0, 3754, 3755, 5, 
	252, 0, 0, 3755, 3756, 5, 1052, 0, 0, 3756, 3758, 3, 430, 215, 0, 3757, 
	3754, 1, 0, 0, 0, 3757, 3758, 1, 0, 0, 0, 3758, 3762, 1, 0, 0, 0, 3759, 
	3760, 5, 294, 0, 0, 3760, 3761, 5, 1052, 0, 0, 3761, 3763, 7, 19, 0, 0, 
	3762, 3759, 1, 0, 0, 0, 3762, 3763, 1, 0, 0, 0, 3763, 3767, 1, 0, 0, 0, 
	3764, 3765, 5, 287, 0, 0, 3765, 3766, 5, 1052, 0, 0, 3766, 3768, 3, 816, 
	408, 0, 3767, 3764, 1, 0, 0, 0, 3767, 3768, 1, 0, 0, 0, 3768, 3778, 1, 
	0, 0, 0, 3769, 3770, 5, 293, 0, 0, 3770, 3776, 5, 1052, 0, 0, 3771, 3777, 
	3, 816, 408, 0, 3772, 3773, 5, 1063, 0, 0, 3773, 3774, 3, 818, 409, 0, 
	3774, 3775, 5, 1064, 0, 0, 3775, 3777, 1, 0, 0, 0, 3776, 3771, 1, 0, 0, 
	0, 3776, 3772, 1, 0, 0, 0, 3777, 3779, 1, 0, 0, 0, 3778, 3769, 1, 0, 0, 
	0, 3778, 3779, 1, 0, 0, 0, 3779, 3783, 1, 0, 0, 0, 3780, 3781, 5, 292, 
	0, 0, 3781, 3782, 5, 1052, 0, 0, 3782, 3784, 3, 816, 408, 0, 3783, 3780, 
	1, 0, 0, 0, 3783, 3784, 1, 0, 0, 0, 3784, 3788, 1, 0, 0, 0, 3785, 3786, 
	5, 288, 0, 0, 3786, 3787, 5, 1052, 0, 0, 3787, 3789, 3, 816, 408, 0, 3788, 
	3785, 1, 0, 0, 0, 3788, 3789, 1, 0, 0, 0, 3789, 3799, 1, 0, 0, 0, 3790, 
	3791, 5, 288, 0, 0, 3791, 3797, 5, 1052, 0, 0, 3792, 3798, 3, 816, 408, 
	0, 3793, 3794, 5, 1063, 0, 0, 3794, 3795, 3, 818, 409, 0, 3795, 3796, 5, 
	1064, 0, 0, 3796, 3798, 1, 0, 0, 0, 3797, 3792, 1, 0, 0, 0, 3797, 3793, 
	1, 0, 0, 0, 3798, 3800, 1, 0, 0, 0, 3799, 3790, 1, 0, 0, 0, 3799, 3800, 
	1, 0, 0, 0, 3800, 3804, 1, 0, 0, 0, 3801, 3802, 5, 289, 0, 0, 3802, 3803, 
	5, 1052, 0, 0, 3803, 3805, 3, 816, 408, 0, 3804, 3801, 1, 0, 0, 0, 3804, 
	3805, 1, 0, 0, 0, 3805, 3809, 1, 0, 0, 0, 3806, 3807, 5, 290, 0, 0, 3807, 
	3808, 5, 1052, 0, 0, 3808, 3810, 3, 816, 408, 0, 3809, 3806, 1, 0, 0, 0, 
	3809, 3810, 1, 0, 0, 0, 3810, 3817, 1, 0, 0, 0, 3811, 3812, 5, 286, 0, 
	0, 3812, 3813, 5, 1052, 0, 0, 3813, 3814, 5, 1063, 0, 0, 3814, 3815, 3, 
	818, 409, 0, 3815, 3816, 5, 1064, 0, 0, 3816, 3818, 1, 0, 0, 0, 3817, 3811, 
	1, 0, 0, 0, 3817, 3818, 1, 0, 0, 0, 3818, 3825, 1, 0, 0, 0, 3819, 3820, 
	5, 283, 0, 0, 3820, 3821, 5, 1052, 0, 0, 3821, 3822, 5, 1063, 0, 0, 3822, 
	3823, 3, 818, 409, 0, 3823, 3824, 5, 1064, 0, 0, 3824, 3826, 1, 0, 0, 0, 
	3825, 3819, 1, 0, 0, 0, 3825, 3826, 1, 0, 0, 0, 3826, 3833, 1, 0, 0, 0, 
	3827, 3828, 5, 285, 0, 0, 3828, 3829, 5, 1052, 0, 0, 3829, 3830, 5, 1063, 
	0, 0, 3830, 3831, 3, 816, 408, 0, 3831, 3832, 5, 1064, 0, 0, 3832, 3834, 
	1, 0, 0, 0, 3833, 3827, 1, 0, 0, 0, 3833, 3834, 1, 0, 0, 0, 3834, 3838, 
	1, 0, 0, 0, 3835, 3836, 5, 284, 0, 0, 3836, 3837, 5, 1052, 0, 0, 3837, 
	3839, 7, 20, 0, 0, 3838, 3835, 1, 0, 0, 0, 3838, 3839, 1, 0, 0, 0, 3839, 
	3843, 1, 0, 0, 0, 3840, 3841, 5, 284, 0, 0, 3841, 3842, 5, 1052, 0, 0, 
	3842, 3844, 3, 816, 408, 0, 3843, 3840, 1, 0, 0, 0, 3843, 3844, 1, 0, 0, 
	0, 3844, 3880, 1, 0, 0, 0, 3845, 3847, 5, 35, 0, 0, 3846, 3848, 5, 745, 
	0, 0, 3847, 3846, 1, 0, 0, 0, 3847, 3848, 1, 0, 0, 0, 3848, 3849, 1, 0, 
	0, 0, 3849, 3851, 5, 379, 0, 0, 3850, 3852, 3, 622, 311, 0, 3851, 3850, 
	1, 0, 0, 0, 3851, 3852, 1, 0, 0, 0, 3852, 3853, 1, 0, 0, 0, 3853, 3854, 
	3, 820, 410, 0, 3854, 3855, 5, 937, 0, 0, 3855, 3860, 3, 208, 104, 0, 3856, 
	3857, 5, 1069, 0, 0, 3857, 3859, 3, 208, 104, 0, 3858, 3856, 1, 0, 0, 0, 
	3859, 3862, 1, 0, 0, 0, 3860, 3858, 1, 0, 0, 0, 3860, 3861, 1, 0, 0, 0, 
	3861, 3880, 1, 0, 0, 0, 3862, 3860, 1, 0, 0, 0, 3863, 3865, 5, 35, 0, 0, 
	3864, 3866, 5, 745, 0, 0, 3865, 3864, 1, 0, 0, 0, 3865, 3866, 1, 0, 0, 
	0, 3866, 3867, 1, 0, 0, 0, 3867, 3868, 5, 379, 0, 0, 3868, 3869, 3, 820, 
	410, 0, 3869, 3870, 3, 290, 145, 0, 3870, 3880, 1, 0, 0, 0, 3871, 3873, 
	5, 35, 0, 0, 3872, 3874, 5, 745, 0, 0, 3873, 3872, 1, 0, 0, 0, 3873, 3874, 
	1, 0, 0, 0, 3874, 3875, 1, 0, 0, 0, 3875, 3876, 5, 379, 0, 0, 3876, 3877, 
	3, 820, 410, 0, 3877, 3878, 3, 294, 147, 0, 3878, 3880, 1, 0, 0, 0, 3879, 
	3741, 1, 0, 0, 0, 3879, 3845, 1, 0, 0, 0, 3879, 3863, 1, 0, 0, 0, 3879, 
	3871, 1, 0, 0, 0, 3880, 207, 1, 0, 0, 0, 3881, 3890, 5, 252, 0, 0, 3882, 
	3890, 5, 478, 0, 0, 3883, 3890, 5, 510, 0, 0, 3884, 3890, 5, 511, 0, 0, 
	3885, 3886, 5, 516, 0, 0, 3886, 3887, 5, 1052, 0, 0, 3887, 3890, 7, 21, 
	0, 0, 3888, 3890, 5, 155, 0, 0, 3889, 3881, 1, 0, 0, 0, 3889, 3882, 1, 
	0, 0, 0, 3889, 3883, 1, 0, 0, 0, 3889, 3884, 1, 0, 0, 0, 3889, 3885, 1, 
	0, 0, 0, 3889, 3888, 1, 0, 0, 0, 3890, 209, 1, 0, 0, 0, 3891, 3893, 5, 
	35, 0, 0, 3892, 3894, 5, 745, 0, 0, 3893, 3892, 1, 0, 0, 0, 3893, 3894, 
	1, 0, 0, 0, 3894, 3895, 1, 0, 0, 0, 3895, 3897, 5, 379, 0, 0, 3896, 3898, 
	3, 622, 311, 0, 3897, 3896, 1, 0, 0, 0, 3897, 3898, 1, 0, 0, 0, 3898, 3899, 
	1, 0, 0, 0, 3899, 3900, 3, 820, 410, 0, 3900, 3904, 5, 757, 0, 0, 3901, 
	3902, 5, 917, 0, 0, 3902, 3903, 5, 1052, 0, 0, 3903, 3905, 5, 281, 0, 0, 
	3904, 3901, 1, 0, 0, 0, 3904, 3905, 1, 0, 0, 0, 3905, 3907, 1, 0, 0, 0, 
	3906, 3908, 3, 136, 68, 0, 3907, 3906, 1, 0, 0, 0, 3907, 3908, 1, 0, 0, 
	0, 3908, 3912, 1, 0, 0, 0, 3909, 3910, 5, 294, 0, 0, 3910, 3911, 5, 1052, 
	0, 0, 3911, 3913, 7, 19, 0, 0, 3912, 3909, 1, 0, 0, 0, 3912, 3913, 1, 0, 
	0, 0, 3913, 3917, 1, 0, 0, 0, 3914, 3915, 5, 287, 0, 0, 3915, 3916, 5, 
	1052, 0, 0, 3916, 3918, 3, 816, 408, 0, 3917, 3914, 1, 0, 0, 0, 3917, 3918, 
	1, 0, 0, 0, 3918, 3928, 1, 0, 0, 0, 3919, 3920, 5, 293, 0, 0, 3920, 3926, 
	5, 1052, 0, 0, 3921, 3927, 3, 816, 408, 0, 3922, 3923, 5, 1063, 0, 0, 3923, 
	3924, 3, 818, 409, 0, 3924, 3925, 5, 1064, 0, 0, 3925, 3927, 1, 0, 0, 0, 
	3926, 3921, 1, 0, 0, 0, 3926, 3922, 1, 0, 0, 0, 3927, 3929, 1, 0, 0, 0, 
	3928, 3919, 1, 0, 0, 0, 3928, 3929, 1, 0, 0, 0, 3929, 3933, 1, 0, 0, 0, 
	3930, 3931, 5, 292, 0, 0, 3931, 3932, 5, 1052, 0, 0, 3932, 3934, 3, 816, 
	408, 0, 3933, 3930, 1, 0, 0, 0, 3933, 3934, 1, 0, 0, 0, 3934, 3938, 1, 
	0, 0, 0, 3935, 3936, 5, 288, 0, 0, 3936, 3937, 5, 1052, 0, 0, 3937, 3939, 
	3, 816, 408, 0, 3938, 3935, 1, 0, 0, 0, 3938, 3939, 1, 0, 0, 0, 3939, 3949, 
	1, 0, 0, 0, 3940, 3941, 5, 288, 0, 0, 3941, 3947, 5, 1052, 0, 0, 3942, 
	3948, 3, 816, 408, 0, 3943, 3944, 5, 1063, 0, 0, 3944, 3945, 3, 818, 409, 
	0, 3945, 3946, 5, 1064, 0, 0, 3946, 3948, 1, 0, 0, 0, 3947, 3942, 1, 0, 
	0, 0, 3947, 3943, 1, 0, 0, 0, 3948, 3950, 1, 0, 0, 0, 3949, 3940, 1, 0, 
	0, 0, 3949, 3950, 1, 0, 0, 0, 3950, 3954, 1, 0, 0, 0, 3951, 3952, 5, 289, 
	0, 0, 3952, 3953, 5, 1052, 0, 0, 3953, 3955, 3, 816, 408, 0, 3954, 3951, 
	1, 0, 0, 0, 3954, 3955, 1, 0, 0, 0, 3955, 3959, 1, 0, 0, 0, 3956, 3957, 
	5, 290, 0, 0, 3957, 3958, 5, 1052, 0, 0, 3958, 3960, 3, 816, 408, 0, 3959, 
	3956, 1, 0, 0, 0, 3959, 3960, 1, 0, 0, 0, 3960, 3967, 1, 0, 0, 0, 3961, 
	3962, 5, 286, 0, 0, 3962, 3963, 5, 1052, 0, 0, 3963, 3964, 5, 1063, 0, 
	0, 3964, 3965, 3, 818, 409, 0, 3965, 3966, 5, 1064, 0, 0, 3966, 3968, 1, 
	0, 0, 0, 3967, 3961, 1, 0, 0, 0, 3967, 3968, 1, 0, 0, 0, 3968, 3975, 1, 
	0, 0, 0, 3969, 3970, 5, 283, 0, 0, 3970, 3971, 5, 1052, 0, 0, 3971, 3972, 
	5, 1063, 0, 0, 3972, 3973, 3, 818, 409, 0, 3973, 3974, 5, 1064, 0, 0, 3974, 
	3976, 1, 0, 0, 0, 3975, 3969, 1, 0, 0, 0, 3975, 3976, 1, 0, 0, 0, 3976, 
	3983, 1, 0, 0, 0, 3977, 3978, 5, 285, 0, 0, 3978, 3979, 5, 1052, 0, 0, 
	3979, 3980, 5, 1063, 0, 0, 3980, 3981, 3, 816, 408, 0, 3981, 3982, 5, 1064, 
	0, 0, 3982, 3984, 1, 0, 0, 0, 3983, 3977, 1, 0, 0, 0, 3983, 3984, 1, 0, 
	0, 0, 3984, 3990, 1, 0, 0, 0, 3985, 3986, 5, 284, 0, 0, 3986, 3987, 5, 
	1052, 0, 0, 3987, 3991, 5, 230, 0, 0, 3988, 3991, 5, 246, 0, 0, 3989, 3991, 
	5, 247, 0, 0, 3990, 3985, 1, 0, 0, 0, 3990, 3988, 1, 0, 0, 0, 3990, 3989, 
	1, 0, 0, 0, 3990, 3991, 1, 0, 0, 0, 3991, 3992, 1, 0, 0, 0, 3992, 3993, 
	5, 291, 0, 0, 3993, 3994, 5, 1052, 0, 0, 3994, 3995, 3, 816, 408, 0, 3995, 
	4031, 1, 0, 0, 0, 3996, 3998, 5, 35, 0, 0, 3997, 3999, 5, 745, 0, 0, 3998, 
	3997, 1, 0, 0, 0, 3998, 3999, 1, 0, 0, 0, 3999, 4000, 1, 0, 0, 0, 4000, 
	4002, 5, 379, 0, 0, 4001, 4003, 3, 622, 311, 0, 4002, 4001, 1, 0, 0, 0, 
	4002, 4003, 1, 0, 0, 0, 4003, 4004, 1, 0, 0, 0, 4004, 4005, 3, 820, 410, 
	0, 4005, 4006, 5, 937, 0, 0, 4006, 4011, 3, 212, 106, 0, 4007, 4008, 5, 
	1069, 0, 0, 4008, 4010, 3, 212, 106, 0, 4009, 4007, 1, 0, 0, 0, 4010, 4013, 
	1, 0, 0, 0, 4011, 4009, 1, 0, 0, 0, 4011, 4012, 1, 0, 0, 0, 4012, 4031, 
	1, 0, 0, 0, 4013, 4011, 1, 0, 0, 0, 4014, 4016, 5, 35, 0, 0, 4015, 4017, 
	5, 745, 0, 0, 4016, 4015, 1, 0, 0, 0, 4016, 4017, 1, 0, 0, 0, 4017, 4018, 
	1, 0, 0, 0, 4018, 4019, 5, 379, 0, 0, 4019, 4020, 3, 820, 410, 0, 4020, 
	4021, 3, 290, 145, 0, 4021, 4031, 1, 0, 0, 0, 4022, 4024, 5, 35, 0, 0, 
	4023, 4025, 5, 745, 0, 0, 4024, 4023, 1, 0, 0, 0, 4024, 4025, 1, 0, 0, 
	0, 4025, 4026, 1, 0, 0, 0, 4026, 4027, 5, 379, 0, 0, 4027, 4028, 3, 820, 
	410, 0, 4028, 4029, 3, 294, 147, 0, 4029, 4031, 1, 0, 0, 0, 4030, 3891, 
	1, 0, 0, 0, 4030, 3996, 1, 0, 0, 0, 4030, 4014, 1, 0, 0, 0, 4030, 4022, 
	1, 0, 0, 0, 4031, 211, 1, 0, 0, 0, 4032, 4033, 7, 22, 0, 0, 4033, 213, 
	1, 0, 0, 0, 4034, 4036, 5, 35, 0, 0, 4035, 4037, 5, 745, 0, 0, 4036, 4035, 
	1, 0, 0, 0, 4036, 4037, 1, 0, 0, 0, 4037, 4038, 1, 0, 0, 0, 4038, 4040, 
	5, 379, 0, 0, 4039, 4041, 3, 622, 311, 0, 4040, 4039, 1, 0, 0, 0, 4040, 
	4041, 1, 0, 0, 0, 4041, 4042, 1, 0, 0, 0, 4042, 4043, 3, 820, 410, 0, 4043, 
	4047, 5, 757, 0, 0, 4044, 4045, 5, 917, 0, 0, 4045, 4046, 5, 1052, 0, 0, 
	4046, 4048, 5, 712, 0, 0, 4047, 4044, 1, 0, 0, 0, 4047, 4048, 1, 0, 0, 
	0, 4048, 4050, 1, 0, 0, 0, 4049, 4051, 3, 136, 68, 0, 4050, 4049, 1, 0, 
	0, 0, 4050, 4051, 1, 0, 0, 0, 4051, 4055, 1, 0, 0, 0, 4052, 4053, 5, 715, 
	0, 0, 4053, 4054, 5, 1052, 0, 0, 4054, 4056, 3, 816, 408, 0, 4055, 4052, 
	1, 0, 0, 0, 4055, 4056, 1, 0, 0, 0, 4056, 4060, 1, 0, 0, 0, 4057, 4058, 
	5, 724, 0, 0, 4058, 4059, 5, 1052, 0, 0, 4059, 4061, 3, 816, 408, 0, 4060, 
	4057, 1, 0, 0, 0, 4060, 4061, 1, 0, 0, 0, 4061, 4065, 1, 0, 0, 0, 4062, 
	4063, 5, 717, 0, 0, 4063, 4064, 5, 1052, 0, 0, 4064, 4066, 3, 816, 408, 
	0, 4065, 4062, 1, 0, 0, 0, 4065, 4066, 1, 0, 0, 0, 4066, 4070, 1, 0, 0, 
	0, 4067, 4068, 5, 725, 0, 0, 4068, 4069, 5, 1052, 0, 0, 4069, 4071, 3, 
	816, 408, 0, 4070, 4067, 1, 0, 0, 0, 4070, 4071, 1, 0, 0, 0, 4071, 4075, 
	1, 0, 0, 0, 4072, 4073, 5, 723, 0, 0, 4073, 4074, 5, 1052, 0, 0, 4074, 
	4076, 3, 816, 408, 0, 4075, 4072, 1, 0, 0, 0, 4075, 4076, 1, 0, 0, 0, 4076, 
	4080, 1, 0, 0, 0, 4077, 4078, 5, 713, 0, 0, 4078, 4079, 5, 1052, 0, 0, 
	4079, 4081, 3, 430, 215, 0, 4080, 4077, 1, 0, 0, 0, 4080, 4081, 1, 0, 0, 
	0, 4081, 4085, 1, 0, 0, 0, 4082, 4083, 5, 722, 0, 0, 4083, 4084, 5, 1052, 
	0, 0, 4084, 4086, 3, 816, 408, 0, 4085, 4082, 1, 0, 0, 0, 4085, 4086, 1, 
	0, 0, 0, 4086, 4090, 1, 0, 0, 0, 4087, 4088, 5, 719, 0, 0, 4088, 4089, 
	5, 1052, 0, 0, 4089, 4091, 3, 430, 215, 0, 4090, 4087, 1, 0, 0, 0, 4090, 
	4091, 1, 0, 0, 0, 4091, 4095, 1, 0, 0, 0, 4092, 4093, 5, 718, 0, 0, 4093, 
	4094, 5, 1052, 0, 0, 4094, 4096, 3, 816, 408, 0, 4095, 4092, 1, 0, 0, 0, 
	4095, 4096, 1, 0, 0, 0, 4096, 4100, 1, 0, 0, 0, 4097, 4098, 5, 716, 0, 
	0, 4098, 4099, 5, 1052, 0, 0, 4099, 4101, 3, 816, 408, 0, 4100, 4097, 1, 
	0, 0, 0, 4100, 4101, 1, 0, 0, 0, 4101, 4105, 1, 0, 0, 0, 4102, 4103, 5, 
	714, 0, 0, 4103, 4104, 5, 1052, 0, 0, 4104, 4106, 3, 430, 215, 0, 4105, 
	4102, 1, 0, 0, 0, 4105, 4106, 1, 0, 0, 0, 4106, 4110, 1, 0, 0, 0, 4107, 
	4108, 5, 721, 0, 0, 4108, 4109, 5, 1052, 0, 0, 4109, 4111, 3, 816, 408, 
	0, 4110, 4107, 1, 0, 0, 0, 4110, 4111, 1, 0, 0, 0, 4111, 4115, 1, 0, 0, 
	0, 4112, 4113, 5, 720, 0, 0, 4113, 4114, 5, 1052, 0, 0, 4114, 4116, 3, 
	816, 408, 0, 4115, 4112, 1, 0, 0, 0, 4115, 4116, 1, 0, 0, 0, 4116, 4146, 
	1, 0, 0, 0, 4117, 4119, 5, 35, 0, 0, 4118, 4120, 5, 745, 0, 0, 4119, 4118, 
	1, 0, 0, 0, 4119, 4120, 1, 0, 0, 0, 4120, 4121, 1, 0, 0, 0, 4121, 4123, 
	5, 379, 0, 0, 4122, 4124, 3, 622, 311, 0, 4123, 4122, 1, 0, 0, 0, 4123, 
	4124, 1, 0, 0, 0, 4124, 4125, 1, 0, 0, 0, 4125, 4126, 3, 820, 410, 0, 4126, 
	4127, 5, 937, 0, 0, 4127, 4128, 5, 252, 0, 0, 4128, 4146, 1, 0, 0, 0, 4129, 
	4131, 5, 35, 0, 0, 4130, 4132, 5, 745, 0, 0, 4131, 4130, 1, 0, 0, 0, 4131, 
	4132, 1, 0, 0, 0, 4132, 4133, 1, 0, 0, 0, 4133, 4134, 5, 379, 0, 0, 4134, 
	4135, 3, 820, 410, 0, 4135, 4136, 3, 290, 145, 0, 4136, 4146, 1, 0, 0, 
	0, 4137, 4139, 5, 35, 0, 0, 4138, 4140, 5, 745, 0, 0, 4139, 4138, 1, 0, 
	0, 0, 4139, 4140, 1, 0, 0, 0, 4140, 4141, 1, 0, 0, 0, 4141, 4142, 5, 379, 
	0, 0, 4142, 4143, 3, 820, 410, 0, 4143, 4144, 3, 294, 147, 0, 4144, 4146, 
	1, 0, 0, 0, 4145, 4034, 1, 0, 0, 0, 4145, 4117, 1, 0, 0, 0, 4145, 4129, 
	1, 0, 0, 0, 4145, 4137, 1, 0, 0, 0, 4146, 215, 1, 0, 0, 0, 4147, 4149, 
	5, 35, 0, 0, 4148, 4150, 5, 745, 0, 0, 4149, 4148, 1, 0, 0, 0, 4149, 4150, 
	1, 0, 0, 0, 4150, 4151, 1, 0, 0, 0, 4151, 4153, 5, 379, 0, 0, 4152, 4154, 
	3, 622, 311, 0, 4153, 4152, 1, 0, 0, 0, 4153, 4154, 1, 0, 0, 0, 4154, 4155, 
	1, 0, 0, 0, 4155, 4156, 3, 820, 410, 0, 4156, 4160, 5, 757, 0, 0, 4157, 
	4158, 5, 478, 0, 0, 4158, 4159, 5, 1052, 0, 0, 4159, 4161, 3, 816, 408, 
	0, 4160, 4157, 1, 0, 0, 0, 4160, 4161, 1, 0, 0, 0, 4161, 4165, 1, 0, 0, 
	0, 4162, 4163, 5, 848, 0, 0, 4163, 4164, 5, 1052, 0, 0, 4164, 4166, 3, 
	430, 215, 0, 4165, 4162, 1, 0, 0, 0, 4165, 4166, 1, 0, 0, 0, 4166, 4168, 
	1, 0, 0, 0, 4167, 4169, 3, 618, 309, 0, 4168, 4167, 1, 0, 0, 0, 4168, 4169, 
	1, 0, 0, 0, 4169, 4205, 1, 0, 0, 0, 4170, 4172, 5, 35, 0, 0, 4171, 4173, 
	5, 745, 0, 0, 4172, 4171, 1, 0, 0, 0, 4172, 4173, 1, 0, 0, 0, 4173, 4174, 
	1, 0, 0, 0, 4174, 4176, 5, 379, 0, 0, 4175, 4177, 3, 622, 311, 0, 4176, 
	4175, 1, 0, 0, 0, 4176, 4177, 1, 0, 0, 0, 4177, 4178, 1, 0, 0, 0, 4178, 
	4179, 3, 820, 410, 0, 4179, 4180, 5, 937, 0, 0, 4180, 4185, 3, 218, 109, 
	0, 4181, 4182, 5, 1069, 0, 0, 4182, 4184, 3, 218, 109, 0, 4183, 4181, 1, 
	0, 0, 0, 4184, 4187, 1, 0, 0, 0, 4185, 4183, 1, 0, 0, 0, 4185, 4186, 1, 
	0, 0, 0, 4186, 4205, 1, 0, 0, 0, 4187, 4185, 1, 0, 0, 0, 4188, 4190, 5, 
	35, 0, 0, 4189, 4191, 5, 745, 0, 0, 4190, 4189, 1, 0, 0, 0, 4190, 4191, 
	1, 0, 0, 0, 4191, 4192, 1, 0, 0, 0, 4192, 4193, 5, 379, 0, 0, 4193, 4194, 
	3, 820, 410, 0, 4194, 4195, 3, 290, 145, 0, 4195, 4205, 1, 0, 0, 0, 4196, 
	4198, 5, 35, 0, 0, 4197, 4199, 5, 745, 0, 0, 4198, 4197, 1, 0, 0, 0, 4198, 
	4199, 1, 0, 0, 0, 4199, 4200, 1, 0, 0, 0, 4200, 4201, 5, 379, 0, 0, 4201, 
	4202, 3, 820, 410, 0, 4202, 4203, 3, 294, 147, 0, 4203, 4205, 1, 0, 0, 
	0, 4204, 4147, 1, 0, 0, 0, 4204, 4170, 1, 0, 0, 0, 4204, 4188, 1, 0, 0, 
	0, 4204, 4196, 1, 0, 0, 0, 4205, 217, 1, 0, 0, 0, 4206, 4207, 7, 23, 0, 
	0, 4207, 219, 1, 0, 0, 0, 4208, 4209, 5, 35, 0, 0, 4209, 4211, 5, 749, 
	0, 0, 4210, 4212, 3, 622, 311, 0, 4211, 4210, 1, 0, 0, 0, 4211, 4212, 1, 
	0, 0, 0, 4212, 4213, 1, 0, 0, 0, 4213, 4214, 3, 820, 410, 0, 4214, 4215, 
	5, 658, 0, 0, 4215, 4216, 5, 888, 0, 0, 4216, 4217, 3, 820, 410, 0, 4217, 
	4256, 1, 0, 0, 0, 4218, 4219, 5, 35, 0, 0, 4219, 4221, 5, 749, 0, 0, 4220, 
	4222, 3, 622, 311, 0, 4221, 4220, 1, 0, 0, 0, 4221, 4222, 1, 0, 0, 0, 4222, 
	4223, 1, 0, 0, 0, 4223, 4225, 3, 820, 410, 0, 4224, 4226, 5, 757, 0, 0, 
	4225, 4224, 1, 0, 0, 0, 4225, 4226, 1, 0, 0, 0, 4226, 4235, 1, 0, 0, 0, 
	4227, 4229, 5, 366, 0, 0, 4228, 4230, 5, 104, 0, 0, 4229, 4228, 1, 0, 0, 
	0, 4229, 4230, 1, 0, 0, 0, 4230, 4232, 1, 0, 0, 0, 4231, 4233, 5, 1052, 
	0, 0, 4232, 4231, 1, 0, 0, 0, 4232, 4233, 1, 0, 0, 0, 4233, 4234, 1, 0, 
	0, 0, 4234, 4236, 3, 832, 416, 0, 4235, 4227, 1, 0, 0, 0, 4235, 4236, 1, 
	0, 0, 0, 4236, 4256, 1, 0, 0, 0, 4237, 4238, 5, 35, 0, 0, 4238, 4240, 5, 
	749, 0, 0, 4239, 4241, 3, 622, 311, 0, 4240, 4239, 1, 0, 0, 0, 4240, 4241, 
	1, 0, 0, 0, 4241, 4242, 1, 0, 0, 0, 4242, 4243, 3, 820, 410, 0, 4243, 4244, 
	5, 757, 0, 0, 4244, 4245, 3, 618, 309, 0, 4245, 4256, 1, 0, 0, 0, 4246, 
	4247, 5, 35, 0, 0, 4247, 4249, 5, 749, 0, 0, 4248, 4250, 3, 622, 311, 0, 
	4249, 4248, 1, 0, 0, 0, 4249, 4250, 1, 0, 0, 0, 4250, 4251, 1, 0, 0, 0, 
	4251, 4252, 3, 820, 410, 0, 4252, 4253, 5, 937, 0, 0, 4253, 4254, 5, 155, 
	0, 0, 4254, 4256, 1, 0, 0, 0, 4255, 4208, 1, 0, 0, 0, 4255, 4218, 1, 0, 
	0, 0, 4255, 4237, 1, 0, 0, 0, 4255, 4246, 1, 0, 0, 0, 4256, 221, 1, 0, 
	0, 0, 4257, 4258, 5, 35, 0, 0, 4258, 4259, 5, 753, 0, 0, 4259, 4260, 5, 
	757, 0, 0, 4260, 4273, 3, 132, 66, 0, 4261, 4262, 5, 35, 0, 0, 4262, 4263, 
	5, 753, 0, 0, 4263, 4264, 5, 937, 0, 0, 4264, 4269, 3, 810, 405, 0, 4265, 
	4266, 5, 1069, 0, 0, 4266, 4268, 3, 810, 405, 0, 4267, 4265, 1, 0, 0, 0, 
	4268, 4271, 1, 0, 0, 0, 4269, 4267, 1, 0, 0, 0, 4269, 4270, 1, 0, 0, 0, 
	4270, 4273, 1, 0, 0, 0, 4271, 4269, 1, 0, 0, 0, 4272, 4257, 1, 0, 0, 0, 
	4272, 4261, 1, 0, 0, 0, 4273, 223, 1, 0, 0, 0, 4274, 4275, 5, 35, 0, 0, 
	4275, 4276, 5, 753, 0, 0, 4276, 4278, 5, 583, 0, 0, 4277, 4279, 3, 622, 
	311, 0, 4278, 4277, 1, 0, 0, 0, 4278, 4279, 1, 0, 0, 0, 4279, 4280, 1, 
	0, 0, 0, 4280, 4281, 3, 820, 410, 0, 4281, 4285, 7, 24, 0, 0, 4282, 4283, 
	5, 754, 0, 0, 4283, 4284, 5, 1052, 0, 0, 4284, 4286, 3, 832, 416, 0, 4285, 
	4282, 1, 0, 0, 0, 4285, 4286, 1, 0, 0, 0, 4286, 4290, 1, 0, 0, 0, 4287, 
	4288, 5, 756, 0, 0, 4288, 4289, 5, 1052, 0, 0, 4289, 4291, 3, 832, 416, 
	0, 4290, 4287, 1, 0, 0, 0, 4290, 4291, 1, 0, 0, 0, 4291, 4293, 1, 0, 0, 
	0, 4292, 4294, 3, 618, 309, 0, 4293, 4292, 1, 0, 0, 0, 4293, 4294, 1, 0, 
	0, 0, 4294, 4307, 1, 0, 0, 0, 4295, 4296, 5, 35, 0, 0, 4296, 4297, 5, 753, 
	0, 0, 4297, 4299, 5, 583, 0, 0, 4298, 4300, 3, 622, 311, 0, 4299, 4298, 
	1, 0, 0, 0, 4299, 4300, 1, 0, 0, 0, 4300, 4301, 1, 0, 0, 0, 4301, 4302, 
	3, 820, 410, 0, 4302, 4303, 5, 658, 0, 0, 4303, 4304, 5, 888, 0, 0, 4304, 
	4305, 3, 820, 410, 0, 4305, 4307, 1, 0, 0, 0, 4306, 4274, 1, 0, 0, 0, 4306, 
	4295, 1, 0, 0, 0, 4307, 225, 1, 0, 0, 0, 4308, 4309, 5, 35, 0, 0, 4309, 
	4311, 5, 760, 0, 0, 4310, 4312, 3, 622, 311, 0, 4311, 4310, 1, 0, 0, 0, 
	4311, 4312, 1, 0, 0, 0, 4312, 4313, 1, 0, 0, 0, 4313, 4314, 3, 820, 410, 
	0, 4314, 4315, 7, 25, 0, 0, 4315, 4316, 5, 10, 0, 0, 4316, 4317, 5, 1052, 
	0, 0, 4317, 4322, 3, 820, 410, 0, 4318, 4319, 5, 1069, 0, 0, 4319, 4321, 
	3, 820, 410, 0, 4320, 4318, 1, 0, 0, 0, 4321, 4324, 1, 0, 0, 0, 4322, 4320, 
	1, 0, 0, 0, 4322, 4323, 1, 0, 0, 0, 4323, 4328, 1, 0, 0, 0, 4324, 4322, 
	1, 0, 0, 0, 4325, 4326, 5, 761, 0, 0, 4326, 4327, 5, 1052, 0, 0, 4327, 
	4329, 3, 430, 215, 0, 4328, 4325, 1, 0, 0, 0, 4328, 4329, 1, 0, 0, 0, 4329, 
	4397, 1, 0, 0, 0, 4330, 4331, 5, 35, 0, 0, 4331, 4333, 5, 760, 0, 0, 4332, 
	4334, 3, 622, 311, 0, 4333, 4332, 1, 0, 0, 0, 4333, 4334, 1, 0, 0, 0, 4334, 
	4335, 1, 0, 0, 0, 4335, 4336, 3, 820, 410, 0, 4336, 4337, 5, 13, 0, 0, 
	4337, 4338, 5, 10, 0, 0, 4338, 4339, 5, 1052, 0, 0, 4339, 4344, 3, 820, 
	410, 0, 4340, 4341, 5, 1069, 0, 0, 4341, 4343, 3, 820, 410, 0, 4342, 4340, 
	1, 0, 0, 0, 4343, 4346, 1, 0, 0, 0, 4344, 4342, 1, 0, 0, 0, 4344, 4345, 
	1, 0, 0, 0, 4345, 4350, 1, 0, 0, 0, 4346, 4344, 1, 0, 0, 0, 4347, 4348, 
	5, 761, 0, 0, 4348, 4349, 5, 1052, 0, 0, 4349, 4351, 3, 430, 215, 0, 4350, 
	4347, 1, 0, 0, 0, 4350, 4351, 1, 0, 0, 0, 4351, 4397, 1, 0, 0, 0, 4352, 
	4353, 5, 35, 0, 0, 4353, 4355, 5, 760, 0, 0, 4354, 4356, 3, 622, 311, 0, 
	4355, 4354, 1, 0, 0, 0, 4355, 4356, 1, 0, 0, 0, 4356, 4357, 1, 0, 0, 0, 
	4357, 4358, 3, 820, 410, 0, 4358, 4369, 5, 757, 0, 0, 4359, 4360, 5, 10, 
	0, 0, 4360, 4361, 5, 1052, 0, 0, 4361, 4366, 3, 820, 410, 0, 4362, 4363, 
	5, 1069, 0, 0, 4363, 4365, 3, 820, 410, 0, 4364, 4362, 1, 0, 0, 0, 4365, 
	4368, 1, 0, 0, 0, 4366, 4364, 1, 0, 0, 0, 4366, 4367, 1, 0, 0, 0, 4367, 
	4370, 1, 0, 0, 0, 4368, 4366, 1, 0, 0, 0, 4369, 4359, 1, 0, 0, 0, 4369, 
	4370, 1, 0, 0, 0, 4370, 4372, 1, 0, 0, 0, 4371, 4373, 3, 618, 309, 0, 4372, 
	4371, 1, 0, 0, 0, 4372, 4373, 1, 0, 0, 0, 4373, 4397, 1, 0, 0, 0, 4374, 
	4375, 5, 35, 0, 0, 4375, 4377, 5, 760, 0, 0, 4376, 4378, 3, 622, 311, 0, 
	4377, 4376, 1, 0, 0, 0, 4377, 4378, 1, 0, 0, 0, 4378, 4379, 1, 0, 0, 0, 
	4379, 4380, 3, 820, 410, 0, 4380, 4381, 3, 290, 145, 0, 4381, 4397, 1, 
	0, 0, 0, 4382, 4383, 5, 35, 0, 0, 4383, 4384, 5, 760, 0, 0, 4384, 4385, 
	3, 820, 410, 0, 4385, 4386, 3, 294, 147, 0, 4386, 4397, 1, 0, 0, 0, 4387, 
	4388, 5, 35, 0, 0, 4388, 4390, 5, 760, 0, 0, 4389, 4391, 3, 622, 311, 0, 
	4390, 4389, 1, 0, 0, 0, 4390, 4391, 1, 0, 0, 0, 4391, 4392, 1, 0, 0, 0, 
	4392, 4393, 3, 820, 410, 0, 4393, 4394, 5, 937, 0, 0, 4394, 4395, 5, 155, 
	0, 0, 4395, 4397, 1, 0, 0, 0, 4396, 4308, 1, 0, 0, 0, 4396, 4330, 1, 0, 
	0, 0, 4396, 4352, 1, 0, 0, 0, 4396, 4374, 1, 0, 0, 0, 4396, 4382, 1, 0, 
	0, 0, 4396, 4387, 1, 0, 0, 0, 4397, 227, 1, 0, 0, 0, 4398, 4399, 5, 35, 
	0, 0, 4399, 4401, 5, 795, 0, 0, 4400, 4402, 3, 622, 311, 0, 4401, 4400, 
	1, 0, 0, 0, 4401, 4402, 1, 0, 0, 0, 4402, 4403, 1, 0, 0, 0, 4403, 4404, 
	3, 820, 410, 0, 4404, 4405, 5, 658, 0, 0, 4405, 4406, 5, 888, 0, 0, 4406, 
	4407, 3, 820, 410, 0, 4407, 4469, 1, 0, 0, 0, 4408, 4409, 5, 35, 0, 0, 
	4409, 4411, 5, 795, 0, 0, 4410, 4412, 3, 622, 311, 0, 4411, 4410, 1, 0, 
	0, 0, 4411, 4412, 1, 0, 0, 0, 4412, 4413, 1, 0, 0, 0, 4413, 4414, 3, 820, 
	410, 0, 4414, 4415, 3, 290, 145, 0, 4415, 4469, 1, 0, 0, 0, 4416, 4417, 
	5, 35, 0, 0, 4417, 4418, 5, 795, 0, 0, 4418, 4419, 3, 820, 410, 0, 4419, 
	4420, 3, 294, 147, 0, 4420, 4469, 1, 0, 0, 0, 4421, 4422, 5, 35, 0, 0, 
	4422, 4424, 5, 795, 0, 0, 4423, 4425, 3, 622, 311, 0, 4424, 4423, 1, 0, 
	0, 0, 4424, 4425, 1, 0, 0, 0, 4425, 4426, 1, 0, 0, 0, 4426, 4427, 3, 820, 
	410, 0, 4427, 4429, 5, 757, 0, 0, 4428, 4430, 3, 410, 205, 0, 4429, 4428, 
	1, 0, 0, 0, 4429, 4430, 1, 0, 0, 0, 4430, 4432, 1, 0, 0, 0, 4431, 4433, 
	3, 44, 22, 0, 4432, 4431, 1, 0, 0, 0, 4432, 4433, 1, 0, 0, 0, 4433, 4440, 
	1, 0, 0, 0, 4434, 4435, 5, 180, 0, 0, 4435, 4436, 5, 1052, 0, 0, 4436, 
	4437, 5, 1063, 0, 0, 4437, 4438, 3, 408, 204, 0, 4438, 4439, 5, 1064, 0, 
	0, 4439, 4441, 1, 0, 0, 0, 4440, 4434, 1, 0, 0, 0, 4440, 4441, 1, 0, 0, 
	0, 4441, 4442, 1, 0, 0, 0, 4442, 4443, 3, 618, 309, 0, 4443, 4469, 1, 0, 
	0, 0, 4444, 4445, 5, 35, 0, 0, 4445, 4447, 5, 795, 0, 0, 4446, 4448, 3, 
	622, 311, 0, 4447, 4446, 1, 0, 0, 0, 4447, 4448, 1, 0, 0, 0, 4448, 4449, 
	1, 0, 0, 0, 4449, 4450, 3, 820, 410, 0, 4450, 4452, 5, 757, 0, 0, 4451, 
	4453, 3, 428, 214, 0, 4452, 4451, 1, 0, 0, 0, 4452, 4453, 1, 0, 0, 0, 4453, 
	4455, 1, 0, 0, 0, 4454, 4456, 3, 44, 22, 0, 4455, 4454, 1, 0, 0, 0, 4455, 
	4456, 1, 0, 0, 0, 4456, 4463, 1, 0, 0, 0, 4457, 4458, 5, 180, 0, 0, 4458, 
	4459, 5, 1052, 0, 0, 4459, 4460, 5, 1063, 0, 0, 4460, 4461, 3, 408, 204, 
	0, 4461, 4462, 5, 1064, 0, 0, 4462, 4464, 1, 0, 0, 0, 4463, 4457, 1, 0, 
	0, 0, 4463, 4464, 1, 0, 0, 0, 4464, 4466, 1, 0, 0, 0, 4465, 4467, 3, 618, 
	309, 0, 4466, 4465, 1, 0, 0, 0, 4466, 4467, 1, 0, 0, 0, 4467, 4469, 1, 
	0, 0, 0, 4468, 4398, 1, 0, 0, 0, 4468, 4408, 1, 0, 0, 0, 4468, 4416, 1, 
	0, 0, 0, 4468, 4421, 1, 0, 0, 0, 4468, 4444, 1, 0, 0, 0, 4469, 229, 1, 
	0, 0, 0, 4470, 4472, 5, 35, 0, 0, 4471, 4473, 5, 822, 0, 0, 4472, 4471, 
	1, 0, 0, 0, 4472, 4473, 1, 0, 0, 0, 4473, 4474, 1, 0, 0, 0, 4474, 4476, 
	5, 379, 0, 0, 4475, 4477, 3, 622, 311, 0, 4476, 4475, 1, 0, 0, 0, 4476, 
	4477, 1, 0, 0, 0, 4477, 4478, 1, 0, 0, 0, 4478, 4479, 3, 820, 410, 0, 4479, 
	4481, 5, 757, 0, 0, 4480, 4482, 3, 446, 223, 0, 4481, 4480, 1, 0, 0, 0, 
	4481, 4482, 1, 0, 0, 0, 4482, 4484, 1, 0, 0, 0, 4483, 4485, 3, 136, 68, 
	0, 4484, 4483, 1, 0, 0, 0, 4484, 4485, 1, 0, 0, 0, 4485, 4492, 1, 0, 0, 
	0, 4486, 4487, 5, 823, 0, 0, 4487, 4488, 5, 1052, 0, 0, 4488, 4489, 5, 
	1063, 0, 0, 4489, 4490, 3, 818, 409, 0, 4490, 4491, 5, 1064, 0, 0, 4491, 
	4493, 1, 0, 0, 0, 4492, 4486, 1, 0, 0, 0, 4492, 4493, 1, 0, 0, 0, 4493, 
	4500, 1, 0, 0, 0, 4494, 4495, 5, 826, 0, 0, 4495, 4496, 5, 1052, 0, 0, 
	4496, 4497, 5, 1063, 0, 0, 4497, 4498, 3, 818, 409, 0, 4498, 4499, 5, 1064, 
	0, 0, 4499, 4501, 1, 0, 0, 0, 4500, 4494, 1, 0, 0, 0, 4500, 4501, 1, 0, 
	0, 0, 4501, 4503, 1, 0, 0, 0, 4502, 4504, 3, 618, 309, 0, 4503, 4502, 1, 
	0, 0, 0, 4503, 4504, 1, 0, 0, 0, 4504, 4537, 1, 0, 0, 0, 4505, 4507, 5, 
	35, 0, 0, 4506, 4508, 5, 822, 0, 0, 4507, 4506, 1, 0, 0, 0, 4507, 4508, 
	1, 0, 0, 0, 4508, 4509, 1, 0, 0, 0, 4509, 4511, 5, 379, 0, 0, 4510, 4512, 
	3, 622, 311, 0, 4511, 4510, 1, 0, 0, 0, 4511, 4512, 1, 0, 0, 0, 4512, 4513, 
	1, 0, 0, 0, 4513, 4514, 3, 820, 410, 0, 4514, 4515, 3, 290, 145, 0, 4515, 
	4537, 1, 0, 0, 0, 4516, 4518, 5, 35, 0, 0, 4517, 4519, 5, 822, 0, 0, 4518, 
	4517, 1, 0, 0, 0, 4518, 4519, 1, 0, 0, 0, 4519, 4520, 1, 0, 0, 0, 4520, 
	4521, 5, 379, 0, 0, 4521, 4522, 3, 820, 410, 0, 4522, 4523, 3, 294, 147, 
	0, 4523, 4537, 1, 0, 0, 0, 4524, 4526, 5, 35, 0, 0, 4525, 4527, 5, 822, 
	0, 0, 4526, 4525, 1, 0, 0, 0, 4526, 4527, 1, 0, 0, 0, 4527, 4528, 1, 0, 
	0, 0, 4528, 4530, 5, 379, 0, 0, 4529, 4531, 3, 622, 311, 0, 4530, 4529, 
	1, 0, 0, 0, 4530, 4531, 1, 0, 0, 0, 4531, 4532, 1, 0, 0, 0, 4532, 4533, 
	3, 820, 410, 0, 4533, 4534, 5, 937, 0, 0, 4534, 4535, 7, 26, 0, 0, 4535, 
	4537, 1, 0, 0, 0, 4536, 4470, 1, 0, 0, 0, 4536, 4505, 1, 0, 0, 0, 4536, 
	4516, 1, 0, 0, 0, 4536, 4524, 1, 0, 0, 0, 4537, 231, 1, 0, 0, 0, 4538, 
	4539, 5, 35, 0, 0, 4539, 4541, 5, 830, 0, 0, 4540, 4542, 3, 622, 311, 0, 
	4541, 4540, 1, 0, 0, 0, 4541, 4542, 1, 0, 0, 0, 4542, 4543, 1, 0, 0, 0, 
	4543, 4544, 3, 820, 410, 0, 4544, 4546, 5, 757, 0, 0, 4545, 4547, 3, 292, 
	146, 0, 4546, 4545, 1, 0, 0, 0, 4546, 4547, 1, 0, 0, 0, 4547, 4549, 1, 
	0, 0, 0, 4548, 4550, 3, 618, 309, 0, 4549, 4548, 1, 0, 0, 0, 4549, 4550, 
	1, 0, 0, 0, 4550, 4574, 1, 0, 0, 0, 4551, 4552, 5, 35, 0, 0, 4552, 4554, 
	5, 830, 0, 0, 4553, 4555, 3, 622, 311, 0, 4554, 4553, 1, 0, 0, 0, 4554, 
	4555, 1, 0, 0, 0, 4555, 4556, 1, 0, 0, 0, 4556, 4557, 3, 820, 410, 0, 4557, 
	4558, 3, 290, 145, 0, 4558, 4574, 1, 0, 0, 0, 4559, 4560, 5, 35, 0, 0, 
	4560, 4561, 5, 830, 0, 0, 4561, 4562, 3, 820, 410, 0, 4562, 4563, 3, 294, 
	147, 0, 4563, 4574, 1, 0, 0, 0, 4564, 4565, 5, 35, 0, 0, 4565, 4567, 5, 
	830, 0, 0, 4566, 4568, 3, 622, 311, 0, 4567, 4566, 1, 0, 0, 0, 4567, 4568, 
	1, 0, 0, 0, 4568, 4569, 1, 0, 0, 0, 4569, 4570, 3, 820, 410, 0, 4570, 4571, 
	5, 937, 0, 0, 4571, 4572, 5, 155, 0, 0, 4572, 4574, 1, 0, 0, 0, 4573, 4538, 
	1, 0, 0, 0, 4573, 4551, 1, 0, 0, 0, 4573, 4559, 1, 0, 0, 0, 4573, 4564, 
	1, 0, 0, 0, 4574, 233, 1, 0, 0, 0, 4575, 4576, 5, 35, 0, 0, 4576, 4578, 
	5, 851, 0, 0, 4577, 4579, 3, 622, 311, 0, 4578, 4577, 1, 0, 0, 0, 4578, 
	4579, 1, 0, 0, 0, 4579, 4580, 1, 0, 0, 0, 4580, 4581, 3, 830, 415, 0, 4581, 
	4582, 5, 658, 0, 0, 4582, 4583, 5, 888, 0, 0, 4583, 4584, 3, 830, 415, 
	0, 4584, 4751, 1, 0, 0, 0, 4585, 4586, 5, 35, 0, 0, 4586, 4588, 5, 851, 
	0, 0, 4587, 4589, 3, 622, 311, 0, 4588, 4587, 1, 0, 0, 0, 4588, 4589, 1, 
	0, 0, 0, 4589, 4590, 1, 0, 0, 0, 4590, 4591, 3, 830, 415, 0, 4591, 4592, 
	5, 846, 0, 0, 4592, 4593, 5, 982, 0, 0, 4593, 4594, 3, 830, 415, 0, 4594, 
	4751, 1, 0, 0, 0, 4595, 4596, 5, 35, 0, 0, 4596, 4598, 5, 851, 0, 0, 4597, 
	4599, 3, 622, 311, 0, 4598, 4597, 1, 0, 0, 0, 4598, 4599, 1, 0, 0, 0, 4599, 
	4600, 1, 0, 0, 0, 4600, 4604, 3, 830, 415, 0, 4601, 4605, 3, 236, 118, 
	0, 4602, 4605, 3, 238, 119, 0, 4603, 4605, 3, 246, 123, 0, 4604, 4601, 
	1, 0, 0, 0, 4604, 4602, 1, 0, 0, 0, 4604, 4603, 1, 0, 0, 0, 4605, 4751, 
	1, 0, 0, 0, 4606, 4607, 5, 35, 0, 0, 4607, 4609, 5, 851, 0, 0, 4608, 4610, 
	3, 622, 311, 0, 4609, 4608, 1, 0, 0, 0, 4609, 4610, 1, 0, 0, 0, 4610, 4611, 
	1, 0, 0, 0, 4611, 4612, 3, 830, 415, 0, 4612, 4613, 3, 244, 122, 0, 4613, 
	4751, 1, 0, 0, 0, 4614, 4615, 5, 35, 0, 0, 4615, 4617, 5, 851, 0, 0, 4616, 
	4618, 3, 622, 311, 0, 4617, 4616, 1, 0, 0, 0, 4617, 4618, 1, 0, 0, 0, 4618, 
	4619, 1, 0, 0, 0, 4619, 4620, 3, 830, 415, 0, 4620, 4621, 3, 250, 125, 
	0, 4621, 4751, 1, 0, 0, 0, 4622, 4623, 5, 35, 0, 0, 4623, 4625, 5, 851, 
	0, 0, 4624, 4626, 3, 622, 311, 0, 4625, 4624, 1, 0, 0, 0, 4625, 4626, 1, 
	0, 0, 0, 4626, 4627, 1, 0, 0, 0, 4627, 4628, 3, 830, 415, 0, 4628, 4630, 
	5, 757, 0, 0, 4629, 4631, 3, 50, 25, 0, 4630, 4629, 1, 0, 0, 0, 4630, 4631, 
	1, 0, 0, 0, 4631, 4638, 1, 0, 0, 0, 4632, 4633, 5, 796, 0, 0, 4633, 4634, 
	5, 1052, 0, 0, 4634, 4635, 5, 1063, 0, 0, 4635, 4636, 3, 408, 204, 0, 4636, 
	4637, 5, 1064, 0, 0, 4637, 4639, 1, 0, 0, 0, 4638, 4632, 1, 0, 0, 0, 4638, 
	4639, 1, 0, 0, 0, 4639, 4643, 1, 0, 0, 0, 4640, 4641, 5, 199, 0, 0, 4641, 
	4642, 5, 1052, 0, 0, 4642, 4644, 3, 832, 416, 0, 4643, 4640, 1, 0, 0, 0, 
	4643, 4644, 1, 0, 0, 0, 4644, 4648, 1, 0, 0, 0, 4645, 4646, 5, 449, 0, 
	0, 4646, 4647, 5, 1052, 0, 0, 4647, 4649, 3, 832, 416, 0, 4648, 4645, 1, 
	0, 0, 0, 4648, 4649, 1, 0, 0, 0, 4649, 4653, 1, 0, 0, 0, 4650, 4651, 5, 
	119, 0, 0, 4651, 4652, 5, 1052, 0, 0, 4652, 4654, 3, 430, 215, 0, 4653, 
	4650, 1, 0, 0, 0, 4653, 4654, 1, 0, 0, 0, 4654, 4656, 1, 0, 0, 0, 4655, 
	4657, 3, 128, 64, 0, 4656, 4655, 1, 0, 0, 0, 4656, 4657, 1, 0, 0, 0, 4657, 
	4659, 1, 0, 0, 0, 4658, 4660, 3, 618, 309, 0, 4659, 4658, 1, 0, 0, 0, 4659, 
	4660, 1, 0, 0, 0, 4660, 4751, 1, 0, 0, 0, 4661, 4662, 5, 35, 0, 0, 4662, 
	4664, 5, 851, 0, 0, 4663, 4665, 3, 622, 311, 0, 4664, 4663, 1, 0, 0, 0, 
	4664, 4665, 1, 0, 0, 0, 4665, 4666, 1, 0, 0, 0, 4666, 4667, 3, 830, 415, 
	0, 4667, 4668, 3, 290, 145, 0, 4668, 4751, 1, 0, 0, 0, 4669, 4670, 5, 35, 
	0, 0, 4670, 4672, 5, 851, 0, 0, 4671, 4673, 3, 622, 311, 0, 4672, 4671, 
	1, 0, 0, 0, 4672, 4673, 1, 0, 0, 0, 4673, 4674, 1, 0, 0, 0, 4674, 4675, 
	3, 830, 415, 0, 4675, 4676, 3, 294, 147, 0, 4676, 4751, 1, 0, 0, 0, 4677, 
	4678, 5, 35, 0, 0, 4678, 4680, 5, 851, 0, 0, 4679, 4681, 3, 622, 311, 0, 
	4680, 4679, 1, 0, 0, 0, 4680, 4681, 1, 0, 0, 0, 4681, 4682, 1, 0, 0, 0, 
	4682, 4683, 3, 830, 415, 0, 4683, 4690, 5, 937, 0, 0, 4684, 4691, 5, 199, 
	0, 0, 4685, 4691, 5, 449, 0, 0, 4686, 4691, 5, 119, 0, 0, 4687, 4691, 5, 
	213, 0, 0, 4688, 4691, 5, 155, 0, 0, 4689, 4691, 1, 0, 0, 0, 4690, 4684, 
	1, 0, 0, 0, 4690, 4685, 1, 0, 0, 0, 4690, 4686, 1, 0, 0, 0, 4690, 4687, 
	1, 0, 0, 0, 4690, 4688, 1, 0, 0, 0, 4690, 4689, 1, 0, 0, 0, 4691, 4751, 
	1, 0, 0, 0, 4692, 4693, 5, 35, 0, 0, 4693, 4695, 5, 851, 0, 0, 4694, 4696, 
	3, 622, 311, 0, 4695, 4694, 1, 0, 0, 0, 4695, 4696, 1, 0, 0, 0, 4696, 4697, 
	1, 0, 0, 0, 4697, 4698, 3, 830, 415, 0, 4698, 4699, 5, 13, 0, 0, 4699, 
	4700, 5, 698, 0, 0, 4700, 4701, 5, 8, 0, 0, 4701, 4702, 5, 583, 0, 0, 4702, 
	4703, 3, 820, 410, 0, 4703, 4704, 5, 531, 0, 0, 4704, 4705, 3, 348, 174, 
	0, 4705, 4751, 1, 0, 0, 0, 4706, 4707, 5, 35, 0, 0, 4707, 4709, 5, 851, 
	0, 0, 4708, 4710, 3, 622, 311, 0, 4709, 4708, 1, 0, 0, 0, 4709, 4710, 1, 
	0, 0, 0, 4710, 4711, 1, 0, 0, 0, 4711, 4712, 3, 830, 415, 0, 4712, 4713, 
	5, 239, 0, 0, 4713, 4714, 5, 698, 0, 0, 4714, 4715, 5, 8, 0, 0, 4715, 4716, 
	5, 583, 0, 0, 4716, 4717, 3, 820, 410, 0, 4717, 4751, 1, 0, 0, 0, 4718, 
	4719, 5, 35, 0, 0, 4719, 4721, 5, 851, 0, 0, 4720, 4722, 3, 622, 311, 0, 
	4721, 4720, 1, 0, 0, 0, 4721, 4722, 1, 0, 0, 0, 4722, 4723, 1, 0, 0, 0, 
	4723, 4724, 3, 830, 415, 0, 4724, 4725, 5, 239, 0, 0, 4725, 4726, 5, 698, 
	0, 0, 4726, 4727, 5, 8, 0, 0, 4727, 4728, 5, 583, 0, 0, 4728, 4729, 3, 
	820, 410, 0, 4729, 4730, 5, 1069, 0, 0, 4730, 4731, 5, 13, 0, 0, 4731, 
	4732, 5, 698, 0, 0, 4732, 4733, 5, 8, 0, 0, 4733, 4734, 5, 583, 0, 0, 4734, 
	4735, 3, 820, 410, 0, 4735, 4736, 5, 531, 0, 0, 4736, 4737, 3, 348, 174, 
	0, 4737, 4751, 1, 0, 0, 0, 4738, 4739, 5, 35, 0, 0, 4739, 4741, 5, 851, 
	0, 0, 4740, 4742, 3, 622, 311, 0, 4741, 4740, 1, 0, 0, 0, 4741, 4742, 1, 
	0, 0, 0, 4742, 4743, 1, 0, 0, 0, 4743, 4744, 3, 830, 415, 0, 4744, 4745, 
	5, 239, 0, 0, 4745, 4746, 5, 20, 0, 0, 4746, 4747, 5, 698, 0, 0, 4747, 
	4748, 5, 8, 0, 0, 4748, 4749, 5, 582, 0, 0, 4749, 4751, 1, 0, 0, 0, 4750, 
	4575, 1, 0, 0, 0, 4750, 4585, 1, 0, 0, 0, 4750, 4595, 1, 0, 0, 0, 4750, 
	4606, 1, 0, 0, 0, 4750, 4614, 1, 0, 0, 0, 4750, 4622, 1, 0, 0, 0, 4750, 
	4661, 1, 0, 0, 0, 4750, 4669, 1, 0, 0, 0, 4750, 4677, 1, 0, 0, 0, 4750, 
	4692, 1, 0, 0, 0, 4750, 4706, 1, 0, 0, 0, 4750, 4718, 1, 0, 0, 0, 4750, 
	4738, 1, 0, 0, 0, 4751, 235, 1, 0, 0, 0, 4752, 4753, 5, 145, 0, 0, 4753, 
	4754, 5, 104, 0, 0, 4754, 4755, 5, 1063, 0, 0, 4755, 4756, 3, 834, 417, 
	0, 4756, 4757, 5, 1064, 0, 0, 4757, 4774, 1, 0, 0, 0, 4758, 4762, 5, 638, 
	0, 0, 4759, 4760, 5, 450, 0, 0, 4760, 4761, 5, 1052, 0, 0, 4761, 4763, 
	3, 832, 416, 0, 4762, 4759, 1, 0, 0, 0, 4762, 4763, 1, 0, 0, 0, 4763, 4766, 
	1, 0, 0, 0, 4764, 4765, 5, 981, 0, 0, 4765, 4767, 3, 836, 418, 0, 4766, 
	4764, 1, 0, 0, 0, 4766, 4767, 1, 0, 0, 0, 4767, 4774, 1, 0, 0, 0, 4768, 
	4769, 7, 27, 0, 0, 4769, 4774, 5, 638, 0, 0, 4770, 4771, 5, 239, 0, 0, 
	4771, 4772, 5, 147, 0, 0, 4772, 4774, 5, 396, 0, 0, 4773, 4752, 1, 0, 0, 
	0, 4773, 4758, 1, 0, 0, 0, 4773, 4768, 1, 0, 0, 0, 4773, 4770, 1, 0, 0, 
	0, 4774, 237, 1, 0, 0, 0, 4775, 4777, 5, 13, 0, 0, 4776, 4778, 5, 153, 
	0, 0, 4777, 4776, 1, 0, 0, 0, 4777, 4778, 1, 0, 0, 0, 4778, 4779, 1, 0, 
	0, 0, 4779, 4780, 3, 826, 413, 0, 4780, 4797, 3, 846, 423, 0, 4781, 4782, 
	5, 212, 0, 0, 4782, 4798, 3, 836, 418, 0, 4783, 4795, 7, 28, 0, 0, 4784, 
	4785, 5, 1063, 0, 0, 4785, 4786, 3, 832, 416, 0, 4786, 4787, 5, 1069, 0, 
	0, 4787, 4788, 3, 832, 416, 0, 4788, 4789, 5, 1064, 0, 0, 4789, 4796, 1, 
	0, 0, 0, 4790, 4791, 5, 801, 0, 0, 4791, 4792, 3, 832, 416, 0, 4792, 4793, 
	5, 366, 0, 0, 4793, 4794, 3, 832, 416, 0, 4794, 4796, 1, 0, 0, 0, 4795, 
	4784, 1, 0, 0, 0, 4795, 4790, 1, 0, 0, 0, 4795, 4796, 1, 0, 0, 0, 4796, 
	4798, 1, 0, 0, 0, 4797, 4781, 1, 0, 0, 0, 4797, 4783, 1, 0, 0, 0, 4797, 
	4798, 1, 0, 0, 0, 4798, 4800, 1, 0, 0, 0, 4799, 4801, 3, 240, 120, 0, 4800, 
	4799, 1, 0, 0, 0, 4800, 4801, 1, 0, 0, 0, 4801, 4817, 1, 0, 0, 0, 4802, 
	4804, 5, 982, 0, 0, 4803, 4802, 1, 0, 0, 0, 4803, 4804, 1, 0, 0, 0, 4804, 
	4805, 1, 0, 0, 0, 4805, 4806, 5, 437, 0, 0, 4806, 4807, 5, 583, 0, 0, 4807, 
	4815, 3, 820, 410, 0, 4808, 4809, 5, 954, 0, 0, 4809, 4810, 5, 1063, 0, 
	0, 4810, 4811, 3, 826, 413, 0, 4811, 4812, 5, 1069, 0, 0, 4812, 4813, 3, 
	828, 414, 0, 4813, 4814, 5, 1064, 0, 0, 4814, 4816, 1, 0, 0, 0, 4815, 4808, 
	1, 0, 0, 0, 4815, 4816, 1, 0, 0, 0, 4816, 4818, 1, 0, 0, 0, 4817, 4803, 
	1, 0, 0, 0, 4817, 4818, 1, 0, 0, 0, 4818, 4939, 1, 0, 0, 0, 4819, 4820, 
	5, 658, 0, 0, 4820, 4821, 5, 153, 0, 0, 4821, 4822, 3, 826, 413, 0, 4822, 
	4823, 5, 888, 0, 0, 4823, 4824, 3, 826, 413, 0, 4824, 4939, 1, 0, 0, 0, 
	4825, 4827, 3, 274, 137, 0, 4826, 4828, 5, 1063, 0, 0, 4827, 4826, 1, 0, 
	0, 0, 4827, 4828, 1, 0, 0, 0, 4828, 4830, 1, 0, 0, 0, 4829, 4831, 5, 153, 
	0, 0, 4830, 4829, 1, 0, 0, 0, 4830, 4831, 1, 0, 0, 0, 4831, 4832, 1, 0, 
	0, 0, 4832, 4833, 3, 826, 413, 0, 4833, 4834, 5, 239, 0, 0, 4834, 4835, 
	5, 212, 0, 0, 4835, 4837, 5, 1069, 0, 0, 4836, 4838, 5, 153, 0, 0, 4837, 
	4836, 1, 0, 0, 0, 4837, 4838, 1, 0, 0, 0, 4838, 4839, 1, 0, 0, 0, 4839, 
	4840, 3, 826, 413, 0, 4840, 4841, 5, 757, 0, 0, 4841, 4842, 5, 212, 0, 
	0, 4842, 4843, 3, 830, 415, 0, 4843, 4844, 5, 1059, 0, 0, 4844, 4845, 5, 
	487, 0, 0, 4845, 4847, 5, 1069, 0, 0, 4846, 4848, 5, 153, 0, 0, 4847, 4846, 
	1, 0, 0, 0, 4847, 4848, 1, 0, 0, 0, 4848, 4849, 1, 0, 0, 0, 4849, 4858, 
	3, 826, 413, 0, 4850, 4852, 5, 757, 0, 0, 4851, 4850, 1, 0, 0, 0, 4851, 
	4852, 1, 0, 0, 0, 4852, 4853, 1, 0, 0, 0, 4853, 4854, 5, 491, 0, 0, 4854, 
	4859, 5, 500, 0, 0, 4855, 4856, 5, 239, 0, 0, 4856, 4857, 5, 491, 0, 0, 
	4857, 4859, 5, 500, 0, 0, 4858, 4851, 1, 0, 0, 0, 4858, 4855, 1, 0, 0, 
	0, 4859, 4860, 1, 0, 0, 0, 4860, 4862, 5, 1069, 0, 0, 4861, 4863, 5, 153, 
	0, 0, 4862, 4861, 1, 0, 0, 0, 4862, 4863, 1, 0, 0, 0, 4863, 4864, 1, 0, 
	0, 0, 4864, 4870, 3, 826, 413, 0, 4865, 4866, 5, 757, 0, 0, 4866, 4868, 
	5, 198, 0, 0, 4867, 4865, 1, 0, 0, 0, 4867, 4868, 1, 0, 0, 0, 4868, 4869, 
	1, 0, 0, 0, 4869, 4871, 5, 917, 0, 0, 4870, 4867, 1, 0, 0, 0, 4870, 4871, 
	1, 0, 0, 0, 4871, 4872, 1, 0, 0, 0, 4872, 4873, 3, 846, 423, 0, 4873, 4875, 
	5, 1069, 0, 0, 4874, 4876, 5, 153, 0, 0, 4875, 4874, 1, 0, 0, 0, 4875, 
	4876, 1, 0, 0, 0, 4876, 4877, 1, 0, 0, 0, 4877, 4878, 3, 826, 413, 0, 4878, 
	4879, 3, 618, 309, 0, 4879, 4881, 5, 1069, 0, 0, 4880, 4882, 5, 153, 0, 
	0, 4881, 4880, 1, 0, 0, 0, 4881, 4882, 1, 0, 0, 0, 4882, 4883, 1, 0, 0, 
	0, 4883, 4884, 3, 826, 413, 0, 4884, 4885, 5, 937, 0, 0, 4885, 4887, 5, 
	155, 0, 0, 4886, 4888, 5, 1064, 0, 0, 4887, 4886, 1, 0, 0, 0, 4887, 4888, 
	1, 0, 0, 0, 4888, 4939, 1, 0, 0, 0, 4889, 4890, 3, 274, 137, 0, 4890, 4891, 
	5, 153, 0, 0, 4891, 4892, 3, 826, 413, 0, 4892, 4893, 5, 757, 0, 0, 4893, 
	4894, 5, 437, 0, 0, 4894, 4895, 5, 583, 0, 0, 4895, 4903, 3, 820, 410, 
	0, 4896, 4897, 5, 954, 0, 0, 4897, 4898, 5, 1063, 0, 0, 4898, 4899, 3, 
	826, 413, 0, 4899, 4900, 5, 1069, 0, 0, 4900, 4901, 3, 828, 414, 0, 4901, 
	4902, 5, 1064, 0, 0, 4902, 4904, 1, 0, 0, 0, 4903, 4896, 1, 0, 0, 0, 4903, 
	4904, 1, 0, 0, 0, 4904, 4906, 1, 0, 0, 0, 4905, 4907, 5, 311, 0, 0, 4906, 
	4905, 1, 0, 0, 0, 4906, 4907, 1, 0, 0, 0, 4907, 4939, 1, 0, 0, 0, 4908, 
	4909, 3, 274, 137, 0, 4909, 4910, 5, 153, 0, 0, 4910, 4911, 3, 826, 413, 
	0, 4911, 4912, 5, 937, 0, 0, 4912, 4913, 5, 437, 0, 0, 4913, 4914, 5, 583, 
	0, 0, 4914, 4939, 1, 0, 0, 0, 4915, 4916, 3, 274, 137, 0, 4916, 4921, 3, 
	262, 131, 0, 4917, 4918, 5, 1069, 0, 0, 4918, 4920, 3, 262, 131, 0, 4919, 
	4917, 1, 0, 0, 0, 4920, 4923, 1, 0, 0, 0, 4921, 4919, 1, 0, 0, 0, 4921, 
	4922, 1, 0, 0, 0, 4922, 4939, 1, 0, 0, 0, 4923, 4921, 1, 0, 0, 0, 4924, 
	4925, 3, 274, 137, 0, 4925, 4930, 3, 264, 132, 0, 4926, 4927, 5, 1069, 
	0, 0, 4927, 4929, 3, 264, 132, 0, 4928, 4926, 1, 0, 0, 0, 4929, 4932, 1, 
	0, 0, 0, 4930, 4928, 1, 0, 0, 0, 4930, 4931, 1, 0, 0, 0, 4931, 4939, 1, 
	0, 0, 0, 4932, 4930, 1, 0, 0, 0, 4933, 4935, 5, 239, 0, 0, 4934, 4936, 
	5, 153, 0, 0, 4935, 4934, 1, 0, 0, 0, 4935, 4936, 1, 0, 0, 0, 4936, 4937, 
	1, 0, 0, 0, 4937, 4939, 3, 828, 414, 0, 4938, 4775, 1, 0, 0, 0, 4938, 4819, 
	1, 0, 0, 0, 4938, 4825, 1, 0, 0, 0, 4938, 4889, 1, 0, 0, 0, 4938, 4908, 
	1, 0, 0, 0, 4938, 4915, 1, 0, 0, 0, 4938, 4924, 1, 0, 0, 0, 4938, 4933, 
	1, 0, 0, 0, 4939, 239, 1, 0, 0, 0, 4940, 4941, 5, 491, 0, 0, 4941, 4943, 
	5, 500, 0, 0, 4942, 4940, 1, 0, 0, 0, 4942, 4943, 1, 0, 0, 0, 4943, 4946, 
	1, 0, 0, 0, 4944, 4945, 5, 167, 0, 0, 4945, 4947, 3, 820, 410, 0, 4946, 
	4944, 1, 0, 0, 0, 4946, 4947, 1, 0, 0, 0, 4947, 4963, 1, 0, 0, 0, 4948, 
	4964, 5, 929, 0, 0, 4949, 4950, 5, 594, 0, 0, 4950, 4964, 5, 396, 0, 0, 
	4951, 4952, 5, 312, 0, 0, 4952, 4954, 5, 396, 0, 0, 4953, 4951, 1, 0, 0, 
	0, 4953, 4954, 1, 0, 0, 0, 4954, 4955, 1, 0, 0, 0, 4955, 4956, 5, 646, 
	0, 0, 4956, 4961, 3, 830, 415, 0, 4957, 4958, 5, 1063, 0, 0, 4958, 4959, 
	3, 826, 413, 0, 4959, 4960, 5, 1064, 0, 0, 4960, 4962, 1, 0, 0, 0, 4961, 
	4957, 1, 0, 0, 0, 4961, 4962, 1, 0, 0, 0, 4962, 4964, 1, 0, 0, 0, 4963, 
	4948, 1, 0, 0, 0, 4963, 4949, 1, 0, 0, 0, 4963, 4953, 1, 0, 0, 0, 4964, 
	4966, 1, 0, 0, 0, 4965, 4967, 3, 242, 121, 0, 4966, 4965, 1, 0, 0, 0, 4966, 
	4967, 1, 0, 0, 0, 4967, 241, 1, 0, 0, 0, 4968, 4970, 5, 491, 0, 0, 4969, 
	4968, 1, 0, 0, 0, 4969, 4970, 1, 0, 0, 0, 4970, 4971, 1, 0, 0, 0, 4971, 
	5009, 5, 260, 0, 0, 4972, 4974, 5, 491, 0, 0, 4973, 4972, 1, 0, 0, 0, 4973, 
	4974, 1, 0, 0, 0, 4974, 4975, 1, 0, 0, 0, 4975, 5009, 5, 217, 0, 0, 4976, 
	4977, 5, 371, 0, 0, 4977, 5009, 7, 29, 0, 0, 4978, 4979, 5, 440, 0, 0, 
	4979, 5009, 7, 30, 0, 0, 4980, 4989, 5, 940, 0, 0, 4981, 4990, 5, 110, 
	0, 0, 4982, 4983, 5, 757, 0, 0, 4983, 4990, 5, 500, 0, 0, 4984, 4985, 5, 
	757, 0, 0, 4985, 4990, 5, 212, 0, 0, 4986, 4990, 5, 676, 0, 0, 4987, 4988, 
	5, 488, 0, 0, 4988, 4990, 5, 11, 0, 0, 4989, 4981, 1, 0, 0, 0, 4989, 4982, 
	1, 0, 0, 0, 4989, 4984, 1, 0, 0, 0, 4989, 4986, 1, 0, 0, 0, 4989, 4987, 
	1, 0, 0, 0, 4990, 5009, 1, 0, 0, 0, 4991, 5000, 5, 223, 0, 0, 4992, 5001, 
	5, 110, 0, 0, 4993, 4994, 5, 757, 0, 0, 4994, 5001, 5, 500, 0, 0, 4995, 
	4996, 5, 757, 0, 0, 4996, 5001, 5, 212, 0, 0, 4997, 5001, 5, 676, 0, 0, 
	4998, 4999, 5, 488, 0, 0, 4999, 5001, 5, 11, 0, 0, 5000, 4992, 1, 0, 0, 
	0, 5000, 4993, 1, 0, 0, 0, 5000, 4995, 1, 0, 0, 0, 5000, 4997, 1, 0, 0, 
	0, 5000, 4998, 1, 0, 0, 0, 5001, 5009, 1, 0, 0, 0, 5002, 5009, 5, 246, 
	0, 0, 5003, 5009, 5, 230, 0, 0, 5004, 5009, 5, 957, 0, 0, 5005, 5009, 5, 
	498, 0, 0, 5006, 5009, 5, 653, 0, 0, 5007, 5009, 5, 490, 0, 0, 5008, 4969, 
	1, 0, 0, 0, 5008, 4973, 1, 0, 0, 0, 5008, 4976, 1, 0, 0, 0, 5008, 4978, 
	1, 0, 0, 0, 5008, 4980, 1, 0, 0, 0, 5008, 4991, 1, 0, 0, 0, 5008, 5002, 
	1, 0, 0, 0, 5008, 5003, 1, 0, 0, 0, 5008, 5004, 1, 0, 0, 0, 5008, 5005, 
	1, 0, 0, 0, 5008, 5006, 1, 0, 0, 0, 5008, 5007, 1, 0, 0, 0, 5009, 243, 
	1, 0, 0, 0, 5010, 5012, 5, 13, 0, 0, 5011, 5013, 5, 153, 0, 0, 5012, 5011, 
	1, 0, 0, 0, 5012, 5013, 1, 0, 0, 0, 5013, 5014, 1, 0, 0, 0, 5014, 5015, 
	3, 826, 413, 0, 5015, 5016, 3, 846, 423, 0, 5016, 5017, 5, 53, 0, 0, 5017, 
	5018, 5, 1063, 0, 0, 5018, 5019, 3, 836, 418, 0, 5019, 5020, 5, 1064, 0, 
	0, 5020, 5033, 1, 0, 0, 0, 5021, 5022, 5, 658, 0, 0, 5022, 5023, 5, 153, 
	0, 0, 5023, 5024, 3, 826, 413, 0, 5024, 5025, 5, 888, 0, 0, 5025, 5026, 
	3, 826, 413, 0, 5026, 5033, 1, 0, 0, 0, 5027, 5029, 5, 239, 0, 0, 5028, 
	5030, 5, 153, 0, 0, 5029, 5028, 1, 0, 0, 0, 5029, 5030, 1, 0, 0, 0, 5030, 
	5031, 1, 0, 0, 0, 5031, 5033, 3, 828, 414, 0, 5032, 5010, 1, 0, 0, 0, 5032, 
	5021, 1, 0, 0, 0, 5032, 5027, 1, 0, 0, 0, 5033, 245, 1, 0, 0, 0, 5034, 
	5035, 5, 13, 0, 0, 5035, 5077, 3, 248, 124, 0, 5036, 5037, 5, 658, 0, 0, 
	5037, 5038, 5, 167, 0, 0, 5038, 5039, 3, 820, 410, 0, 5039, 5040, 5, 888, 
	0, 0, 5040, 5041, 3, 820, 410, 0, 5041, 5077, 1, 0, 0, 0, 5042, 5050, 3, 
	274, 137, 0, 5043, 5044, 5, 167, 0, 0, 5044, 5051, 3, 820, 410, 0, 5045, 
	5046, 5, 594, 0, 0, 5046, 5051, 5, 396, 0, 0, 5047, 5051, 5, 929, 0, 0, 
	5048, 5049, 5, 312, 0, 0, 5049, 5051, 5, 396, 0, 0, 5050, 5043, 1, 0, 0, 
	0, 5050, 5045, 1, 0, 0, 0, 5050, 5047, 1, 0, 0, 0, 5050, 5048, 1, 0, 0, 
	0, 5051, 5052, 1, 0, 0, 0, 5052, 5057, 3, 348, 174, 0, 5053, 5055, 5, 491, 
	0, 0, 5054, 5053, 1, 0, 0, 0, 5054, 5055, 1, 0, 0, 0, 5055, 5056, 1, 0, 
	0, 0, 5056, 5058, 5, 260, 0, 0, 5057, 5054, 1, 0, 0, 0, 5057, 5058, 1, 
	0, 0, 0, 5058, 5059, 1, 0, 0, 0, 5059, 5060, 7, 31, 0, 0, 5060, 5061, 7, 
	32, 0, 0, 5061, 5077, 1, 0, 0, 0, 5062, 5070, 5, 239, 0, 0, 5063, 5064, 
	5, 167, 0, 0, 5064, 5071, 3, 820, 410, 0, 5065, 5066, 5, 594, 0, 0, 5066, 
	5071, 5, 396, 0, 0, 5067, 5071, 5, 929, 0, 0, 5068, 5069, 5, 312, 0, 0, 
	5069, 5071, 5, 396, 0, 0, 5070, 5063, 1, 0, 0, 0, 5070, 5065, 1, 0, 0, 
	0, 5070, 5067, 1, 0, 0, 0, 5070, 5068, 1, 0, 0, 0, 5071, 5072, 1, 0, 0, 
	0, 5072, 5074, 3, 348, 174, 0, 5073, 5075, 3, 592, 296, 0, 5074, 5073, 
	1, 0, 0, 0, 5074, 5075, 1, 0, 0, 0, 5075, 5077, 1, 0, 0, 0, 5076, 5034, 
	1, 0, 0, 0, 5076, 5036, 1, 0, 0, 0, 5076, 5042, 1, 0, 0, 0, 5076, 5062, 
	1, 0, 0, 0, 5077, 247, 1, 0, 0, 0, 5078, 5079, 5, 167, 0, 0, 5079, 5081, 
	3, 820, 410, 0, 5080, 5078, 1, 0, 0, 0, 5080, 5081, 1, 0, 0, 0, 5081, 5103, 
	1, 0, 0, 0, 5082, 5084, 5, 929, 0, 0, 5083, 5085, 3, 348, 174, 0, 5084, 
	5083, 1, 0, 0, 0, 5084, 5085, 1, 0, 0, 0, 5085, 5104, 1, 0, 0, 0, 5086, 
	5087, 5, 594, 0, 0, 5087, 5089, 5, 396, 0, 0, 5088, 5090, 3, 348, 174, 
	0, 5089, 5088, 1, 0, 0, 0, 5089, 5090, 1, 0, 0, 0, 5090, 5104, 1, 0, 0, 
	0, 5091, 5092, 5, 312, 0, 0, 5092, 5094, 5, 396, 0, 0, 5093, 5091, 1, 0, 
	0, 0, 5093, 5094, 1, 0, 0, 0, 5094, 5096, 1, 0, 0, 0, 5095, 5097, 3, 348, 
	174, 0, 5096, 5095, 1, 0, 0, 0, 5096, 5097, 1, 0, 0, 0, 5097, 5098, 1, 
	0, 0, 0, 5098, 5099, 5, 646, 0, 0, 5099, 5101, 3, 830, 415, 0, 5100, 5102, 
	3, 348, 174, 0, 5101, 5100, 1, 0, 0, 0, 5101, 5102, 1, 0, 0, 0, 5102, 5104, 
	1, 0, 0, 0, 5103, 5082, 1, 0, 0, 0, 5103, 5086, 1, 0, 0, 0, 5103, 5093, 
	1, 0, 0, 0, 5104, 5106, 1, 0, 0, 0, 5105, 5107, 3, 242, 121, 0, 5106, 5105, 
	1, 0, 0, 0, 5106, 5107, 1, 0, 0, 0, 5107, 249, 1, 0, 0, 0, 5108, 5109, 
	5, 13, 0, 0, 5109, 5110, 5, 738, 0, 0, 5110, 5120, 5, 540, 0, 0, 5111, 
	5112, 5, 531, 0, 0, 5112, 5117, 3, 252, 126, 0, 5113, 5114, 5, 1069, 0, 
	0, 5114, 5116, 3, 252, 126, 0, 5115, 5113, 1, 0, 0, 0, 5116, 5119, 1, 0, 
	0, 0, 5117, 5115, 1, 0, 0, 0, 5117, 5118, 1, 0, 0, 0, 5118, 5121, 1, 0, 
	0, 0, 5119, 5117, 1, 0, 0, 0, 5120, 5111, 1, 0, 0, 0, 5120, 5121, 1, 0, 
	0, 0, 5121, 5137, 1, 0, 0, 0, 5122, 5123, 5, 239, 0, 0, 5123, 5124, 5, 
	738, 0, 0, 5124, 5134, 5, 540, 0, 0, 5125, 5126, 5, 531, 0, 0, 5126, 5131, 
	3, 252, 126, 0, 5127, 5128, 5, 1069, 0, 0, 5128, 5130, 3, 252, 126, 0, 
	5129, 5127, 1, 0, 0, 0, 5130, 5133, 1, 0, 0, 0, 5131, 5129, 1, 0, 0, 0, 
	5131, 5132, 1, 0, 0, 0, 5132, 5135, 1, 0, 0, 0, 5133, 5131, 1, 0, 0, 0, 
	5134, 5125, 1, 0, 0, 0, 5134, 5135, 1, 0, 0, 0, 5135, 5137, 1, 0, 0, 0, 
	5136, 5108, 1, 0, 0, 0, 5136, 5122, 1, 0, 0, 0, 5137, 251, 1, 0, 0, 0, 
	5138, 5139, 7, 33, 0, 0, 5139, 5142, 5, 1063, 0, 0, 5140, 5143, 5, 1073, 
	0, 0, 5141, 5143, 3, 836, 418, 0, 5142, 5140, 1, 0, 0, 0, 5142, 5141, 1, 
	0, 0, 0, 5143, 5144, 1, 0, 0, 0, 5144, 5145, 5, 1064, 0, 0, 5145, 253, 
	1, 0, 0, 0, 5146, 5147, 5, 35, 0, 0, 5147, 5148, 5, 851, 0, 0, 5148, 5149, 
	3, 830, 415, 0, 5149, 5155, 3, 274, 137, 0, 5150, 5151, 5, 1063, 0, 0, 
	5151, 5152, 3, 256, 128, 0, 5152, 5153, 5, 1064, 0, 0, 5153, 5156, 1, 0, 
	0, 0, 5154, 5156, 3, 256, 128, 0, 5155, 5150, 1, 0, 0, 0, 5155, 5154, 1, 
	0, 0, 0, 5156, 5214, 1, 0, 0, 0, 5157, 5158, 5, 35, 0, 0, 5158, 5159, 5, 
	851, 0, 0, 5159, 5160, 3, 830, 415, 0, 5160, 5161, 3, 274, 137, 0, 5161, 
	5162, 5, 153, 0, 0, 5162, 5163, 3, 826, 413, 0, 5163, 5164, 5, 757, 0, 
	0, 5164, 5165, 5, 437, 0, 0, 5165, 5166, 5, 583, 0, 0, 5166, 5174, 3, 820, 
	410, 0, 5167, 5168, 5, 954, 0, 0, 5168, 5169, 5, 1063, 0, 0, 5169, 5170, 
	3, 826, 413, 0, 5170, 5171, 5, 1069, 0, 0, 5171, 5172, 3, 828, 414, 0, 
	5172, 5173, 5, 1064, 0, 0, 5173, 5175, 1, 0, 0, 0, 5174, 5167, 1, 0, 0, 
	0, 5174, 5175, 1, 0, 0, 0, 5175, 5177, 1, 0, 0, 0, 5176, 5178, 5, 311, 
	0, 0, 5177, 5176, 1, 0, 0, 0, 5177, 5178, 1, 0, 0, 0, 5178, 5214, 1, 0, 
	0, 0, 5179, 5180, 5, 35, 0, 0, 5180, 5181, 5, 851, 0, 0, 5181, 5182, 3, 
	830, 415, 0, 5182, 5183, 3, 274, 137, 0, 5183, 5184, 5, 153, 0, 0, 5184, 
	5185, 3, 826, 413, 0, 5185, 5186, 5, 937, 0, 0, 5186, 5187, 5, 437, 0, 
	0, 5187, 5188, 5, 583, 0, 0, 5188, 5214, 1, 0, 0, 0, 5189, 5190, 5, 35, 
	0, 0, 5190, 5191, 5, 851, 0, 0, 5191, 5192, 3, 830, 415, 0, 5192, 5193, 
	3, 274, 137, 0, 5193, 5198, 3, 262, 131, 0, 5194, 5195, 5, 1069, 0, 0, 
	5195, 5197, 3, 262, 131, 0, 5196, 5194, 1, 0, 0, 0, 5197, 5200, 1, 0, 0, 
	0, 5198, 5196, 1, 0, 0, 0, 5198, 5199, 1, 0, 0, 0, 5199, 5214, 1, 0, 0, 
	0, 5200, 5198, 1, 0, 0, 0, 5201, 5202, 5, 35, 0, 0, 5202, 5203, 5, 851, 
	0, 0, 5203, 5204, 3, 830, 415, 0, 5204, 5205, 3, 274, 137, 0, 5205, 5210, 
	3, 264, 132, 0, 5206, 5207, 5, 1069, 0, 0, 5207, 5209, 3, 264, 132, 0, 
	5208, 5206, 1, 0, 0, 0, 5209, 5212, 1, 0, 0, 0, 5210, 5208, 1, 0, 0, 0, 
	5210, 5211, 1, 0, 0, 0, 5211, 5214, 1, 0, 0, 0, 5212, 5210, 1, 0, 0, 0, 
	5213, 5146, 1, 0, 0, 0, 5213, 5157, 1, 0, 0, 0, 5213, 5179, 1, 0, 0, 0, 
	5213, 5189, 1, 0, 0, 0, 5213, 5201, 1, 0, 0, 0, 5214, 255, 1, 0, 0, 0, 
	5215, 5220, 3, 258, 129, 0, 5216, 5217, 5, 1069, 0, 0, 5217, 5219, 3, 258, 
	129, 0, 5218, 5216, 1, 0, 0, 0, 5219, 5222, 1, 0, 0, 0, 5220, 5218, 1, 
	0, 0, 0, 5220, 5221, 1, 0, 0, 0, 5221, 257, 1, 0, 0, 0, 5222, 5220, 1, 
	0, 0, 0, 5223, 5225, 5, 153, 0, 0, 5224, 5223, 1, 0, 0, 0, 5224, 5225, 
	1, 0, 0, 0, 5225, 5226, 1, 0, 0, 0, 5226, 5227, 3, 826, 413, 0, 5227, 5228, 
	3, 260, 130, 0, 5228, 259, 1, 0, 0, 0, 5229, 5230, 5, 239, 0, 0, 5230, 
	5259, 5, 212, 0, 0, 5231, 5232, 5, 757, 0, 0, 5232, 5233, 5, 212, 0, 0, 
	5233, 5234, 3, 830, 415, 0, 5234, 5235, 5, 1059, 0, 0, 5235, 5236, 5, 487, 
	0, 0, 5236, 5259, 1, 0, 0, 0, 5237, 5239, 5, 757, 0, 0, 5238, 5237, 1, 
	0, 0, 0, 5238, 5239, 1, 0, 0, 0, 5239, 5240, 1, 0, 0, 0, 5240, 5241, 5, 
	491, 0, 0, 5241, 5246, 5, 500, 0, 0, 5242, 5243, 5, 239, 0, 0, 5243, 5244, 
	5, 491, 0, 0, 5244, 5246, 5, 500, 0, 0, 5245, 5238, 1, 0, 0, 0, 5245, 5242, 
	1, 0, 0, 0, 5246, 5259, 1, 0, 0, 0, 5247, 5248, 5, 757, 0, 0, 5248, 5250, 
	5, 198, 0, 0, 5249, 5247, 1, 0, 0, 0, 5249, 5250, 1, 0, 0, 0, 5250, 5251, 
	1, 0, 0, 0, 5251, 5253, 5, 917, 0, 0, 5252, 5249, 1, 0, 0, 0, 5252, 5253, 
	1, 0, 0, 0, 5253, 5254, 1, 0, 0, 0, 5254, 5259, 3, 846, 423, 0, 5255, 5259, 
	3, 618, 309, 0, 5256, 5257, 5, 937, 0, 0, 5257, 5259, 5, 155, 0, 0, 5258, 
	5229, 1, 0, 0, 0, 5258, 5231, 1, 0, 0, 0, 5258, 5245, 1, 0, 0, 0, 5258, 
	5252, 1, 0, 0, 0, 5258, 5255, 1, 0, 0, 0, 5258, 5256, 1, 0, 0, 0, 5259, 
	261, 1, 0, 0, 0, 5260, 5262, 5, 153, 0, 0, 5261, 5260, 1, 0, 0, 0, 5261, 
	5262, 1, 0, 0, 0, 5262, 5263, 1, 0, 0, 0, 5263, 5264, 3, 826, 413, 0, 5264, 
	5265, 3, 290, 145, 0, 5265, 263, 1, 0, 0, 0, 5266, 5267, 5, 153, 0, 0, 
	5267, 5268, 3, 826, 413, 0, 5268, 5269, 3, 294, 147, 0, 5269, 265, 1, 0, 
	0, 0, 5270, 5271, 5, 35, 0, 0, 5271, 5272, 5, 858, 0, 0, 5272, 5273, 3, 
	282, 141, 0, 5273, 267, 1, 0, 0, 0, 5274, 5275, 5, 35, 0, 0, 5275, 5277, 
	5, 861, 0, 0, 5276, 5278, 3, 622, 311, 0, 5277, 5276, 1, 0, 0, 0, 5277, 
	5278, 1, 0, 0, 0, 5278, 5279, 1, 0, 0, 0, 5279, 5280, 3, 820, 410, 0, 5280, 
	5281, 7, 27, 0, 0, 5281, 5398, 1, 0, 0, 0, 5282, 5283, 5, 35, 0, 0, 5283, 
	5285, 5, 861, 0, 0, 5284, 5286, 3, 622, 311, 0, 5285, 5284, 1, 0, 0, 0, 
	5285, 5286, 1, 0, 0, 0, 5286, 5287, 1, 0, 0, 0, 5287, 5288, 3, 820, 410, 
	0, 5288, 5289, 5, 657, 0, 0, 5289, 5290, 5, 18, 0, 0, 5290, 5291, 3, 818, 
	409, 0, 5291, 5398, 1, 0, 0, 0, 5292, 5293, 5, 13, 0, 0, 5293, 5294, 5, 
	18, 0, 0, 5294, 5398, 3, 818, 409, 0, 5295, 5296, 5, 35, 0, 0, 5296, 5298, 
	5, 861, 0, 0, 5297, 5299, 3, 622, 311, 0, 5298, 5297, 1, 0, 0, 0, 5298, 
	5299, 1, 0, 0, 0, 5299, 5300, 1, 0, 0, 0, 5300, 5301, 3, 820, 410, 0, 5301, 
	5305, 5, 757, 0, 0, 5302, 5303, 5, 973, 0, 0, 5303, 5304, 5, 1052, 0, 0, 
	5304, 5306, 3, 816, 408, 0, 5305, 5302, 1, 0, 0, 0, 5305, 5306, 1, 0, 0, 
	0, 5306, 5310, 1, 0, 0, 0, 5307, 5308, 5, 730, 0, 0, 5308, 5309, 5, 1052, 
	0, 0, 5309, 5311, 3, 816, 408, 0, 5310, 5307, 1, 0, 0, 0, 5310, 5311, 1, 
	0, 0, 0, 5311, 5315, 1, 0, 0, 0, 5312, 5313, 5, 26, 0, 0, 5313, 5314, 5, 
	1052, 0, 0, 5314, 5316, 3, 430, 215, 0, 5315, 5312, 1, 0, 0, 0, 5315, 5316, 
	1, 0, 0, 0, 5316, 5320, 1, 0, 0, 0, 5317, 5318, 5, 952, 0, 0, 5318, 5319, 
	5, 1052, 0, 0, 5319, 5321, 3, 832, 416, 0, 5320, 5317, 1, 0, 0, 0, 5320, 
	5321, 1, 0, 0, 0, 5321, 5325, 1, 0, 0, 0, 5322, 5323, 5, 844, 0, 0, 5323, 
	5324, 5, 1052, 0, 0, 5324, 5326, 3, 832, 416, 0, 5325, 5322, 1, 0, 0, 0, 
	5325, 5326, 1, 0, 0, 0, 5326, 5328, 1, 0, 0, 0, 5327, 5329, 3, 618, 309, 
	0, 5328, 5327, 1, 0, 0, 0, 5328, 5329, 1, 0, 0, 0, 5329, 5331, 1, 0, 0, 
	0, 5330, 5332, 3, 502, 251, 0, 5331, 5330, 1, 0, 0, 0, 5331, 5332, 1, 0, 
	0, 0, 5332, 5398, 1, 0, 0, 0, 5333, 5334, 5, 35, 0, 0, 5334, 5336, 5, 861, 
	0, 0, 5335, 5337, 3, 622, 311, 0, 5336, 5335, 1, 0, 0, 0, 5336, 5337, 1, 
	0, 0, 0, 5337, 5338, 1, 0, 0, 0, 5338, 5339, 3, 820, 410, 0, 5339, 5341, 
	5, 937, 0, 0, 5340, 5342, 5, 973, 0, 0, 5341, 5340, 1, 0, 0, 0, 5341, 5342, 
	1, 0, 0, 0, 5342, 5344, 1, 0, 0, 0, 5343, 5345, 5, 730, 0, 0, 5344, 5343, 
	1, 0, 0, 0, 5344, 5345, 1, 0, 0, 0, 5345, 5347, 1, 0, 0, 0, 5346, 5348, 
	5, 26, 0, 0, 5347, 5346, 1, 0, 0, 0, 5347, 5348, 1, 0, 0, 0, 5348, 5350, 
	1, 0, 0, 0, 5349, 5351, 5, 952, 0, 0, 5350, 5349, 1, 0, 0, 0, 5350, 5351, 
	1, 0, 0, 0, 5351, 5353, 1, 0, 0, 0, 5352, 5354, 5, 844, 0, 0, 5353, 5352, 
	1, 0, 0, 0, 5353, 5354, 1, 0, 0, 0, 5354, 5356, 1, 0, 0, 0, 5355, 5357, 
	5, 155, 0, 0, 5356, 5355, 1, 0, 0, 0, 5356, 5357, 1, 0, 0, 0, 5357, 5359, 
	1, 0, 0, 0, 5358, 5360, 3, 500, 250, 0, 5359, 5358, 1, 0, 0, 0, 5359, 5360, 
	1, 0, 0, 0, 5360, 5398, 1, 0, 0, 0, 5361, 5362, 5, 35, 0, 0, 5362, 5364, 
	5, 861, 0, 0, 5363, 5365, 3, 622, 311, 0, 5364, 5363, 1, 0, 0, 0, 5364, 
	5365, 1, 0, 0, 0, 5365, 5366, 1, 0, 0, 0, 5366, 5367, 3, 820, 410, 0, 5367, 
	5368, 3, 290, 145, 0, 5368, 5398, 1, 0, 0, 0, 5369, 5370, 5, 35, 0, 0, 
	5370, 5372, 5, 861, 0, 0, 5371, 5373, 3, 622, 311, 0, 5372, 5371, 1, 0, 
	0, 0, 5372, 5373, 1, 0, 0, 0, 5373, 5374, 1, 0, 0, 0, 5374, 5375, 3, 820, 
	410, 0, 5375, 5376, 3, 294, 147, 0, 5376, 5398, 1, 0, 0, 0, 5377, 5378, 
	5, 35, 0, 0, 5378, 5380, 5, 861, 0, 0, 5379, 5381, 3, 622, 311, 0, 5380, 
	5379, 1, 0, 0, 0, 5380, 5381, 1, 0, 0, 0, 5381, 5382, 1, 0, 0, 0, 5382, 
	5383, 3, 820, 410, 0, 5383, 5384, 5, 464, 0, 0, 5384, 5385, 5, 53, 0, 0, 
	5385, 5386, 3, 508, 254, 0, 5386, 5398, 1, 0, 0, 0, 5387, 5388, 5, 35, 
	0, 0, 5388, 5390, 5, 861, 0, 0, 5389, 5391, 3, 622, 311, 0, 5390, 5389, 
	1, 0, 0, 0, 5390, 5391, 1, 0, 0, 0, 5391, 5392, 1, 0, 0, 0, 5392, 5393, 
	3, 820, 410, 0, 5393, 5394, 5, 464, 0, 0, 5394, 5395, 5, 980, 0, 0, 5395, 
	5396, 3, 836, 418, 0, 5396, 5398, 1, 0, 0, 0, 5397, 5274, 1, 0, 0, 0, 5397, 
	5282, 1, 0, 0, 0, 5397, 5292, 1, 0, 0, 0, 5397, 5295, 1, 0, 0, 0, 5397, 
	5333, 1, 0, 0, 0, 5397, 5361, 1, 0, 0, 0, 5397, 5369, 1, 0, 0, 0, 5397, 
	5377, 1, 0, 0, 0, 5397, 5387, 1, 0, 0, 0, 5398, 269, 1, 0, 0, 0, 5399, 
	5400, 5, 35, 0, 0, 5400, 5402, 5, 949, 0, 0, 5401, 5403, 3, 622, 311, 0, 
	5402, 5401, 1, 0, 0, 0, 5402, 5403, 1, 0, 0, 0, 5403, 5404, 1, 0, 0, 0, 
	5404, 5405, 3, 820, 410, 0, 5405, 5406, 3, 280, 140, 0, 5406, 271, 1, 0, 
	0, 0, 5407, 5408, 5, 35, 0, 0, 5408, 5410, 5, 967, 0, 0, 5409, 5411, 3, 
	622, 311, 0, 5410, 5409, 1, 0, 0, 0, 5410, 5411, 1, 0, 0, 0, 5411, 5412, 
	1, 0, 0, 0, 5412, 5413, 3, 820, 410, 0, 5413, 5414, 5, 658, 0, 0, 5414, 
	5415, 5, 888, 0, 0, 5415, 5416, 3, 820, 410, 0, 5416, 5576, 1, 0, 0, 0, 
	5417, 5418, 5, 35, 0, 0, 5418, 5420, 5, 967, 0, 0, 5419, 5421, 3, 622, 
	311, 0, 5420, 5419, 1, 0, 0, 0, 5420, 5421, 1, 0, 0, 0, 5421, 5422, 1, 
	0, 0, 0, 5422, 5423, 3, 820, 410, 0, 5423, 5424, 5, 757, 0, 0, 5424, 5425, 
	3, 618, 309, 0, 5425, 5576, 1, 0, 0, 0, 5426, 5427, 5, 35, 0, 0, 5427, 
	5429, 5, 967, 0, 0, 5428, 5430, 3, 622, 311, 0, 5429, 5428, 1, 0, 0, 0, 
	5429, 5430, 1, 0, 0, 0, 5430, 5431, 1, 0, 0, 0, 5431, 5432, 3, 820, 410, 
	0, 5432, 5433, 5, 937, 0, 0, 5433, 5434, 5, 155, 0, 0, 5434, 5576, 1, 0, 
	0, 0, 5435, 5436, 5, 35, 0, 0, 5436, 5437, 5, 967, 0, 0, 5437, 5438, 3, 
	820, 410, 0, 5438, 5439, 5, 757, 0, 0, 5439, 5440, 5, 744, 0, 0, 5440, 
	5576, 1, 0, 0, 0, 5441, 5442, 5, 35, 0, 0, 5442, 5443, 5, 967, 0, 0, 5443, 
	5444, 3, 820, 410, 0, 5444, 5445, 5, 937, 0, 0, 5445, 5446, 5, 744, 0, 
	0, 5446, 5576, 1, 0, 0, 0, 5447, 5448, 5, 35, 0, 0, 5448, 5450, 5, 967, 
	0, 0, 5449, 5451, 3, 622, 311, 0, 5450, 5449, 1, 0, 0, 0, 5450, 5451, 1, 
	0, 0, 0, 5451, 5452, 1, 0, 0, 0, 5452, 5453, 3, 820, 410, 0, 5453, 5454, 
	3, 290, 145, 0, 5454, 5576, 1, 0, 0, 0, 5455, 5456, 5, 35, 0, 0, 5456, 
	5458, 5, 967, 0, 0, 5457, 5459, 3, 622, 311, 0, 5458, 5457, 1, 0, 0, 0, 
	5458, 5459, 1, 0, 0, 0, 5459, 5460, 1, 0, 0, 0, 5460, 5461, 3, 820, 410, 
	0, 5461, 5462, 3, 294, 147, 0, 5462, 5576, 1, 0, 0, 0, 5463, 5464, 5, 35, 
	0, 0, 5464, 5466, 5, 967, 0, 0, 5465, 5467, 3, 622, 311, 0, 5466, 5465, 
	1, 0, 0, 0, 5466, 5467, 1, 0, 0, 0, 5467, 5468, 1, 0, 0, 0, 5468, 5469, 
	3, 820, 410, 0, 5469, 5470, 5, 13, 0, 0, 5470, 5471, 5, 698, 0, 0, 5471, 
	5472, 5, 8, 0, 0, 5472, 5473, 5, 583, 0, 0, 5473, 5474, 3, 820, 410, 0, 
	5474, 5475, 5, 531, 0, 0, 5475, 5476, 3, 348, 174, 0, 5476, 5576, 1, 0, 
	0, 0, 5477, 5478, 5, 35, 0, 0, 5478, 5480, 5, 967, 0, 0, 5479, 5481, 3, 
	622, 311, 0, 5480, 5479, 1, 0, 0, 0, 5480, 5481, 1, 0, 0, 0, 5481, 5482, 
	1, 0, 0, 0, 5482, 5483, 3, 820, 410, 0, 5483, 5484, 5, 239, 0, 0, 5484, 
	5485, 5, 698, 0, 0, 5485, 5486, 5, 8, 0, 0, 5486, 5487, 5, 583, 0, 0, 5487, 
	5488, 3, 820, 410, 0, 5488, 5576, 1, 0, 0, 0, 5489, 5490, 5, 35, 0, 0, 
	5490, 5492, 5, 967, 0, 0, 5491, 5493, 3, 622, 311, 0, 5492, 5491, 1, 0, 
	0, 0, 5492, 5493, 1, 0, 0, 0, 5493, 5494, 1, 0, 0, 0, 5494, 5495, 3, 820, 
	410, 0, 5495, 5496, 5, 13, 0, 0, 5496, 5497, 5, 698, 0, 0, 5497, 5498, 
	5, 8, 0, 0, 5498, 5499, 5, 583, 0, 0, 5499, 5500, 3, 820, 410, 0, 5500, 
	5501, 5, 531, 0, 0, 5501, 5502, 3, 348, 174, 0, 5502, 5503, 5, 1069, 0, 
	0, 5503, 5504, 5, 239, 0, 0, 5504, 5505, 5, 698, 0, 0, 5505, 5506, 5, 8, 
	0, 0, 5506, 5507, 5, 583, 0, 0, 5507, 5508, 3, 820, 410, 0, 5508, 5576, 
	1, 0, 0, 0, 5509, 5510, 5, 35, 0, 0, 5510, 5512, 5, 967, 0, 0, 5511, 5513, 
	3, 622, 311, 0, 5512, 5511, 1, 0, 0, 0, 5512, 5513, 1, 0, 0, 0, 5513, 5514, 
	1, 0, 0, 0, 5514, 5515, 3, 820, 410, 0, 5515, 5516, 5, 239, 0, 0, 5516, 
	5517, 5, 20, 0, 0, 5517, 5518, 5, 698, 0, 0, 5518, 5519, 5, 8, 0, 0, 5519, 
	5520, 5, 582, 0, 0, 5520, 5576, 1, 0, 0, 0, 5521, 5522, 5, 35, 0, 0, 5522, 
	5523, 5, 967, 0, 0, 5523, 5524, 3, 820, 410, 0, 5524, 5526, 3, 274, 137, 
	0, 5525, 5527, 5, 153, 0, 0, 5526, 5525, 1, 0, 0, 0, 5526, 5527, 1, 0, 
	0, 0, 5527, 5528, 1, 0, 0, 0, 5528, 5529, 3, 820, 410, 0, 5529, 5530, 5, 
	757, 0, 0, 5530, 5531, 5, 437, 0, 0, 5531, 5532, 5, 583, 0, 0, 5532, 5540, 
	3, 820, 410, 0, 5533, 5534, 5, 954, 0, 0, 5534, 5535, 5, 1063, 0, 0, 5535, 
	5536, 3, 826, 413, 0, 5536, 5537, 5, 1069, 0, 0, 5537, 5538, 3, 828, 414, 
	0, 5538, 5539, 5, 1064, 0, 0, 5539, 5541, 1, 0, 0, 0, 5540, 5533, 1, 0, 
	0, 0, 5540, 5541, 1, 0, 0, 0, 5541, 5543, 1, 0, 0, 0, 5542, 5544, 5, 311, 
	0, 0, 5543, 5542, 1, 0, 0, 0, 5543, 5544, 1, 0, 0, 0, 5544, 5576, 1, 0, 
	0, 0, 5545, 5546, 5, 35, 0, 0, 5546, 5547, 5, 967, 0, 0, 5547, 5548, 3, 
	820, 410, 0, 5548, 5550, 3, 274, 137, 0, 5549, 5551, 5, 153, 0, 0, 5550, 
	5549, 1, 0, 0, 0, 5550, 5551, 1, 0, 0, 0, 5551, 5552, 1, 0, 0, 0, 5552, 
	5553, 3, 820, 410, 0, 5553, 5554, 5, 937, 0, 0, 5554, 5555, 5, 437, 0, 
	0, 5555, 5556, 5, 583, 0, 0, 5556, 5576, 1, 0, 0, 0, 5557, 5558, 5, 35, 
	0, 0, 5558, 5559, 5, 967, 0, 0, 5559, 5560, 3, 820, 410, 0, 5560, 5562, 
	3, 274, 137, 0, 5561, 5563, 5, 153, 0, 0, 5562, 5561, 1, 0, 0, 0, 5562, 
	5563, 1, 0, 0, 0, 5563, 5564, 1, 0, 0, 0, 5564, 5565, 3, 820, 410, 0, 5565, 
	5566, 3, 290, 145, 0, 5566, 5576, 1, 0, 0, 0, 5567, 5568, 5, 35, 0, 0, 
	5568, 5569, 5, 967, 0, 0, 5569, 5570, 3, 820, 410, 0, 5570, 5571, 3, 274, 
	137, 0, 5571, 5572, 5, 153, 0, 0, 5572, 5573, 3, 820, 410, 0, 5573, 5574, 
	3, 294, 147, 0, 5574, 5576, 1, 0, 0, 0, 5575, 5407, 1, 0, 0, 0, 5575, 5417, 
	1, 0, 0, 0, 5575, 5426, 1, 0, 0, 0, 5575, 5435, 1, 0, 0, 0, 5575, 5441, 
	1, 0, 0, 0, 5575, 5447, 1, 0, 0, 0, 5575, 5455, 1, 0, 0, 0, 5575, 5463, 
	1, 0, 0, 0, 5575, 5477, 1, 0, 0, 0, 5575, 5489, 1, 0, 0, 0, 5575, 5509, 
	1, 0, 0, 0, 5575, 5521, 1, 0, 0, 0, 5575, 5545, 1, 0, 0, 0, 5575, 5557, 
	1, 0, 0, 0, 5575, 5567, 1, 0, 0, 0, 5576, 273, 1, 0, 0, 0, 5577, 5578, 
	7, 34, 0, 0, 5578, 275, 1, 0, 0, 0, 5579, 5580, 5, 35, 0, 0, 5580, 5582, 
	5, 973, 0, 0, 5581, 5583, 3, 622, 311, 0, 5582, 5581, 1, 0, 0, 0, 5582, 
	5583, 1, 0, 0, 0, 5583, 5584, 1, 0, 0, 0, 5584, 5585, 3, 286, 143, 0, 5585, 
	277, 1, 0, 0, 0, 5586, 5587, 3, 820, 410, 0, 5587, 5588, 5, 246, 0, 0, 
	5588, 5589, 5, 297, 0, 0, 5589, 5590, 5, 888, 0, 0, 5590, 5591, 5, 10, 
	0, 0, 5591, 5592, 3, 820, 410, 0, 5592, 5593, 5, 1059, 0, 0, 5593, 5601, 
	3, 820, 410, 0, 5594, 5595, 5, 1069, 0, 0, 5595, 5596, 3, 820, 410, 0, 
	5596, 5597, 5, 1059, 0, 0, 5597, 5598, 3, 820, 410, 0, 5598, 5600, 1, 0, 
	0, 0, 5599, 5594, 1, 0, 0, 0, 5600, 5603, 1, 0, 0, 0, 5601, 5599, 1, 0, 
	0, 0, 5601, 5602, 1, 0, 0, 0, 5602, 5605, 1, 0, 0, 0, 5603, 5601, 1, 0, 
	0, 0, 5604, 5606, 3, 152, 76, 0, 5605, 5604, 1, 0, 0, 0, 5605, 5606, 1, 
	0, 0, 0, 5606, 5640, 1, 0, 0, 0, 5607, 5608, 3, 820, 410, 0, 5608, 5609, 
	5, 230, 0, 0, 5609, 5620, 5, 297, 0, 0, 5610, 5611, 5, 888, 0, 0, 5611, 
	5612, 5, 10, 0, 0, 5612, 5613, 3, 820, 410, 0, 5613, 5614, 5, 1059, 0, 
	0, 5614, 5615, 3, 820, 410, 0, 5615, 5616, 5, 1069, 0, 0, 5616, 5617, 3, 
	820, 410, 0, 5617, 5618, 5, 1059, 0, 0, 5618, 5619, 3, 820, 410, 0, 5619, 
	5621, 1, 0, 0, 0, 5620, 5610, 1, 0, 0, 0, 5620, 5621, 1, 0, 0, 0, 5621, 
	5640, 1, 0, 0, 0, 5622, 5623, 3, 820, 410, 0, 5623, 5624, 5, 594, 0, 0, 
	5624, 5640, 1, 0, 0, 0, 5625, 5627, 3, 622, 311, 0, 5626, 5625, 1, 0, 0, 
	0, 5626, 5627, 1, 0, 0, 0, 5627, 5628, 1, 0, 0, 0, 5628, 5629, 3, 820, 
	410, 0, 5629, 5630, 5, 757, 0, 0, 5630, 5631, 3, 618, 309, 0, 5631, 5640, 
	1, 0, 0, 0, 5632, 5634, 3, 622, 311, 0, 5633, 5632, 1, 0, 0, 0, 5633, 5634, 
	1, 0, 0, 0, 5634, 5635, 1, 0, 0, 0, 5635, 5636, 3, 820, 410, 0, 5636, 5637, 
	5, 937, 0, 0, 5637, 5638, 5, 155, 0, 0, 5638, 5640, 1, 0, 0, 0, 5639, 5586, 
	1, 0, 0, 0, 5639, 5607, 1, 0, 0, 0, 5639, 5622, 1, 0, 0, 0, 5639, 5626, 
	1, 0, 0, 0, 5639, 5633, 1, 0, 0, 0, 5640, 279, 1, 0, 0, 0, 5641, 5642, 
	5, 658, 0, 0, 5642, 5643, 5, 888, 0, 0, 5643, 5676, 3, 820, 410, 0, 5644, 
	5645, 5, 669, 0, 0, 5645, 5676, 5, 562, 0, 0, 5646, 5647, 5, 2, 0, 0, 5647, 
	5648, 5, 20, 0, 0, 5648, 5676, 5, 616, 0, 0, 5649, 5650, 5, 13, 0, 0, 5650, 
	5651, 5, 222, 0, 0, 5651, 5652, 5, 57, 0, 0, 5652, 5653, 5, 520, 0, 0, 
	5653, 5654, 5, 693, 0, 0, 5654, 5655, 3, 820, 410, 0, 5655, 5656, 5, 888, 
	0, 0, 5656, 5657, 5, 745, 0, 0, 5657, 5658, 5, 379, 0, 0, 5658, 5659, 3, 
	820, 410, 0, 5659, 5676, 1, 0, 0, 0, 5660, 5661, 5, 657, 0, 0, 5661, 5667, 
	5, 222, 0, 0, 5662, 5663, 5, 57, 0, 0, 5663, 5664, 5, 520, 0, 0, 5664, 
	5665, 5, 693, 0, 0, 5665, 5668, 3, 820, 410, 0, 5666, 5668, 5, 58, 0, 0, 
	5667, 5662, 1, 0, 0, 0, 5667, 5666, 1, 0, 0, 0, 5668, 5669, 1, 0, 0, 0, 
	5669, 5670, 5, 317, 0, 0, 5670, 5671, 5, 745, 0, 0, 5671, 5672, 5, 379, 
	0, 0, 5672, 5676, 3, 820, 410, 0, 5673, 5676, 3, 290, 145, 0, 5674, 5676, 
	3, 294, 147, 0, 5675, 5641, 1, 0, 0, 0, 5675, 5644, 1, 0, 0, 0, 5675, 5646, 
	1, 0, 0, 0, 5675, 5649, 1, 0, 0, 0, 5675, 5660, 1, 0, 0, 0, 5675, 5673, 
	1, 0, 0, 0, 5675, 5674, 1, 0, 0, 0, 5676, 281, 1, 0, 0, 0, 5677, 5679, 
	3, 622, 311, 0, 5678, 5677, 1, 0, 0, 0, 5678, 5679, 1, 0, 0, 0, 5679, 5680, 
	1, 0, 0, 0, 5680, 5681, 3, 820, 410, 0, 5681, 5682, 5, 658, 0, 0, 5682, 
	5683, 5, 888, 0, 0, 5683, 5684, 3, 820, 410, 0, 5684, 5746, 1, 0, 0, 0, 
	5685, 5687, 3, 622, 311, 0, 5686, 5685, 1, 0, 0, 0, 5686, 5687, 1, 0, 0, 
	0, 5687, 5688, 1, 0, 0, 0, 5688, 5689, 3, 820, 410, 0, 5689, 5690, 7, 35, 
	0, 0, 5690, 5691, 5, 34, 0, 0, 5691, 5696, 3, 816, 408, 0, 5692, 5693, 
	5, 1069, 0, 0, 5693, 5695, 3, 816, 408, 0, 5694, 5692, 1, 0, 0, 0, 5695, 
	5698, 1, 0, 0, 0, 5696, 5694, 1, 0, 0, 0, 5696, 5697, 1, 0, 0, 0, 5697, 
	5746, 1, 0, 0, 0, 5698, 5696, 1, 0, 0, 0, 5699, 5700, 3, 820, 410, 0, 5700, 
	5701, 5, 937, 0, 0, 5701, 5702, 5, 34, 0, 0, 5702, 5746, 1, 0, 0, 0, 5703, 
	5704, 3, 820, 410, 0, 5704, 5705, 5, 757, 0, 0, 5705, 5706, 5, 437, 0, 
	0, 5706, 5707, 5, 583, 0, 0, 5707, 5714, 3, 820, 410, 0, 5708, 5709, 5, 
	1069, 0, 0, 5709, 5710, 5, 437, 0, 0, 5710, 5711, 5, 583, 0, 0, 5711, 5713, 
	3, 820, 410, 0, 5712, 5708, 1, 0, 0, 0, 5713, 5716, 1, 0, 0, 0, 5714, 5712, 
	1, 0, 0, 0, 5714, 5715, 1, 0, 0, 0, 5715, 5746, 1, 0, 0, 0, 5716, 5714, 
	1, 0, 0, 0, 5717, 5718, 3, 820, 410, 0, 5718, 5719, 5, 937, 0, 0, 5719, 
	5720, 5, 437, 0, 0, 5720, 5721, 5, 583, 0, 0, 5721, 5728, 3, 820, 410, 
	0, 5722, 5723, 5, 1069, 0, 0, 5723, 5724, 5, 437, 0, 0, 5724, 5725, 5, 
	583, 0, 0, 5725, 5727, 3, 820, 410, 0, 5726, 5722, 1, 0, 0, 0, 5727, 5730, 
	1, 0, 0, 0, 5728, 5726, 1, 0, 0, 0, 5728, 5729, 1, 0, 0, 0, 5729, 5746, 
	1, 0, 0, 0, 5730, 5728, 1, 0, 0, 0, 5731, 5733, 3, 622, 311, 0, 5732, 5731, 
	1, 0, 0, 0, 5732, 5733, 1, 0, 0, 0, 5733, 5734, 1, 0, 0, 0, 5734, 5735, 
	3, 820, 410, 0, 5735, 5736, 5, 757, 0, 0, 5736, 5737, 3, 618, 309, 0, 5737, 
	5746, 1, 0, 0, 0, 5738, 5740, 3, 622, 311, 0, 5739, 5738, 1, 0, 0, 0, 5739, 
	5740, 1, 0, 0, 0, 5740, 5741, 1, 0, 0, 0, 5741, 5742, 3, 820, 410, 0, 5742, 
	5743, 5, 937, 0, 0, 5743, 5744, 5, 155, 0, 0, 5744, 5746, 1, 0, 0, 0, 5745, 
	5678, 1, 0, 0, 0, 5745, 5686, 1, 0, 0, 0, 5745, 5699, 1, 0, 0, 0, 5745, 
	5703, 1, 0, 0, 0, 5745, 5717, 1, 0, 0, 0, 5745, 5732, 1, 0, 0, 0, 5745, 
	5739, 1, 0, 0, 0, 5746, 283, 1, 0, 0, 0, 5747, 5749, 3, 622, 311, 0, 5748, 
	5747, 1, 0, 0, 0, 5748, 5749, 1, 0, 0, 0, 5749, 5750, 1, 0, 0, 0, 5750, 
	5751, 3, 820, 410, 0, 5751, 5758, 5, 757, 0, 0, 5752, 5753, 5, 32, 0, 0, 
	5753, 5754, 5, 1052, 0, 0, 5754, 5755, 5, 1063, 0, 0, 5755, 5756, 3, 818, 
	409, 0, 5756, 5757, 5, 1064, 0, 0, 5757, 5759, 1, 0, 0, 0, 5758, 5752, 
	1, 0, 0, 0, 5758, 5759, 1, 0, 0, 0, 5759, 5766, 1, 0, 0, 0, 5760, 5761, 
	5, 99, 0, 0, 5761, 5762, 5, 1052, 0, 0, 5762, 5763, 5, 1063, 0, 0, 5763, 
	5764, 3, 818, 409, 0, 5764, 5765, 5, 1064, 0, 0, 5765, 5767, 1, 0, 0, 0, 
	5766, 5760, 1, 0, 0, 0, 5766, 5767, 1, 0, 0, 0, 5767, 5769, 1, 0, 0, 0, 
	5768, 5770, 3, 618, 309, 0, 5769, 5768, 1, 0, 0, 0, 5769, 5770, 1, 0, 0, 
	0, 5770, 5784, 1, 0, 0, 0, 5771, 5773, 3, 622, 311, 0, 5772, 5771, 1, 0, 
	0, 0, 5772, 5773, 1, 0, 0, 0, 5773, 5774, 1, 0, 0, 0, 5774, 5775, 3, 820, 
	410, 0, 5775, 5776, 5, 937, 0, 0, 5776, 5777, 5, 155, 0, 0, 5777, 5784, 
	1, 0, 0, 0, 5778, 5779, 3, 820, 410, 0, 5779, 5780, 5, 658, 0, 0, 5780, 
	5781, 5, 888, 0, 0, 5781, 5782, 3, 820, 410, 0, 5782, 5784, 1, 0, 0, 0, 
	5783, 5748, 1, 0, 0, 0, 5783, 5772, 1, 0, 0, 0, 5783, 5778, 1, 0, 0, 0, 
	5784, 285, 1, 0, 0, 0, 5785, 5787, 3, 820, 410, 0, 5786, 5785, 1, 0, 0, 
	0, 5786, 5787, 1, 0, 0, 0, 5787, 5793, 1, 0, 0, 0, 5788, 5794, 5, 842, 
	0, 0, 5789, 5791, 5, 679, 0, 0, 5790, 5792, 3, 620, 310, 0, 5791, 5790, 
	1, 0, 0, 0, 5791, 5792, 1, 0, 0, 0, 5792, 5794, 1, 0, 0, 0, 5793, 5788, 
	1, 0, 0, 0, 5793, 5789, 1, 0, 0, 0, 5794, 5823, 1, 0, 0, 0, 5795, 5797, 
	3, 820, 410, 0, 5796, 5795, 1, 0, 0, 0, 5796, 5797, 1, 0, 0, 0, 5797, 5798, 
	1, 0, 0, 0, 5798, 5799, 5, 2, 0, 0, 5799, 5800, 5, 20, 0, 0, 5800, 5823, 
	5, 616, 0, 0, 5801, 5802, 3, 820, 410, 0, 5802, 5803, 5, 658, 0, 0, 5803, 
	5804, 5, 888, 0, 0, 5804, 5805, 3, 820, 410, 0, 5805, 5823, 1, 0, 0, 0, 
	5806, 5807, 3, 820, 410, 0, 5807, 5808, 3, 290, 145, 0, 5808, 5823, 1, 
	0, 0, 0, 5809, 5810, 3, 820, 410, 0, 5810, 5811, 3, 294, 147, 0, 5811, 
	5823, 1, 0, 0, 0, 5812, 5813, 3, 820, 410, 0, 5813, 5814, 5, 937, 0, 0, 
	5814, 5819, 3, 820, 410, 0, 5815, 5816, 5, 1069, 0, 0, 5816, 5818, 3, 820, 
	410, 0, 5817, 5815, 1, 0, 0, 0, 5818, 5821, 1, 0, 0, 0, 5819, 5817, 1, 
	0, 0, 0, 5819, 5820, 1, 0, 0, 0, 5820, 5823, 1, 0, 0, 0, 5821, 5819, 1, 
	0, 0, 0, 5822, 5786, 1, 0, 0, 0, 5822, 5796, 1, 0, 0, 0, 5822, 5801, 1, 
	0, 0, 0, 5822, 5806, 1, 0, 0, 0, 5822, 5809, 1, 0, 0, 0, 5822, 5812, 1, 
	0, 0, 0, 5823, 287, 1, 0, 0, 0, 5824, 5826, 5, 757, 0, 0, 5825, 5827, 3, 
	124, 62, 0, 5826, 5825, 1, 0, 0, 0, 5826, 5827, 1, 0, 0, 0, 5827, 5829, 
	1, 0, 0, 0, 5828, 5830, 3, 126, 63, 0, 5829, 5828, 1, 0, 0, 0, 5829, 5830, 
	1, 0, 0, 0, 5830, 5832, 1, 0, 0, 0, 5831, 5833, 3, 132, 66, 0, 5832, 5831, 
	1, 0, 0, 0, 5832, 5833, 1, 0, 0, 0, 5833, 5861, 1, 0, 0, 0, 5834, 5835, 
	5, 937, 0, 0, 5835, 5838, 3, 810, 405, 0, 5836, 5837, 5, 1069, 0, 0, 5837, 
	5839, 3, 810, 405, 0, 5838, 5836, 1, 0, 0, 0, 5838, 5839, 1, 0, 0, 0, 5839, 
	5861, 1, 0, 0, 0, 5840, 5841, 5, 757, 0, 0, 5841, 5842, 5, 671, 0, 0, 5842, 
	5843, 5, 1052, 0, 0, 5843, 5861, 3, 820, 410, 0, 5844, 5861, 3, 290, 145, 
	0, 5845, 5861, 3, 294, 147, 0, 5846, 5847, 3, 820, 410, 0, 5847, 5848, 
	5, 658, 0, 0, 5848, 5849, 5, 888, 0, 0, 5849, 5853, 3, 820, 410, 0, 5850, 
	5851, 5, 728, 0, 0, 5851, 5852, 5, 1052, 0, 0, 5852, 5854, 3, 430, 215, 
	0, 5853, 5850, 1, 0, 0, 0, 5853, 5854, 1, 0, 0, 0, 5854, 5861, 1, 0, 0, 
	0, 5855, 5856, 3, 820, 410, 0, 5856, 5857, 5, 239, 0, 0, 5857, 5858, 5, 
	527, 0, 0, 5858, 5859, 5, 943, 0, 0, 5859, 5861, 1, 0, 0, 0, 5860, 5824, 
	1, 0, 0, 0, 5860, 5834, 1, 0, 0, 0, 5860, 5840, 1, 0, 0, 0, 5860, 5844, 
	1, 0, 0, 0, 5860, 5845, 1, 0, 0, 0, 5860, 5846, 1, 0, 0, 0, 5860, 5855, 
	1, 0, 0, 0, 5861, 289, 1, 0, 0, 0, 5862, 5863, 5, 757, 0, 0, 5863, 5864, 
	3, 292, 146, 0, 5864, 291, 1, 0, 0, 0, 5865, 5866, 5, 858, 0, 0, 5866, 
	5867, 3, 820, 410, 0, 5867, 5868, 5, 1052, 0, 0, 5868, 5876, 3, 804, 402, 
	0, 5869, 5870, 5, 1069, 0, 0, 5870, 5871, 3, 820, 410, 0, 5871, 5872, 5, 
	1052, 0, 0, 5872, 5873, 3, 804, 402, 0, 5873, 5875, 1, 0, 0, 0, 5874, 5869, 
	1, 0, 0, 0, 5875, 5878, 1, 0, 0, 0, 5876, 5874, 1, 0, 0, 0, 5876, 5877, 
	1, 0, 0, 0, 5877, 293, 1, 0, 0, 0, 5878, 5876, 1, 0, 0, 0, 5879, 5880, 
	5, 937, 0, 0, 5880, 5881, 5, 858, 0, 0, 5881, 5886, 3, 820, 410, 0, 5882, 
	5883, 5, 1069, 0, 0, 5883, 5885, 3, 820, 410, 0, 5884, 5882, 1, 0, 0, 0, 
	5885, 5888, 1, 0, 0, 0, 5886, 5884, 1, 0, 0, 0, 5886, 5887, 1, 0, 0, 0, 
	5887, 295, 1, 0, 0, 0, 5888, 5886, 1, 0, 0, 0, 5889, 5928, 3, 298, 149, 
	0, 5890, 5928, 3, 300, 150, 0, 5891, 5928, 3, 302, 151, 0, 5892, 5928, 
	3, 304, 152, 0, 5893, 5928, 3, 306, 153, 0, 5894, 5928, 3, 318, 159, 0, 
	5895, 5928, 3, 320, 160, 0, 5896, 5928, 3, 330, 165, 0, 5897, 5928, 3, 
	332, 166, 0, 5898, 5928, 3, 340, 170, 0, 5899, 5928, 3, 342, 171, 0, 5900, 
	5928, 3, 344, 172, 0, 5901, 5928, 3, 350, 175, 0, 5902, 5928, 3, 352, 176, 
	0, 5903, 5928, 3, 358, 179, 0, 5904, 5928, 3, 360, 180, 0, 5905, 5928, 
	3, 368, 184, 0, 5906, 5928, 3, 370, 185, 0, 5907, 5928, 3, 372, 186, 0, 
	5908, 5928, 3, 374, 187, 0, 5909, 5928, 3, 376, 188, 0, 5910, 5928, 3, 
	378, 189, 0, 5911, 5928, 3, 380, 190, 0, 5912, 5928, 3, 384, 192, 0, 5913, 
	5928, 3, 386, 193, 0, 5914, 5928, 3, 388, 194, 0, 5915, 5928, 3, 398, 199, 
	0, 5916, 5928, 3, 400, 200, 0, 5917, 5928, 3, 402, 201, 0, 5918, 5928, 
	3, 442, 221, 0, 5919, 5928, 3, 450, 225, 0, 5920, 5928, 3, 462, 231, 0, 
	5921, 5928, 3, 494, 247, 0, 5922, 5928, 3, 496, 248, 0, 5923, 5928, 3, 
	506, 253, 0, 5924, 5928, 3, 512, 256, 0, 5925, 5928, 3, 516, 258, 0, 5926, 
	5928, 3, 518, 259, 0, 5927, 5889, 1, 0, 0, 0, 5927, 5890, 1, 0, 0, 0, 5927, 
	5891, 1, 0, 0, 0, 5927, 5892, 1, 0, 0, 0, 5927, 5893, 1, 0, 0, 0, 5927, 
	5894, 1, 0, 0, 0, 5927, 5895, 1, 0, 0, 0, 5927, 5896, 1, 0, 0, 0, 5927, 
	5897, 1, 0, 0, 0, 5927, 5898, 1, 0, 0, 0, 5927, 5899, 1, 0, 0, 0, 5927, 
	5900, 1, 0, 0, 0, 5927, 5901, 1, 0, 0, 0, 5927, 5902, 1, 0, 0, 0, 5927, 
	5903, 1, 0, 0, 0, 5927, 5904, 1, 0, 0, 0, 5927, 5905, 1, 0, 0, 0, 5927, 
	5906, 1, 0, 0, 0, 5927, 5907, 1, 0, 0, 0, 5927, 5908, 1, 0, 0, 0, 5927, 
	5909, 1, 0, 0, 0, 5927, 5910, 1, 0, 0, 0, 5927, 5911, 1, 0, 0, 0, 5927, 
	5912, 1, 0, 0, 0, 5927, 5913, 1, 0, 0, 0, 5927, 5914, 1, 0, 0, 0, 5927, 
	5915, 1, 0, 0, 0, 5927, 5916, 1, 0, 0, 0, 5927, 5917, 1, 0, 0, 0, 5927, 
	5918, 1, 0, 0, 0, 5927, 5919, 1, 0, 0, 0, 5927, 5920, 1, 0, 0, 0, 5927, 
	5921, 1, 0, 0, 0, 5927, 5922, 1, 0, 0, 0, 5927, 5923, 1, 0, 0, 0, 5927, 
	5924, 1, 0, 0, 0, 5927, 5925, 1, 0, 0, 0, 5927, 5926, 1, 0, 0, 0, 5928, 
	297, 1, 0, 0, 0, 5929, 5930, 5, 183, 0, 0, 5930, 5931, 5, 9, 0, 0, 5931, 
	5932, 3, 820, 410, 0, 5932, 5933, 5, 14, 0, 0, 5933, 5934, 5, 1052, 0, 
	0, 5934, 5935, 3, 820, 410, 0, 5935, 5936, 5, 15, 0, 0, 5936, 5937, 5, 
	1052, 0, 0, 5937, 5941, 3, 816, 408, 0, 5938, 5939, 5, 309, 0, 0, 5939, 
	5940, 5, 1052, 0, 0, 5940, 5942, 3, 820, 410, 0, 5941, 5938, 1, 0, 0, 0, 
	5941, 5942, 1, 0, 0, 0, 5942, 5946, 1, 0, 0, 0, 5943, 5944, 5, 404, 0, 
	0, 5944, 5945, 5, 1052, 0, 0, 5945, 5947, 3, 820, 410, 0, 5946, 5943, 1, 
	0, 0, 0, 5946, 5947, 1, 0, 0, 0, 5947, 5948, 1, 0, 0, 0, 5948, 5949, 5, 
	243, 0, 0, 5949, 5950, 5, 1052, 0, 0, 5950, 5954, 3, 816, 408, 0, 5951, 
	5952, 5, 472, 0, 0, 5952, 5953, 5, 1052, 0, 0, 5953, 5955, 3, 430, 215, 
	0, 5954, 5951, 1, 0, 0, 0, 5954, 5955, 1, 0, 0, 0, 5955, 5956, 1, 0, 0, 
	0, 5956, 5957, 5, 241, 0, 0, 5957, 5958, 5, 1052, 0, 0, 5958, 5962, 7, 
	36, 0, 0, 5959, 5960, 5, 650, 0, 0, 5960, 5961, 5, 1052, 0, 0, 5961, 5963, 
	3, 812, 406, 0, 5962, 5959, 1, 0, 0, 0, 5962, 5963, 1, 0, 0, 0, 5963, 5967, 
	1, 0, 0, 0, 5964, 5965, 5, 649, 0, 0, 5965, 5966, 5, 1052, 0, 0, 5966, 
	5968, 3, 814, 407, 0, 5967, 5964, 1, 0, 0, 0, 5967, 5968, 1, 0, 0, 0, 5968, 
	5970, 1, 0, 0, 0, 5969, 5971, 3, 618, 309, 0, 5970, 5969, 1, 0, 0, 0, 5970, 
	5971, 1, 0, 0, 0, 5971, 299, 1, 0, 0, 0, 5972, 5974, 5, 183, 0, 0, 5973, 
	5975, 3, 626, 313, 0, 5974, 5973, 1, 0, 0, 0, 5974, 5975, 1, 0, 0, 0, 5975, 
	5976, 1, 0, 0, 0, 5976, 5977, 5, 41, 0, 0, 5977, 5979, 5, 379, 0, 0, 5978, 
	5980, 3, 624, 312, 0, 5979, 5978, 1, 0, 0, 0, 5979, 5980, 1, 0, 0, 0, 5980, 
	5981, 1, 0, 0, 0, 5981, 5982, 3, 820, 410, 0, 5982, 5983, 5, 47, 0, 0, 
	5983, 5984, 5, 1052, 0, 0, 5984, 5985, 3, 820, 410, 0, 5985, 5986, 5, 43, 
	0, 0, 5986, 5987, 5, 1052, 0, 0, 5987, 5991, 3, 816, 408, 0, 5988, 5989, 
	5, 46, 0, 0, 5989, 5990, 5, 1052, 0, 0, 5990, 5992, 3, 816, 408, 0, 5991, 
	5988, 1, 0, 0, 0, 5991, 5992, 1, 0, 0, 0, 5992, 5993, 1, 0, 0, 0, 5993, 
	5994, 5, 42, 0, 0, 5994, 5995, 5, 1052, 0, 0, 5995, 5996, 5, 1063, 0, 0, 
	5996, 5997, 3, 816, 408, 0, 5997, 6004, 5, 1064, 0, 0, 5998, 5999, 5, 44, 
	0, 0, 5999, 6000, 5, 1052, 0, 0, 6000, 6001, 5, 1063, 0, 0, 6001, 6002, 
	3, 816, 408, 0, 6002, 6003, 5, 1064, 0, 0, 6003, 6005, 1, 0, 0, 0, 6004, 
	5998, 1, 0, 0, 0, 6004, 6005, 1, 0, 0, 0, 6005, 6006, 1, 0, 0, 0, 6006, 
	6007, 5, 252, 0, 0, 6007, 6008, 5, 1052, 0, 0, 6008, 6010, 3, 430, 215, 
	0, 6009, 6011, 3, 618, 309, 0, 6010, 6009, 1, 0, 0, 0, 6010, 6011, 1, 0, 
	0, 0, 6011, 6087, 1, 0, 0, 0, 6012, 6014, 5, 183, 0, 0, 6013, 6015, 3, 
	626, 313, 0, 6014, 6013, 1, 0, 0, 0, 6014, 6015, 1, 0, 0, 0, 6015, 6016, 
	1, 0, 0, 0, 6016, 6017, 5, 41, 0, 0, 6017, 6019, 5, 379, 0, 0, 6018, 6020, 
	3, 624, 312, 0, 6019, 6018, 1, 0, 0, 0, 6019, 6020, 1, 0, 0, 0, 6020, 6021, 
	1, 0, 0, 0, 6021, 6022, 3, 820, 410, 0, 6022, 6023, 5, 47, 0, 0, 6023, 
	6024, 5, 1052, 0, 0, 6024, 6025, 3, 820, 410, 0, 6025, 6026, 5, 86, 0, 
	0, 6026, 6027, 5, 1052, 0, 0, 6027, 6028, 3, 816, 408, 0, 6028, 6029, 5, 
	80, 0, 0, 6029, 6030, 5, 1052, 0, 0, 6030, 6034, 3, 816, 408, 0, 6031, 
	6032, 5, 46, 0, 0, 6032, 6033, 5, 1052, 0, 0, 6033, 6035, 3, 816, 408, 
	0, 6034, 6031, 1, 0, 0, 0, 6034, 6035, 1, 0, 0, 0, 6035, 6036, 1, 0, 0, 
	0, 6036, 6037, 5, 42, 0, 0, 6037, 6038, 5, 1052, 0, 0, 6038, 6039, 5, 1063, 
	0, 0, 6039, 6040, 3, 816, 408, 0, 6040, 6047, 5, 1064, 0, 0, 6041, 6042, 
	5, 44, 0, 0, 6042, 6043, 5, 1052, 0, 0, 6043, 6044, 5, 1063, 0, 0, 6044, 
	6045, 3, 816, 408, 0, 6045, 6046, 5, 1064, 0, 0, 6046, 6048, 1, 0, 0, 0, 
	6047, 6041, 1, 0, 0, 0, 6047, 6048, 1, 0, 0, 0, 6048, 6049, 1, 0, 0, 0, 
	6049, 6050, 5, 252, 0, 0, 6050, 6051, 5, 1052, 0, 0, 6051, 6053, 3, 430, 
	215, 0, 6052, 6054, 3, 618, 309, 0, 6053, 6052, 1, 0, 0, 0, 6053, 6054, 
	1, 0, 0, 0, 6054, 6087, 1, 0, 0, 0, 6055, 6056, 5, 183, 0, 0, 6056, 6057, 
	3, 626, 313, 0, 6057, 6058, 5, 41, 0, 0, 6058, 6059, 5, 379, 0, 0, 6059, 
	6060, 3, 624, 312, 0, 6060, 6061, 3, 820, 410, 0, 6061, 6062, 5, 47, 0, 
	0, 6062, 6063, 5, 1052, 0, 0, 6063, 6064, 3, 820, 410, 0, 6064, 6065, 5, 
	334, 0, 0, 6065, 6066, 5, 1052, 0, 0, 6066, 6067, 3, 816, 408, 0, 6067, 
	6068, 5, 42, 0, 0, 6068, 6069, 5, 1052, 0, 0, 6069, 6070, 5, 1063, 0, 0, 
	6070, 6071, 3, 816, 408, 0, 6071, 6078, 5, 1064, 0, 0, 6072, 6073, 5, 44, 
	0, 0, 6073, 6074, 5, 1052, 0, 0, 6074, 6075, 5, 1063, 0, 0, 6075, 6076, 
	3, 816, 408, 0, 6076, 6077, 5, 1064, 0, 0, 6077, 6079, 1, 0, 0, 0, 6078, 
	6072, 1, 0, 0, 0, 6078, 6079, 1, 0, 0, 0, 6079, 6080, 1, 0, 0, 0, 6080, 
	6081, 5, 252, 0, 0, 6081, 6082, 5, 1052, 0, 0, 6082, 6084, 3, 430, 215, 
	0, 6083, 6085, 3, 618, 309, 0, 6084, 6083, 1, 0, 0, 0, 6084, 6085, 1, 0, 
	0, 0, 6085, 6087, 1, 0, 0, 0, 6086, 5972, 1, 0, 0, 0, 6086, 6012, 1, 0, 
	0, 0, 6086, 6055, 1, 0, 0, 0, 6087, 301, 1, 0, 0, 0, 6088, 6090, 5, 183, 
	0, 0, 6089, 6091, 3, 626, 313, 0, 6090, 6089, 1, 0, 0, 0, 6090, 6091, 1, 
	0, 0, 0, 6091, 6092, 1, 0, 0, 0, 6092, 6094, 7, 37, 0, 0, 6093, 6095, 3, 
	624, 312, 0, 6094, 6093, 1, 0, 0, 0, 6094, 6095, 1, 0, 0, 0, 6095, 6096, 
	1, 0, 0, 0, 6096, 6097, 3, 820, 410, 0, 6097, 6098, 5, 143, 0, 0, 6098, 
	6114, 3, 830, 415, 0, 6099, 6100, 3, 310, 155, 0, 6100, 6110, 5, 1063, 
	0, 0, 6101, 6102, 5, 875, 0, 0, 6102, 6103, 5, 1049, 0, 0, 6103, 6111, 
	3, 816, 408, 0, 6104, 6105, 5, 522, 0, 0, 6105, 6106, 5, 1049, 0, 0, 6106, 
	6111, 3, 816, 408, 0, 6107, 6108, 5, 807, 0, 0, 6108, 6109, 5, 1049, 0, 
	0, 6109, 6111, 3, 820, 410, 0, 6110, 6101, 1, 0, 0, 0, 6110, 6104, 1, 0, 
	0, 0, 6110, 6107, 1, 0, 0, 0, 6111, 6112, 1, 0, 0, 0, 6112, 6113, 5, 1064, 
	0, 0, 6113, 6115, 1, 0, 0, 0, 6114, 6099, 1, 0, 0, 0, 6114, 6115, 1, 0, 
	0, 0, 6115, 6136, 1, 0, 0, 0, 6116, 6118, 5, 183, 0, 0, 6117, 6119, 3, 
	626, 313, 0, 6118, 6117, 1, 0, 0, 0, 6118, 6119, 1, 0, 0, 0, 6119, 6126, 
	1, 0, 0, 0, 6120, 6127, 5, 795, 0, 0, 6121, 6122, 5, 303, 0, 0, 6122, 6127, 
	5, 313, 0, 0, 6123, 6127, 5, 749, 0, 0, 6124, 6127, 5, 830, 0, 0, 6125, 
	6127, 5, 861, 0, 0, 6126, 6120, 1, 0, 0, 0, 6126, 6121, 1, 0, 0, 0, 6126, 
	6123, 1, 0, 0, 0, 6126, 6124, 1, 0, 0, 0, 6126, 6125, 1, 0, 0, 0, 6127, 
	6129, 1, 0, 0, 0, 6128, 6130, 3, 624, 312, 0, 6129, 6128, 1, 0, 0, 0, 6129, 
	6130, 1, 0, 0, 0, 6130, 6131, 1, 0, 0, 0, 6131, 6132, 3, 830, 415, 0, 6132, 
	6133, 5, 143, 0, 0, 6133, 6134, 3, 830, 415, 0, 6134, 6136, 1, 0, 0, 0, 
	6135, 6088, 1, 0, 0, 0, 6135, 6116, 1, 0, 0, 0, 6136, 303, 1, 0, 0, 0, 
	6137, 6138, 5, 183, 0, 0, 6138, 6140, 5, 165, 0, 0, 6139, 6141, 3, 624, 
	312, 0, 6140, 6139, 1, 0, 0, 0, 6140, 6141, 1, 0, 0, 0, 6141, 6142, 1, 
	0, 0, 0, 6142, 6161, 3, 820, 410, 0, 6143, 6144, 5, 155, 0, 0, 6144, 6145, 
	5, 1052, 0, 0, 6145, 6147, 3, 816, 408, 0, 6146, 6143, 1, 0, 0, 0, 6146, 
	6147, 1, 0, 0, 0, 6147, 6162, 1, 0, 0, 0, 6148, 6149, 5, 53, 0, 0, 6149, 
	6150, 5, 662, 0, 0, 6150, 6151, 5, 520, 0, 0, 6151, 6152, 3, 820, 410, 
	0, 6152, 6153, 5, 1059, 0, 0, 6153, 6154, 3, 820, 410, 0, 6154, 6155, 5, 
	1059, 0, 0, 6155, 6159, 3, 820, 410, 0, 6156, 6157, 5, 155, 0, 0, 6157, 
	6158, 5, 1052, 0, 0, 6158, 6160, 3, 816, 408, 0, 6159, 6156, 1, 0, 0, 0, 
	6159, 6160, 1, 0, 0, 0, 6160, 6162, 1, 0, 0, 0, 6161, 6146, 1, 0, 0, 0, 
	6161, 6148, 1, 0, 0, 0, 6162, 305, 1, 0, 0, 0, 6163, 6165, 5, 183, 0, 0, 
	6164, 6166, 3, 626, 313, 0, 6165, 6164, 1, 0, 0, 0, 6165, 6166, 1, 0, 0, 
	0, 6166, 6168, 1, 0, 0, 0, 6167, 6169, 5, 900, 0, 0, 6168, 6167, 1, 0, 
	0, 0, 6168, 6169, 1, 0, 0, 0, 6169, 6170, 1, 0, 0, 0, 6170, 6172, 5, 200, 
	0, 0, 6171, 6173, 3, 624, 312, 0, 6172, 6171, 1, 0, 0, 0, 6172, 6173, 1, 
	0, 0, 0, 6173, 6174, 1, 0, 0, 0, 6174, 6176, 3, 820, 410, 0, 6175, 6177, 
	3, 308, 154, 0, 6176, 6175, 1, 0, 0, 0, 6176, 6177, 1, 0, 0, 0, 6177, 6181, 
	1, 0, 0, 0, 6178, 6179, 5, 199, 0, 0, 6179, 6180, 5, 1052, 0, 0, 6180, 
	6182, 3, 832, 416, 0, 6181, 6178, 1, 0, 0, 0, 6181, 6182, 1, 0, 0, 0, 6182, 
	6186, 1, 0, 0, 0, 6183, 6184, 5, 449, 0, 0, 6184, 6185, 5, 1052, 0, 0, 
	6185, 6187, 3, 832, 416, 0, 6186, 6183, 1, 0, 0, 0, 6186, 6187, 1, 0, 0, 
	0, 6187, 6189, 1, 0, 0, 0, 6188, 6190, 3, 128, 64, 0, 6189, 6188, 1, 0, 
	0, 0, 6189, 6190, 1, 0, 0, 0, 6190, 6192, 1, 0, 0, 0, 6191, 6193, 3, 468, 
	234, 0, 6192, 6191, 1, 0, 0, 0, 6192, 6193, 1, 0, 0, 0, 6193, 6195, 1, 
	0, 0, 0, 6194, 6196, 3, 618, 309, 0, 6195, 6194, 1, 0, 0, 0, 6195, 6196, 
	1, 0, 0, 0, 6196, 307, 1, 0, 0, 0, 6197, 6198, 5, 143, 0, 0, 6198, 6214, 
	3, 820, 410, 0, 6199, 6200, 3, 310, 155, 0, 6200, 6210, 5, 1063, 0, 0, 
	6201, 6202, 5, 875, 0, 0, 6202, 6203, 5, 1049, 0, 0, 6203, 6211, 3, 816, 
	408, 0, 6204, 6205, 5, 522, 0, 0, 6205, 6206, 5, 1049, 0, 0, 6206, 6211, 
	3, 816, 408, 0, 6207, 6208, 5, 807, 0, 0, 6208, 6209, 5, 1049, 0, 0, 6209, 
	6211, 3, 820, 410, 0, 6210, 6201, 1, 0, 0, 0, 6210, 6204, 1, 0, 0, 0, 6210, 
	6207, 1, 0, 0, 0, 6211, 6212, 1, 0, 0, 0, 6212, 6213, 5, 1064, 0, 0, 6213, 
	6215, 1, 0, 0, 0, 6214, 6199, 1, 0, 0, 0, 6214, 6215, 1, 0, 0, 0, 6215, 
	309, 1, 0, 0, 0, 6216, 6217, 7, 38, 0, 0, 6217, 311, 1, 0, 0, 0, 6218, 
	6219, 3, 816, 408, 0, 6219, 6220, 5, 1052, 0, 0, 6220, 6221, 3, 816, 408, 
	0, 6221, 313, 1, 0, 0, 0, 6222, 6223, 7, 39, 0, 0, 6223, 315, 1, 0, 0, 
	0, 6224, 6225, 5, 159, 0, 0, 6225, 6226, 5, 1052, 0, 0, 6226, 6227, 3, 
	314, 157, 0, 6227, 317, 1, 0, 0, 0, 6228, 6230, 5, 183, 0, 0, 6229, 6231, 
	3, 626, 313, 0, 6230, 6229, 1, 0, 0, 0, 6230, 6231, 1, 0, 0, 0, 6231, 6233, 
	1, 0, 0, 0, 6232, 6234, 5, 744, 0, 0, 6233, 6232, 1, 0, 0, 0, 6233, 6234, 
	1, 0, 0, 0, 6234, 6235, 1, 0, 0, 0, 6235, 6236, 5, 280, 0, 0, 6236, 6237, 
	5, 319, 0, 0, 6237, 6238, 3, 830, 415, 0, 6238, 6250, 5, 1063, 0, 0, 6239, 
	6240, 3, 808, 404, 0, 6240, 6247, 3, 806, 403, 0, 6241, 6242, 5, 1069, 
	0, 0, 6242, 6243, 3, 808, 404, 0, 6243, 6244, 3, 806, 403, 0, 6244, 6246, 
	1, 0, 0, 0, 6245, 6241, 1, 0, 0, 0, 6246, 6249, 1, 0, 0, 0, 6247, 6245, 
	1, 0, 0, 0, 6247, 6248, 1, 0, 0, 0, 6248, 6251, 1, 0, 0, 0, 6249, 6247, 
	1, 0, 0, 0, 6250, 6239, 1, 0, 0, 0, 6250, 6251, 1, 0, 0, 0, 6251, 6252, 
	1, 0, 0, 0, 6252, 6253, 5, 1064, 0, 0, 6253, 6254, 5, 687, 0, 0, 6254, 
	6259, 3, 846, 423, 0, 6255, 6257, 5, 491, 0, 0, 6256, 6255, 1, 0, 0, 0, 
	6256, 6257, 1, 0, 0, 0, 6257, 6258, 1, 0, 0, 0, 6258, 6260, 5, 500, 0, 
	0, 6259, 6256, 1, 0, 0, 0, 6259, 6260, 1, 0, 0, 0, 6260, 6273, 1, 0, 0, 
	0, 6261, 6262, 5, 108, 0, 0, 6262, 6263, 5, 531, 0, 0, 6263, 6264, 5, 500, 
	0, 0, 6264, 6274, 5, 374, 0, 0, 6265, 6266, 5, 687, 0, 0, 6266, 6267, 5, 
	500, 0, 0, 6267, 6268, 5, 531, 0, 0, 6268, 6269, 5, 500, 0, 0, 6269, 6272, 
	5, 374, 0, 0, 6270, 6272, 5, 832, 0, 0, 6271, 6265, 1, 0, 0, 0, 6271, 6270, 
	1, 0, 0, 0, 6272, 6274, 1, 0, 0, 0, 6273, 6261, 1, 0, 0, 0, 6273, 6271, 
	1, 0, 0, 0, 6273, 6274, 1, 0, 0, 0, 6274, 6276, 1, 0, 0, 0, 6275, 6277, 
	7, 40, 0, 0, 6276, 6275, 1, 0, 0, 0, 6276, 6277, 1, 0, 0, 0, 6277, 6279, 
	1, 0, 0, 0, 6278, 6280, 3, 618, 309, 0, 6279, 6278, 1, 0, 0, 0, 6279, 6280, 
	1, 0, 0, 0, 6280, 6281, 1, 0, 0, 0, 6281, 6282, 5, 45, 0, 0, 6282, 6283, 
	5, 1052, 0, 0, 6283, 6297, 3, 820, 410, 0, 6284, 6285, 5, 345, 0, 0, 6285, 
	6286, 5, 1052, 0, 0, 6286, 6287, 5, 1063, 0, 0, 6287, 6292, 3, 312, 156, 
	0, 6288, 6289, 5, 1069, 0, 0, 6289, 6291, 3, 312, 156, 0, 6290, 6288, 1, 
	0, 0, 0, 6291, 6294, 1, 0, 0, 0, 6292, 6290, 1, 0, 0, 0, 6292, 6293, 1, 
	0, 0, 0, 6293, 6295, 1, 0, 0, 0, 6294, 6292, 1, 0, 0, 0, 6295, 6296, 5, 
	1064, 0, 0, 6296, 6298, 1, 0, 0, 0, 6297, 6284, 1, 0, 0, 0, 6297, 6298, 
	1, 0, 0, 0, 6298, 6312, 1, 0, 0, 0, 6299, 6300, 5, 172, 0, 0, 6300, 6301, 
	5, 1052, 0, 0, 6301, 6302, 5, 1063, 0, 0, 6302, 6307, 3, 820, 410, 0, 6303, 
	6304, 5, 1069, 0, 0, 6304, 6306, 3, 820, 410, 0, 6305, 6303, 1, 0, 0, 0, 
	6306, 6309, 1, 0, 0, 0, 6307, 6305, 1, 0, 0, 0, 6307, 6308, 1, 0, 0, 0, 
	6308, 6310, 1, 0, 0, 0, 6309, 6307, 1, 0, 0, 0, 6310, 6311, 5, 1064, 0, 
	0, 6311, 6313, 1, 0, 0, 0, 6312, 6299, 1, 0, 0, 0, 6312, 6313, 1, 0, 0, 
	0, 6313, 6317, 1, 0, 0, 0, 6314, 6315, 5, 446, 0, 0, 6315, 6316, 5, 1052, 
	0, 0, 6316, 6318, 3, 832, 416, 0, 6317, 6314, 1, 0, 0, 0, 6317, 6318, 1, 
	0, 0, 0, 6318, 6320, 1, 0, 0, 0, 6319, 6321, 3, 316, 158, 0, 6320, 6319, 
	1, 0, 0, 0, 6320, 6321, 1, 0, 0, 0, 6321, 6325, 1, 0, 0, 0, 6322, 6323, 
	5, 665, 0, 0, 6323, 6324, 5, 1052, 0, 0, 6324, 6326, 3, 820, 410, 0, 6325, 
	6322, 1, 0, 0, 0, 6325, 6326, 1, 0, 0, 0, 6326, 6330, 1, 0, 0, 0, 6327, 
	6328, 5, 673, 0, 0, 6328, 6329, 5, 1052, 0, 0, 6329, 6331, 3, 820, 410, 
	0, 6330, 6327, 1, 0, 0, 0, 6330, 6331, 1, 0, 0, 0, 6331, 6332, 1, 0, 0, 
	0, 6332, 6333, 5, 53, 0, 0, 6333, 6334, 3, 816, 408, 0, 6334, 319, 1, 0, 
	0, 0, 6335, 6337, 5, 183, 0, 0, 6336, 6338, 3, 626, 313, 0, 6337, 6336, 
	1, 0, 0, 0, 6337, 6338, 1, 0, 0, 0, 6338, 6339, 1, 0, 0, 0, 6339, 6340, 
	5, 280, 0, 0, 6340, 6342, 5, 851, 0, 0, 6341, 6343, 3, 624, 312, 0, 6342, 
	6341, 1, 0, 0, 0, 6342, 6343, 1, 0, 0, 0, 6343, 6344, 1, 0, 0, 0, 6344, 
	6345, 3, 830, 415, 0, 6345, 6346, 5, 1063, 0, 0, 6346, 6347, 3, 324, 162, 
	0, 6347, 6349, 5, 1064, 0, 0, 6348, 6350, 3, 448, 224, 0, 6349, 6348, 1, 
	0, 0, 0, 6349, 6350, 1, 0, 0, 0, 6350, 6352, 1, 0, 0, 0, 6351, 6353, 3, 
	946, 473, 0, 6352, 6351, 1, 0, 0, 0, 6352, 6353, 1, 0, 0, 0, 6353, 6355, 
	1, 0, 0, 0, 6354, 6356, 5, 982, 0, 0, 6355, 6354, 1, 0, 0, 0, 6355, 6356, 
	1, 0, 0, 0, 6356, 6357, 1, 0, 0, 0, 6357, 6358, 5, 422, 0, 0, 6358, 6359, 
	5, 1052, 0, 0, 6359, 6363, 3, 100, 50, 0, 6360, 6361, 5, 648, 0, 0, 6361, 
	6362, 5, 1052, 0, 0, 6362, 6364, 3, 430, 215, 0, 6363, 6360, 1, 0, 0, 0, 
	6363, 6364, 1, 0, 0, 0, 6364, 6368, 1, 0, 0, 0, 6365, 6366, 5, 63, 0, 0, 
	6366, 6367, 5, 1052, 0, 0, 6367, 6369, 3, 430, 215, 0, 6368, 6365, 1, 0, 
	0, 0, 6368, 6369, 1, 0, 0, 0, 6369, 6371, 1, 0, 0, 0, 6370, 6372, 3, 824, 
	412, 0, 6371, 6370, 1, 0, 0, 0, 6371, 6372, 1, 0, 0, 0, 6372, 6373, 1, 
	0, 0, 0, 6373, 6377, 3, 44, 22, 0, 6374, 6375, 5, 76, 0, 0, 6375, 6376, 
	5, 1052, 0, 0, 6376, 6378, 3, 816, 408, 0, 6377, 6374, 1, 0, 0, 0, 6377, 
	6378, 1, 0, 0, 0, 6378, 6380, 1, 0, 0, 0, 6379, 6381, 3, 452, 226, 0, 6380, 
	6379, 1, 0, 0, 0, 6380, 6381, 1, 0, 0, 0, 6381, 6383, 1, 0, 0, 0, 6382, 
	6384, 3, 470, 235, 0, 6383, 6382, 1, 0, 0, 0, 6383, 6384, 1, 0, 0, 0, 6384, 
	6386, 1, 0, 0, 0, 6385, 6387, 3, 468, 234, 0, 6386, 6385, 1, 0, 0, 0, 6386, 
	6387, 1, 0, 0, 0, 6387, 6389, 1, 0, 0, 0, 6388, 6390, 3, 618, 309, 0, 6389, 
	6388, 1, 0, 0, 0, 6389, 6390, 1, 0, 0, 0, 6390, 6479, 1, 0, 0, 0, 6391, 
	6393, 5, 183, 0, 0, 6392, 6394, 3, 626, 313, 0, 6393, 6392, 1, 0, 0, 0, 
	6393, 6394, 1, 0, 0, 0, 6394, 6395, 1, 0, 0, 0, 6395, 6396, 5, 280, 0, 
	0, 6396, 6398, 5, 851, 0, 0, 6397, 6399, 3, 624, 312, 0, 6398, 6397, 1, 
	0, 0, 0, 6398, 6399, 1, 0, 0, 0, 6399, 6400, 1, 0, 0, 0, 6400, 6401, 3, 
	830, 415, 0, 6401, 6402, 5, 1063, 0, 0, 6402, 6403, 3, 324, 162, 0, 6403, 
	6405, 5, 1064, 0, 0, 6404, 6406, 3, 448, 224, 0, 6405, 6404, 1, 0, 0, 0, 
	6405, 6406, 1, 0, 0, 0, 6406, 6408, 1, 0, 0, 0, 6407, 6409, 3, 946, 473, 
	0, 6408, 6407, 1, 0, 0, 0, 6408, 6409, 1, 0, 0, 0, 6409, 6411, 1, 0, 0, 
	0, 6410, 6412, 5, 982, 0, 0, 6411, 6410, 1, 0, 0, 0, 6411, 6412, 1, 0, 
	0, 0, 6412, 6413, 1, 0, 0, 0, 6413, 6414, 5, 422, 0, 0, 6414, 6415, 5, 
	1052, 0, 0, 6415, 6416, 3, 100, 50, 0, 6416, 6417, 5, 560, 0, 0, 6417, 
	6418, 5, 1052, 0, 0, 6418, 6419, 5, 950, 0, 0, 6419, 6421, 3, 44, 22, 0, 
	6420, 6422, 3, 452, 226, 0, 6421, 6420, 1, 0, 0, 0, 6421, 6422, 1, 0, 0, 
	0, 6422, 6424, 1, 0, 0, 0, 6423, 6425, 3, 470, 235, 0, 6424, 6423, 1, 0, 
	0, 0, 6424, 6425, 1, 0, 0, 0, 6425, 6427, 1, 0, 0, 0, 6426, 6428, 3, 468, 
	234, 0, 6427, 6426, 1, 0, 0, 0, 6427, 6428, 1, 0, 0, 0, 6428, 6430, 1, 
	0, 0, 0, 6429, 6431, 3, 618, 309, 0, 6430, 6429, 1, 0, 0, 0, 6430, 6431, 
	1, 0, 0, 0, 6431, 6479, 1, 0, 0, 0, 6432, 6434, 5, 183, 0, 0, 6433, 6435, 
	3, 626, 313, 0, 6434, 6433, 1, 0, 0, 0, 6434, 6435, 1, 0, 0, 0, 6435, 6436, 
	1, 0, 0, 0, 6436, 6437, 5, 280, 0, 0, 6437, 6439, 5, 851, 0, 0, 6438, 6440, 
	3, 624, 312, 0, 6439, 6438, 1, 0, 0, 0, 6439, 6440, 1, 0, 0, 0, 6440, 6441, 
	1, 0, 0, 0, 6441, 6442, 3, 830, 415, 0, 6442, 6443, 5, 1063, 0, 0, 6443, 
	6444, 3, 324, 162, 0, 6444, 6446, 5, 1064, 0, 0, 6445, 6447, 3, 448, 224, 
	0, 6446, 6445, 1, 0, 0, 0, 6446, 6447, 1, 0, 0, 0, 6447, 6449, 1, 0, 0, 
	0, 6448, 6450, 3, 946, 473, 0, 6449, 6448, 1, 0, 0, 0, 6449, 6450, 1, 0, 
	0, 0, 6450, 6452, 1, 0, 0, 0, 6451, 6453, 5, 982, 0, 0, 6452, 6451, 1, 
	0, 0, 0, 6452, 6453, 1, 0, 0, 0, 6453, 6454, 1, 0, 0, 0, 6454, 6455, 5, 
	422, 0, 0, 6455, 6456, 5, 1052, 0, 0, 6456, 6457, 3, 100, 50, 0, 6457, 
	6458, 5, 560, 0, 0, 6458, 6459, 5, 1052, 0, 0, 6459, 6460, 5, 950, 0, 0, 
	6460, 6464, 3, 44, 22, 0, 6461, 6462, 5, 852, 0, 0, 6462, 6463, 5, 1052, 
	0, 0, 6463, 6465, 5, 224, 0, 0, 6464, 6461, 1, 0, 0, 0, 6464, 6465, 1, 
	0, 0, 0, 6465, 6467, 1, 0, 0, 0, 6466, 6468, 3, 452, 226, 0, 6467, 6466, 
	1, 0, 0, 0, 6467, 6468, 1, 0, 0, 0, 6468, 6470, 1, 0, 0, 0, 6469, 6471, 
	3, 470, 235, 0, 6470, 6469, 1, 0, 0, 0, 6470, 6471, 1, 0, 0, 0, 6471, 6473, 
	1, 0, 0, 0, 6472, 6474, 3, 468, 234, 0, 6473, 6472, 1, 0, 0, 0, 6473, 6474, 
	1, 0, 0, 0, 6474, 6476, 1, 0, 0, 0, 6475, 6477, 3, 618, 309, 0, 6476, 6475, 
	1, 0, 0, 0, 6476, 6477, 1, 0, 0, 0, 6477, 6479, 1, 0, 0, 0, 6478, 6335, 
	1, 0, 0, 0, 6478, 6391, 1, 0, 0, 0, 6478, 6432, 1, 0, 0, 0, 6479, 321, 
	1, 0, 0, 0, 6480, 6481, 3, 826, 413, 0, 6481, 6482, 3, 846, 423, 0, 6482, 
	6485, 5, 53, 0, 0, 6483, 6486, 3, 836, 418, 0, 6484, 6486, 3, 820, 410, 
	0, 6485, 6483, 1, 0, 0, 0, 6485, 6484, 1, 0, 0, 0, 6486, 6488, 1, 0, 0, 
	0, 6487, 6489, 3, 240, 120, 0, 6488, 6487, 1, 0, 0, 0, 6488, 6489, 1, 0, 
	0, 0, 6489, 323, 1, 0, 0, 0, 6490, 6495, 3, 322, 161, 0, 6491, 6492, 5, 
	1069, 0, 0, 6492, 6494, 3, 322, 161, 0, 6493, 6491, 1, 0, 0, 0, 6494, 6497, 
	1, 0, 0, 0, 6495, 6493, 1, 0, 0, 0, 6495, 6496, 1, 0, 0, 0, 6496, 325, 
	1, 0, 0, 0, 6497, 6495, 1, 0, 0, 0, 6498, 6499, 3, 820, 410, 0, 6499, 6500, 
	5, 1059, 0, 0, 6500, 6501, 3, 820, 410, 0, 6501, 327, 1, 0, 0, 0, 6502, 
	6503, 5, 745, 0, 0, 6503, 6507, 5, 380, 0, 0, 6504, 6505, 5, 41, 0, 0, 
	6505, 6507, 5, 380, 0, 0, 6506, 6502, 1, 0, 0, 0, 6506, 6504, 1, 0, 0, 
	0, 6507, 329, 1, 0, 0, 0, 6508, 6509, 5, 183, 0, 0, 6509, 6510, 5, 297, 
	0, 0, 6510, 6512, 5, 338, 0, 0, 6511, 6513, 3, 624, 312, 0, 6512, 6511, 
	1, 0, 0, 0, 6512, 6513, 1, 0, 0, 0, 6513, 6514, 1, 0, 0, 0, 6514, 6515, 
	3, 820, 410, 0, 6515, 6516, 5, 518, 0, 0, 6516, 6517, 5, 1052, 0, 0, 6517, 
	6522, 3, 800, 400, 0, 6518, 6519, 5, 1069, 0, 0, 6519, 6521, 3, 800, 400, 
	0, 6520, 6518, 1, 0, 0, 0, 6521, 6524, 1, 0, 0, 0, 6522, 6520, 1, 0, 0, 
	0, 6522, 6523, 1, 0, 0, 0, 6523, 6535, 1, 0, 0, 0, 6524, 6522, 1, 0, 0, 
	0, 6525, 6526, 5, 30, 0, 0, 6526, 6527, 5, 1052, 0, 0, 6527, 6532, 3, 820, 
	410, 0, 6528, 6529, 5, 1069, 0, 0, 6529, 6531, 3, 820, 410, 0, 6530, 6528, 
	1, 0, 0, 0, 6531, 6534, 1, 0, 0, 0, 6532, 6530, 1, 0, 0, 0, 6532, 6533, 
	1, 0, 0, 0, 6533, 6536, 1, 0, 0, 0, 6534, 6532, 1, 0, 0, 0, 6535, 6525, 
	1, 0, 0, 0, 6535, 6536, 1, 0, 0, 0, 6536, 6547, 1, 0, 0, 0, 6537, 6538, 
	5, 33, 0, 0, 6538, 6539, 5, 1052, 0, 0, 6539, 6544, 3, 820, 410, 0, 6540, 
	6541, 5, 1069, 0, 0, 6541, 6543, 3, 820, 410, 0, 6542, 6540, 1, 0, 0, 0, 
	6543, 6546, 1, 0, 0, 0, 6544, 6542, 1, 0, 0, 0, 6544, 6545, 1, 0, 0, 0, 
	6545, 6548, 1, 0, 0, 0, 6546, 6544, 1, 0, 0, 0, 6547, 6537, 1, 0, 0, 0, 
	6547, 6548, 1, 0, 0, 0, 6548, 6559, 1, 0, 0, 0, 6549, 6550, 5, 31, 0, 0, 
	6550, 6551, 5, 1052, 0, 0, 6551, 6556, 3, 328, 164, 0, 6552, 6553, 5, 1069, 
	0, 0, 6553, 6555, 3, 328, 164, 0, 6554, 6552, 1, 0, 0, 0, 6555, 6558, 1, 
	0, 0, 0, 6556, 6554, 1, 0, 0, 0, 6556, 6557, 1, 0, 0, 0, 6557, 6560, 1, 
	0, 0, 0, 6558, 6556, 1, 0, 0, 0, 6559, 6549, 1, 0, 0, 0, 6559, 6560, 1, 
	0, 0, 0, 6560, 6561, 1, 0, 0, 0, 6561, 6562, 5, 29, 0, 0, 6562, 6563, 5, 
	1052, 0, 0, 6563, 6568, 3, 326, 163, 0, 6564, 6565, 5, 1069, 0, 0, 6565, 
	6567, 3, 326, 163, 0, 6566, 6564, 1, 0, 0, 0, 6567, 6570, 1, 0, 0, 0, 6568, 
	6566, 1, 0, 0, 0, 6568, 6569, 1, 0, 0, 0, 6569, 6574, 1, 0, 0, 0, 6570, 
	6568, 1, 0, 0, 0, 6571, 6572, 5, 353, 0, 0, 6572, 6573, 5, 241, 0, 0, 6573, 
	6575, 5, 125, 0, 0, 6574, 6571, 1, 0, 0, 0, 6574, 6575, 1, 0, 0, 0, 6575, 
	6579, 1, 0, 0, 0, 6576, 6577, 5, 664, 0, 0, 6577, 6578, 5, 1052, 0, 0, 
	6578, 6580, 3, 816, 408, 0, 6579, 6576, 1, 0, 0, 0, 6579, 6580, 1, 0, 0, 
	0, 6580, 6598, 1, 0, 0, 0, 6581, 6582, 5, 183, 0, 0, 6582, 6583, 5, 297, 
	0, 0, 6583, 6585, 5, 338, 0, 0, 6584, 6586, 3, 624, 312, 0, 6585, 6584, 
	1, 0, 0, 0, 6585, 6586, 1, 0, 0, 0, 6586, 6587, 1, 0, 0, 0, 6587, 6588, 
	3, 820, 410, 0, 6588, 6589, 5, 53, 0, 0, 6589, 6590, 5, 662, 0, 0, 6590, 
	6591, 5, 520, 0, 0, 6591, 6592, 3, 820, 410, 0, 6592, 6593, 5, 1059, 0, 
	0, 6593, 6594, 3, 820, 410, 0, 6594, 6595, 5, 1059, 0, 0, 6595, 6596, 3, 
	820, 410, 0, 6596, 6598, 1, 0, 0, 0, 6597, 6508, 1, 0, 0, 0, 6597, 6581, 
	1, 0, 0, 0, 6598, 331, 1, 0, 0, 0, 6599, 6601, 5, 183, 0, 0, 6600, 6602, 
	3, 626, 313, 0, 6601, 6600, 1, 0, 0, 0, 6601, 6602, 1, 0, 0, 0, 6602, 6603, 
	1, 0, 0, 0, 6603, 6604, 5, 303, 0, 0, 6604, 6606, 5, 313, 0, 0, 6605, 6607, 
	3, 624, 312, 0, 6606, 6605, 1, 0, 0, 0, 6606, 6607, 1, 0, 0, 0, 6607, 6608, 
	1, 0, 0, 0, 6608, 6609, 3, 830, 415, 0, 6609, 6610, 5, 917, 0, 0, 6610, 
	6611, 5, 1052, 0, 0, 6611, 6613, 7, 3, 0, 0, 6612, 6614, 3, 406, 203, 0, 
	6613, 6612, 1, 0, 0, 0, 6613, 6614, 1, 0, 0, 0, 6614, 6616, 1, 0, 0, 0, 
	6615, 6617, 3, 618, 309, 0, 6616, 6615, 1, 0, 0, 0, 6616, 6617, 1, 0, 0, 
	0, 6617, 333, 1, 0, 0, 0, 6618, 6619, 3, 808, 404, 0, 6619, 6620, 3, 806, 
	403, 0, 6620, 335, 1, 0, 0, 0, 6621, 6622, 3, 826, 413, 0, 6622, 6623, 
	3, 846, 423, 0, 6623, 337, 1, 0, 0, 0, 6624, 6627, 3, 816, 408, 0, 6625, 
	6627, 5, 1042, 0, 0, 6626, 6624, 1, 0, 0, 0, 6626, 6625, 1, 0, 0, 0, 6627, 
	339, 1, 0, 0, 0, 6628, 6630, 5, 183, 0, 0, 6629, 6631, 3, 626, 313, 0, 
	6630, 6629, 1, 0, 0, 0, 6630, 6631, 1, 0, 0, 0, 6631, 6633, 1, 0, 0, 0, 
	6632, 6634, 5, 744, 0, 0, 6633, 6632, 1, 0, 0, 0, 6633, 6634, 1, 0, 0, 
	0, 6634, 6635, 1, 0, 0, 0, 6635, 6636, 5, 319, 0, 0, 6636, 6637, 3, 830, 
	415, 0, 6637, 6646, 5, 1063, 0, 0, 6638, 6643, 3, 334, 167, 0, 6639, 6640, 
	5, 1069, 0, 0, 6640, 6642, 3, 334, 167, 0, 6641, 6639, 1, 0, 0, 0, 6642, 
	6645, 1, 0, 0, 0, 6643, 6641, 1, 0, 0, 0, 6643, 6644, 1, 0, 0, 0, 6644, 
	6647, 1, 0, 0, 0, 6645, 6643, 1, 0, 0, 0, 6646, 6638, 1, 0, 0, 0, 6646, 
	6647, 1, 0, 0, 0, 6647, 6648, 1, 0, 0, 0, 6648, 6649, 5, 1064, 0, 0, 6649, 
	6664, 5, 687, 0, 0, 6650, 6665, 3, 846, 423, 0, 6651, 6652, 5, 851, 0, 
	0, 6652, 6661, 5, 1063, 0, 0, 6653, 6658, 3, 336, 168, 0, 6654, 6655, 5, 
	1069, 0, 0, 6655, 6657, 3, 336, 168, 0, 6656, 6654, 1, 0, 0, 0, 6657, 6660, 
	1, 0, 0, 0, 6658, 6656, 1, 0, 0, 0, 6658, 6659, 1, 0, 0, 0, 6659, 6662, 
	1, 0, 0, 0, 6660, 6658, 1, 0, 0, 0, 6661, 6653, 1, 0, 0, 0, 6661, 6662, 
	1, 0, 0, 0, 6662, 6663, 1, 0, 0, 0, 6663, 6665, 5, 1064, 0, 0, 6664, 6650, 
	1, 0, 0, 0, 6664, 6651, 1, 0, 0, 0, 6665, 6670, 1, 0, 0, 0, 6666, 6668, 
	5, 491, 0, 0, 6667, 6666, 1, 0, 0, 0, 6667, 6668, 1, 0, 0, 0, 6668, 6669, 
	1, 0, 0, 0, 6669, 6671, 5, 500, 0, 0, 6670, 6667, 1, 0, 0, 0, 6670, 6671, 
	1, 0, 0, 0, 6671, 6682, 1, 0, 0, 0, 6672, 6673, 5, 108, 0, 0, 6673, 6674, 
	5, 531, 0, 0, 6674, 6675, 5, 500, 0, 0, 6675, 6683, 5, 374, 0, 0, 6676, 
	6677, 5, 687, 0, 0, 6677, 6678, 5, 500, 0, 0, 6678, 6679, 5, 531, 0, 0, 
	6679, 6680, 5, 500, 0, 0, 6680, 6683, 5, 374, 0, 0, 6681, 6683, 5, 832, 
	0, 0, 6682, 6672, 1, 0, 0, 0, 6682, 6676, 1, 0, 0, 0, 6682, 6681, 1, 0, 
	0, 0, 6682, 6683, 1, 0, 0, 0, 6683, 6685, 1, 0, 0, 0, 6684, 6686, 7, 40, 
	0, 0, 6685, 6684, 1, 0, 0, 0, 6685, 6686, 1, 0, 0, 0, 6686, 6688, 1, 0, 
	0, 0, 6687, 6689, 3, 618, 309, 0, 6688, 6687, 1, 0, 0, 0, 6688, 6689, 1, 
	0, 0, 0, 6689, 6690, 1, 0, 0, 0, 6690, 6691, 5, 53, 0, 0, 6691, 6692, 3, 
	338, 169, 0, 6692, 341, 1, 0, 0, 0, 6693, 6694, 5, 183, 0, 0, 6694, 6695, 
	5, 434, 0, 0, 6695, 6696, 5, 9, 0, 0, 6696, 6697, 3, 820, 410, 0, 6697, 
	6698, 5, 14, 0, 0, 6698, 6699, 5, 1052, 0, 0, 6699, 6700, 3, 820, 410, 
	0, 6700, 6701, 5, 1069, 0, 0, 6701, 6702, 5, 15, 0, 0, 6702, 6703, 5, 1052, 
	0, 0, 6703, 6704, 3, 816, 408, 0, 6704, 6705, 5, 1069, 0, 0, 6705, 6706, 
	5, 917, 0, 0, 6706, 6707, 5, 1052, 0, 0, 6707, 6712, 5, 631, 0, 0, 6708, 
	6709, 5, 1069, 0, 0, 6709, 6710, 5, 155, 0, 0, 6710, 6711, 5, 1052, 0, 
	0, 6711, 6713, 3, 816, 408, 0, 6712, 6708, 1, 0, 0, 0, 6712, 6713, 1, 0, 
	0, 0, 6713, 343, 1, 0, 0, 0, 6714, 6716, 5, 183, 0, 0, 6715, 6717, 3, 626, 
	313, 0, 6716, 6715, 1, 0, 0, 0, 6716, 6717, 1, 0, 0, 0, 6717, 6718, 1, 
	0, 0, 0, 6718, 6719, 5, 437, 0, 0, 6719, 6721, 5, 583, 0, 0, 6720, 6722, 
	3, 624, 312, 0, 6721, 6720, 1, 0, 0, 0, 6721, 6722, 1, 0, 0, 0, 6722, 6723, 
	1, 0, 0, 0, 6723, 6724, 3, 830, 415, 0, 6724, 6725, 5, 53, 0, 0, 6725, 
	6726, 5, 1063, 0, 0, 6726, 6727, 3, 808, 404, 0, 6727, 6732, 3, 806, 403, 
	0, 6728, 6729, 5, 1069, 0, 0, 6729, 6730, 3, 808, 404, 0, 6730, 6731, 3, 
	806, 403, 0, 6731, 6733, 1, 0, 0, 0, 6732, 6728, 1, 0, 0, 0, 6732, 6733, 
	1, 0, 0, 0, 6733, 6734, 1, 0, 0, 0, 6734, 6735, 5, 1064, 0, 0, 6735, 6736, 
	5, 687, 0, 0, 6736, 6737, 3, 806, 403, 0, 6737, 6738, 5, 1048, 0, 0, 6738, 
	6740, 3, 836, 418, 0, 6739, 6741, 3, 618, 309, 0, 6740, 6739, 1, 0, 0, 
	0, 6740, 6741, 1, 0, 0, 0, 6741, 345, 1, 0, 0, 0, 6742, 6743, 3, 820, 410, 
	0, 6743, 6744, 5, 1052, 0, 0, 6744, 6745, 3, 816, 408, 0, 6745, 347, 1, 
	0, 0, 0, 6746, 6747, 5, 1063, 0, 0, 6747, 6748, 3, 828, 414, 0, 6748, 6749, 
	5, 1064, 0, 0, 6749, 349, 1, 0, 0, 0, 6750, 6752, 5, 183, 0, 0, 6751, 6753, 
	3, 626, 313, 0, 6752, 6751, 1, 0, 0, 0, 6752, 6753, 1, 0, 0, 0, 6753, 6755, 
	1, 0, 0, 0, 6754, 6756, 5, 744, 0, 0, 6755, 6754, 1, 0, 0, 0, 6755, 6756, 
	1, 0, 0, 0, 6756, 6757, 1, 0, 0, 0, 6757, 6758, 5, 445, 0, 0, 6758, 6760, 
	5, 967, 0, 0, 6759, 6761, 3, 624, 312, 0, 6760, 6759, 1, 0, 0, 0, 6760, 
	6761, 1, 0, 0, 0, 6761, 6762, 1, 0, 0, 0, 6762, 6764, 3, 830, 415, 0, 6763, 
	6765, 3, 452, 226, 0, 6764, 6763, 1, 0, 0, 0, 6764, 6765, 1, 0, 0, 0, 6765, 
	6767, 1, 0, 0, 0, 6766, 6768, 3, 348, 174, 0, 6767, 6766, 1, 0, 0, 0, 6767, 
	6768, 1, 0, 0, 0, 6768, 6770, 1, 0, 0, 0, 6769, 6771, 3, 470, 235, 0, 6770, 
	6769, 1, 0, 0, 0, 6770, 6771, 1, 0, 0, 0, 6771, 6773, 1, 0, 0, 0, 6772, 
	6774, 3, 468, 234, 0, 6773, 6772, 1, 0, 0, 0, 6773, 6774, 1, 0, 0, 0, 6774, 
	6776, 1, 0, 0, 0, 6775, 6777, 3, 618, 309, 0, 6776, 6775, 1, 0, 0, 0, 6776, 
	6777, 1, 0, 0, 0, 6777, 6779, 1, 0, 0, 0, 6778, 6780, 3, 472, 236, 0, 6779, 
	6778, 1, 0, 0, 0, 6779, 6780, 1, 0, 0, 0, 6780, 6781, 1, 0, 0, 0, 6781, 
	6782, 5, 53, 0, 0, 6782, 6783, 3, 882, 441, 0, 6783, 351, 1, 0, 0, 0, 6784, 
	6786, 5, 183, 0, 0, 6785, 6787, 3, 626, 313, 0, 6786, 6785, 1, 0, 0, 0, 
	6786, 6787, 1, 0, 0, 0, 6787, 6788, 1, 0, 0, 0, 6788, 6789, 5, 477, 0, 
	0, 6789, 6790, 5, 583, 0, 0, 6790, 6791, 3, 820, 410, 0, 6791, 6792, 5, 
	32, 0, 0, 6792, 6793, 5, 1052, 0, 0, 6793, 6795, 5, 1063, 0, 0, 6794, 6796, 
	3, 818, 409, 0, 6795, 6794, 1, 0, 0, 0, 6795, 6796, 1, 0, 0, 0, 6796, 6797, 
	1, 0, 0, 0, 6797, 6805, 5, 1064, 0, 0, 6798, 6799, 5, 99, 0, 0, 6799, 6800, 
	5, 1052, 0, 0, 6800, 6802, 5, 1063, 0, 0, 6801, 6803, 3, 818, 409, 0, 6802, 
	6801, 1, 0, 0, 0, 6802, 6803, 1, 0, 0, 0, 6803, 6804, 1, 0, 0, 0, 6804, 
	6806, 5, 1064, 0, 0, 6805, 6798, 1, 0, 0, 0, 6805, 6806, 1, 0, 0, 0, 6806, 
	6808, 1, 0, 0, 0, 6807, 6809, 3, 618, 309, 0, 6808, 6807, 1, 0, 0, 0, 6808, 
	6809, 1, 0, 0, 0, 6809, 353, 1, 0, 0, 0, 6810, 6811, 5, 494, 0, 0, 6811, 
	6812, 5, 1052, 0, 0, 6812, 6813, 5, 322, 0, 0, 6813, 6814, 5, 323, 0, 0, 
	6814, 6815, 5, 1052, 0, 0, 6815, 6827, 3, 816, 408, 0, 6816, 6817, 5, 494, 
	0, 0, 6817, 6818, 5, 1052, 0, 0, 6818, 6819, 5, 81, 0, 0, 6819, 6820, 5, 
	85, 0, 0, 6820, 6821, 5, 1052, 0, 0, 6821, 6822, 3, 816, 408, 0, 6822, 
	6823, 5, 86, 0, 0, 6823, 6824, 5, 1052, 0, 0, 6824, 6825, 3, 816, 408, 
	0, 6825, 6827, 1, 0, 0, 0, 6826, 6810, 1, 0, 0, 0, 6826, 6816, 1, 0, 0, 
	0, 6827, 355, 1, 0, 0, 0, 6828, 6829, 5, 494, 0, 0, 6829, 6830, 5, 1052, 
	0, 0, 6830, 6831, 5, 74, 0, 0, 6831, 6832, 5, 77, 0, 0, 6832, 6833, 5, 
	1052, 0, 0, 6833, 6834, 3, 816, 408, 0, 6834, 6835, 5, 75, 0, 0, 6835, 
	6836, 5, 1052, 0, 0, 6836, 6837, 3, 816, 408, 0, 6837, 6855, 1, 0, 0, 0, 
	6838, 6839, 5, 494, 0, 0, 6839, 6840, 5, 1052, 0, 0, 6840, 6841, 5, 322, 
	0, 0, 6841, 6842, 5, 324, 0, 0, 6842, 6843, 5, 1052, 0, 0, 6843, 6855, 
	3, 816, 408, 0, 6844, 6845, 5, 494, 0, 0, 6845, 6846, 5, 1052, 0, 0, 6846, 
	6847, 5, 81, 0, 0, 6847, 6848, 5, 82, 0, 0, 6848, 6849, 5, 1052, 0, 0, 
	6849, 6850, 3, 816, 408, 0, 6850, 6851, 5, 86, 0, 0, 6851, 6852, 5, 1052, 
	0, 0, 6852, 6853, 3, 816, 408, 0, 6853, 6855, 1, 0, 0, 0, 6854, 6828, 1, 
	0, 0, 0, 6854, 6838, 1, 0, 0, 0, 6854, 6844, 1, 0, 0, 0, 6855, 357, 1, 
	0, 0, 0, 6856, 6858, 5, 183, 0, 0, 6857, 6859, 3, 626, 313, 0, 6858, 6857, 
	1, 0, 0, 0, 6858, 6859, 1, 0, 0, 0, 6859, 6860, 1, 0, 0, 0, 6860, 6861, 
	5, 492, 0, 0, 6861, 6863, 5, 379, 0, 0, 6862, 6864, 3, 624, 312, 0, 6863, 
	6862, 1, 0, 0, 0, 6863, 6864, 1, 0, 0, 0, 6864, 6865, 1, 0, 0, 0, 6865, 
	6866, 3, 820, 410, 0, 6866, 6867, 5, 252, 0, 0, 6867, 6868, 5, 1052, 0, 
	0, 6868, 6869, 3, 430, 215, 0, 6869, 6870, 5, 917, 0, 0, 6870, 6871, 5, 
	1052, 0, 0, 6871, 6872, 5, 620, 0, 0, 6872, 6874, 3, 354, 177, 0, 6873, 
	6875, 3, 618, 309, 0, 6874, 6873, 1, 0, 0, 0, 6874, 6875, 1, 0, 0, 0, 6875, 
	6900, 1, 0, 0, 0, 6876, 6878, 5, 183, 0, 0, 6877, 6879, 3, 626, 313, 0, 
	6878, 6877, 1, 0, 0, 0, 6878, 6879, 1, 0, 0, 0, 6879, 6880, 1, 0, 0, 0, 
	6880, 6881, 5, 492, 0, 0, 6881, 6883, 5, 379, 0, 0, 6882, 6884, 3, 624, 
	312, 0, 6883, 6882, 1, 0, 0, 0, 6883, 6884, 1, 0, 0, 0, 6884, 6885, 1, 
	0, 0, 0, 6885, 6886, 3, 820, 410, 0, 6886, 6887, 5, 252, 0, 0, 6887, 6888, 
	5, 1052, 0, 0, 6888, 6889, 3, 430, 215, 0, 6889, 6890, 5, 228, 0, 0, 6890, 
	6891, 5, 1052, 0, 0, 6891, 6892, 5, 546, 0, 0, 6892, 6893, 5, 917, 0, 0, 
	6893, 6894, 5, 1052, 0, 0, 6894, 6895, 5, 620, 0, 0, 6895, 6897, 3, 356, 
	178, 0, 6896, 6898, 3, 618, 309, 0, 6897, 6896, 1, 0, 0, 0, 6897, 6898, 
	1, 0, 0, 0, 6898, 6900, 1, 0, 0, 0, 6899, 6856, 1, 0, 0, 0, 6899, 6876, 
	1, 0, 0, 0, 6900, 359, 1, 0, 0, 0, 6901, 6903, 5, 183, 0, 0, 6902, 6904, 
	3, 626, 313, 0, 6903, 6902, 1, 0, 0, 0, 6903, 6904, 1, 0, 0, 0, 6904, 6905, 
	1, 0, 0, 0, 6905, 6907, 5, 576, 0, 0, 6906, 6908, 3, 624, 312, 0, 6907, 
	6906, 1, 0, 0, 0, 6907, 6908, 1, 0, 0, 0, 6908, 6909, 1, 0, 0, 0, 6909, 
	6913, 3, 830, 415, 0, 6910, 6911, 5, 62, 0, 0, 6911, 6912, 5, 1052, 0, 
	0, 6912, 6914, 3, 430, 215, 0, 6913, 6910, 1, 0, 0, 0, 6913, 6914, 1, 0, 
	0, 0, 6914, 6918, 1, 0, 0, 0, 6915, 6916, 5, 263, 0, 0, 6916, 6917, 5, 
	1052, 0, 0, 6917, 6919, 3, 820, 410, 0, 6918, 6915, 1, 0, 0, 0, 6918, 6919, 
	1, 0, 0, 0, 6919, 6923, 1, 0, 0, 0, 6920, 6921, 5, 76, 0, 0, 6921, 6922, 
	5, 1052, 0, 0, 6922, 6924, 3, 816, 408, 0, 6923, 6920, 1, 0, 0, 0, 6923, 
	6924, 1, 0, 0, 0, 6924, 6928, 1, 0, 0, 0, 6925, 6926, 5, 379, 0, 0, 6926, 
	6927, 5, 1052, 0, 0, 6927, 6929, 3, 816, 408, 0, 6928, 6925, 1, 0, 0, 0, 
	6928, 6929, 1, 0, 0, 0, 6929, 6931, 1, 0, 0, 0, 6930, 6932, 3, 618, 309, 
	0, 6931, 6930, 1, 0, 0, 0, 6931, 6932, 1, 0, 0, 0, 6932, 6933, 1, 0, 0, 
	0, 6933, 6934, 5, 53, 0, 0, 6934, 6935, 3, 38, 19, 0, 6935, 361, 1, 0, 
	0, 0, 6936, 6937, 7, 41, 0, 0, 6937, 363, 1, 0, 0, 0, 6938, 6939, 5, 271, 
	0, 0, 6939, 6940, 5, 53, 0, 0, 6940, 6941, 3, 362, 181, 0, 6941, 365, 1, 
	0, 0, 0, 6942, 6945, 3, 816, 408, 0, 6943, 6945, 5, 1042, 0, 0, 6944, 6942, 
	1, 0, 0, 0, 6944, 6943, 1, 0, 0, 0, 6945, 367, 1, 0, 0, 0, 6946, 6948, 
	5, 183, 0, 0, 6947, 6949, 3, 626, 313, 0, 6948, 6947, 1, 0, 0, 0, 6948, 
	6949, 1, 0, 0, 0, 6949, 6950, 1, 0, 0, 0, 6950, 6951, 5, 603, 0, 0, 6951, 
	6952, 3, 830, 415, 0, 6952, 6961, 5, 1063, 0, 0, 6953, 6958, 3, 334, 167, 
	0, 6954, 6955, 5, 1069, 0, 0, 6955, 6957, 3, 334, 167, 0, 6956, 6954, 1, 
	0, 0, 0, 6957, 6960, 1, 0, 0, 0, 6958, 6956, 1, 0, 0, 0, 6958, 6959, 1, 
	0, 0, 0, 6959, 6962, 1, 0, 0, 0, 6960, 6958, 1, 0, 0, 0, 6961, 6953, 1, 
	0, 0, 0, 6961, 6962, 1, 0, 0, 0, 6962, 6963, 1, 0, 0, 0, 6963, 6964, 5, 
	1064, 0, 0, 6964, 6979, 5, 687, 0, 0, 6965, 6980, 3, 846, 423, 0, 6966, 
	6967, 5, 851, 0, 0, 6967, 6976, 5, 1063, 0, 0, 6968, 6973, 3, 336, 168, 
	0, 6969, 6970, 5, 1069, 0, 0, 6970, 6972, 3, 336, 168, 0, 6971, 6969, 1, 
	0, 0, 0, 6972, 6975, 1, 0, 0, 0, 6973, 6971, 1, 0, 0, 0, 6973, 6974, 1, 
	0, 0, 0, 6974, 6977, 1, 0, 0, 0, 6975, 6973, 1, 0, 0, 0, 6976, 6968, 1, 
	0, 0, 0, 6976, 6977, 1, 0, 0, 0, 6977, 6978, 1, 0, 0, 0, 6978, 6980, 5, 
	1064, 0, 0, 6979, 6965, 1, 0, 0, 0, 6979, 6966, 1, 0, 0, 0, 6980, 6983, 
	1, 0, 0, 0, 6981, 6982, 5, 491, 0, 0, 6982, 6984, 5, 500, 0, 0, 6983, 6981, 
	1, 0, 0, 0, 6983, 6984, 1, 0, 0, 0, 6984, 6985, 1, 0, 0, 0, 6985, 6986, 
	5, 401, 0, 0, 6986, 6997, 5, 793, 0, 0, 6987, 6988, 5, 108, 0, 0, 6988, 
	6989, 5, 531, 0, 0, 6989, 6990, 5, 500, 0, 0, 6990, 6998, 5, 374, 0, 0, 
	6991, 6992, 5, 687, 0, 0, 6992, 6993, 5, 500, 0, 0, 6993, 6994, 5, 531, 
	0, 0, 6994, 6995, 5, 500, 0, 0, 6995, 6998, 5, 374, 0, 0, 6996, 6998, 5, 
	832, 0, 0, 6997, 6987, 1, 0, 0, 0, 6997, 6991, 1, 0, 0, 0, 6997, 6996, 
	1, 0, 0, 0, 6997, 6998, 1, 0, 0, 0, 6998, 7000, 1, 0, 0, 0, 6999, 7001, 
	7, 40, 0, 0, 7000, 6999, 1, 0, 0, 0, 7000, 7001, 1, 0, 0, 0, 7001, 7003, 
	1, 0, 0, 0, 7002, 7004, 3, 618, 309, 0, 7003, 7002, 1, 0, 0, 0, 7003, 7004, 
	1, 0, 0, 0, 7004, 7006, 1, 0, 0, 0, 7005, 7007, 3, 364, 182, 0, 7006, 7005, 
	1, 0, 0, 0, 7006, 7007, 1, 0, 0, 0, 7007, 7008, 1, 0, 0, 0, 7008, 7009, 
	5, 53, 0, 0, 7009, 7010, 3, 366, 183, 0, 7010, 369, 1, 0, 0, 0, 7011, 7012, 
	5, 183, 0, 0, 7012, 7013, 5, 663, 0, 0, 7013, 7015, 5, 338, 0, 0, 7014, 
	7016, 3, 624, 312, 0, 7015, 7014, 1, 0, 0, 0, 7015, 7016, 1, 0, 0, 0, 7016, 
	7017, 1, 0, 0, 0, 7017, 7018, 3, 820, 410, 0, 7018, 7019, 5, 518, 0, 0, 
	7019, 7020, 5, 1052, 0, 0, 7020, 7025, 3, 800, 400, 0, 7021, 7022, 5, 1069, 
	0, 0, 7022, 7024, 3, 800, 400, 0, 7023, 7021, 1, 0, 0, 0, 7024, 7027, 1, 
	0, 0, 0, 7025, 7023, 1, 0, 0, 0, 7025, 7026, 1, 0, 0, 0, 7026, 7038, 1, 
	0, 0, 0, 7027, 7025, 1, 0, 0, 0, 7028, 7029, 5, 30, 0, 0, 7029, 7030, 5, 
	1052, 0, 0, 7030, 7035, 3, 820, 410, 0, 7031, 7032, 5, 1069, 0, 0, 7032, 
	7034, 3, 820, 410, 0, 7033, 7031, 1, 0, 0, 0, 7034, 7037, 1, 0, 0, 0, 7035, 
	7033, 1, 0, 0, 0, 7035, 7036, 1, 0, 0, 0, 7036, 7039, 1, 0, 0, 0, 7037, 
	7035, 1, 0, 0, 0, 7038, 7028, 1, 0, 0, 0, 7038, 7039, 1, 0, 0, 0, 7039, 
	7050, 1, 0, 0, 0, 7040, 7041, 5, 33, 0, 0, 7041, 7042, 5, 1052, 0, 0, 7042, 
	7047, 3, 820, 410, 0, 7043, 7044, 5, 1069, 0, 0, 7044, 7046, 3, 820, 410, 
	0, 7045, 7043, 1, 0, 0, 0, 7046, 7049, 1, 0, 0, 0, 7047, 7045, 1, 0, 0, 
	0, 7047, 7048, 1, 0, 0, 0, 7048, 7051, 1, 0, 0, 0, 7049, 7047, 1, 0, 0, 
	0, 7050, 7040, 1, 0, 0, 0, 7050, 7051, 1, 0, 0, 0, 7051, 7062, 1, 0, 0, 
	0, 7052, 7053, 5, 31, 0, 0, 7053, 7054, 5, 1052, 0, 0, 7054, 7059, 3, 328, 
	164, 0, 7055, 7056, 5, 1069, 0, 0, 7056, 7058, 3, 328, 164, 0, 7057, 7055, 
	1, 0, 0, 0, 7058, 7061, 1, 0, 0, 0, 7059, 7057, 1, 0, 0, 0, 7059, 7060, 
	1, 0, 0, 0, 7060, 7063, 1, 0, 0, 0, 7061, 7059, 1, 0, 0, 0, 7062, 7052, 
	1, 0, 0, 0, 7062, 7063, 1, 0, 0, 0, 7063, 7064, 1, 0, 0, 0, 7064, 7065, 
	5, 29, 0, 0, 7065, 7066, 5, 1052, 0, 0, 7066, 7071, 3, 326, 163, 0, 7067, 
	7068, 5, 1069, 0, 0, 7068, 7070, 3, 326, 163, 0, 7069, 7067, 1, 0, 0, 0, 
	7070, 7073, 1, 0, 0, 0, 7071, 7069, 1, 0, 0, 0, 7071, 7072, 1, 0, 0, 0, 
	7072, 7077, 1, 0, 0, 0, 7073, 7071, 1, 0, 0, 0, 7074, 7075, 5, 353, 0, 
	0, 7075, 7076, 5, 241, 0, 0, 7076, 7078, 5, 125, 0, 0, 7077, 7074, 1, 0, 
	0, 0, 7077, 7078, 1, 0, 0, 0, 7078, 7082, 1, 0, 0, 0, 7079, 7080, 5, 664, 
	0, 0, 7080, 7081, 5, 1052, 0, 0, 7081, 7083, 3, 816, 408, 0, 7082, 7079, 
	1, 0, 0, 0, 7082, 7083, 1, 0, 0, 0, 7083, 7101, 1, 0, 0, 0, 7084, 7085, 
	5, 183, 0, 0, 7085, 7086, 5, 663, 0, 0, 7086, 7088, 5, 338, 0, 0, 7087, 
	7089, 3, 624, 312, 0, 7088, 7087, 1, 0, 0, 0, 7088, 7089, 1, 0, 0, 0, 7089, 
	7090, 1, 0, 0, 0, 7090, 7091, 3, 820, 410, 0, 7091, 7092, 5, 53, 0, 0, 
	7092, 7093, 5, 662, 0, 0, 7093, 7094, 5, 520, 0, 0, 7094, 7095, 3, 820, 
	410, 0, 7095, 7096, 5, 1059, 0, 0, 7096, 7097, 3, 820, 410, 0, 7097, 7098, 
	5, 1059, 0, 0, 7098, 7099, 3, 820, 410, 0, 7099, 7101, 1, 0, 0, 0, 7100, 
	7011, 1, 0, 0, 0, 7100, 7084, 1, 0, 0, 0, 7101, 371, 1, 0, 0, 0, 7102, 
	7104, 5, 183, 0, 0, 7103, 7105, 3, 626, 313, 0, 7104, 7103, 1, 0, 0, 0, 
	7104, 7105, 1, 0, 0, 0, 7105, 7106, 1, 0, 0, 0, 7106, 7107, 5, 670, 0, 
	0, 7107, 7108, 5, 465, 0, 0, 7108, 7109, 3, 820, 410, 0, 7109, 7111, 5, 
	982, 0, 0, 7110, 7112, 3, 186, 93, 0, 7111, 7110, 1, 0, 0, 0, 7111, 7112, 
	1, 0, 0, 0, 7112, 7114, 1, 0, 0, 0, 7113, 7115, 3, 188, 94, 0, 7114, 7113, 
	1, 0, 0, 0, 7114, 7115, 1, 0, 0, 0, 7115, 7122, 1, 0, 0, 0, 7116, 7117, 
	5, 803, 0, 0, 7117, 7120, 5, 1052, 0, 0, 7118, 7121, 3, 816, 408, 0, 7119, 
	7121, 5, 360, 0, 0, 7120, 7118, 1, 0, 0, 0, 7120, 7119, 1, 0, 0, 0, 7121, 
	7123, 1, 0, 0, 0, 7122, 7116, 1, 0, 0, 0, 7122, 7123, 1, 0, 0, 0, 7123, 
	7127, 1, 0, 0, 0, 7124, 7125, 5, 256, 0, 0, 7125, 7126, 5, 1052, 0, 0, 
	7126, 7128, 3, 816, 408, 0, 7127, 7124, 1, 0, 0, 0, 7127, 7128, 1, 0, 0, 
	0, 7128, 7130, 1, 0, 0, 0, 7129, 7131, 3, 190, 95, 0, 7130, 7129, 1, 0, 
	0, 0, 7130, 7131, 1, 0, 0, 0, 7131, 7138, 1, 0, 0, 0, 7132, 7134, 5, 903, 
	0, 0, 7133, 7135, 3, 524, 262, 0, 7134, 7133, 1, 0, 0, 0, 7135, 7136, 1, 
	0, 0, 0, 7136, 7134, 1, 0, 0, 0, 7136, 7137, 1, 0, 0, 0, 7137, 7139, 1, 
	0, 0, 0, 7138, 7132, 1, 0, 0, 0, 7138, 7139, 1, 0, 0, 0, 7139, 373, 1, 
	0, 0, 0, 7140, 7142, 5, 183, 0, 0, 7141, 7143, 3, 626, 313, 0, 7142, 7141, 
	1, 0, 0, 0, 7142, 7143, 1, 0, 0, 0, 7143, 7144, 1, 0, 0, 0, 7144, 7146, 
	5, 693, 0, 0, 7145, 7147, 3, 624, 312, 0, 7146, 7145, 1, 0, 0, 0, 7146, 
	7147, 1, 0, 0, 0, 7147, 7148, 1, 0, 0, 0, 7148, 7169, 3, 820, 410, 0, 7149, 
	7151, 5, 982, 0, 0, 7150, 7149, 1, 0, 0, 0, 7150, 7151, 1, 0, 0, 0, 7151, 
	7152, 1, 0, 0, 0, 7152, 7153, 5, 858, 0, 0, 7153, 7154, 5, 1063, 0, 0, 
	7154, 7155, 3, 820, 410, 0, 7155, 7156, 5, 1052, 0, 0, 7156, 7164, 5, 1043, 
	0, 0, 7157, 7158, 5, 1069, 0, 0, 7158, 7159, 3, 820, 410, 0, 7159, 7160, 
	5, 1052, 0, 0, 7160, 7161, 5, 1043, 0, 0, 7161, 7163, 1, 0, 0, 0, 7162, 
	7157, 1, 0, 0, 0, 7163, 7166, 1, 0, 0, 0, 7164, 7162, 1, 0, 0, 0, 7164, 
	7165, 1, 0, 0, 0, 7165, 7167, 1, 0, 0, 0, 7166, 7164, 1, 0, 0, 0, 7167, 
	7168, 5, 1064, 0, 0, 7168, 7170, 1, 0, 0, 0, 7169, 7150, 1, 0, 0, 0, 7169, 
	7170, 1, 0, 0, 0, 7170, 7174, 1, 0, 0, 0, 7171, 7172, 5, 155, 0, 0, 7172, 
	7173, 5, 1052, 0, 0, 7173, 7175, 5, 1043, 0, 0, 7174, 7171, 1, 0, 0, 0, 
	7174, 7175, 1, 0, 0, 0, 7175, 375, 1, 0, 0, 0, 7176, 7178, 5, 183, 0, 0, 
	7177, 7179, 3, 626, 313, 0, 7178, 7177, 1, 0, 0, 0, 7178, 7179, 1, 0, 0, 
	0, 7179, 7180, 1, 0, 0, 0, 7180, 7181, 5, 698, 0, 0, 7181, 7182, 5, 8, 
	0, 0, 7182, 7184, 5, 583, 0, 0, 7183, 7185, 3, 624, 312, 0, 7184, 7183, 
	1, 0, 0, 0, 7184, 7185, 1, 0, 0, 0, 7185, 7186, 1, 0, 0, 0, 7186, 7187, 
	3, 820, 410, 0, 7187, 7188, 5, 53, 0, 0, 7188, 7189, 5, 1063, 0, 0, 7189, 
	7194, 3, 334, 167, 0, 7190, 7191, 5, 1069, 0, 0, 7191, 7193, 3, 334, 167, 
	0, 7192, 7190, 1, 0, 0, 0, 7193, 7196, 1, 0, 0, 0, 7194, 7192, 1, 0, 0, 
	0, 7194, 7195, 1, 0, 0, 0, 7195, 7197, 1, 0, 0, 0, 7196, 7194, 1, 0, 0, 
	0, 7197, 7198, 5, 1064, 0, 0, 7198, 7199, 5, 687, 0, 0, 7199, 7200, 5, 
	1003, 0, 0, 7200, 7201, 5, 1048, 0, 0, 7201, 7203, 3, 836, 418, 0, 7202, 
	7204, 3, 618, 309, 0, 7203, 7202, 1, 0, 0, 0, 7203, 7204, 1, 0, 0, 0, 7204, 
	377, 1, 0, 0, 0, 7205, 7207, 5, 183, 0, 0, 7206, 7208, 3, 626, 313, 0, 
	7207, 7206, 1, 0, 0, 0, 7207, 7208, 1, 0, 0, 0, 7208, 7210, 1, 0, 0, 0, 
	7209, 7211, 5, 900, 0, 0, 7210, 7209, 1, 0, 0, 0, 7210, 7211, 1, 0, 0, 
	0, 7211, 7212, 1, 0, 0, 0, 7212, 7214, 5, 732, 0, 0, 7213, 7215, 3, 624, 
	312, 0, 7214, 7213, 1, 0, 0, 0, 7214, 7215, 1, 0, 0, 0, 7215, 7216, 1, 
	0, 0, 0, 7216, 7218, 3, 798, 399, 0, 7217, 7219, 3, 308, 154, 0, 7218, 
	7217, 1, 0, 0, 0, 7218, 7219, 1, 0, 0, 0, 7219, 7223, 1, 0, 0, 0, 7220, 
	7221, 5, 982, 0, 0, 7221, 7222, 5, 434, 0, 0, 7222, 7224, 5, 8, 0, 0, 7223, 
	7220, 1, 0, 0, 0, 7223, 7224, 1, 0, 0, 0, 7224, 7228, 1, 0, 0, 0, 7225, 
	7226, 5, 199, 0, 0, 7226, 7227, 5, 1052, 0, 0, 7227, 7229, 3, 832, 416, 
	0, 7228, 7225, 1, 0, 0, 0, 7228, 7229, 1, 0, 0, 0, 7229, 7233, 1, 0, 0, 
	0, 7230, 7231, 5, 449, 0, 0, 7231, 7232, 5, 1052, 0, 0, 7232, 7234, 3, 
	832, 416, 0, 7233, 7230, 1, 0, 0, 0, 7233, 7234, 1, 0, 0, 0, 7234, 7236, 
	1, 0, 0, 0, 7235, 7237, 3, 128, 64, 0, 7236, 7235, 1, 0, 0, 0, 7236, 7237, 
	1, 0, 0, 0, 7237, 7239, 1, 0, 0, 0, 7238, 7240, 3, 468, 234, 0, 7239, 7238, 
	1, 0, 0, 0, 7239, 7240, 1, 0, 0, 0, 7240, 7242, 1, 0, 0, 0, 7241, 7243, 
	3, 618, 309, 0, 7242, 7241, 1, 0, 0, 0, 7242, 7243, 1, 0, 0, 0, 7243, 379, 
	1, 0, 0, 0, 7244, 7246, 5, 183, 0, 0, 7245, 7247, 3, 626, 313, 0, 7246, 
	7245, 1, 0, 0, 0, 7246, 7247, 1, 0, 0, 0, 7247, 7248, 1, 0, 0, 0, 7248, 
	7249, 5, 745, 0, 0, 7249, 7251, 5, 379, 0, 0, 7250, 7252, 3, 624, 312, 
	0, 7251, 7250, 1, 0, 0, 0, 7251, 7252, 1, 0, 0, 0, 7252, 7253, 1, 0, 0, 
	0, 7253, 7254, 3, 820, 410, 0, 7254, 7255, 5, 917, 0, 0, 7255, 7256, 5, 
	1052, 0, 0, 7256, 7257, 5, 281, 0, 0, 7257, 7258, 5, 252, 0, 0, 7258, 7259, 
	5, 1052, 0, 0, 7259, 7260, 3, 430, 215, 0, 7260, 7261, 5, 294, 0, 0, 7261, 
	7262, 5, 1052, 0, 0, 7262, 7263, 7, 19, 0, 0, 7263, 7264, 5, 287, 0, 0, 
	7264, 7265, 5, 1052, 0, 0, 7265, 7266, 3, 816, 408, 0, 7266, 7267, 5, 293, 
	0, 0, 7267, 7273, 5, 1052, 0, 0, 7268, 7274, 3, 816, 408, 0, 7269, 7270, 
	5, 1063, 0, 0, 7270, 7271, 3, 818, 409, 0, 7271, 7272, 5, 1064, 0, 0, 7272, 
	7274, 1, 0, 0, 0, 7273, 7268, 1, 0, 0, 0, 7273, 7269, 1, 0, 0, 0, 7274, 
	7275, 1, 0, 0, 0, 7275, 7276, 5, 292, 0, 0, 7276, 7277, 5, 1052, 0, 0, 
	7277, 7281, 3, 816, 408, 0, 7278, 7279, 5, 288, 0, 0, 7279, 7280, 5, 1052, 
	0, 0, 7280, 7282, 3, 816, 408, 0, 7281, 7278, 1, 0, 0, 0, 7281, 7282, 1, 
	0, 0, 0, 7282, 7292, 1, 0, 0, 0, 7283, 7284, 5, 288, 0, 0, 7284, 7290, 
	5, 1052, 0, 0, 7285, 7291, 3, 816, 408, 0, 7286, 7287, 5, 1063, 0, 0, 7287, 
	7288, 3, 818, 409, 0, 7288, 7289, 5, 1064, 0, 0, 7289, 7291, 1, 0, 0, 0, 
	7290, 7285, 1, 0, 0, 0, 7290, 7286, 1, 0, 0, 0, 7291, 7293, 1, 0, 0, 0, 
	7292, 7283, 1, 0, 0, 0, 7292, 7293, 1, 0, 0, 0, 7293, 7300, 1, 0, 0, 0, 
	7294, 7295, 5, 286, 0, 0, 7295, 7296, 5, 1052, 0, 0, 7296, 7297, 5, 1063, 
	0, 0, 7297, 7298, 3, 818, 409, 0, 7298, 7299, 5, 1064, 0, 0, 7299, 7301, 
	1, 0, 0, 0, 7300, 7294, 1, 0, 0, 0, 7300, 7301, 1, 0, 0, 0, 7301, 7308, 
	1, 0, 0, 0, 7302, 7303, 5, 283, 0, 0, 7303, 7304, 5, 1052, 0, 0, 7304, 
	7305, 5, 1063, 0, 0, 7305, 7306, 3, 818, 409, 0, 7306, 7307, 5, 1064, 0, 
	0, 7307, 7309, 1, 0, 0, 0, 7308, 7302, 1, 0, 0, 0, 7308, 7309, 1, 0, 0, 
	0, 7309, 7313, 1, 0, 0, 0, 7310, 7311, 5, 289, 0, 0, 7311, 7312, 5, 1052, 
	0, 0, 7312, 7314, 3, 816, 408, 0, 7313, 7310, 1, 0, 0, 0, 7313, 7314, 1, 
	0, 0, 0, 7314, 7318, 1, 0, 0, 0, 7315, 7316, 5, 290, 0, 0, 7316, 7317, 
	5, 1052, 0, 0, 7317, 7319, 3, 816, 408, 0, 7318, 7315, 1, 0, 0, 0, 7318, 
	7319, 1, 0, 0, 0, 7319, 7326, 1, 0, 0, 0, 7320, 7321, 5, 285, 0, 0, 7321, 
	7322, 5, 1052, 0, 0, 7322, 7323, 5, 1063, 0, 0, 7323, 7324, 3, 816, 408, 
	0, 7324, 7325, 5, 1064, 0, 0, 7325, 7327, 1, 0, 0, 0, 7326, 7320, 1, 0, 
	0, 0, 7326, 7327, 1, 0, 0, 0, 7327, 7331, 1, 0, 0, 0, 7328, 7329, 5, 284, 
	0, 0, 7329, 7330, 5, 1052, 0, 0, 7330, 7332, 7, 20, 0, 0, 7331, 7328, 1, 
	0, 0, 0, 7331, 7332, 1, 0, 0, 0, 7332, 7336, 1, 0, 0, 0, 7333, 7334, 5, 
	291, 0, 0, 7334, 7335, 5, 1052, 0, 0, 7335, 7337, 3, 816, 408, 0, 7336, 
	7333, 1, 0, 0, 0, 7336, 7337, 1, 0, 0, 0, 7337, 381, 1, 0, 0, 0, 7338, 
	7339, 7, 21, 0, 0, 7339, 383, 1, 0, 0, 0, 7340, 7342, 5, 183, 0, 0, 7341, 
	7343, 3, 626, 313, 0, 7342, 7341, 1, 0, 0, 0, 7342, 7343, 1, 0, 0, 0, 7343, 
	7344, 1, 0, 0, 0, 7344, 7345, 5, 745, 0, 0, 7345, 7347, 5, 379, 0, 0, 7346, 
	7348, 3, 624, 312, 0, 7347, 7346, 1, 0, 0, 0, 7347, 7348, 1, 0, 0, 0, 7348, 
	7349, 1, 0, 0, 0, 7349, 7350, 3, 820, 410, 0, 7350, 7351, 5, 917, 0, 0, 
	7351, 7352, 5, 1052, 0, 0, 7352, 7353, 5, 507, 0, 0, 7353, 7354, 5, 509, 
	0, 0, 7354, 7355, 5, 1052, 0, 0, 7355, 7356, 3, 392, 196, 0, 7356, 7357, 
	5, 514, 0, 0, 7357, 7358, 5, 1052, 0, 0, 7358, 7360, 3, 816, 408, 0, 7359, 
	7361, 3, 136, 68, 0, 7360, 7359, 1, 0, 0, 0, 7360, 7361, 1, 0, 0, 0, 7361, 
	7365, 1, 0, 0, 0, 7362, 7363, 5, 513, 0, 0, 7363, 7364, 5, 1052, 0, 0, 
	7364, 7366, 3, 430, 215, 0, 7365, 7362, 1, 0, 0, 0, 7365, 7366, 1, 0, 0, 
	0, 7366, 7370, 1, 0, 0, 0, 7367, 7368, 5, 515, 0, 0, 7368, 7369, 5, 1052, 
	0, 0, 7369, 7371, 3, 832, 416, 0, 7370, 7367, 1, 0, 0, 0, 7370, 7371, 1, 
	0, 0, 0, 7371, 7375, 1, 0, 0, 0, 7372, 7373, 5, 516, 0, 0, 7373, 7374, 
	5, 1052, 0, 0, 7374, 7376, 3, 382, 191, 0, 7375, 7372, 1, 0, 0, 0, 7375, 
	7376, 1, 0, 0, 0, 7376, 7383, 1, 0, 0, 0, 7377, 7378, 5, 100, 0, 0, 7378, 
	7379, 5, 1052, 0, 0, 7379, 7380, 5, 1063, 0, 0, 7380, 7381, 3, 818, 409, 
	0, 7381, 7382, 5, 1064, 0, 0, 7382, 7384, 1, 0, 0, 0, 7383, 7377, 1, 0, 
	0, 0, 7383, 7384, 1, 0, 0, 0, 7384, 7386, 1, 0, 0, 0, 7385, 7387, 3, 618, 
	309, 0, 7386, 7385, 1, 0, 0, 0, 7386, 7387, 1, 0, 0, 0, 7387, 7468, 1, 
	0, 0, 0, 7388, 7390, 5, 183, 0, 0, 7389, 7391, 3, 626, 313, 0, 7390, 7389, 
	1, 0, 0, 0, 7390, 7391, 1, 0, 0, 0, 7391, 7392, 1, 0, 0, 0, 7392, 7393, 
	5, 745, 0, 0, 7393, 7395, 5, 379, 0, 0, 7394, 7396, 3, 624, 312, 0, 7395, 
	7394, 1, 0, 0, 0, 7395, 7396, 1, 0, 0, 0, 7396, 7397, 1, 0, 0, 0, 7397, 
	7398, 3, 820, 410, 0, 7398, 7399, 5, 917, 0, 0, 7399, 7400, 5, 1052, 0, 
	0, 7400, 7401, 5, 507, 0, 0, 7401, 7402, 5, 509, 0, 0, 7402, 7403, 5, 1052, 
	0, 0, 7403, 7404, 5, 196, 0, 0, 7404, 7405, 5, 514, 0, 0, 7405, 7406, 5, 
	1052, 0, 0, 7406, 7408, 3, 816, 408, 0, 7407, 7409, 3, 136, 68, 0, 7408, 
	7407, 1, 0, 0, 0, 7408, 7409, 1, 0, 0, 0, 7409, 7413, 1, 0, 0, 0, 7410, 
	7411, 5, 508, 0, 0, 7411, 7412, 5, 1052, 0, 0, 7412, 7414, 3, 430, 215, 
	0, 7413, 7410, 1, 0, 0, 0, 7413, 7414, 1, 0, 0, 0, 7414, 7418, 1, 0, 0, 
	0, 7415, 7416, 5, 512, 0, 0, 7416, 7417, 5, 1052, 0, 0, 7417, 7419, 3, 
	430, 215, 0, 7418, 7415, 1, 0, 0, 0, 7418, 7419, 1, 0, 0, 0, 7419, 7423, 
	1, 0, 0, 0, 7420, 7421, 5, 516, 0, 0, 7421, 7422, 5, 1052, 0, 0, 7422, 
	7424, 3, 382, 191, 0, 7423, 7420, 1, 0, 0, 0, 7423, 7424, 1, 0, 0, 0, 7424, 
	7431, 1, 0, 0, 0, 7425, 7426, 5, 586, 0, 0, 7426, 7427, 5, 1052, 0, 0, 
	7427, 7428, 5, 1063, 0, 0, 7428, 7429, 3, 818, 409, 0, 7429, 7430, 5, 1064, 
	0, 0, 7430, 7432, 1, 0, 0, 0, 7431, 7425, 1, 0, 0, 0, 7431, 7432, 1, 0, 
	0, 0, 7432, 7439, 1, 0, 0, 0, 7433, 7434, 5, 100, 0, 0, 7434, 7435, 5, 
	1052, 0, 0, 7435, 7436, 5, 1063, 0, 0, 7436, 7437, 3, 818, 409, 0, 7437, 
	7438, 5, 1064, 0, 0, 7438, 7440, 1, 0, 0, 0, 7439, 7433, 1, 0, 0, 0, 7439, 
	7440, 1, 0, 0, 0, 7440, 7444, 1, 0, 0, 0, 7441, 7442, 5, 513, 0, 0, 7442, 
	7443, 5, 1052, 0, 0, 7443, 7445, 3, 430, 215, 0, 7444, 7441, 1, 0, 0, 0, 
	7444, 7445, 1, 0, 0, 0, 7445, 7449, 1, 0, 0, 0, 7446, 7447, 5, 515, 0, 
	0, 7447, 7448, 5, 1052, 0, 0, 7448, 7450, 3, 832, 416, 0, 7449, 7446, 1, 
	0, 0, 0, 7449, 7450, 1, 0, 0, 0, 7450, 7452, 1, 0, 0, 0, 7451, 7453, 3, 
	390, 195, 0, 7452, 7451, 1, 0, 0, 0, 7452, 7453, 1, 0, 0, 0, 7453, 7457, 
	1, 0, 0, 0, 7454, 7455, 5, 510, 0, 0, 7455, 7456, 5, 1052, 0, 0, 7456, 
	7458, 3, 816, 408, 0, 7457, 7454, 1, 0, 0, 0, 7457, 7458, 1, 0, 0, 0, 7458, 
	7462, 1, 0, 0, 0, 7459, 7460, 5, 511, 0, 0, 7460, 7461, 5, 1052, 0, 0, 
	7461, 7463, 3, 816, 408, 0, 7462, 7459, 1, 0, 0, 0, 7462, 7463, 1, 0, 0, 
	0, 7463, 7465, 1, 0, 0, 0, 7464, 7466, 3, 618, 309, 0, 7465, 7464, 1, 0, 
	0, 0, 7465, 7466, 1, 0, 0, 0, 7466, 7468, 1, 0, 0, 0, 7467, 7340, 1, 0, 
	0, 0, 7467, 7388, 1, 0, 0, 0, 7468, 385, 1, 0, 0, 0, 7469, 7471, 5, 183, 
	0, 0, 7470, 7472, 3, 626, 313, 0, 7471, 7470, 1, 0, 0, 0, 7471, 7472, 1, 
	0, 0, 0, 7472, 7473, 1, 0, 0, 0, 7473, 7474, 5, 745, 0, 0, 7474, 7476, 
	5, 379, 0, 0, 7475, 7477, 3, 624, 312, 0, 7476, 7475, 1, 0, 0, 0, 7476, 
	7477, 1, 0, 0, 0, 7477, 7478, 1, 0, 0, 0, 7478, 7479, 5, 917, 0, 0, 7479, 
	7480, 5, 1052, 0, 0, 7480, 7481, 5, 712, 0, 0, 7481, 7482, 3, 136, 68, 
	0, 7482, 7483, 5, 715, 0, 0, 7483, 7484, 5, 1052, 0, 0, 7484, 7485, 3, 
	816, 408, 0, 7485, 7486, 5, 724, 0, 0, 7486, 7487, 5, 1052, 0, 0, 7487, 
	7488, 3, 816, 408, 0, 7488, 7489, 5, 717, 0, 0, 7489, 7490, 5, 1052, 0, 
	0, 7490, 7491, 3, 816, 408, 0, 7491, 7492, 5, 725, 0, 0, 7492, 7493, 5, 
	1052, 0, 0, 7493, 7497, 3, 816, 408, 0, 7494, 7495, 5, 723, 0, 0, 7495, 
	7496, 5, 1052, 0, 0, 7496, 7498, 3, 816, 408, 0, 7497, 7494, 1, 0, 0, 0, 
	7497, 7498, 1, 0, 0, 0, 7498, 7502, 1, 0, 0, 0, 7499, 7500, 5, 713, 0, 
	0, 7500, 7501, 5, 1052, 0, 0, 7501, 7503, 3, 430, 215, 0, 7502, 7499, 1, 
	0, 0, 0, 7502, 7503, 1, 0, 0, 0, 7503, 7507, 1, 0, 0, 0, 7504, 7505, 5, 
	722, 0, 0, 7505, 7506, 5, 1052, 0, 0, 7506, 7508, 3, 816, 408, 0, 7507, 
	7504, 1, 0, 0, 0, 7507, 7508, 1, 0, 0, 0, 7508, 7512, 1, 0, 0, 0, 7509, 
	7510, 5, 719, 0, 0, 7510, 7511, 5, 1052, 0, 0, 7511, 7513, 3, 430, 215, 
	0, 7512, 7509, 1, 0, 0, 0, 7512, 7513, 1, 0, 0, 0, 7513, 7517, 1, 0, 0, 
	0, 7514, 7515, 5, 718, 0, 0, 7515, 7516, 5, 1052, 0, 0, 7516, 7518, 3, 
	816, 408, 0, 7517, 7514, 1, 0, 0, 0, 7517, 7518, 1, 0, 0, 0, 7518, 7522, 
	1, 0, 0, 0, 7519, 7520, 5, 716, 0, 0, 7520, 7521, 5, 1052, 0, 0, 7521, 
	7523, 3, 816, 408, 0, 7522, 7519, 1, 0, 0, 0, 7522, 7523, 1, 0, 0, 0, 7523, 
	7527, 1, 0, 0, 0, 7524, 7525, 5, 714, 0, 0, 7525, 7526, 5, 1052, 0, 0, 
	7526, 7528, 3, 430, 215, 0, 7527, 7524, 1, 0, 0, 0, 7527, 7528, 1, 0, 0, 
	0, 7528, 7532, 1, 0, 0, 0, 7529, 7530, 5, 721, 0, 0, 7530, 7531, 5, 1052, 
	0, 0, 7531, 7533, 3, 816, 408, 0, 7532, 7529, 1, 0, 0, 0, 7532, 7533, 1, 
	0, 0, 0, 7533, 7537, 1, 0, 0, 0, 7534, 7535, 5, 720, 0, 0, 7535, 7536, 
	5, 1052, 0, 0, 7536, 7538, 3, 816, 408, 0, 7537, 7534, 1, 0, 0, 0, 7537, 
	7538, 1, 0, 0, 0, 7538, 387, 1, 0, 0, 0, 7539, 7541, 5, 183, 0, 0, 7540, 
	7542, 3, 626, 313, 0, 7541, 7540, 1, 0, 0, 0, 7541, 7542, 1, 0, 0, 0, 7542, 
	7543, 1, 0, 0, 0, 7543, 7544, 5, 745, 0, 0, 7544, 7546, 5, 379, 0, 0, 7545, 
	7547, 3, 624, 312, 0, 7546, 7545, 1, 0, 0, 0, 7546, 7547, 1, 0, 0, 0, 7547, 
	7548, 1, 0, 0, 0, 7548, 7549, 3, 820, 410, 0, 7549, 7550, 5, 917, 0, 0, 
	7550, 7551, 5, 1052, 0, 0, 7551, 7552, 5, 735, 0, 0, 7552, 7553, 5, 736, 
	0, 0, 7553, 7554, 5, 1052, 0, 0, 7554, 7555, 7, 42, 0, 0, 7555, 7556, 5, 
	708, 0, 0, 7556, 7557, 5, 1052, 0, 0, 7557, 7559, 7, 43, 0, 0, 7558, 7560, 
	3, 390, 195, 0, 7559, 7558, 1, 0, 0, 0, 7559, 7560, 1, 0, 0, 0, 7560, 7564, 
	1, 0, 0, 0, 7561, 7562, 5, 848, 0, 0, 7562, 7563, 5, 1052, 0, 0, 7563, 
	7565, 3, 430, 215, 0, 7564, 7561, 1, 0, 0, 0, 7564, 7565, 1, 0, 0, 0, 7565, 
	7567, 1, 0, 0, 0, 7566, 7568, 3, 618, 309, 0, 7567, 7566, 1, 0, 0, 0, 7567, 
	7568, 1, 0, 0, 0, 7568, 389, 1, 0, 0, 0, 7569, 7570, 5, 478, 0, 0, 7570, 
	7571, 5, 1052, 0, 0, 7571, 7572, 3, 816, 408, 0, 7572, 391, 1, 0, 0, 0, 
	7573, 7574, 7, 44, 0, 0, 7574, 393, 1, 0, 0, 0, 7575, 7577, 5, 801, 0, 
	0, 7576, 7578, 5, 982, 0, 0, 7577, 7576, 1, 0, 0, 0, 7577, 7578, 1, 0, 
	0, 0, 7578, 7580, 1, 0, 0, 0, 7579, 7581, 5, 1052, 0, 0, 7580, 7579, 1, 
	0, 0, 0, 7580, 7581, 1, 0, 0, 0, 7581, 7582, 1, 0, 0, 0, 7582, 7583, 3, 
	832, 416, 0, 7583, 395, 1, 0, 0, 0, 7584, 7586, 5, 366, 0, 0, 7585, 7587, 
	5, 104, 0, 0, 7586, 7585, 1, 0, 0, 0, 7586, 7587, 1, 0, 0, 0, 7587, 7589, 
	1, 0, 0, 0, 7588, 7590, 5, 1052, 0, 0, 7589, 7588, 1, 0, 0, 0, 7589, 7590, 
	1, 0, 0, 0, 7590, 7591, 1, 0, 0, 0, 7591, 7592, 3, 832, 416, 0, 7592, 397, 
	1, 0, 0, 0, 7593, 7595, 5, 183, 0, 0, 7594, 7596, 3, 626, 313, 0, 7595, 
	7594, 1, 0, 0, 0, 7595, 7596, 1, 0, 0, 0, 7596, 7597, 1, 0, 0, 0, 7597, 
	7599, 5, 749, 0, 0, 7598, 7600, 3, 624, 312, 0, 7599, 7598, 1, 0, 0, 0, 
	7599, 7600, 1, 0, 0, 0, 7600, 7601, 1, 0, 0, 0, 7601, 7603, 3, 830, 415, 
	0, 7602, 7604, 5, 982, 0, 0, 7603, 7602, 1, 0, 0, 0, 7603, 7604, 1, 0, 
	0, 0, 7604, 7606, 1, 0, 0, 0, 7605, 7607, 3, 394, 197, 0, 7606, 7605, 1, 
	0, 0, 0, 7606, 7607, 1, 0, 0, 0, 7607, 7609, 1, 0, 0, 0, 7608, 7610, 3, 
	396, 198, 0, 7609, 7608, 1, 0, 0, 0, 7609, 7610, 1, 0, 0, 0, 7610, 7612, 
	1, 0, 0, 0, 7611, 7613, 3, 618, 309, 0, 7612, 7611, 1, 0, 0, 0, 7612, 7613, 
	1, 0, 0, 0, 7613, 399, 1, 0, 0, 0, 7614, 7616, 5, 183, 0, 0, 7615, 7617, 
	3, 626, 313, 0, 7616, 7615, 1, 0, 0, 0, 7616, 7617, 1, 0, 0, 0, 7617, 7618, 
	1, 0, 0, 0, 7618, 7619, 5, 753, 0, 0, 7619, 7621, 5, 583, 0, 0, 7620, 7622, 
	3, 622, 311, 0, 7621, 7620, 1, 0, 0, 0, 7621, 7622, 1, 0, 0, 0, 7622, 7623, 
	1, 0, 0, 0, 7623, 7627, 3, 820, 410, 0, 7624, 7625, 5, 754, 0, 0, 7625, 
	7626, 5, 1052, 0, 0, 7626, 7628, 3, 832, 416, 0, 7627, 7624, 1, 0, 0, 0, 
	7627, 7628, 1, 0, 0, 0, 7628, 7632, 1, 0, 0, 0, 7629, 7630, 5, 756, 0, 
	0, 7630, 7631, 5, 1052, 0, 0, 7631, 7633, 3, 832, 416, 0, 7632, 7629, 1, 
	0, 0, 0, 7632, 7633, 1, 0, 0, 0, 7633, 7635, 1, 0, 0, 0, 7634, 7636, 3, 
	618, 309, 0, 7635, 7634, 1, 0, 0, 0, 7635, 7636, 1, 0, 0, 0, 7636, 401, 
	1, 0, 0, 0, 7637, 7639, 5, 183, 0, 0, 7638, 7640, 3, 626, 313, 0, 7639, 
	7638, 1, 0, 0, 0, 7639, 7640, 1, 0, 0, 0, 7640, 7641, 1, 0, 0, 0, 7641, 
	7642, 5, 760, 0, 0, 7642, 7644, 3, 820, 410, 0, 7643, 7645, 3, 618, 309, 
	0, 7644, 7643, 1, 0, 0, 0, 7644, 7645, 1, 0, 0, 0, 7645, 403, 1, 0, 0, 
	0, 7646, 7647, 5, 1047, 0, 0, 7647, 405, 1, 0, 0, 0, 7648, 7649, 5, 159, 
	0, 0, 7649, 7650, 5, 1052, 0, 0, 7650, 7786, 7, 45, 0, 0, 7651, 7652, 5, 
	641, 0, 0, 7652, 7655, 5, 1052, 0, 0, 7653, 7656, 3, 404, 202, 0, 7654, 
	7656, 5, 489, 0, 0, 7655, 7653, 1, 0, 0, 0, 7655, 7654, 1, 0, 0, 0, 7656, 
	7786, 1, 0, 0, 0, 7657, 7658, 5, 301, 0, 0, 7658, 7661, 5, 1052, 0, 0, 
	7659, 7662, 3, 404, 202, 0, 7660, 7662, 5, 489, 0, 0, 7661, 7659, 1, 0, 
	0, 0, 7661, 7660, 1, 0, 0, 0, 7662, 7786, 1, 0, 0, 0, 7663, 7664, 5, 304, 
	0, 0, 7664, 7665, 5, 1052, 0, 0, 7665, 7786, 3, 816, 408, 0, 7666, 7667, 
	5, 781, 0, 0, 7667, 7668, 5, 1052, 0, 0, 7668, 7786, 3, 832, 416, 0, 7669, 
	7670, 5, 777, 0, 0, 7670, 7671, 5, 1052, 0, 0, 7671, 7786, 3, 430, 215, 
	0, 7672, 7673, 5, 202, 0, 0, 7673, 7676, 5, 1052, 0, 0, 7674, 7677, 3, 
	816, 408, 0, 7675, 7677, 5, 59, 0, 0, 7676, 7674, 1, 0, 0, 0, 7676, 7675, 
	1, 0, 0, 0, 7677, 7786, 1, 0, 0, 0, 7678, 7679, 5, 870, 0, 0, 7679, 7682, 
	5, 1052, 0, 0, 7680, 7683, 3, 816, 408, 0, 7681, 7683, 5, 59, 0, 0, 7682, 
	7680, 1, 0, 0, 0, 7682, 7681, 1, 0, 0, 0, 7683, 7786, 1, 0, 0, 0, 7684, 
	7685, 5, 877, 0, 0, 7685, 7688, 5, 1052, 0, 0, 7686, 7689, 3, 816, 408, 
	0, 7687, 7689, 5, 59, 0, 0, 7688, 7686, 1, 0, 0, 0, 7688, 7687, 1, 0, 0, 
	0, 7689, 7786, 1, 0, 0, 0, 7690, 7691, 5, 94, 0, 0, 7691, 7692, 5, 1052, 
	0, 0, 7692, 7786, 7, 46, 0, 0, 7693, 7694, 5, 267, 0, 0, 7694, 7697, 5, 
	1052, 0, 0, 7695, 7698, 3, 404, 202, 0, 7696, 7698, 5, 489, 0, 0, 7697, 
	7695, 1, 0, 0, 0, 7697, 7696, 1, 0, 0, 0, 7698, 7786, 1, 0, 0, 0, 7699, 
	7700, 5, 268, 0, 0, 7700, 7703, 5, 1052, 0, 0, 7701, 7704, 3, 404, 202, 
	0, 7702, 7704, 5, 489, 0, 0, 7703, 7701, 1, 0, 0, 0, 7703, 7702, 1, 0, 
	0, 0, 7704, 7786, 1, 0, 0, 0, 7705, 7706, 5, 905, 0, 0, 7706, 7707, 5, 
	1052, 0, 0, 7707, 7786, 3, 430, 215, 0, 7708, 7709, 5, 302, 0, 0, 7709, 
	7712, 5, 1052, 0, 0, 7710, 7713, 3, 404, 202, 0, 7711, 7713, 5, 489, 0, 
	0, 7712, 7710, 1, 0, 0, 0, 7712, 7711, 1, 0, 0, 0, 7713, 7786, 1, 0, 0, 
	0, 7714, 7715, 5, 501, 0, 0, 7715, 7716, 5, 1052, 0, 0, 7716, 7717, 5, 
	1063, 0, 0, 7717, 7718, 3, 818, 409, 0, 7718, 7719, 5, 1064, 0, 0, 7719, 
	7786, 1, 0, 0, 0, 7720, 7721, 5, 264, 0, 0, 7721, 7722, 5, 1052, 0, 0, 
	7722, 7786, 3, 430, 215, 0, 7723, 7724, 5, 661, 0, 0, 7724, 7725, 5, 1052, 
	0, 0, 7725, 7786, 3, 430, 215, 0, 7726, 7727, 5, 245, 0, 0, 7727, 7728, 
	5, 1052, 0, 0, 7728, 7786, 3, 430, 215, 0, 7729, 7730, 5, 778, 0, 0, 7730, 
	7731, 5, 1052, 0, 0, 7731, 7786, 3, 430, 215, 0, 7732, 7733, 5, 253, 0, 
	0, 7733, 7734, 5, 1052, 0, 0, 7734, 7786, 3, 816, 408, 0, 7735, 7786, 5, 
	955, 0, 0, 7736, 7737, 5, 249, 0, 0, 7737, 7738, 5, 1052, 0, 0, 7738, 7786, 
	3, 430, 215, 0, 7739, 7740, 5, 23, 0, 0, 7740, 7741, 5, 1052, 0, 0, 7741, 
	7786, 3, 430, 215, 0, 7742, 7743, 5, 837, 0, 0, 7743, 7744, 5, 1052, 0, 
	0, 7744, 7786, 3, 430, 215, 0, 7745, 7746, 5, 836, 0, 0, 7746, 7747, 5, 
	1052, 0, 0, 7747, 7786, 3, 430, 215, 0, 7748, 7749, 5, 358, 0, 0, 7749, 
	7750, 5, 1052, 0, 0, 7750, 7786, 3, 430, 215, 0, 7751, 7752, 5, 159, 0, 
	0, 7752, 7753, 5, 1052, 0, 0, 7753, 7786, 5, 59, 0, 0, 7754, 7786, 5, 432, 
	0, 0, 7755, 7786, 5, 783, 0, 0, 7756, 7786, 5, 489, 0, 0, 7757, 7758, 5, 
	784, 0, 0, 7758, 7759, 5, 1052, 0, 0, 7759, 7786, 3, 430, 215, 0, 7760, 
	7761, 5, 92, 0, 0, 7761, 7762, 5, 1052, 0, 0, 7762, 7786, 3, 430, 215, 
	0, 7763, 7764, 5, 159, 0, 0, 7764, 7765, 5, 1052, 0, 0, 7765, 7786, 5, 
	59, 0, 0, 7766, 7786, 5, 342, 0, 0, 7767, 7786, 5, 105, 0, 0, 7768, 7786, 
	5, 102, 0, 0, 7769, 7786, 5, 999, 0, 0, 7770, 7786, 5, 221, 0, 0, 7771, 
	7786, 5, 625, 0, 0, 7772, 7786, 5, 489, 0, 0, 7773, 7774, 5, 591, 0, 0, 
	7774, 7775, 5, 1052, 0, 0, 7775, 7786, 3, 430, 215, 0, 7776, 7777, 5, 838, 
	0, 0, 7777, 7778, 5, 1052, 0, 0, 7778, 7786, 3, 430, 215, 0, 7779, 7780, 
	5, 232, 0, 0, 7780, 7781, 5, 1052, 0, 0, 7781, 7786, 3, 430, 215, 0, 7782, 
	7783, 5, 231, 0, 0, 7783, 7784, 5, 1052, 0, 0, 7784, 7786, 3, 430, 215, 
	0, 7785, 7648, 1, 0, 0, 0, 7785, 7651, 1, 0, 0, 0, 7785, 7657, 1, 0, 0, 
	0, 7785, 7663, 1, 0, 0, 0, 7785, 7666, 1, 0, 0, 0, 7785, 7669, 1, 0, 0, 
	0, 7785, 7672, 1, 0, 0, 0, 7785, 7678, 1, 0, 0, 0, 7785, 7684, 1, 0, 0, 
	0, 7785, 7690, 1, 0, 0, 0, 7785, 7693, 1, 0, 0, 0, 7785, 7699, 1, 0, 0, 
	0, 7785, 7705, 1, 0, 0, 0, 7785, 7708, 1, 0, 0, 0, 7785, 7714, 1, 0, 0, 
	0, 7785, 7720, 1, 0, 0, 0, 7785, 7723, 1, 0, 0, 0, 7785, 7726, 1, 0, 0, 
	0, 7785, 7729, 1, 0, 0, 0, 7785, 7732, 1, 0, 0, 0, 7785, 7735, 1, 0, 0, 
	0, 7785, 7736, 1, 0, 0, 0, 7785, 7739, 1, 0, 0, 0, 7785, 7742, 1, 0, 0, 
	0, 7785, 7745, 1, 0, 0, 0, 7785, 7748, 1, 0, 0, 0, 7785, 7751, 1, 0, 0, 
	0, 7785, 7754, 1, 0, 0, 0, 7785, 7755, 1, 0, 0, 0, 7785, 7756, 1, 0, 0, 
	0, 7785, 7757, 1, 0, 0, 0, 7785, 7760, 1, 0, 0, 0, 7785, 7763, 1, 0, 0, 
	0, 7785, 7766, 1, 0, 0, 0, 7785, 7767, 1, 0, 0, 0, 7785, 7768, 1, 0, 0, 
	0, 7785, 7769, 1, 0, 0, 0, 7785, 7770, 1, 0, 0, 0, 7785, 7771, 1, 0, 0, 
	0, 7785, 7772, 1, 0, 0, 0, 7785, 7773, 1, 0, 0, 0, 7785, 7776, 1, 0, 0, 
	0, 7785, 7779, 1, 0, 0, 0, 7785, 7782, 1, 0, 0, 0, 7786, 407, 1, 0, 0, 
	0, 7787, 7788, 5, 532, 0, 0, 7788, 7794, 5, 1052, 0, 0, 7789, 7795, 5, 
	174, 0, 0, 7790, 7795, 5, 779, 0, 0, 7791, 7795, 5, 780, 0, 0, 7792, 7793, 
	5, 780, 0, 0, 7793, 7795, 5, 5, 0, 0, 7794, 7789, 1, 0, 0, 0, 7794, 7790, 
	1, 0, 0, 0, 7794, 7791, 1, 0, 0, 0, 7794, 7792, 1, 0, 0, 0, 7795, 7820, 
	1, 0, 0, 0, 7796, 7797, 5, 775, 0, 0, 7797, 7798, 5, 1052, 0, 0, 7798, 
	7820, 3, 832, 416, 0, 7799, 7800, 5, 612, 0, 0, 7800, 7801, 5, 1052, 0, 
	0, 7801, 7820, 3, 430, 215, 0, 7802, 7803, 5, 684, 0, 0, 7803, 7804, 5, 
	1052, 0, 0, 7804, 7820, 3, 430, 215, 0, 7805, 7806, 5, 441, 0, 0, 7806, 
	7807, 5, 1052, 0, 0, 7807, 7820, 5, 113, 0, 0, 7808, 7820, 5, 112, 0, 0, 
	7809, 7820, 5, 489, 0, 0, 7810, 7811, 5, 258, 0, 0, 7811, 7812, 5, 1052, 
	0, 0, 7812, 7820, 3, 430, 215, 0, 7813, 7814, 5, 910, 0, 0, 7814, 7815, 
	5, 1052, 0, 0, 7815, 7820, 3, 430, 215, 0, 7816, 7817, 5, 311, 0, 0, 7817, 
	7818, 5, 1052, 0, 0, 7818, 7820, 3, 430, 215, 0, 7819, 7787, 1, 0, 0, 0, 
	7819, 7796, 1, 0, 0, 0, 7819, 7799, 1, 0, 0, 0, 7819, 7802, 1, 0, 0, 0, 
	7819, 7805, 1, 0, 0, 0, 7819, 7808, 1, 0, 0, 0, 7819, 7809, 1, 0, 0, 0, 
	7819, 7810, 1, 0, 0, 0, 7819, 7813, 1, 0, 0, 0, 7819, 7816, 1, 0, 0, 0, 
	7820, 409, 1, 0, 0, 0, 7821, 7822, 5, 254, 0, 0, 7822, 7823, 5, 1052, 0, 
	0, 7823, 7824, 5, 1063, 0, 0, 7824, 7825, 5, 917, 0, 0, 7825, 7830, 5, 
	1052, 0, 0, 7826, 7827, 5, 917, 0, 0, 7827, 7828, 5, 1052, 0, 0, 7828, 
	7830, 5, 1064, 0, 0, 7829, 7821, 1, 0, 0, 0, 7829, 7826, 1, 0, 0, 0, 7830, 
	411, 1, 0, 0, 0, 7831, 7832, 5, 917, 0, 0, 7832, 7833, 5, 1052, 0, 0, 7833, 
	7834, 3, 816, 408, 0, 7834, 413, 1, 0, 0, 0, 7835, 7836, 5, 439, 0, 0, 
	7836, 7837, 5, 1052, 0, 0, 7837, 7838, 3, 816, 408, 0, 7838, 415, 1, 0, 
	0, 0, 7839, 7840, 5, 399, 0, 0, 7840, 7841, 5, 1052, 0, 0, 7841, 7842, 
	3, 816, 408, 0, 7842, 417, 1, 0, 0, 0, 7843, 7844, 5, 254, 0, 0, 7844, 
	7845, 5, 1052, 0, 0, 7845, 7862, 5, 1063, 0, 0, 7846, 7848, 3, 412, 206, 
	0, 7847, 7846, 1, 0, 0, 0, 7847, 7848, 1, 0, 0, 0, 7848, 7849, 1, 0, 0, 
	0, 7849, 7863, 3, 414, 207, 0, 7850, 7852, 3, 412, 206, 0, 7851, 7850, 
	1, 0, 0, 0, 7851, 7852, 1, 0, 0, 0, 7852, 7863, 1, 0, 0, 0, 7853, 7855, 
	3, 412, 206, 0, 7854, 7856, 3, 416, 208, 0, 7855, 7854, 1, 0, 0, 0, 7855, 
	7856, 1, 0, 0, 0, 7856, 7858, 1, 0, 0, 0, 7857, 7853, 1, 0, 0, 0, 7857, 
	7858, 1, 0, 0, 0, 7858, 7863, 1, 0, 0, 0, 7859, 7861, 3, 412, 206, 0, 7860, 
	7859, 1, 0, 0, 0, 7860, 7861, 1, 0, 0, 0, 7861, 7863, 1, 0, 0, 0, 7862, 
	7847, 1, 0, 0, 0, 7862, 7851, 1, 0, 0, 0, 7862, 7857, 1, 0, 0, 0, 7862, 
	7860, 1, 0, 0, 0, 7863, 7864, 1, 0, 0, 0, 7864, 7865, 5, 1064, 0, 0, 7865, 
	419, 1, 0, 0, 0, 7866, 7867, 5, 78, 0, 0, 7867, 7868, 5, 1052, 0, 0, 7868, 
	7869, 3, 816, 408, 0, 7869, 421, 1, 0, 0, 0, 7870, 7871, 5, 71, 0, 0, 7871, 
	7872, 5, 1052, 0, 0, 7872, 7873, 3, 816, 408, 0, 7873, 423, 1, 0, 0, 0, 
	7874, 7875, 5, 73, 0, 0, 7875, 7876, 5, 1052, 0, 0, 7876, 7877, 3, 816, 
	408, 0, 7877, 425, 1, 0, 0, 0, 7878, 7879, 5, 72, 0, 0, 7879, 7880, 5, 
	1052, 0, 0, 7880, 7881, 3, 816, 408, 0, 7881, 427, 1, 0, 0, 0, 7882, 7883, 
	5, 943, 0, 0, 7883, 7884, 5, 1052, 0, 0, 7884, 7901, 3, 818, 409, 0, 7885, 
	7886, 5, 827, 0, 0, 7886, 7887, 5, 1052, 0, 0, 7887, 7902, 3, 820, 410, 
	0, 7888, 7889, 5, 184, 0, 0, 7889, 7890, 5, 1052, 0, 0, 7890, 7897, 5, 
	1063, 0, 0, 7891, 7892, 3, 422, 211, 0, 7892, 7894, 3, 424, 212, 0, 7893, 
	7895, 3, 420, 210, 0, 7894, 7893, 1, 0, 0, 0, 7894, 7895, 1, 0, 0, 0, 7895, 
	7898, 1, 0, 0, 0, 7896, 7898, 3, 426, 213, 0, 7897, 7891, 1, 0, 0, 0, 7897, 
	7896, 1, 0, 0, 0, 7898, 7899, 1, 0, 0, 0, 7899, 7900, 5, 1064, 0, 0, 7900, 
	7902, 1, 0, 0, 0, 7901, 7885, 1, 0, 0, 0, 7901, 7888, 1, 0, 0, 0, 7901, 
	7902, 1, 0, 0, 0, 7902, 7904, 1, 0, 0, 0, 7903, 7905, 3, 418, 209, 0, 7904, 
	7903, 1, 0, 0, 0, 7904, 7905, 1, 0, 0, 0, 7905, 7972, 1, 0, 0, 0, 7906, 
	7907, 5, 943, 0, 0, 7907, 7908, 5, 1052, 0, 0, 7908, 7912, 3, 816, 408, 
	0, 7909, 7910, 5, 827, 0, 0, 7910, 7911, 5, 1052, 0, 0, 7911, 7913, 3, 
	820, 410, 0, 7912, 7909, 1, 0, 0, 0, 7912, 7913, 1, 0, 0, 0, 7913, 7932, 
	1, 0, 0, 0, 7914, 7915, 5, 254, 0, 0, 7915, 7930, 5, 1052, 0, 0, 7916, 
	7917, 5, 917, 0, 0, 7917, 7919, 5, 1052, 0, 0, 7918, 7916, 1, 0, 0, 0, 
	7918, 7919, 1, 0, 0, 0, 7919, 7923, 1, 0, 0, 0, 7920, 7921, 5, 399, 0, 
	0, 7921, 7922, 5, 1052, 0, 0, 7922, 7924, 3, 816, 408, 0, 7923, 7920, 1, 
	0, 0, 0, 7923, 7924, 1, 0, 0, 0, 7924, 7931, 1, 0, 0, 0, 7925, 7926, 5, 
	917, 0, 0, 7926, 7927, 5, 1052, 0, 0, 7927, 7929, 5, 489, 0, 0, 7928, 7925, 
	1, 0, 0, 0, 7928, 7929, 1, 0, 0, 0, 7929, 7931, 1, 0, 0, 0, 7930, 7918, 
	1, 0, 0, 0, 7930, 7928, 1, 0, 0, 0, 7931, 7933, 1, 0, 0, 0, 7932, 7914, 
	1, 0, 0, 0, 7932, 7933, 1, 0, 0, 0, 7933, 7972, 1, 0, 0, 0, 7934, 7935, 
	5, 943, 0, 0, 7935, 7936, 5, 1052, 0, 0, 7936, 7949, 3, 816, 408, 0, 7937, 
	7938, 5, 827, 0, 0, 7938, 7939, 5, 1052, 0, 0, 7939, 7950, 3, 820, 410, 
	0, 7940, 7941, 5, 184, 0, 0, 7941, 7942, 5, 1052, 0, 0, 7942, 7946, 5, 
	1063, 0, 0, 7943, 7944, 5, 84, 0, 0, 7944, 7945, 5, 1052, 0, 0, 7945, 7947, 
	3, 816, 408, 0, 7946, 7943, 1, 0, 0, 0, 7946, 7947, 1, 0, 0, 0, 7947, 7948, 
	1, 0, 0, 0, 7948, 7950, 5, 1064, 0, 0, 7949, 7937, 1, 0, 0, 0, 7949, 7940, 
	1, 0, 0, 0, 7949, 7950, 1, 0, 0, 0, 7950, 7969, 1, 0, 0, 0, 7951, 7952, 
	5, 254, 0, 0, 7952, 7953, 5, 1052, 0, 0, 7953, 7956, 5, 1063, 0, 0, 7954, 
	7955, 5, 917, 0, 0, 7955, 7957, 5, 1052, 0, 0, 7956, 7954, 1, 0, 0, 0, 
	7956, 7957, 1, 0, 0, 0, 7957, 7961, 1, 0, 0, 0, 7958, 7959, 5, 439, 0, 
	0, 7959, 7960, 5, 1052, 0, 0, 7960, 7962, 3, 816, 408, 0, 7961, 7958, 1, 
	0, 0, 0, 7961, 7962, 1, 0, 0, 0, 7962, 7970, 1, 0, 0, 0, 7963, 7964, 5, 
	917, 0, 0, 7964, 7965, 5, 1052, 0, 0, 7965, 7967, 5, 489, 0, 0, 7966, 7963, 
	1, 0, 0, 0, 7966, 7967, 1, 0, 0, 0, 7967, 7968, 1, 0, 0, 0, 7968, 7970, 
	5, 1064, 0, 0, 7969, 7951, 1, 0, 0, 0, 7969, 7966, 1, 0, 0, 0, 7969, 7970, 
	1, 0, 0, 0, 7970, 7972, 1, 0, 0, 0, 7971, 7882, 1, 0, 0, 0, 7971, 7906, 
	1, 0, 0, 0, 7971, 7934, 1, 0, 0, 0, 7972, 429, 1, 0, 0, 0, 7973, 7974, 
	7, 47, 0, 0, 7974, 431, 1, 0, 0, 0, 7975, 7976, 5, 246, 0, 0, 7976, 7977, 
	5, 1052, 0, 0, 7977, 7978, 3, 430, 215, 0, 7978, 433, 1, 0, 0, 0, 7979, 
	7980, 5, 648, 0, 0, 7980, 7981, 5, 1052, 0, 0, 7981, 7982, 3, 430, 215, 
	0, 7982, 435, 1, 0, 0, 0, 7983, 7984, 5, 63, 0, 0, 7984, 7985, 5, 1052, 
	0, 0, 7985, 7986, 3, 430, 215, 0, 7986, 437, 1, 0, 0, 0, 7987, 7988, 5, 
	493, 0, 0, 7988, 7989, 5, 1052, 0, 0, 7989, 7990, 3, 816, 408, 0, 7990, 
	439, 1, 0, 0, 0, 7991, 7992, 5, 229, 0, 0, 7992, 7993, 5, 1052, 0, 0, 7993, 
	7994, 5, 1063, 0, 0, 7994, 7996, 3, 432, 216, 0, 7995, 7997, 3, 434, 217, 
	0, 7996, 7995, 1, 0, 0, 0, 7996, 7997, 1, 0, 0, 0, 7997, 7998, 1, 0, 0, 
	0, 7998, 7999, 5, 1064, 0, 0, 7999, 8043, 1, 0, 0, 0, 8000, 8001, 5, 229, 
	0, 0, 8001, 8002, 5, 1052, 0, 0, 8002, 8003, 5, 1063, 0, 0, 8003, 8005, 
	3, 432, 216, 0, 8004, 8006, 3, 434, 217, 0, 8005, 8004, 1, 0, 0, 0, 8005, 
	8006, 1, 0, 0, 0, 8006, 8008, 1, 0, 0, 0, 8007, 8009, 3, 436, 218, 0, 8008, 
	8007, 1, 0, 0, 0, 8008, 8009, 1, 0, 0, 0, 8009, 8010, 1, 0, 0, 0, 8010, 
	8011, 5, 1064, 0, 0, 8011, 8043, 1, 0, 0, 0, 8012, 8013, 5, 229, 0, 0, 
	8013, 8014, 5, 1052, 0, 0, 8014, 8015, 5, 1063, 0, 0, 8015, 8017, 3, 432, 
	216, 0, 8016, 8018, 3, 436, 218, 0, 8017, 8016, 1, 0, 0, 0, 8017, 8018, 
	1, 0, 0, 0, 8018, 8020, 1, 0, 0, 0, 8019, 8021, 3, 434, 217, 0, 8020, 8019, 
	1, 0, 0, 0, 8020, 8021, 1, 0, 0, 0, 8021, 8023, 1, 0, 0, 0, 8022, 8024, 
	3, 438, 219, 0, 8023, 8022, 1, 0, 0, 0, 8023, 8024, 1, 0, 0, 0, 8024, 8025, 
	1, 0, 0, 0, 8025, 8026, 5, 1064, 0, 0, 8026, 8043, 1, 0, 0, 0, 8027, 8028, 
	5, 229, 0, 0, 8028, 8029, 5, 1052, 0, 0, 8029, 8030, 5, 1063, 0, 0, 8030, 
	8032, 3, 432, 216, 0, 8031, 8033, 3, 434, 217, 0, 8032, 8031, 1, 0, 0, 
	0, 8032, 8033, 1, 0, 0, 0, 8033, 8035, 1, 0, 0, 0, 8034, 8036, 3, 436, 
	218, 0, 8035, 8034, 1, 0, 0, 0, 8035, 8036, 1, 0, 0, 0, 8036, 8038, 1, 
	0, 0, 0, 8037, 8039, 3, 438, 219, 0, 8038, 8037, 1, 0, 0, 0, 8038, 8039, 
	1, 0, 0, 0, 8039, 8040, 1, 0, 0, 0, 8040, 8041, 5, 1064, 0, 0, 8041, 8043, 
	1, 0, 0, 0, 8042, 7991, 1, 0, 0, 0, 8042, 8000, 1, 0, 0, 0, 8042, 8012, 
	1, 0, 0, 0, 8042, 8027, 1, 0, 0, 0, 8043, 441, 1, 0, 0, 0, 8044, 8046, 
	5, 183, 0, 0, 8045, 8047, 3, 626, 313, 0, 8046, 8045, 1, 0, 0, 0, 8046, 
	8047, 1, 0, 0, 0, 8047, 8049, 1, 0, 0, 0, 8048, 8050, 5, 864, 0, 0, 8049, 
	8048, 1, 0, 0, 0, 8049, 8050, 1, 0, 0, 0, 8050, 8051, 1, 0, 0, 0, 8051, 
	8053, 5, 795, 0, 0, 8052, 8054, 3, 624, 312, 0, 8053, 8052, 1, 0, 0, 0, 
	8053, 8054, 1, 0, 0, 0, 8054, 8055, 1, 0, 0, 0, 8055, 8057, 3, 830, 415, 
	0, 8056, 8058, 3, 410, 205, 0, 8057, 8056, 1, 0, 0, 0, 8057, 8058, 1, 0, 
	0, 0, 8058, 8060, 1, 0, 0, 0, 8059, 8061, 3, 440, 220, 0, 8060, 8059, 1, 
	0, 0, 0, 8060, 8061, 1, 0, 0, 0, 8061, 8080, 1, 0, 0, 0, 8062, 8063, 5, 
	305, 0, 0, 8063, 8064, 5, 1052, 0, 0, 8064, 8077, 5, 1063, 0, 0, 8065, 
	8066, 5, 314, 0, 0, 8066, 8067, 5, 1052, 0, 0, 8067, 8078, 3, 816, 408, 
	0, 8068, 8069, 5, 917, 0, 0, 8069, 8070, 5, 1052, 0, 0, 8070, 8074, 7, 
	3, 0, 0, 8071, 8073, 3, 406, 203, 0, 8072, 8071, 1, 0, 0, 0, 8073, 8076, 
	1, 0, 0, 0, 8074, 8072, 1, 0, 0, 0, 8074, 8075, 1, 0, 0, 0, 8075, 8078, 
	1, 0, 0, 0, 8076, 8074, 1, 0, 0, 0, 8077, 8065, 1, 0, 0, 0, 8077, 8068, 
	1, 0, 0, 0, 8078, 8079, 1, 0, 0, 0, 8079, 8081, 5, 1064, 0, 0, 8080, 8062, 
	1, 0, 0, 0, 8080, 8081, 1, 0, 0, 0, 8081, 8088, 1, 0, 0, 0, 8082, 8083, 
	5, 180, 0, 0, 8083, 8084, 5, 1052, 0, 0, 8084, 8085, 5, 1063, 0, 0, 8085, 
	8086, 3, 408, 204, 0, 8086, 8087, 5, 1064, 0, 0, 8087, 8089, 1, 0, 0, 0, 
	8088, 8082, 1, 0, 0, 0, 8088, 8089, 1, 0, 0, 0, 8089, 8091, 1, 0, 0, 0, 
	8090, 8092, 3, 468, 234, 0, 8091, 8090, 1, 0, 0, 0, 8091, 8092, 1, 0, 0, 
	0, 8092, 8094, 1, 0, 0, 0, 8093, 8095, 3, 618, 309, 0, 8094, 8093, 1, 0, 
	0, 0, 8094, 8095, 1, 0, 0, 0, 8095, 8147, 1, 0, 0, 0, 8096, 8098, 5, 183, 
	0, 0, 8097, 8099, 3, 626, 313, 0, 8098, 8097, 1, 0, 0, 0, 8098, 8099, 1, 
	0, 0, 0, 8099, 8101, 1, 0, 0, 0, 8100, 8102, 5, 864, 0, 0, 8101, 8100, 
	1, 0, 0, 0, 8101, 8102, 1, 0, 0, 0, 8102, 8103, 1, 0, 0, 0, 8103, 8105, 
	5, 795, 0, 0, 8104, 8106, 3, 624, 312, 0, 8105, 8104, 1, 0, 0, 0, 8105, 
	8106, 1, 0, 0, 0, 8106, 8107, 1, 0, 0, 0, 8107, 8108, 3, 830, 415, 0, 8108, 
	8110, 3, 428, 214, 0, 8109, 8111, 3, 440, 220, 0, 8110, 8109, 1, 0, 0, 
	0, 8110, 8111, 1, 0, 0, 0, 8111, 8130, 1, 0, 0, 0, 8112, 8113, 5, 305, 
	0, 0, 8113, 8114, 5, 1052, 0, 0, 8114, 8127, 5, 1063, 0, 0, 8115, 8116, 
	5, 314, 0, 0, 8116, 8117, 5, 1052, 0, 0, 8117, 8128, 3, 816, 408, 0, 8118, 
	8119, 5, 917, 0, 0, 8119, 8120, 5, 1052, 0, 0, 8120, 8124, 7, 3, 0, 0, 
	8121, 8123, 3, 406, 203, 0, 8122, 8121, 1, 0, 0, 0, 8123, 8126, 1, 0, 0, 
	0, 8124, 8122, 1, 0, 0, 0, 8124, 8125, 1, 0, 0, 0, 8125, 8128, 1, 0, 0, 
	0, 8126, 8124, 1, 0, 0, 0, 8127, 8115, 1, 0, 0, 0, 8127, 8118, 1, 0, 0, 
	0, 8128, 8129, 1, 0, 0, 0, 8129, 8131, 5, 1064, 0, 0, 8130, 8112, 1, 0, 
	0, 0, 8130, 8131, 1, 0, 0, 0, 8131, 8138, 1, 0, 0, 0, 8132, 8133, 5, 180, 
	0, 0, 8133, 8134, 5, 1052, 0, 0, 8134, 8135, 5, 1063, 0, 0, 8135, 8136, 
	3, 408, 204, 0, 8136, 8137, 5, 1064, 0, 0, 8137, 8139, 1, 0, 0, 0, 8138, 
	8132, 1, 0, 0, 0, 8138, 8139, 1, 0, 0, 0, 8139, 8141, 1, 0, 0, 0, 8140, 
	8142, 3, 468, 234, 0, 8141, 8140, 1, 0, 0, 0, 8141, 8142, 1, 0, 0, 0, 8142, 
	8144, 1, 0, 0, 0, 8143, 8145, 3, 618, 309, 0, 8144, 8143, 1, 0, 0, 0, 8144, 
	8145, 1, 0, 0, 0, 8145, 8147, 1, 0, 0, 0, 8146, 8044, 1, 0, 0, 0, 8146, 
	8096, 1, 0, 0, 0, 8147, 443, 1, 0, 0, 0, 8148, 8149, 5, 828, 0, 0, 8149, 
	8150, 5, 1052, 0, 0, 8150, 8151, 5, 709, 0, 0, 8151, 8152, 5, 825, 0, 0, 
	8152, 8153, 5, 1052, 0, 0, 8153, 8157, 3, 816, 408, 0, 8154, 8155, 5, 824, 
	0, 0, 8155, 8156, 5, 1052, 0, 0, 8156, 8158, 3, 816, 408, 0, 8157, 8154, 
	1, 0, 0, 0, 8157, 8158, 1, 0, 0, 0, 8158, 8169, 1, 0, 0, 0, 8159, 8160, 
	5, 828, 0, 0, 8160, 8161, 5, 1052, 0, 0, 8161, 8169, 5, 325, 0, 0, 8162, 
	8163, 5, 828, 0, 0, 8163, 8164, 5, 1052, 0, 0, 8164, 8165, 5, 79, 0, 0, 
	8165, 8166, 5, 86, 0, 0, 8166, 8167, 5, 1052, 0, 0, 8167, 8169, 3, 816, 
	408, 0, 8168, 8148, 1, 0, 0, 0, 8168, 8159, 1, 0, 0, 0, 8168, 8162, 1, 
	0, 0, 0, 8169, 445, 1, 0, 0, 0, 8170, 8171, 5, 825, 0, 0, 8171, 8172, 5, 
	1052, 0, 0, 8172, 8176, 3, 816, 408, 0, 8173, 8174, 5, 824, 0, 0, 8174, 
	8175, 5, 1052, 0, 0, 8175, 8177, 3, 816, 408, 0, 8176, 8173, 1, 0, 0, 0, 
	8176, 8177, 1, 0, 0, 0, 8177, 8182, 1, 0, 0, 0, 8178, 8179, 5, 86, 0, 0, 
	8179, 8180, 5, 1052, 0, 0, 8180, 8182, 3, 816, 408, 0, 8181, 8170, 1, 0, 
	0, 0, 8181, 8178, 1, 0, 0, 0, 8182, 447, 1, 0, 0, 0, 8183, 8184, 5, 379, 
	0, 0, 8184, 8185, 5, 1052, 0, 0, 8185, 8186, 3, 816, 408, 0, 8186, 449, 
	1, 0, 0, 0, 8187, 8189, 5, 183, 0, 0, 8188, 8190, 3, 626, 313, 0, 8189, 
	8188, 1, 0, 0, 0, 8189, 8190, 1, 0, 0, 0, 8190, 8191, 1, 0, 0, 0, 8191, 
	8192, 5, 822, 0, 0, 8192, 8194, 5, 379, 0, 0, 8193, 8195, 3, 624, 312, 
	0, 8194, 8193, 1, 0, 0, 0, 8194, 8195, 1, 0, 0, 0, 8195, 8196, 1, 0, 0, 
	0, 8196, 8197, 3, 820, 410, 0, 8197, 8198, 5, 917, 0, 0, 8198, 8199, 5, 
	1052, 0, 0, 8199, 8200, 5, 295, 0, 0, 8200, 8201, 3, 444, 222, 0, 8201, 
	8202, 5, 252, 0, 0, 8202, 8203, 5, 1052, 0, 0, 8203, 8204, 3, 430, 215, 
	0, 8204, 8205, 5, 823, 0, 0, 8205, 8206, 5, 1052, 0, 0, 8206, 8207, 5, 
	1063, 0, 0, 8207, 8208, 3, 818, 409, 0, 8208, 8215, 5, 1064, 0, 0, 8209, 
	8210, 5, 826, 0, 0, 8210, 8211, 5, 1052, 0, 0, 8211, 8212, 5, 1063, 0, 
	0, 8212, 8213, 3, 818, 409, 0, 8213, 8214, 5, 1064, 0, 0, 8214, 8216, 1, 
	0, 0, 0, 8215, 8209, 1, 0, 0, 0, 8215, 8216, 1, 0, 0, 0, 8216, 8218, 1, 
	0, 0, 0, 8217, 8219, 3, 618, 309, 0, 8218, 8217, 1, 0, 0, 0, 8218, 8219, 
	1, 0, 0, 0, 8219, 451, 1, 0, 0, 0, 8220, 8221, 5, 178, 0, 0, 8221, 8222, 
	5, 337, 0, 0, 8222, 453, 1, 0, 0, 0, 8223, 8224, 5, 50, 0, 0, 8224, 8225, 
	5, 1052, 0, 0, 8225, 8226, 3, 430, 215, 0, 8226, 455, 1, 0, 0, 0, 8227, 
	8228, 5, 376, 0, 0, 8228, 8229, 5, 1052, 0, 0, 8229, 8230, 5, 908, 0, 0, 
	8230, 457, 1, 0, 0, 0, 8231, 8232, 5, 765, 0, 0, 8232, 8233, 5, 1052, 0, 
	0, 8233, 8234, 3, 430, 215, 0, 8234, 459, 1, 0, 0, 0, 8235, 8236, 3, 310, 
	155, 0, 8236, 8249, 5, 1063, 0, 0, 8237, 8238, 5, 875, 0, 0, 8238, 8239, 
	5, 1049, 0, 0, 8239, 8250, 3, 816, 408, 0, 8240, 8241, 5, 522, 0, 0, 8241, 
	8242, 5, 1049, 0, 0, 8242, 8250, 3, 816, 408, 0, 8243, 8244, 5, 807, 0, 
	0, 8244, 8245, 5, 1049, 0, 0, 8245, 8250, 3, 820, 410, 0, 8246, 8247, 5, 
	830, 0, 0, 8247, 8248, 5, 1049, 0, 0, 8248, 8250, 3, 816, 408, 0, 8249, 
	8237, 1, 0, 0, 0, 8249, 8240, 1, 0, 0, 0, 8249, 8243, 1, 0, 0, 0, 8249, 
	8246, 1, 0, 0, 0, 8250, 8251, 1, 0, 0, 0, 8251, 8252, 5, 1064, 0, 0, 8252, 
	461, 1, 0, 0, 0, 8253, 8255, 5, 183, 0, 0, 8254, 8256, 3, 626, 313, 0, 
	8255, 8254, 1, 0, 0, 0, 8255, 8256, 1, 0, 0, 0, 8256, 8257, 1, 0, 0, 0, 
	8257, 8259, 5, 830, 0, 0, 8258, 8260, 3, 624, 312, 0, 8259, 8258, 1, 0, 
	0, 0, 8259, 8260, 1, 0, 0, 0, 8260, 8261, 1, 0, 0, 0, 8261, 8263, 3, 830, 
	415, 0, 8262, 8264, 3, 452, 226, 0, 8263, 8262, 1, 0, 0, 0, 8263, 8264, 
	1, 0, 0, 0, 8264, 8265, 1, 0, 0, 0, 8265, 8266, 5, 531, 0, 0, 8266, 8267, 
	5, 851, 0, 0, 8267, 8269, 3, 830, 415, 0, 8268, 8270, 3, 460, 230, 0, 8269, 
	8268, 1, 0, 0, 0, 8269, 8270, 1, 0, 0, 0, 8270, 8272, 1, 0, 0, 0, 8271, 
	8273, 3, 454, 227, 0, 8272, 8271, 1, 0, 0, 0, 8272, 8273, 1, 0, 0, 0, 8273, 
	8275, 1, 0, 0, 0, 8274, 8276, 3, 458, 229, 0, 8275, 8274, 1, 0, 0, 0, 8275, 
	8276, 1, 0, 0, 0, 8276, 8278, 1, 0, 0, 0, 8277, 8279, 3, 618, 309, 0, 8278, 
	8277, 1, 0, 0, 0, 8278, 8279, 1, 0, 0, 0, 8279, 8345, 1, 0, 0, 0, 8280, 
	8282, 5, 183, 0, 0, 8281, 8283, 3, 626, 313, 0, 8282, 8281, 1, 0, 0, 0, 
	8282, 8283, 1, 0, 0, 0, 8283, 8284, 1, 0, 0, 0, 8284, 8286, 5, 830, 0, 
	0, 8285, 8287, 3, 624, 312, 0, 8286, 8285, 1, 0, 0, 0, 8286, 8287, 1, 0, 
	0, 0, 8287, 8288, 1, 0, 0, 0, 8288, 8290, 3, 830, 415, 0, 8289, 8291, 3, 
	452, 226, 0, 8290, 8289, 1, 0, 0, 0, 8290, 8291, 1, 0, 0, 0, 8291, 8292, 
	1, 0, 0, 0, 8292, 8293, 5, 531, 0, 0, 8293, 8294, 5, 280, 0, 0, 8294, 8295, 
	5, 851, 0, 0, 8295, 8297, 3, 830, 415, 0, 8296, 8298, 3, 460, 230, 0, 8297, 
	8296, 1, 0, 0, 0, 8297, 8298, 1, 0, 0, 0, 8298, 8300, 1, 0, 0, 0, 8299, 
	8301, 3, 456, 228, 0, 8300, 8299, 1, 0, 0, 0, 8300, 8301, 1, 0, 0, 0, 8301, 
	8303, 1, 0, 0, 0, 8302, 8304, 3, 618, 309, 0, 8303, 8302, 1, 0, 0, 0, 8303, 
	8304, 1, 0, 0, 0, 8304, 8345, 1, 0, 0, 0, 8305, 8307, 5, 183, 0, 0, 8306, 
	8308, 3, 626, 313, 0, 8307, 8306, 1, 0, 0, 0, 8307, 8308, 1, 0, 0, 0, 8308, 
	8309, 1, 0, 0, 0, 8309, 8310, 5, 830, 0, 0, 8310, 8311, 3, 624, 312, 0, 
	8311, 8313, 3, 830, 415, 0, 8312, 8314, 3, 452, 226, 0, 8313, 8312, 1, 
	0, 0, 0, 8313, 8314, 1, 0, 0, 0, 8314, 8315, 1, 0, 0, 0, 8315, 8316, 5, 
	531, 0, 0, 8316, 8317, 5, 795, 0, 0, 8317, 8319, 3, 830, 415, 0, 8318, 
	8320, 3, 618, 309, 0, 8319, 8318, 1, 0, 0, 0, 8319, 8320, 1, 0, 0, 0, 8320, 
	8345, 1, 0, 0, 0, 8321, 8322, 5, 183, 0, 0, 8322, 8323, 3, 626, 313, 0, 
	8323, 8324, 5, 830, 0, 0, 8324, 8325, 3, 624, 312, 0, 8325, 8327, 3, 830, 
	415, 0, 8326, 8328, 3, 452, 226, 0, 8327, 8326, 1, 0, 0, 0, 8327, 8328, 
	1, 0, 0, 0, 8328, 8329, 1, 0, 0, 0, 8329, 8330, 5, 531, 0, 0, 8330, 8331, 
	5, 967, 0, 0, 8331, 8333, 3, 830, 415, 0, 8332, 8334, 3, 460, 230, 0, 8333, 
	8332, 1, 0, 0, 0, 8333, 8334, 1, 0, 0, 0, 8334, 8336, 1, 0, 0, 0, 8335, 
	8337, 3, 454, 227, 0, 8336, 8335, 1, 0, 0, 0, 8336, 8337, 1, 0, 0, 0, 8337, 
	8339, 1, 0, 0, 0, 8338, 8340, 3, 458, 229, 0, 8339, 8338, 1, 0, 0, 0, 8339, 
	8340, 1, 0, 0, 0, 8340, 8342, 1, 0, 0, 0, 8341, 8343, 3, 618, 309, 0, 8342, 
	8341, 1, 0, 0, 0, 8342, 8343, 1, 0, 0, 0, 8343, 8345, 1, 0, 0, 0, 8344, 
	8253, 1, 0, 0, 0, 8344, 8280, 1, 0, 0, 0, 8344, 8305, 1, 0, 0, 0, 8344, 
	8321, 1, 0, 0, 0, 8345, 463, 1, 0, 0, 0, 8346, 8347, 7, 48, 0, 0, 8347, 
	465, 1, 0, 0, 0, 8348, 8349, 7, 49, 0, 0, 8349, 8352, 3, 464, 232, 0, 8350, 
	8352, 5, 971, 0, 0, 8351, 8348, 1, 0, 0, 0, 8351, 8350, 1, 0, 0, 0, 8352, 
	8355, 1, 0, 0, 0, 8353, 8355, 5, 900, 0, 0, 8354, 8351, 1, 0, 0, 0, 8354, 
	8353, 1, 0, 0, 0, 8355, 467, 1, 0, 0, 0, 8356, 8358, 5, 982, 0, 0, 8357, 
	8356, 1, 0, 0, 0, 8357, 8358, 1, 0, 0, 0, 8358, 8359, 1, 0, 0, 0, 8359, 
	8360, 5, 858, 0, 0, 8360, 8361, 5, 1063, 0, 0, 8361, 8366, 3, 346, 173, 
	0, 8362, 8363, 5, 1069, 0, 0, 8363, 8365, 3, 346, 173, 0, 8364, 8362, 1, 
	0, 0, 0, 8365, 8368, 1, 0, 0, 0, 8366, 8364, 1, 0, 0, 0, 8366, 8367, 1, 
	0, 0, 0, 8367, 8369, 1, 0, 0, 0, 8368, 8366, 1, 0, 0, 0, 8369, 8370, 5, 
	1064, 0, 0, 8370, 469, 1, 0, 0, 0, 8371, 8373, 5, 982, 0, 0, 8372, 8371, 
	1, 0, 0, 0, 8372, 8373, 1, 0, 0, 0, 8373, 8374, 1, 0, 0, 0, 8374, 8375, 
	5, 698, 0, 0, 8375, 8376, 5, 8, 0, 0, 8376, 8377, 5, 583, 0, 0, 8377, 8378, 
	3, 820, 410, 0, 8378, 8379, 5, 531, 0, 0, 8379, 8380, 5, 1063, 0, 0, 8380, 
	8385, 3, 826, 413, 0, 8381, 8382, 5, 1069, 0, 0, 8382, 8384, 3, 826, 413, 
	0, 8383, 8381, 1, 0, 0, 0, 8384, 8387, 1, 0, 0, 0, 8385, 8383, 1, 0, 0, 
	0, 8385, 8386, 1, 0, 0, 0, 8386, 8388, 1, 0, 0, 0, 8387, 8385, 1, 0, 0, 
	0, 8388, 8389, 5, 1064, 0, 0, 8389, 471, 1, 0, 0, 0, 8390, 8391, 5, 145, 
	0, 0, 8391, 8392, 5, 104, 0, 0, 8392, 8393, 3, 976, 488, 0, 8393, 473, 
	1, 0, 0, 0, 8394, 8395, 5, 119, 0, 0, 8395, 8396, 5, 1052, 0, 0, 8396, 
	8397, 3, 430, 215, 0, 8397, 475, 1, 0, 0, 0, 8398, 8400, 5, 982, 0, 0, 
	8399, 8398, 1, 0, 0, 0, 8399, 8400, 1, 0, 0, 0, 8400, 8401, 1, 0, 0, 0, 
	8401, 8402, 5, 437, 0, 0, 8402, 8403, 5, 583, 0, 0, 8403, 8406, 3, 820, 
	410, 0, 8404, 8405, 5, 954, 0, 0, 8405, 8407, 3, 348, 174, 0, 8406, 8404, 
	1, 0, 0, 0, 8406, 8407, 1, 0, 0, 0, 8407, 477, 1, 0, 0, 0, 8408, 8409, 
	5, 151, 0, 0, 8409, 8410, 3, 816, 408, 0, 8410, 479, 1, 0, 0, 0, 8411, 
	8412, 5, 491, 0, 0, 8412, 8413, 5, 500, 0, 0, 8413, 481, 1, 0, 0, 0, 8414, 
	8415, 5, 212, 0, 0, 8415, 8431, 3, 836, 418, 0, 8416, 8428, 7, 28, 0, 0, 
	8417, 8418, 5, 1063, 0, 0, 8418, 8419, 3, 832, 416, 0, 8419, 8420, 5, 1069, 
	0, 0, 8420, 8421, 3, 832, 416, 0, 8421, 8422, 5, 1064, 0, 0, 8422, 8429, 
	1, 0, 0, 0, 8423, 8424, 5, 801, 0, 0, 8424, 8425, 3, 832, 416, 0, 8425, 
	8426, 5, 366, 0, 0, 8426, 8427, 3, 832, 416, 0, 8427, 8429, 1, 0, 0, 0, 
	8428, 8417, 1, 0, 0, 0, 8428, 8423, 1, 0, 0, 0, 8428, 8429, 1, 0, 0, 0, 
	8429, 8431, 1, 0, 0, 0, 8430, 8414, 1, 0, 0, 0, 8430, 8416, 1, 0, 0, 0, 
	8431, 483, 1, 0, 0, 0, 8432, 8433, 5, 312, 0, 0, 8433, 8434, 5, 396, 0, 
	0, 8434, 485, 1, 0, 0, 0, 8435, 8436, 5, 167, 0, 0, 8436, 8438, 3, 820, 
	410, 0, 8437, 8435, 1, 0, 0, 0, 8437, 8438, 1, 0, 0, 0, 8438, 8459, 1, 
	0, 0, 0, 8439, 8441, 5, 929, 0, 0, 8440, 8442, 3, 348, 174, 0, 8441, 8440, 
	1, 0, 0, 0, 8441, 8442, 1, 0, 0, 0, 8442, 8460, 1, 0, 0, 0, 8443, 8444, 
	5, 594, 0, 0, 8444, 8446, 5, 396, 0, 0, 8445, 8447, 3, 348, 174, 0, 8446, 
	8445, 1, 0, 0, 0, 8446, 8447, 1, 0, 0, 0, 8447, 8460, 1, 0, 0, 0, 8448, 
	8450, 3, 484, 242, 0, 8449, 8448, 1, 0, 0, 0, 8449, 8450, 1, 0, 0, 0, 8450, 
	8452, 1, 0, 0, 0, 8451, 8453, 3, 348, 174, 0, 8452, 8451, 1, 0, 0, 0, 8452, 
	8453, 1, 0, 0, 0, 8453, 8454, 1, 0, 0, 0, 8454, 8455, 5, 646, 0, 0, 8455, 
	8457, 3, 830, 415, 0, 8456, 8458, 3, 348, 174, 0, 8457, 8456, 1, 0, 0, 
	0, 8457, 8458, 1, 0, 0, 0, 8458, 8460, 1, 0, 0, 0, 8459, 8439, 1, 0, 0, 
	0, 8459, 8443, 1, 0, 0, 0, 8459, 8449, 1, 0, 0, 0, 8460, 8462, 1, 0, 0, 
	0, 8461, 8463, 3, 242, 121, 0, 8462, 8461, 1, 0, 0, 0, 8462, 8463, 1, 0, 
	0, 0, 8463, 487, 1, 0, 0, 0, 8464, 8466, 3, 336, 168, 0, 8465, 8467, 3, 
	478, 239, 0, 8466, 8465, 1, 0, 0, 0, 8466, 8467, 1, 0, 0, 0, 8467, 8469, 
	1, 0, 0, 0, 8468, 8470, 3, 618, 309, 0, 8469, 8468, 1, 0, 0, 0, 8469, 8470, 
	1, 0, 0, 0, 8470, 8472, 1, 0, 0, 0, 8471, 8473, 3, 482, 241, 0, 8472, 8471, 
	1, 0, 0, 0, 8472, 8473, 1, 0, 0, 0, 8473, 8475, 1, 0, 0, 0, 8474, 8476, 
	3, 480, 240, 0, 8475, 8474, 1, 0, 0, 0, 8475, 8476, 1, 0, 0, 0, 8476, 8478, 
	1, 0, 0, 0, 8477, 8479, 3, 476, 238, 0, 8478, 8477, 1, 0, 0, 0, 8478, 8479, 
	1, 0, 0, 0, 8479, 8481, 1, 0, 0, 0, 8480, 8482, 3, 468, 234, 0, 8481, 8480, 
	1, 0, 0, 0, 8481, 8482, 1, 0, 0, 0, 8482, 8484, 1, 0, 0, 0, 8483, 8485, 
	3, 240, 120, 0, 8484, 8483, 1, 0, 0, 0, 8484, 8485, 1, 0, 0, 0, 8485, 489, 
	1, 0, 0, 0, 8486, 8489, 3, 488, 244, 0, 8487, 8489, 3, 486, 243, 0, 8488, 
	8486, 1, 0, 0, 0, 8488, 8487, 1, 0, 0, 0, 8489, 491, 1, 0, 0, 0, 8490, 
	8495, 3, 490, 245, 0, 8491, 8492, 5, 1069, 0, 0, 8492, 8494, 3, 490, 245, 
	0, 8493, 8491, 1, 0, 0, 0, 8494, 8497, 1, 0, 0, 0, 8495, 8493, 1, 0, 0, 
	0, 8495, 8496, 1, 0, 0, 0, 8496, 493, 1, 0, 0, 0, 8497, 8495, 1, 0, 0, 
	0, 8498, 8500, 5, 183, 0, 0, 8499, 8501, 3, 626, 313, 0, 8500, 8499, 1, 
	0, 0, 0, 8500, 8501, 1, 0, 0, 0, 8501, 8503, 1, 0, 0, 0, 8502, 8504, 3, 
	466, 233, 0, 8503, 8502, 1, 0, 0, 0, 8503, 8504, 1, 0, 0, 0, 8504, 8505, 
	1, 0, 0, 0, 8505, 8507, 5, 851, 0, 0, 8506, 8508, 3, 624, 312, 0, 8507, 
	8506, 1, 0, 0, 0, 8507, 8508, 1, 0, 0, 0, 8508, 8509, 1, 0, 0, 0, 8509, 
	8510, 3, 830, 415, 0, 8510, 8511, 5, 1063, 0, 0, 8511, 8512, 3, 492, 246, 
	0, 8512, 8514, 5, 1064, 0, 0, 8513, 8515, 3, 472, 236, 0, 8514, 8513, 1, 
	0, 0, 0, 8514, 8515, 1, 0, 0, 0, 8515, 8517, 1, 0, 0, 0, 8516, 8518, 3, 
	50, 25, 0, 8517, 8516, 1, 0, 0, 0, 8517, 8518, 1, 0, 0, 0, 8518, 8525, 
	1, 0, 0, 0, 8519, 8520, 5, 796, 0, 0, 8520, 8521, 5, 1052, 0, 0, 8521, 
	8522, 5, 1063, 0, 0, 8522, 8523, 3, 408, 204, 0, 8523, 8524, 5, 1064, 0, 
	0, 8524, 8526, 1, 0, 0, 0, 8525, 8519, 1, 0, 0, 0, 8525, 8526, 1, 0, 0, 
	0, 8526, 8530, 1, 0, 0, 0, 8527, 8528, 5, 199, 0, 0, 8528, 8529, 5, 1052, 
	0, 0, 8529, 8531, 3, 832, 416, 0, 8530, 8527, 1, 0, 0, 0, 8530, 8531, 1, 
	0, 0, 0, 8531, 8535, 1, 0, 0, 0, 8532, 8533, 5, 449, 0, 0, 8533, 8534, 
	5, 1052, 0, 0, 8534, 8536, 3, 832, 416, 0, 8535, 8532, 1, 0, 0, 0, 8535, 
	8536, 1, 0, 0, 0, 8536, 8538, 1, 0, 0, 0, 8537, 8539, 3, 474, 237, 0, 8538, 
	8537, 1, 0, 0, 0, 8538, 8539, 1, 0, 0, 0, 8539, 8541, 1, 0, 0, 0, 8540, 
	8542, 3, 128, 64, 0, 8541, 8540, 1, 0, 0, 0, 8541, 8542, 1, 0, 0, 0, 8542, 
	8544, 1, 0, 0, 0, 8543, 8545, 3, 452, 226, 0, 8544, 8543, 1, 0, 0, 0, 8544, 
	8545, 1, 0, 0, 0, 8545, 8547, 1, 0, 0, 0, 8546, 8548, 3, 470, 235, 0, 8547, 
	8546, 1, 0, 0, 0, 8547, 8548, 1, 0, 0, 0, 8548, 8550, 1, 0, 0, 0, 8549, 
	8551, 3, 468, 234, 0, 8550, 8549, 1, 0, 0, 0, 8550, 8551, 1, 0, 0, 0, 8551, 
	8553, 1, 0, 0, 0, 8552, 8554, 3, 618, 309, 0, 8553, 8552, 1, 0, 0, 0, 8553, 
	8554, 1, 0, 0, 0, 8554, 495, 1, 0, 0, 0, 8555, 8557, 5, 183, 0, 0, 8556, 
	8558, 3, 626, 313, 0, 8557, 8556, 1, 0, 0, 0, 8557, 8558, 1, 0, 0, 0, 8558, 
	8559, 1, 0, 0, 0, 8559, 8561, 5, 858, 0, 0, 8560, 8562, 3, 624, 312, 0, 
	8561, 8560, 1, 0, 0, 0, 8561, 8562, 1, 0, 0, 0, 8562, 8563, 1, 0, 0, 0, 
	8563, 8567, 3, 820, 410, 0, 8564, 8565, 5, 155, 0, 0, 8565, 8566, 5, 1052, 
	0, 0, 8566, 8568, 3, 816, 408, 0, 8567, 8564, 1, 0, 0, 0, 8567, 8568, 1, 
	0, 0, 0, 8568, 8590, 1, 0, 0, 0, 8569, 8571, 5, 183, 0, 0, 8570, 8572, 
	3, 626, 313, 0, 8571, 8570, 1, 0, 0, 0, 8571, 8572, 1, 0, 0, 0, 8572, 8573, 
	1, 0, 0, 0, 8573, 8575, 5, 858, 0, 0, 8574, 8576, 3, 624, 312, 0, 8575, 
	8574, 1, 0, 0, 0, 8575, 8576, 1, 0, 0, 0, 8576, 8577, 1, 0, 0, 0, 8577, 
	8587, 3, 820, 410, 0, 8578, 8579, 5, 34, 0, 0, 8579, 8584, 3, 816, 408, 
	0, 8580, 8581, 5, 1069, 0, 0, 8581, 8583, 3, 816, 408, 0, 8582, 8580, 1, 
	0, 0, 0, 8583, 8586, 1, 0, 0, 0, 8584, 8582, 1, 0, 0, 0, 8584, 8585, 1, 
	0, 0, 0, 8585, 8588, 1, 0, 0, 0, 8586, 8584, 1, 0, 0, 0, 8587, 8578, 1, 
	0, 0, 0, 8587, 8588, 1, 0, 0, 0, 8588, 8590, 1, 0, 0, 0, 8589, 8555, 1, 
	0, 0, 0, 8589, 8569, 1, 0, 0, 0, 8590, 497, 1, 0, 0, 0, 8591, 8592, 7, 
	50, 0, 0, 8592, 499, 1, 0, 0, 0, 8593, 8598, 3, 498, 249, 0, 8594, 8595, 
	5, 1069, 0, 0, 8595, 8597, 3, 498, 249, 0, 8596, 8594, 1, 0, 0, 0, 8597, 
	8600, 1, 0, 0, 0, 8598, 8596, 1, 0, 0, 0, 8598, 8599, 1, 0, 0, 0, 8599, 
	501, 1, 0, 0, 0, 8600, 8598, 1, 0, 0, 0, 8601, 8606, 3, 504, 252, 0, 8602, 
	8603, 5, 1069, 0, 0, 8603, 8605, 3, 504, 252, 0, 8604, 8602, 1, 0, 0, 0, 
	8605, 8608, 1, 0, 0, 0, 8606, 8604, 1, 0, 0, 0, 8606, 8607, 1, 0, 0, 0, 
	8607, 503, 1, 0, 0, 0, 8608, 8606, 1, 0, 0, 0, 8609, 8610, 3, 498, 249, 
	0, 8610, 8611, 5, 1052, 0, 0, 8611, 8612, 3, 430, 215, 0, 8612, 505, 1, 
	0, 0, 0, 8613, 8615, 5, 183, 0, 0, 8614, 8616, 3, 626, 313, 0, 8615, 8614, 
	1, 0, 0, 0, 8615, 8616, 1, 0, 0, 0, 8616, 8617, 1, 0, 0, 0, 8617, 8619, 
	5, 861, 0, 0, 8618, 8620, 3, 624, 312, 0, 8619, 8618, 1, 0, 0, 0, 8619, 
	8620, 1, 0, 0, 0, 8620, 8621, 1, 0, 0, 0, 8621, 8628, 3, 830, 415, 0, 8622, 
	8623, 5, 973, 0, 0, 8623, 8624, 5, 1052, 0, 0, 8624, 8629, 3, 816, 408, 
	0, 8625, 8626, 5, 951, 0, 0, 8626, 8627, 5, 1052, 0, 0, 8627, 8629, 3, 
	816, 408, 0, 8628, 8622, 1, 0, 0, 0, 8628, 8625, 1, 0, 0, 0, 8628, 8629, 
	1, 0, 0, 0, 8629, 8633, 1, 0, 0, 0, 8630, 8631, 5, 730, 0, 0, 8631, 8632, 
	5, 1052, 0, 0, 8632, 8634, 3, 816, 408, 0, 8633, 8630, 1, 0, 0, 0, 8633, 
	8634, 1, 0, 0, 0, 8634, 8638, 1, 0, 0, 0, 8635, 8636, 5, 26, 0, 0, 8636, 
	8637, 5, 1052, 0, 0, 8637, 8639, 3, 430, 215, 0, 8638, 8635, 1, 0, 0, 0, 
	8638, 8639, 1, 0, 0, 0, 8639, 8641, 1, 0, 0, 0, 8640, 8642, 3, 502, 251, 
	0, 8641, 8640, 1, 0, 0, 0, 8641, 8642, 1, 0, 0, 0, 8642, 8646, 1, 0, 0, 
	0, 8643, 8644, 5, 952, 0, 0, 8644, 8645, 5, 1052, 0, 0, 8645, 8647, 3, 
	832, 416, 0, 8646, 8643, 1, 0, 0, 0, 8646, 8647, 1, 0, 0, 0, 8647, 8651, 
	1, 0, 0, 0, 8648, 8649, 5, 844, 0, 0, 8649, 8650, 5, 1052, 0, 0, 8650, 
	8652, 3, 832, 416, 0, 8651, 8648, 1, 0, 0, 0, 8651, 8652, 1, 0, 0, 0, 8652, 
	8656, 1, 0, 0, 0, 8653, 8654, 5, 263, 0, 0, 8654, 8655, 5, 1052, 0, 0, 
	8655, 8657, 3, 820, 410, 0, 8656, 8653, 1, 0, 0, 0, 8656, 8657, 1, 0, 0, 
	0, 8657, 8659, 1, 0, 0, 0, 8658, 8660, 3, 452, 226, 0, 8659, 8658, 1, 0, 
	0, 0, 8659, 8660, 1, 0, 0, 0, 8660, 8662, 1, 0, 0, 0, 8661, 8663, 3, 618, 
	309, 0, 8662, 8661, 1, 0, 0, 0, 8662, 8663, 1, 0, 0, 0, 8663, 8673, 1, 
	0, 0, 0, 8664, 8665, 5, 18, 0, 0, 8665, 8670, 3, 816, 408, 0, 8666, 8667, 
	5, 1069, 0, 0, 8667, 8669, 3, 816, 408, 0, 8668, 8666, 1, 0, 0, 0, 8669, 
	8672, 1, 0, 0, 0, 8670, 8668, 1, 0, 0, 0, 8670, 8671, 1, 0, 0, 0, 8671, 
	8674, 1, 0, 0, 0, 8672, 8670, 1, 0, 0, 0, 8673, 8664, 1, 0, 0, 0, 8673, 
	8674, 1, 0, 0, 0, 8674, 8677, 1, 0, 0, 0, 8675, 8676, 5, 980, 0, 0, 8676, 
	8678, 3, 988, 494, 0, 8677, 8675, 1, 0, 0, 0, 8677, 8678, 1, 0, 0, 0, 8678, 
	8679, 1, 0, 0, 0, 8679, 8680, 5, 53, 0, 0, 8680, 8681, 3, 508, 254, 0, 
	8681, 507, 1, 0, 0, 0, 8682, 8686, 3, 4, 2, 0, 8683, 8686, 3, 510, 255, 
	0, 8684, 8686, 5, 1042, 0, 0, 8685, 8682, 1, 0, 0, 0, 8685, 8683, 1, 0, 
	0, 0, 8685, 8684, 1, 0, 0, 0, 8686, 509, 1, 0, 0, 0, 8687, 8688, 5, 107, 
	0, 0, 8688, 8689, 3, 830, 415, 0, 8689, 8691, 5, 1063, 0, 0, 8690, 8692, 
	3, 834, 417, 0, 8691, 8690, 1, 0, 0, 0, 8691, 8692, 1, 0, 0, 0, 8692, 8693, 
	1, 0, 0, 0, 8693, 8694, 5, 1064, 0, 0, 8694, 511, 1, 0, 0, 0, 8695, 8697, 
	5, 183, 0, 0, 8696, 8698, 3, 626, 313, 0, 8697, 8696, 1, 0, 0, 0, 8697, 
	8698, 1, 0, 0, 0, 8698, 8699, 1, 0, 0, 0, 8699, 8701, 5, 949, 0, 0, 8700, 
	8702, 3, 624, 312, 0, 8701, 8700, 1, 0, 0, 0, 8701, 8702, 1, 0, 0, 0, 8702, 
	8703, 1, 0, 0, 0, 8703, 8705, 3, 820, 410, 0, 8704, 8706, 3, 130, 65, 0, 
	8705, 8704, 1, 0, 0, 0, 8705, 8706, 1, 0, 0, 0, 8706, 8708, 1, 0, 0, 0, 
	8707, 8709, 3, 126, 63, 0, 8708, 8707, 1, 0, 0, 0, 8708, 8709, 1, 0, 0, 
	0, 8709, 8711, 1, 0, 0, 0, 8710, 8712, 3, 132, 66, 0, 8711, 8710, 1, 0, 
	0, 0, 8711, 8712, 1, 0, 0, 0, 8712, 513, 1, 0, 0, 0, 8713, 8714, 3, 826, 
	413, 0, 8714, 8715, 3, 476, 238, 0, 8715, 8716, 3, 468, 234, 0, 8716, 515, 
	1, 0, 0, 0, 8717, 8719, 5, 183, 0, 0, 8718, 8720, 3, 626, 313, 0, 8719, 
	8718, 1, 0, 0, 0, 8719, 8720, 1, 0, 0, 0, 8720, 8722, 1, 0, 0, 0, 8721, 
	8723, 5, 744, 0, 0, 8722, 8721, 1, 0, 0, 0, 8722, 8723, 1, 0, 0, 0, 8723, 
	8725, 1, 0, 0, 0, 8724, 8726, 5, 643, 0, 0, 8725, 8724, 1, 0, 0, 0, 8725, 
	8726, 1, 0, 0, 0, 8726, 8727, 1, 0, 0, 0, 8727, 8729, 5, 967, 0, 0, 8728, 
	8730, 3, 624, 312, 0, 8729, 8728, 1, 0, 0, 0, 8729, 8730, 1, 0, 0, 0, 8730, 
	8731, 1, 0, 0, 0, 8731, 8736, 3, 830, 415, 0, 8732, 8733, 5, 1063, 0, 0, 
	8733, 8734, 3, 828, 414, 0, 8734, 8735, 5, 1064, 0, 0, 8735, 8737, 1, 0, 
	0, 0, 8736, 8732, 1, 0, 0, 0, 8736, 8737, 1, 0, 0, 0, 8737, 8741, 1, 0, 
	0, 0, 8738, 8740, 3, 514, 257, 0, 8739, 8738, 1, 0, 0, 0, 8740, 8743, 1, 
	0, 0, 0, 8741, 8739, 1, 0, 0, 0, 8741, 8742, 1, 0, 0, 0, 8742, 8745, 1, 
	0, 0, 0, 8743, 8741, 1, 0, 0, 0, 8744, 8746, 3, 470, 235, 0, 8745, 8744, 
	1, 0, 0, 0, 8745, 8746, 1, 0, 0, 0, 8746, 8748, 1, 0, 0, 0, 8747, 8749, 
	3, 468, 234, 0, 8748, 8747, 1, 0, 0, 0, 8748, 8749, 1, 0, 0, 0, 8749, 8751, 
	1, 0, 0, 0, 8750, 8752, 3, 452, 226, 0, 8751, 8750, 1, 0, 0, 0, 8751, 8752, 
	1, 0, 0, 0, 8752, 8754, 1, 0, 0, 0, 8753, 8755, 3, 618, 309, 0, 8754, 8753, 
	1, 0, 0, 0, 8754, 8755, 1, 0, 0, 0, 8755, 8756, 1, 0, 0, 0, 8756, 8757, 
	5, 53, 0, 0, 8757, 8758, 3, 882, 441, 0, 8758, 517, 1, 0, 0, 0, 8759, 8761, 
	5, 183, 0, 0, 8760, 8762, 3, 626, 313, 0, 8761, 8760, 1, 0, 0, 0, 8761, 
	8762, 1, 0, 0, 0, 8762, 8763, 1, 0, 0, 0, 8763, 8765, 5, 973, 0, 0, 8764, 
	8766, 3, 624, 312, 0, 8765, 8764, 1, 0, 0, 0, 8765, 8766, 1, 0, 0, 0, 8766, 
	8767, 1, 0, 0, 0, 8767, 8776, 3, 820, 410, 0, 8768, 8770, 5, 982, 0, 0, 
	8769, 8768, 1, 0, 0, 0, 8769, 8770, 1, 0, 0, 0, 8770, 8772, 1, 0, 0, 0, 
	8771, 8773, 3, 520, 260, 0, 8772, 8771, 1, 0, 0, 0, 8773, 8774, 1, 0, 0, 
	0, 8774, 8772, 1, 0, 0, 0, 8774, 8775, 1, 0, 0, 0, 8775, 8777, 1, 0, 0, 
	0, 8776, 8769, 1, 0, 0, 0, 8776, 8777, 1, 0, 0, 0, 8777, 8781, 1, 0, 0, 
	0, 8778, 8780, 3, 522, 261, 0, 8779, 8778, 1, 0, 0, 0, 8780, 8783, 1, 0, 
	0, 0, 8781, 8779, 1, 0, 0, 0, 8781, 8782, 1, 0, 0, 0, 8782, 519, 1, 0, 
	0, 0, 8783, 8781, 1, 0, 0, 0, 8784, 8785, 5, 974, 0, 0, 8785, 8786, 5, 
	1052, 0, 0, 8786, 8820, 7, 51, 0, 0, 8787, 8788, 5, 447, 0, 0, 8788, 8789, 
	5, 1052, 0, 0, 8789, 8820, 3, 832, 416, 0, 8790, 8791, 5, 456, 0, 0, 8791, 
	8792, 5, 1052, 0, 0, 8792, 8820, 3, 832, 416, 0, 8793, 8794, 5, 729, 0, 
	0, 8794, 8795, 5, 1052, 0, 0, 8795, 8820, 5, 799, 0, 0, 8796, 8820, 5, 
	240, 0, 0, 8797, 8801, 5, 65, 0, 0, 8798, 8799, 5, 1052, 0, 0, 8799, 8802, 
	3, 832, 416, 0, 8800, 8802, 5, 500, 0, 0, 8801, 8798, 1, 0, 0, 0, 8801, 
	8800, 1, 0, 0, 0, 8802, 8820, 1, 0, 0, 0, 8803, 8804, 5, 64, 0, 0, 8804, 
	8805, 5, 1052, 0, 0, 8805, 8820, 3, 430, 215, 0, 8806, 8807, 5, 372, 0, 
	0, 8807, 8808, 5, 1052, 0, 0, 8808, 8820, 3, 430, 215, 0, 8809, 8810, 5, 
	671, 0, 0, 8810, 8811, 5, 1052, 0, 0, 8811, 8820, 3, 820, 410, 0, 8812, 
	8820, 3, 618, 309, 0, 8813, 8814, 5, 250, 0, 0, 8814, 8815, 5, 1052, 0, 
	0, 8815, 8820, 3, 430, 215, 0, 8816, 8817, 5, 618, 0, 0, 8817, 8818, 5, 
	1052, 0, 0, 8818, 8820, 3, 832, 416, 0, 8819, 8784, 1, 0, 0, 0, 8819, 8787, 
	1, 0, 0, 0, 8819, 8790, 1, 0, 0, 0, 8819, 8793, 1, 0, 0, 0, 8819, 8796, 
	1, 0, 0, 0, 8819, 8797, 1, 0, 0, 0, 8819, 8803, 1, 0, 0, 0, 8819, 8806, 
	1, 0, 0, 0, 8819, 8809, 1, 0, 0, 0, 8819, 8812, 1, 0, 0, 0, 8819, 8813, 
	1, 0, 0, 0, 8819, 8816, 1, 0, 0, 0, 8820, 521, 1, 0, 0, 0, 8821, 8822, 
	5, 448, 0, 0, 8822, 8823, 5, 1052, 0, 0, 8823, 8834, 3, 832, 416, 0, 8824, 
	8825, 5, 808, 0, 0, 8825, 8826, 5, 1052, 0, 0, 8826, 8834, 3, 832, 416, 
	0, 8827, 8828, 5, 809, 0, 0, 8828, 8829, 5, 1052, 0, 0, 8829, 8831, 3, 
	832, 416, 0, 8830, 8832, 3, 468, 234, 0, 8831, 8830, 1, 0, 0, 0, 8831, 
	8832, 1, 0, 0, 0, 8832, 8834, 1, 0, 0, 0, 8833, 8821, 1, 0, 0, 0, 8833, 
	8824, 1, 0, 0, 0, 8833, 8827, 1, 0, 0, 0, 8834, 523, 1, 0, 0, 0, 8835, 
	8836, 5, 531, 0, 0, 8836, 8837, 3, 832, 416, 0, 8837, 8838, 5, 567, 0, 
	0, 8838, 8839, 5, 237, 0, 0, 8839, 8840, 7, 17, 0, 0, 8840, 525, 1, 0, 
	0, 0, 8841, 8869, 5, 693, 0, 0, 8842, 8869, 5, 949, 0, 0, 8843, 8869, 5, 
	973, 0, 0, 8844, 8869, 5, 379, 0, 0, 8845, 8846, 5, 477, 0, 0, 8846, 8869, 
	5, 583, 0, 0, 8847, 8848, 5, 753, 0, 0, 8848, 8869, 5, 583, 0, 0, 8849, 
	8869, 5, 200, 0, 0, 8850, 8869, 5, 732, 0, 0, 8851, 8869, 5, 851, 0, 0, 
	8852, 8869, 5, 967, 0, 0, 8853, 8869, 5, 795, 0, 0, 8854, 8855, 5, 303, 
	0, 0, 8855, 8869, 5, 313, 0, 0, 8856, 8869, 5, 830, 0, 0, 8857, 8869, 5, 
	861, 0, 0, 8858, 8859, 5, 437, 0, 0, 8859, 8869, 5, 583, 0, 0, 8860, 8861, 
	5, 698, 0, 0, 8861, 8862, 5, 8, 0, 0, 8862, 8869, 5, 583, 0, 0, 8863, 8869, 
	5, 858, 0, 0, 8864, 8869, 5, 576, 0, 0, 8865, 8869, 5, 319, 0, 0, 8866, 
	8869, 5, 603, 0, 0, 8867, 8869, 5, 749, 0, 0, 8868, 8841, 1, 0, 0, 0, 8868, 
	8842, 1, 0, 0, 0, 8868, 8843, 1, 0, 0, 0, 8868, 8844, 1, 0, 0, 0, 8868, 
	8845, 1, 0, 0, 0, 8868, 8847, 1, 0, 0, 0, 8868, 8849, 1, 0, 0, 0, 8868, 
	8850, 1, 0, 0, 0, 8868, 8851, 1, 0, 0, 0, 8868, 8852, 1, 0, 0, 0, 8868, 
	8853, 1, 0, 0, 0, 8868, 8854, 1, 0, 0, 0, 8868, 8856, 1, 0, 0, 0, 8868, 
	8857, 1, 0, 0, 0, 8868, 8858, 1, 0, 0, 0, 8868, 8860, 1, 0, 0, 0, 8868, 
	8863, 1, 0, 0, 0, 8868, 8864, 1, 0, 0, 0, 8868, 8865, 1, 0, 0, 0, 8868, 
	8866, 1, 0, 0, 0, 8868, 8867, 1, 0, 0, 0, 8869, 527, 1, 0, 0, 0, 8870, 
	8871, 7, 52, 0, 0, 8871, 529, 1, 0, 0, 0, 8872, 8903, 3, 532, 266, 0, 8873, 
	8903, 3, 534, 267, 0, 8874, 8903, 3, 536, 268, 0, 8875, 8903, 3, 538, 269, 
	0, 8876, 8903, 3, 540, 270, 0, 8877, 8903, 3, 542, 271, 0, 8878, 8903, 
	3, 544, 272, 0, 8879, 8903, 3, 546, 273, 0, 8880, 8903, 3, 548, 274, 0, 
	8881, 8903, 3, 550, 275, 0, 8882, 8903, 3, 552, 276, 0, 8883, 8903, 3, 
	554, 277, 0, 8884, 8903, 3, 556, 278, 0, 8885, 8903, 3, 558, 279, 0, 8886, 
	8903, 3, 560, 280, 0, 8887, 8903, 3, 562, 281, 0, 8888, 8903, 3, 564, 282, 
	0, 8889, 8903, 3, 566, 283, 0, 8890, 8903, 3, 568, 284, 0, 8891, 8903, 
	3, 570, 285, 0, 8892, 8903, 3, 572, 286, 0, 8893, 8903, 3, 574, 287, 0, 
	8894, 8903, 3, 576, 288, 0, 8895, 8903, 3, 578, 289, 0, 8896, 8903, 3, 
	580, 290, 0, 8897, 8903, 3, 582, 291, 0, 8898, 8903, 3, 584, 292, 0, 8899, 
	8903, 3, 586, 293, 0, 8900, 8903, 3, 588, 294, 0, 8901, 8903, 3, 590, 295, 
	0, 8902, 8872, 1, 0, 0, 0, 8902, 8873, 1, 0, 0, 0, 8902, 8874, 1, 0, 0, 
	0, 8902, 8875, 1, 0, 0, 0, 8902, 8876, 1, 0, 0, 0, 8902, 8877, 1, 0, 0, 
	0, 8902, 8878, 1, 0, 0, 0, 8902, 8879, 1, 0, 0, 0, 8902, 8880, 1, 0, 0, 
	0, 8902, 8881, 1, 0, 0, 0, 8902, 8882, 1, 0, 0, 0, 8902, 8883, 1, 0, 0, 
	0, 8902, 8884, 1, 0, 0, 0, 8902, 8885, 1, 0, 0, 0, 8902, 8886, 1, 0, 0, 
	0, 8902, 8887, 1, 0, 0, 0, 8902, 8888, 1, 0, 0, 0, 8902, 8889, 1, 0, 0, 
	0, 8902, 8890, 1, 0, 0, 0, 8902, 8891, 1, 0, 0, 0, 8902, 8892, 1, 0, 0, 
	0, 8902, 8893, 1, 0, 0, 0, 8902, 8894, 1, 0, 0, 0, 8902, 8895, 1, 0, 0, 
	0, 8902, 8896, 1, 0, 0, 0, 8902, 8897, 1, 0, 0, 0, 8902, 8898, 1, 0, 0, 
	0, 8902, 8899, 1, 0, 0, 0, 8902, 8900, 1, 0, 0, 0, 8902, 8901, 1, 0, 0, 
	0, 8903, 531, 1, 0, 0, 0, 8904, 8905, 5, 239, 0, 0, 8905, 8906, 3, 800, 
	400, 0, 8906, 8907, 3, 622, 311, 0, 8907, 8909, 3, 820, 410, 0, 8908, 8910, 
	3, 592, 296, 0, 8909, 8908, 1, 0, 0, 0, 8909, 8910, 1, 0, 0, 0, 8910, 533, 
	1, 0, 0, 0, 8911, 8912, 5, 239, 0, 0, 8912, 8914, 5, 165, 0, 0, 8913, 8915, 
	3, 622, 311, 0, 8914, 8913, 1, 0, 0, 0, 8914, 8915, 1, 0, 0, 0, 8915, 8916, 
	1, 0, 0, 0, 8916, 8917, 3, 820, 410, 0, 8917, 535, 1, 0, 0, 0, 8918, 8919, 
	5, 239, 0, 0, 8919, 8921, 5, 200, 0, 0, 8920, 8922, 3, 622, 311, 0, 8921, 
	8920, 1, 0, 0, 0, 8921, 8922, 1, 0, 0, 0, 8922, 8923, 1, 0, 0, 0, 8923, 
	8925, 3, 820, 410, 0, 8924, 8926, 3, 592, 296, 0, 8925, 8924, 1, 0, 0, 
	0, 8925, 8926, 1, 0, 0, 0, 8926, 537, 1, 0, 0, 0, 8927, 8928, 5, 239, 0, 
	0, 8928, 8929, 5, 280, 0, 0, 8929, 8931, 5, 851, 0, 0, 8930, 8932, 3, 622, 
	311, 0, 8931, 8930, 1, 0, 0, 0, 8931, 8932, 1, 0, 0, 0, 8932, 8933, 1, 
	0, 0, 0, 8933, 8935, 3, 830, 415, 0, 8934, 8936, 3, 592, 296, 0, 8935, 
	8934, 1, 0, 0, 0, 8935, 8936, 1, 0, 0, 0, 8936, 539, 1, 0, 0, 0, 8937, 
	8938, 5, 239, 0, 0, 8938, 8939, 5, 297, 0, 0, 8939, 8941, 5, 338, 0, 0, 
	8940, 8942, 3, 622, 311, 0, 8941, 8940, 1, 0, 0, 0, 8941, 8942, 1, 0, 0, 
	0, 8942, 8943, 1, 0, 0, 0, 8943, 8944, 3, 820, 410, 0, 8944, 541, 1, 0, 
	0, 0, 8945, 8946, 5, 239, 0, 0, 8946, 8947, 5, 303, 0, 0, 8947, 8949, 5, 
	313, 0, 0, 8948, 8950, 3, 622, 311, 0, 8949, 8948, 1, 0, 0, 0, 8949, 8950, 
	1, 0, 0, 0, 8950, 8951, 1, 0, 0, 0, 8951, 8952, 3, 820, 410, 0, 8952, 543, 
	1, 0, 0, 0, 8953, 8954, 5, 239, 0, 0, 8954, 8956, 5, 319, 0, 0, 8955, 8957, 
	3, 622, 311, 0, 8956, 8955, 1, 0, 0, 0, 8956, 8957, 1, 0, 0, 0, 8957, 8958, 
	1, 0, 0, 0, 8958, 8959, 3, 830, 415, 0, 8959, 8960, 3, 594, 297, 0, 8960, 
	545, 1, 0, 0, 0, 8961, 8963, 5, 239, 0, 0, 8962, 8964, 7, 53, 0, 0, 8963, 
	8962, 1, 0, 0, 0, 8963, 8964, 1, 0, 0, 0, 8964, 8965, 1, 0, 0, 0, 8965, 
	8967, 5, 379, 0, 0, 8966, 8968, 3, 622, 311, 0, 8967, 8966, 1, 0, 0, 0, 
	8967, 8968, 1, 0, 0, 0, 8968, 8969, 1, 0, 0, 0, 8969, 8970, 3, 820, 410, 
	0, 8970, 547, 1, 0, 0, 0, 8971, 8972, 5, 239, 0, 0, 8972, 8973, 5, 434, 
	0, 0, 8973, 8974, 5, 9, 0, 0, 8974, 8975, 3, 820, 410, 0, 8975, 549, 1, 
	0, 0, 0, 8976, 8977, 5, 239, 0, 0, 8977, 8978, 5, 437, 0, 0, 8978, 8979, 
	5, 583, 0, 0, 8979, 8980, 3, 820, 410, 0, 8980, 551, 1, 0, 0, 0, 8981, 
	8982, 5, 239, 0, 0, 8982, 8983, 5, 445, 0, 0, 8983, 8985, 5, 967, 0, 0, 
	8984, 8986, 3, 622, 311, 0, 8985, 8984, 1, 0, 0, 0, 8985, 8986, 1, 0, 0, 
	0, 8986, 8987, 1, 0, 0, 0, 8987, 8988, 3, 830, 415, 0, 8988, 553, 1, 0, 
	0, 0, 8989, 8990, 5, 239, 0, 0, 8990, 8991, 5, 477, 0, 0, 8991, 8993, 5, 
	583, 0, 0, 8992, 8994, 3, 622, 311, 0, 8993, 8992, 1, 0, 0, 0, 8993, 8994, 
	1, 0, 0, 0, 8994, 8995, 1, 0, 0, 0, 8995, 8996, 3, 820, 410, 0, 8996, 555, 
	1, 0, 0, 0, 8997, 8998, 5, 239, 0, 0, 8998, 9000, 5, 576, 0, 0, 8999, 9001, 
	3, 622, 311, 0, 9000, 8999, 1, 0, 0, 0, 9000, 9001, 1, 0, 0, 0, 9001, 9002, 
	1, 0, 0, 0, 9002, 9003, 3, 830, 415, 0, 9003, 557, 1, 0, 0, 0, 9004, 9005, 
	5, 239, 0, 0, 9005, 9007, 5, 603, 0, 0, 9006, 9008, 3, 622, 311, 0, 9007, 
	9006, 1, 0, 0, 0, 9007, 9008, 1, 0, 0, 0, 9008, 9009, 1, 0, 0, 0, 9009, 
	9010, 3, 830, 415, 0, 9010, 9011, 3, 594, 297, 0, 9011, 559, 1, 0, 0, 0, 
	9012, 9013, 5, 239, 0, 0, 9013, 9014, 5, 663, 0, 0, 9014, 9016, 5, 338, 
	0, 0, 9015, 9017, 3, 622, 311, 0, 9016, 9015, 1, 0, 0, 0, 9016, 9017, 1, 
	0, 0, 0, 9017, 9018, 1, 0, 0, 0, 9018, 9019, 3, 820, 410, 0, 9019, 561, 
	1, 0, 0, 0, 9020, 9021, 5, 239, 0, 0, 9021, 9022, 5, 670, 0, 0, 9022, 9023, 
	5, 465, 0, 0, 9023, 9024, 3, 820, 410, 0, 9024, 563, 1, 0, 0, 0, 9025, 
	9026, 5, 239, 0, 0, 9026, 9028, 5, 693, 0, 0, 9027, 9029, 3, 622, 311, 
	0, 9028, 9027, 1, 0, 0, 0, 9028, 9029, 1, 0, 0, 0, 9029, 9030, 1, 0, 0, 
	0, 9030, 9031, 3, 820, 410, 0, 9031, 565, 1, 0, 0, 0, 9032, 9033, 5, 239, 
	0, 0, 9033, 9034, 5, 698, 0, 0, 9034, 9035, 5, 8, 0, 0, 9035, 9037, 5, 
	583, 0, 0, 9036, 9038, 3, 622, 311, 0, 9037, 9036, 1, 0, 0, 0, 9037, 9038, 
	1, 0, 0, 0, 9038, 9039, 1, 0, 0, 0, 9039, 9040, 3, 820, 410, 0, 9040, 567, 
	1, 0, 0, 0, 9041, 9042, 5, 239, 0, 0, 9042, 9044, 5, 732, 0, 0, 9043, 9045, 
	3, 622, 311, 0, 9044, 9043, 1, 0, 0, 0, 9044, 9045, 1, 0, 0, 0, 9045, 9046, 
	1, 0, 0, 0, 9046, 9048, 3, 798, 399, 0, 9047, 9049, 3, 592, 296, 0, 9048, 
	9047, 1, 0, 0, 0, 9048, 9049, 1, 0, 0, 0, 9049, 569, 1, 0, 0, 0, 9050, 
	9051, 5, 239, 0, 0, 9051, 9053, 5, 749, 0, 0, 9052, 9054, 3, 622, 311, 
	0, 9053, 9052, 1, 0, 0, 0, 9053, 9054, 1, 0, 0, 0, 9054, 9055, 1, 0, 0, 
	0, 9055, 9057, 3, 830, 415, 0, 9056, 9058, 3, 592, 296, 0, 9057, 9056, 
	1, 0, 0, 0, 9057, 9058, 1, 0, 0, 0, 9058, 571, 1, 0, 0, 0, 9059, 9060, 
	5, 239, 0, 0, 9060, 9061, 5, 753, 0, 0, 9061, 9063, 5, 583, 0, 0, 9062, 
	9064, 3, 622, 311, 0, 9063, 9062, 1, 0, 0, 0, 9063, 9064, 1, 0, 0, 0, 9064, 
	9065, 1, 0, 0, 0, 9065, 9066, 3, 820, 410, 0, 9066, 573, 1, 0, 0, 0, 9067, 
	9068, 5, 239, 0, 0, 9068, 9069, 5, 760, 0, 0, 9069, 9070, 3, 820, 410, 
	0, 9070, 575, 1, 0, 0, 0, 9071, 9072, 5, 239, 0, 0, 9072, 9074, 5, 795, 
	0, 0, 9073, 9075, 3, 622, 311, 0, 9074, 9073, 1, 0, 0, 0, 9074, 9075, 1, 
	0, 0, 0, 9075, 9076, 1, 0, 0, 0, 9076, 9077, 3, 830, 415, 0, 9077, 577, 
	1, 0, 0, 0, 9078, 9079, 5, 239, 0, 0, 9079, 9081, 5, 830, 0, 0, 9080, 9082, 
	3, 622, 311, 0, 9081, 9080, 1, 0, 0, 0, 9081, 9082, 1, 0, 0, 0, 9082, 9083, 
	1, 0, 0, 0, 9083, 9084, 3, 830, 415, 0, 9084, 579, 1, 0, 0, 0, 9085, 9086, 
	5, 239, 0, 0, 9086, 9088, 5, 851, 0, 0, 9087, 9089, 3, 622, 311, 0, 9088, 
	9087, 1, 0, 0, 0, 9088, 9089, 1, 0, 0, 0, 9089, 9090, 1, 0, 0, 0, 9090, 
	9092, 3, 830, 415, 0, 9091, 9093, 3, 592, 296, 0, 9092, 9091, 1, 0, 0, 
	0, 9092, 9093, 1, 0, 0, 0, 9093, 581, 1, 0, 0, 0, 9094, 9095, 5, 239, 0, 
	0, 9095, 9097, 5, 858, 0, 0, 9096, 9098, 3, 622, 311, 0, 9097, 9096, 1, 
	0, 0, 0, 9097, 9098, 1, 0, 0, 0, 9098, 9099, 1, 0, 0, 0, 9099, 9100, 3, 
	820, 410, 0, 9100, 583, 1, 0, 0, 0, 9101, 9102, 5, 239, 0, 0, 9102, 9104, 
	5, 861, 0, 0, 9103, 9105, 3, 622, 311, 0, 9104, 9103, 1, 0, 0, 0, 9104, 
	9105, 1, 0, 0, 0, 9105, 9106, 1, 0, 0, 0, 9106, 9107, 3, 830, 415, 0, 9107, 
	585, 1, 0, 0, 0, 9108, 9109, 5, 239, 0, 0, 9109, 9111, 5, 949, 0, 0, 9110, 
	9112, 3, 622, 311, 0, 9111, 9110, 1, 0, 0, 0, 9111, 9112, 1, 0, 0, 0, 9112, 
	9113, 1, 0, 0, 0, 9113, 9114, 3, 820, 410, 0, 9114, 587, 1, 0, 0, 0, 9115, 
	9116, 5, 239, 0, 0, 9116, 9118, 5, 967, 0, 0, 9117, 9119, 3, 622, 311, 
	0, 9118, 9117, 1, 0, 0, 0, 9118, 9119, 1, 0, 0, 0, 9119, 9120, 1, 0, 0, 
	0, 9120, 9121, 3, 830, 415, 0, 9121, 589, 1, 0, 0, 0, 9122, 9123, 5, 239, 
	0, 0, 9123, 9125, 5, 973, 0, 0, 9124, 9126, 3, 622, 311, 0, 9125, 9124, 
	1, 0, 0, 0, 9125, 9126, 1, 0, 0, 0, 9126, 9127, 1, 0, 0, 0, 9127, 9128, 
	3, 820, 410, 0, 9128, 591, 1, 0, 0, 0, 9129, 9130, 7, 54, 0, 0, 9130, 593, 
	1, 0, 0, 0, 9131, 9133, 5, 1063, 0, 0, 9132, 9134, 3, 170, 85, 0, 9133, 
	9132, 1, 0, 0, 0, 9133, 9134, 1, 0, 0, 0, 9134, 9135, 1, 0, 0, 0, 9135, 
	9136, 5, 1064, 0, 0, 9136, 595, 1, 0, 0, 0, 9137, 9142, 3, 598, 299, 0, 
	9138, 9142, 3, 600, 300, 0, 9139, 9142, 3, 602, 301, 0, 9140, 9142, 3, 
	604, 302, 0, 9141, 9137, 1, 0, 0, 0, 9141, 9138, 1, 0, 0, 0, 9141, 9139, 
	1, 0, 0, 0, 9141, 9140, 1, 0, 0, 0, 9142, 597, 1, 0, 0, 0, 9143, 9144, 
	5, 926, 0, 0, 9144, 9145, 5, 200, 0, 0, 9145, 9146, 3, 820, 410, 0, 9146, 
	599, 1, 0, 0, 0, 9147, 9148, 5, 926, 0, 0, 9148, 9149, 5, 732, 0, 0, 9149, 
	9150, 3, 798, 399, 0, 9150, 601, 1, 0, 0, 0, 9151, 9152, 5, 926, 0, 0, 
	9152, 9153, 5, 851, 0, 0, 9153, 9154, 3, 830, 415, 0, 9154, 603, 1, 0, 
	0, 0, 9155, 9156, 5, 926, 0, 0, 9156, 9157, 5, 858, 0, 0, 9157, 9158, 3, 
	820, 410, 0, 9158, 605, 1, 0, 0, 0, 9159, 9165, 3, 608, 304, 0, 9160, 9165, 
	3, 610, 305, 0, 9161, 9165, 3, 612, 306, 0, 9162, 9165, 3, 614, 307, 0, 
	9163, 9165, 3, 616, 308, 0, 9164, 9159, 1, 0, 0, 0, 9164, 9160, 1, 0, 0, 
	0, 9164, 9161, 1, 0, 0, 0, 9164, 9162, 1, 0, 0, 0, 9164, 9163, 1, 0, 0, 
	0, 9165, 607, 1, 0, 0, 0, 9166, 9167, 5, 945, 0, 0, 9167, 9168, 5, 200, 
	0, 0, 9168, 9169, 3, 820, 410, 0, 9169, 609, 1, 0, 0, 0, 9170, 9171, 5, 
	945, 0, 0, 9171, 9172, 5, 693, 0, 0, 9172, 9173, 3, 820, 410, 0, 9173, 
	611, 1, 0, 0, 0, 9174, 9176, 5, 945, 0, 0, 9175, 9177, 5, 732, 0, 0, 9176, 
	9175, 1, 0, 0, 0, 9176, 9177, 1, 0, 0, 0, 9177, 9181, 1, 0, 0, 0, 9178, 
	9179, 3, 820, 410, 0, 9179, 9180, 5, 1059, 0, 0, 9180, 9182, 1, 0, 0, 0, 
	9181, 9178, 1, 0, 0, 0, 9181, 9182, 1, 0, 0, 0, 9182, 9183, 1, 0, 0, 0, 
	9183, 9184, 3, 820, 410, 0, 9184, 613, 1, 0, 0, 0, 9185, 9186, 5, 945, 
	0, 0, 9186, 9187, 5, 739, 0, 0, 9187, 9188, 5, 694, 0, 0, 9188, 9189, 7, 
	55, 0, 0, 9189, 615, 1, 0, 0, 0, 9190, 9191, 5, 945, 0, 0, 9191, 9192, 
	5, 973, 0, 0, 9192, 9193, 3, 820, 410, 0, 9193, 617, 1, 0, 0, 0, 9194, 
	9195, 5, 155, 0, 0, 9195, 9196, 5, 1052, 0, 0, 9196, 9197, 3, 816, 408, 
	0, 9197, 619, 1, 0, 0, 0, 9198, 9199, 5, 352, 0, 0, 9199, 9200, 5, 845, 
	0, 0, 9200, 621, 1, 0, 0, 0, 9201, 9202, 5, 352, 0, 0, 9202, 9203, 5, 274, 
	0, 0, 9203, 623, 1, 0, 0, 0, 9204, 9205, 5, 352, 0, 0, 9205, 9206, 5, 491, 
	0, 0, 9206, 9207, 5, 274, 0, 0, 9207, 625, 1, 0, 0, 0, 9208, 9209, 5, 542, 
	0, 0, 9209, 9210, 5, 660, 0, 0, 9210, 627, 1, 0, 0, 0, 9211, 9212, 7, 56, 
	0, 0, 9212, 629, 1, 0, 0, 0, 9213, 9239, 3, 632, 316, 0, 9214, 9239, 3, 
	634, 317, 0, 9215, 9239, 3, 636, 318, 0, 9216, 9239, 3, 638, 319, 0, 9217, 
	9239, 3, 640, 320, 0, 9218, 9239, 3, 642, 321, 0, 9219, 9239, 3, 644, 322, 
	0, 9220, 9239, 3, 646, 323, 0, 9221, 9239, 3, 648, 324, 0, 9222, 9239, 
	3, 650, 325, 0, 9223, 9239, 3, 652, 326, 0, 9224, 9239, 3, 654, 327, 0, 
	9225, 9239, 3, 656, 328, 0, 9226, 9239, 3, 658, 329, 0, 9227, 9239, 3, 
	660, 330, 0, 9228, 9239, 3, 662, 331, 0, 9229, 9239, 3, 664, 332, 0, 9230, 
	9239, 3, 666, 333, 0, 9231, 9239, 3, 668, 334, 0, 9232, 9239, 3, 670, 335, 
	0, 9233, 9239, 3, 672, 336, 0, 9234, 9239, 3, 674, 337, 0, 9235, 9239, 
	3, 676, 338, 0, 9236, 9239, 3, 678, 339, 0, 9237, 9239, 3, 680, 340, 0, 
	9238, 9213, 1, 0, 0, 0, 9238, 9214, 1, 0, 0, 0, 9238, 9215, 1, 0, 0, 0, 
	9238, 9216, 1, 0, 0, 0, 9238, 9217, 1, 0, 0, 0, 9238, 9218, 1, 0, 0, 0, 
	9238, 9219, 1, 0, 0, 0, 9238, 9220, 1, 0, 0, 0, 9238, 9221, 1, 0, 0, 0, 
	9238, 9222, 1, 0, 0, 0, 9238, 9223, 1, 0, 0, 0, 9238, 9224, 1, 0, 0, 0, 
	9238, 9225, 1, 0, 0, 0, 9238, 9226, 1, 0, 0, 0, 9238, 9227, 1, 0, 0, 0, 
	9238, 9228, 1, 0, 0, 0, 9238, 9229, 1, 0, 0, 0, 9238, 9230, 1, 0, 0, 0, 
	9238, 9231, 1, 0, 0, 0, 9238, 9232, 1, 0, 0, 0, 9238, 9233, 1, 0, 0, 0, 
	9238, 9234, 1, 0, 0, 0, 9238, 9235, 1, 0, 0, 0, 9238, 9236, 1, 0, 0, 0, 
	9238, 9237, 1, 0, 0, 0, 9239, 631, 1, 0, 0, 0, 9240, 9241, 3, 628, 314, 
	0, 9241, 9242, 5, 200, 0, 0, 9242, 9243, 3, 820, 410, 0, 9243, 633, 1, 
	0, 0, 0, 9244, 9246, 3, 628, 314, 0, 9245, 9247, 5, 280, 0, 0, 9246, 9245, 
	1, 0, 0, 0, 9246, 9247, 1, 0, 0, 0, 9247, 9248, 1, 0, 0, 0, 9248, 9249, 
	5, 851, 0, 0, 9249, 9253, 3, 830, 415, 0, 9250, 9251, 5, 917, 0, 0, 9251, 
	9252, 5, 1052, 0, 0, 9252, 9254, 7, 57, 0, 0, 9253, 9250, 1, 0, 0, 0, 9253, 
	9254, 1, 0, 0, 0, 9254, 635, 1, 0, 0, 0, 9255, 9256, 3, 628, 314, 0, 9256, 
	9257, 5, 303, 0, 0, 9257, 9258, 5, 313, 0, 0, 9258, 9259, 3, 820, 410, 
	0, 9259, 637, 1, 0, 0, 0, 9260, 9261, 3, 628, 314, 0, 9261, 9262, 5, 319, 
	0, 0, 9262, 9263, 3, 830, 415, 0, 9263, 9264, 3, 594, 297, 0, 9264, 639, 
	1, 0, 0, 0, 9265, 9267, 3, 628, 314, 0, 9266, 9268, 7, 53, 0, 0, 9267, 
	9266, 1, 0, 0, 0, 9267, 9268, 1, 0, 0, 0, 9268, 9269, 1, 0, 0, 0, 9269, 
	9270, 5, 379, 0, 0, 9270, 9271, 3, 820, 410, 0, 9271, 641, 1, 0, 0, 0, 
	9272, 9273, 3, 628, 314, 0, 9273, 9274, 5, 437, 0, 0, 9274, 9275, 5, 583, 
	0, 0, 9275, 9276, 3, 820, 410, 0, 9276, 643, 1, 0, 0, 0, 9277, 9278, 3, 
	628, 314, 0, 9278, 9279, 5, 445, 0, 0, 9279, 9280, 5, 967, 0, 0, 9280, 
	9281, 3, 830, 415, 0, 9281, 645, 1, 0, 0, 0, 9282, 9283, 3, 628, 314, 0, 
	9283, 9284, 5, 477, 0, 0, 9284, 9285, 5, 583, 0, 0, 9285, 9286, 3, 820, 
	410, 0, 9286, 647, 1, 0, 0, 0, 9287, 9288, 3, 628, 314, 0, 9288, 9289, 
	5, 576, 0, 0, 9289, 9290, 3, 830, 415, 0, 9290, 649, 1, 0, 0, 0, 9291, 
	9292, 3, 628, 314, 0, 9292, 9293, 5, 603, 0, 0, 9293, 9294, 3, 830, 415, 
	0, 9294, 9295, 3, 594, 297, 0, 9295, 651, 1, 0, 0, 0, 9296, 9297, 3, 628, 
	314, 0, 9297, 9302, 5, 678, 0, 0, 9298, 9303, 5, 1043, 0, 0, 9299, 9300, 
	5, 405, 0, 0, 9300, 9301, 5, 1063, 0, 0, 9301, 9303, 5, 1064, 0, 0, 9302, 
	9298, 1, 0, 0, 0, 9302, 9299, 1, 0, 0, 0, 9303, 653, 1, 0, 0, 0, 9304, 
	9305, 3, 628, 314, 0, 9305, 9306, 5, 698, 0, 0, 9306, 9307, 5, 8, 0, 0, 
	9307, 9308, 5, 583, 0, 0, 9308, 9309, 3, 820, 410, 0, 9309, 655, 1, 0, 
	0, 0, 9310, 9311, 3, 628, 314, 0, 9311, 9312, 5, 732, 0, 0, 9312, 9313, 
	3, 798, 399, 0, 9313, 657, 1, 0, 0, 0, 9314, 9315, 3, 628, 314, 0, 9315, 
	9316, 5, 738, 0, 0, 9316, 9317, 5, 540, 0, 0, 9317, 9318, 5, 531, 0, 0, 
	9318, 9319, 3, 830, 415, 0, 9319, 659, 1, 0, 0, 0, 9320, 9321, 3, 628, 
	314, 0, 9321, 9322, 5, 749, 0, 0, 9322, 9323, 3, 830, 415, 0, 9323, 661, 
	1, 0, 0, 0, 9324, 9325, 3, 628, 314, 0, 9325, 9326, 5, 753, 0, 0, 9326, 
	9327, 5, 583, 0, 0, 9327, 9328, 3, 820, 410, 0, 9328, 663, 1, 0, 0, 0, 
	9329, 9330, 3, 628, 314, 0, 9330, 9331, 5, 760, 0, 0, 9331, 9332, 3, 820, 
	410, 0, 9332, 665, 1, 0, 0, 0, 9333, 9334, 3, 628, 314, 0, 9334, 9335, 
	5, 795, 0, 0, 9335, 9336, 3, 830, 415, 0, 9336, 667, 1, 0, 0, 0, 9337, 
	9338, 3, 628, 314, 0, 9338, 9339, 5, 830, 0, 0, 9339, 9340, 3, 830, 415, 
	0, 9340, 669, 1, 0, 0, 0, 9341, 9342, 3, 628, 314, 0, 9342, 9343, 5, 851, 
	0, 0, 9343, 9347, 3, 830, 415, 0, 9344, 9345, 5, 917, 0, 0, 9345, 9346, 
	5, 1052, 0, 0, 9346, 9348, 7, 57, 0, 0, 9347, 9344, 1, 0, 0, 0, 9347, 9348, 
	1, 0, 0, 0, 9348, 671, 1, 0, 0, 0, 9349, 9350, 3, 628, 314, 0, 9350, 9351, 
	5, 861, 0, 0, 9351, 9352, 3, 830, 415, 0, 9352, 673, 1, 0, 0, 0, 9353, 
	9354, 3, 628, 314, 0, 9354, 9355, 5, 894, 0, 0, 9355, 9356, 3, 832, 416, 
	0, 9356, 675, 1, 0, 0, 0, 9357, 9358, 3, 628, 314, 0, 9358, 9359, 5, 949, 
	0, 0, 9359, 9360, 3, 820, 410, 0, 9360, 677, 1, 0, 0, 0, 9361, 9362, 3, 
	628, 314, 0, 9362, 9363, 5, 967, 0, 0, 9363, 9364, 3, 830, 415, 0, 9364, 
	679, 1, 0, 0, 0, 9365, 9366, 3, 628, 314, 0, 9366, 9367, 5, 973, 0, 0, 
	9367, 9368, 3, 820, 410, 0, 9368, 681, 1, 0, 0, 0, 9369, 9419, 3, 684, 
	342, 0, 9370, 9419, 3, 686, 343, 0, 9371, 9419, 3, 692, 346, 0, 9372, 9419, 
	3, 694, 347, 0, 9373, 9419, 3, 696, 348, 0, 9374, 9419, 3, 698, 349, 0, 
	9375, 9419, 3, 700, 350, 0, 9376, 9419, 3, 702, 351, 0, 9377, 9419, 3, 
	704, 352, 0, 9378, 9419, 3, 706, 353, 0, 9379, 9419, 3, 708, 354, 0, 9380, 
	9419, 3, 710, 355, 0, 9381, 9419, 3, 712, 356, 0, 9382, 9419, 3, 716, 358, 
	0, 9383, 9419, 3, 718, 359, 0, 9384, 9419, 3, 720, 360, 0, 9385, 9419, 
	3, 722, 361, 0, 9386, 9419, 3, 728, 364, 0, 9387, 9419, 3, 730, 365, 0, 
	9388, 9419, 3, 732, 366, 0, 9389, 9419, 3, 734, 367, 0, 9390, 9419, 3, 
	738, 369, 0, 9391, 9419, 3, 740, 370, 0, 9392, 9419, 3, 742, 371, 0, 9393, 
	9419, 3, 744, 372, 0, 9394, 9419, 3, 746, 373, 0, 9395, 9419, 3, 748, 374, 
	0, 9396, 9419, 3, 750, 375, 0, 9397, 9419, 3, 752, 376, 0, 9398, 9419, 
	3, 754, 377, 0, 9399, 9419, 3, 756, 378, 0, 9400, 9419, 3, 758, 379, 0, 
	9401, 9419, 3, 760, 380, 0, 9402, 9419, 3, 762, 381, 0, 9403, 9419, 3, 
	764, 382, 0, 9404, 9419, 3, 766, 383, 0, 9405, 9419, 3, 768, 384, 0, 9406, 
	9419, 3, 770, 385, 0, 9407, 9419, 3, 772, 386, 0, 9408, 9419, 3, 774, 387, 
	0, 9409, 9419, 3, 776, 388, 0, 9410, 9419, 3, 778, 389, 0, 9411, 9419, 
	3, 780, 390, 0, 9412, 9419, 3, 782, 391, 0, 9413, 9419, 3, 784, 392, 0, 
	9414, 9419, 3, 786, 393, 0, 9415, 9419, 3, 788, 394, 0, 9416, 9419, 3, 
	790, 395, 0, 9417, 9419, 3, 792, 396, 0, 9418, 9369, 1, 0, 0, 0, 9418, 
	9370, 1, 0, 0, 0, 9418, 9371, 1, 0, 0, 0, 9418, 9372, 1, 0, 0, 0, 9418, 
	9373, 1, 0, 0, 0, 9418, 9374, 1, 0, 0, 0, 9418, 9375, 1, 0, 0, 0, 9418, 
	9376, 1, 0, 0, 0, 9418, 9377, 1, 0, 0, 0, 9418, 9378, 1, 0, 0, 0, 9418, 
	9379, 1, 0, 0, 0, 9418, 9380, 1, 0, 0, 0, 9418, 9381, 1, 0, 0, 0, 9418, 
	9382, 1, 0, 0, 0, 9418, 9383, 1, 0, 0, 0, 9418, 9384, 1, 0, 0, 0, 9418, 
	9385, 1, 0, 0, 0, 9418, 9386, 1, 0, 0, 0, 9418, 9387, 1, 0, 0, 0, 9418, 
	9388, 1, 0, 0, 0, 9418, 9389, 1, 0, 0, 0, 9418, 9390, 1, 0, 0, 0, 9418, 
	9391, 1, 0, 0, 0, 9418, 9392, 1, 0, 0, 0, 9418, 9393, 1, 0, 0, 0, 9418, 
	9394, 1, 0, 0, 0, 9418, 9395, 1, 0, 0, 0, 9418, 9396, 1, 0, 0, 0, 9418, 
	9397, 1, 0, 0, 0, 9418, 9398, 1, 0, 0, 0, 9418, 9399, 1, 0, 0, 0, 9418, 
	9400, 1, 0, 0, 0, 9418, 9401, 1, 0, 0, 0, 9418, 9402, 1, 0, 0, 0, 9418, 
	9403, 1, 0, 0, 0, 9418, 9404, 1, 0, 0, 0, 9418, 9405, 1, 0, 0, 0, 9418, 
	9406, 1, 0, 0, 0, 9418, 9407, 1, 0, 0, 0, 9418, 9408, 1, 0, 0, 0, 9418, 
	9409, 1, 0, 0, 0, 9418, 9410, 1, 0, 0, 0, 9418, 9411, 1, 0, 0, 0, 9418, 
	9412, 1, 0, 0, 0, 9418, 9413, 1, 0, 0, 0, 9418, 9414, 1, 0, 0, 0, 9418, 
	9415, 1, 0, 0, 0, 9418, 9416, 1, 0, 0, 0, 9418, 9417, 1, 0, 0, 0, 9419, 
	683, 1, 0, 0, 0, 9420, 9421, 5, 764, 0, 0, 9421, 9423, 5, 154, 0, 0, 9422, 
	9424, 3, 794, 397, 0, 9423, 9422, 1, 0, 0, 0, 9423, 9424, 1, 0, 0, 0, 9424, 
	9447, 1, 0, 0, 0, 9425, 9445, 5, 365, 0, 0, 9426, 9446, 5, 9, 0, 0, 9427, 
	9429, 5, 200, 0, 0, 9428, 9430, 3, 820, 410, 0, 9429, 9428, 1, 0, 0, 0, 
	9429, 9430, 1, 0, 0, 0, 9430, 9446, 1, 0, 0, 0, 9431, 9433, 5, 732, 0, 
	0, 9432, 9434, 3, 798, 399, 0, 9433, 9432, 1, 0, 0, 0, 9433, 9434, 1, 0, 
	0, 0, 9434, 9446, 1, 0, 0, 0, 9435, 9446, 5, 851, 0, 0, 9436, 9438, 5, 
	851, 0, 0, 9437, 9436, 1, 0, 0, 0, 9437, 9438, 1, 0, 0, 0, 9438, 9439, 
	1, 0, 0, 0, 9439, 9446, 3, 830, 415, 0, 9440, 9446, 5, 967, 0, 0, 9441, 
	9443, 5, 967, 0, 0, 9442, 9441, 1, 0, 0, 0, 9442, 9443, 1, 0, 0, 0, 9443, 
	9444, 1, 0, 0, 0, 9444, 9446, 3, 830, 415, 0, 9445, 9426, 1, 0, 0, 0, 9445, 
	9427, 1, 0, 0, 0, 9445, 9431, 1, 0, 0, 0, 9445, 9435, 1, 0, 0, 0, 9445, 
	9437, 1, 0, 0, 0, 9445, 9440, 1, 0, 0, 0, 9445, 9442, 1, 0, 0, 0, 9446, 
	9448, 1, 0, 0, 0, 9447, 9425, 1, 0, 0, 0, 9447, 9448, 1, 0, 0, 0, 9448, 
	685, 1, 0, 0, 0, 9449, 9450, 5, 764, 0, 0, 9450, 9452, 5, 166, 0, 0, 9451, 
	9453, 3, 794, 397, 0, 9452, 9451, 1, 0, 0, 0, 9452, 9453, 1, 0, 0, 0, 9453, 
	687, 1, 0, 0, 0, 9454, 9455, 5, 805, 0, 0, 9455, 9456, 5, 982, 0, 0, 9456, 
	9457, 3, 816, 408, 0, 9457, 689, 1, 0, 0, 0, 9458, 9459, 5, 413, 0, 0, 
	9459, 9462, 3, 832, 416, 0, 9460, 9461, 5, 317, 0, 0, 9461, 9463, 3, 816, 
	408, 0, 9462, 9460, 1, 0, 0, 0, 9462, 9463, 1, 0, 0, 0, 9463, 691, 1, 0, 
	0, 0, 9464, 9466, 5, 764, 0, 0, 9465, 9467, 5, 865, 0, 0, 9466, 9465, 1, 
	0, 0, 0, 9466, 9467, 1, 0, 0, 0, 9467, 9468, 1, 0, 0, 0, 9468, 9470, 5, 
	201, 0, 0, 9469, 9471, 5, 349, 0, 0, 9470, 9469, 1, 0, 0, 0, 9470, 9471, 
	1, 0, 0, 0, 9471, 9473, 1, 0, 0, 0, 9472, 9474, 3, 794, 397, 0, 9473, 9472, 
	1, 0, 0, 0, 9473, 9474, 1, 0, 0, 0, 9474, 9476, 1, 0, 0, 0, 9475, 9477, 
	3, 688, 344, 0, 9476, 9475, 1, 0, 0, 0, 9476, 9477, 1, 0, 0, 0, 9477, 9479, 
	1, 0, 0, 0, 9478, 9480, 3, 690, 345, 0, 9479, 9478, 1, 0, 0, 0, 9479, 9480, 
	1, 0, 0, 0, 9480, 693, 1, 0, 0, 0, 9481, 9482, 5, 764, 0, 0, 9482, 9483, 
	5, 201, 0, 0, 9483, 9484, 5, 365, 0, 0, 9484, 9485, 5, 297, 0, 0, 9485, 
	9486, 5, 338, 0, 0, 9486, 9487, 3, 820, 410, 0, 9487, 695, 1, 0, 0, 0, 
	9488, 9489, 5, 764, 0, 0, 9489, 9490, 5, 201, 0, 0, 9490, 9491, 5, 365, 
	0, 0, 9491, 9492, 5, 663, 0, 0, 9492, 9493, 5, 338, 0, 0, 9493, 9494, 3, 
	820, 410, 0, 9494, 697, 1, 0, 0, 0, 9495, 9496, 5, 764, 0, 0, 9496, 9497, 
	5, 222, 0, 0, 9497, 9512, 5, 58, 0, 0, 9498, 9499, 5, 764, 0, 0, 9499, 
	9500, 5, 222, 0, 0, 9500, 9501, 5, 58, 0, 0, 9501, 9502, 5, 104, 0, 0, 
	9502, 9503, 5, 949, 0, 0, 9503, 9512, 3, 820, 410, 0, 9504, 9505, 5, 764, 
	0, 0, 9505, 9506, 5, 222, 0, 0, 9506, 9507, 5, 58, 0, 0, 9507, 9508, 5, 
	888, 0, 0, 9508, 9509, 5, 745, 0, 0, 9509, 9510, 5, 379, 0, 0, 9510, 9512, 
	3, 820, 410, 0, 9511, 9495, 1, 0, 0, 0, 9511, 9498, 1, 0, 0, 0, 9511, 9504, 
	1, 0, 0, 0, 9512, 699, 1, 0, 0, 0, 9513, 9514, 5, 764, 0, 0, 9514, 9515, 
	5, 280, 0, 0, 9515, 9517, 5, 320, 0, 0, 9516, 9518, 3, 794, 397, 0, 9517, 
	9516, 1, 0, 0, 0, 9517, 9518, 1, 0, 0, 0, 9518, 701, 1, 0, 0, 0, 9519, 
	9521, 5, 764, 0, 0, 9520, 9522, 5, 865, 0, 0, 9521, 9520, 1, 0, 0, 0, 9521, 
	9522, 1, 0, 0, 0, 9522, 9523, 1, 0, 0, 0, 9523, 9524, 5, 280, 0, 0, 9524, 
	9526, 5, 855, 0, 0, 9525, 9527, 3, 794, 397, 0, 9526, 9525, 1, 0, 0, 0, 
	9526, 9527, 1, 0, 0, 0, 9527, 9542, 1, 0, 0, 0, 9528, 9540, 5, 365, 0, 
	0, 9529, 9541, 5, 9, 0, 0, 9530, 9532, 5, 200, 0, 0, 9531, 9533, 3, 820, 
	410, 0, 9532, 9531, 1, 0, 0, 0, 9532, 9533, 1, 0, 0, 0, 9533, 9541, 1, 
	0, 0, 0, 9534, 9536, 5, 732, 0, 0, 9535, 9534, 1, 0, 0, 0, 9535, 9536, 
	1, 0, 0, 0, 9536, 9538, 1, 0, 0, 0, 9537, 9539, 3, 798, 399, 0, 9538, 9537, 
	1, 0, 0, 0, 9538, 9539, 1, 0, 0, 0, 9539, 9541, 1, 0, 0, 0, 9540, 9529, 
	1, 0, 0, 0, 9540, 9530, 1, 0, 0, 0, 9540, 9535, 1, 0, 0, 0, 9541, 9543, 
	1, 0, 0, 0, 9542, 9528, 1, 0, 0, 0, 9542, 9543, 1, 0, 0, 0, 9543, 9545, 
	1, 0, 0, 0, 9544, 9546, 3, 688, 344, 0, 9545, 9544, 1, 0, 0, 0, 9545, 9546, 
	1, 0, 0, 0, 9546, 9548, 1, 0, 0, 0, 9547, 9549, 3, 690, 345, 0, 9548, 9547, 
	1, 0, 0, 0, 9548, 9549, 1, 0, 0, 0, 9549, 703, 1, 0, 0, 0, 9550, 9551, 
	5, 764, 0, 0, 9551, 9552, 5, 297, 0, 0, 9552, 9556, 5, 341, 0, 0, 9553, 
	9554, 5, 365, 0, 0, 9554, 9555, 5, 9, 0, 0, 9555, 9557, 3, 820, 410, 0, 
	9556, 9553, 1, 0, 0, 0, 9556, 9557, 1, 0, 0, 0, 9557, 705, 1, 0, 0, 0, 
	9558, 9559, 5, 764, 0, 0, 9559, 9560, 5, 303, 0, 0, 9560, 9562, 5, 315, 
	0, 0, 9561, 9563, 3, 794, 397, 0, 9562, 9561, 1, 0, 0, 0, 9562, 9563, 1, 
	0, 0, 0, 9563, 9575, 1, 0, 0, 0, 9564, 9573, 5, 365, 0, 0, 9565, 9574, 
	5, 9, 0, 0, 9566, 9574, 5, 200, 0, 0, 9567, 9568, 5, 200, 0, 0, 9568, 9574, 
	3, 820, 410, 0, 9569, 9574, 5, 732, 0, 0, 9570, 9571, 5, 732, 0, 0, 9571, 
	9574, 3, 798, 399, 0, 9572, 9574, 3, 798, 399, 0, 9573, 9565, 1, 0, 0, 
	0, 9573, 9566, 1, 0, 0, 0, 9573, 9567, 1, 0, 0, 0, 9573, 9569, 1, 0, 0, 
	0, 9573, 9570, 1, 0, 0, 0, 9573, 9572, 1, 0, 0, 0, 9574, 9576, 1, 0, 0, 
	0, 9575, 9564, 1, 0, 0, 0, 9575, 9576, 1, 0, 0, 0, 9576, 707, 1, 0, 0, 
	0, 9577, 9578, 5, 764, 0, 0, 9578, 9580, 5, 320, 0, 0, 9579, 9581, 3, 794, 
	397, 0, 9580, 9579, 1, 0, 0, 0, 9580, 9581, 1, 0, 0, 0, 9581, 9593, 1, 
	0, 0, 0, 9582, 9591, 5, 365, 0, 0, 9583, 9592, 5, 9, 0, 0, 9584, 9592, 
	5, 200, 0, 0, 9585, 9586, 5, 200, 0, 0, 9586, 9592, 3, 820, 410, 0, 9587, 
	9592, 5, 732, 0, 0, 9588, 9589, 5, 732, 0, 0, 9589, 9592, 3, 820, 410, 
	0, 9590, 9592, 3, 820, 410, 0, 9591, 9583, 1, 0, 0, 0, 9591, 9584, 1, 0, 
	0, 0, 9591, 9585, 1, 0, 0, 0, 9591, 9587, 1, 0, 0, 0, 9591, 9588, 1, 0, 
	0, 0, 9591, 9590, 1, 0, 0, 0, 9592, 9594, 1, 0, 0, 0, 9593, 9582, 1, 0, 
	0, 0, 9593, 9594, 1, 0, 0, 0, 9594, 709, 1, 0, 0, 0, 9595, 9596, 5, 764, 
	0, 0, 9596, 9597, 5, 333, 0, 0, 9597, 9599, 5, 10, 0, 0, 9598, 9600, 3, 
	794, 397, 0, 9599, 9598, 1, 0, 0, 0, 9599, 9600, 1, 0, 0, 0, 9600, 711, 
	1, 0, 0, 0, 9601, 9602, 5, 764, 0, 0, 9602, 9604, 5, 337, 0, 0, 9603, 9605, 
	3, 714, 357, 0, 9604, 9603, 1, 0, 0, 0, 9604, 9605, 1, 0, 0, 0, 9605, 9619, 
	1, 0, 0, 0, 9606, 9607, 5, 764, 0, 0, 9607, 9608, 5, 321, 0, 0, 9608, 9609, 
	5, 337, 0, 0, 9609, 9610, 5, 365, 0, 0, 9610, 9611, 5, 732, 0, 0, 9611, 
	9619, 3, 798, 399, 0, 9612, 9613, 5, 764, 0, 0, 9613, 9614, 5, 321, 0, 
	0, 9614, 9615, 5, 337, 0, 0, 9615, 9616, 5, 365, 0, 0, 9616, 9617, 5, 200, 
	0, 0, 9617, 9619, 3, 820, 410, 0, 9618, 9601, 1, 0, 0, 0, 9618, 9606, 1, 
	0, 0, 0, 9618, 9612, 1, 0, 0, 0, 9619, 713, 1, 0, 0, 0, 9620, 9621, 5, 
	531, 0, 0, 9621, 9642, 5, 9, 0, 0, 9622, 9623, 5, 531, 0, 0, 9623, 9624, 
	3, 800, 400, 0, 9624, 9625, 3, 830, 415, 0, 9625, 9642, 1, 0, 0, 0, 9626, 
	9633, 5, 888, 0, 0, 9627, 9628, 5, 693, 0, 0, 9628, 9634, 3, 820, 410, 
	0, 9629, 9630, 5, 949, 0, 0, 9630, 9634, 3, 820, 410, 0, 9631, 9632, 5, 
	760, 0, 0, 9632, 9634, 3, 820, 410, 0, 9633, 9627, 1, 0, 0, 0, 9633, 9629, 
	1, 0, 0, 0, 9633, 9631, 1, 0, 0, 0, 9634, 9642, 1, 0, 0, 0, 9635, 9636, 
	5, 520, 0, 0, 9636, 9637, 5, 693, 0, 0, 9637, 9642, 3, 820, 410, 0, 9638, 
	9639, 5, 520, 0, 0, 9639, 9640, 5, 760, 0, 0, 9640, 9642, 3, 820, 410, 
	0, 9641, 9620, 1, 0, 0, 0, 9641, 9622, 1, 0, 0, 0, 9641, 9626, 1, 0, 0, 
	0, 9641, 9635, 1, 0, 0, 0, 9641, 9638, 1, 0, 0, 0, 9642, 715, 1, 0, 0, 
	0, 9643, 9645, 5, 764, 0, 0, 9644, 9646, 7, 53, 0, 0, 9645, 9644, 1, 0, 
	0, 0, 9645, 9646, 1, 0, 0, 0, 9646, 9647, 1, 0, 0, 0, 9647, 9649, 5, 380, 
	0, 0, 9648, 9650, 3, 794, 397, 0, 9649, 9648, 1, 0, 0, 0, 9649, 9650, 1, 
	0, 0, 0, 9650, 717, 1, 0, 0, 0, 9651, 9652, 5, 764, 0, 0, 9652, 9655, 5, 
	424, 0, 0, 9653, 9654, 5, 365, 0, 0, 9654, 9656, 5, 9, 0, 0, 9655, 9653, 
	1, 0, 0, 0, 9655, 9656, 1, 0, 0, 0, 9656, 719, 1, 0, 0, 0, 9657, 9658, 
	5, 764, 0, 0, 9658, 9659, 5, 434, 0, 0, 9659, 9661, 5, 10, 0, 0, 9660, 
	9662, 3, 794, 397, 0, 9661, 9660, 1, 0, 0, 0, 9661, 9662, 1, 0, 0, 0, 9662, 
	721, 1, 0, 0, 0, 9663, 9664, 5, 764, 0, 0, 9664, 9665, 5, 437, 0, 0, 9665, 
	9667, 5, 582, 0, 0, 9666, 9668, 3, 794, 397, 0, 9667, 9666, 1, 0, 0, 0, 
	9667, 9668, 1, 0, 0, 0, 9668, 9670, 1, 0, 0, 0, 9669, 9671, 3, 724, 362, 
	0, 9670, 9669, 1, 0, 0, 0, 9670, 9671, 1, 0, 0, 0, 9671, 723, 1, 0, 0, 
	0, 9672, 9681, 5, 365, 0, 0, 9673, 9682, 5, 9, 0, 0, 9674, 9682, 5, 200, 
	0, 0, 9675, 9676, 5, 200, 0, 0, 9676, 9682, 3, 820, 410, 0, 9677, 9682, 
	5, 732, 0, 0, 9678, 9679, 5, 732, 0, 0, 9679, 9682, 3, 798, 399, 0, 9680, 
	9682, 3, 798, 399, 0, 9681, 9673, 1, 0, 0, 0, 9681, 9674, 1, 0, 0, 0, 9681, 
	9675, 1, 0, 0, 0, 9681, 9677, 1, 0, 0, 0, 9681, 9678, 1, 0, 0, 0, 9681, 
	9680, 1, 0, 0, 0, 9682, 725, 1, 0, 0, 0, 9683, 9696, 5, 365, 0, 0, 9684, 
	9697, 5, 9, 0, 0, 9685, 9687, 5, 200, 0, 0, 9686, 9688, 3, 820, 410, 0, 
	9687, 9686, 1, 0, 0, 0, 9687, 9688, 1, 0, 0, 0, 9688, 9697, 1, 0, 0, 0, 
	9689, 9691, 5, 732, 0, 0, 9690, 9692, 3, 798, 399, 0, 9691, 9690, 1, 0, 
	0, 0, 9691, 9692, 1, 0, 0, 0, 9692, 9697, 1, 0, 0, 0, 9693, 9697, 5, 851, 
	0, 0, 9694, 9695, 5, 851, 0, 0, 9695, 9697, 3, 830, 415, 0, 9696, 9684, 
	1, 0, 0, 0, 9696, 9685, 1, 0, 0, 0, 9696, 9689, 1, 0, 0, 0, 9696, 9693, 
	1, 0, 0, 0, 9696, 9694, 1, 0, 0, 0, 9697, 727, 1, 0, 0, 0, 9698, 9699, 
	5, 764, 0, 0, 9699, 9700, 5, 445, 0, 0, 9700, 9702, 5, 969, 0, 0, 9701, 
	9703, 3, 794, 397, 0, 9702, 9701, 1, 0, 0, 0, 9702, 9703, 1, 0, 0, 0, 9703, 
	9705, 1, 0, 0, 0, 9704, 9706, 3, 724, 362, 0, 9705, 9704, 1, 0, 0, 0, 9705, 
	9706, 1, 0, 0, 0, 9706, 729, 1, 0, 0, 0, 9707, 9708, 5, 764, 0, 0, 9708, 
	9709, 5, 477, 0, 0, 9709, 9710, 5, 582, 0, 0, 9710, 731, 1, 0, 0, 0, 9711, 
	9712, 5, 764, 0, 0, 9712, 9714, 5, 519, 0, 0, 9713, 9715, 3, 794, 397, 
	0, 9714, 9713, 1, 0, 0, 0, 9714, 9715, 1, 0, 0, 0, 9715, 9717, 1, 0, 0, 
	0, 9716, 9718, 3, 724, 362, 0, 9717, 9716, 1, 0, 0, 0, 9717, 9718, 1, 0, 
	0, 0, 9718, 733, 1, 0, 0, 0, 9719, 9720, 5, 764, 0, 0, 9720, 9721, 5, 545, 
	0, 0, 9721, 9723, 5, 10, 0, 0, 9722, 9724, 3, 794, 397, 0, 9723, 9722, 
	1, 0, 0, 0, 9723, 9724, 1, 0, 0, 0, 9724, 735, 1, 0, 0, 0, 9725, 9726, 
	7, 58, 0, 0, 9726, 737, 1, 0, 0, 0, 9727, 9728, 5, 764, 0, 0, 9728, 9730, 
	5, 556, 0, 0, 9729, 9731, 3, 794, 397, 0, 9730, 9729, 1, 0, 0, 0, 9730, 
	9731, 1, 0, 0, 0, 9731, 9747, 1, 0, 0, 0, 9732, 9745, 3, 736, 368, 0, 9733, 
	9746, 5, 753, 0, 0, 9734, 9746, 5, 9, 0, 0, 9735, 9737, 5, 949, 0, 0, 9736, 
	9738, 3, 820, 410, 0, 9737, 9736, 1, 0, 0, 0, 9737, 9738, 1, 0, 0, 0, 9738, 
	9746, 1, 0, 0, 0, 9739, 9741, 7, 59, 0, 0, 9740, 9742, 3, 820, 410, 0, 
	9741, 9740, 1, 0, 0, 0, 9741, 9742, 1, 0, 0, 0, 9742, 9746, 1, 0, 0, 0, 
	9743, 9744, 5, 851, 0, 0, 9744, 9746, 3, 830, 415, 0, 9745, 9733, 1, 0, 
	0, 0, 9745, 9734, 1, 0, 0, 0, 9745, 9735, 1, 0, 0, 0, 9745, 9739, 1, 0, 
	0, 0, 9745, 9743, 1, 0, 0, 0, 9746, 9748, 1, 0, 0, 0, 9747, 9732, 1, 0, 
	0, 0, 9747, 9748, 1, 0, 0, 0, 9748, 739, 1, 0, 0, 0, 9749, 9750, 5, 764, 
	0, 0, 9750, 9752, 5, 578, 0, 0, 9751, 9753, 3, 794, 397, 0, 9752, 9751, 
	1, 0, 0, 0, 9752, 9753, 1, 0, 0, 0, 9753, 9755, 1, 0, 0, 0, 9754, 9756, 
	3, 724, 362, 0, 9755, 9754, 1, 0, 0, 0, 9755, 9756, 1, 0, 0, 0, 9756, 741, 
	1, 0, 0, 0, 9757, 9759, 5, 764, 0, 0, 9758, 9760, 5, 865, 0, 0, 9759, 9758, 
	1, 0, 0, 0, 9759, 9760, 1, 0, 0, 0, 9760, 9761, 1, 0, 0, 0, 9761, 9762, 
	5, 594, 0, 0, 9762, 9764, 5, 397, 0, 0, 9763, 9765, 3, 726, 363, 0, 9764, 
	9763, 1, 0, 0, 0, 9764, 9765, 1, 0, 0, 0, 9765, 743, 1, 0, 0, 0, 9766, 
	9767, 5, 764, 0, 0, 9767, 9769, 5, 605, 0, 0, 9768, 9770, 3, 794, 397, 
	0, 9769, 9768, 1, 0, 0, 0, 9769, 9770, 1, 0, 0, 0, 9770, 9772, 1, 0, 0, 
	0, 9771, 9773, 3, 724, 362, 0, 9772, 9771, 1, 0, 0, 0, 9772, 9773, 1, 0, 
	0, 0, 9773, 745, 1, 0, 0, 0, 9774, 9775, 5, 764, 0, 0, 9775, 9777, 5, 651, 
	0, 0, 9776, 9778, 3, 794, 397, 0, 9777, 9776, 1, 0, 0, 0, 9777, 9778, 1, 
	0, 0, 0, 9778, 747, 1, 0, 0, 0, 9779, 9780, 5, 764, 0, 0, 9780, 9781, 5, 
	663, 0, 0, 9781, 9783, 5, 10, 0, 0, 9782, 9784, 3, 794, 397, 0, 9783, 9782, 
	1, 0, 0, 0, 9783, 9784, 1, 0, 0, 0, 9784, 749, 1, 0, 0, 0, 9785, 9786, 
	5, 764, 0, 0, 9786, 9787, 5, 663, 0, 0, 9787, 9789, 5, 201, 0, 0, 9788, 
	9790, 3, 794, 397, 0, 9789, 9788, 1, 0, 0, 0, 9789, 9790, 1, 0, 0, 0, 9790, 
	9797, 1, 0, 0, 0, 9791, 9792, 5, 982, 0, 0, 9792, 9793, 5, 594, 0, 0, 9793, 
	9794, 3, 796, 398, 0, 9794, 9795, 5, 1059, 0, 0, 9795, 9796, 3, 820, 410, 
	0, 9796, 9798, 1, 0, 0, 0, 9797, 9791, 1, 0, 0, 0, 9797, 9798, 1, 0, 0, 
	0, 9798, 751, 1, 0, 0, 0, 9799, 9800, 5, 764, 0, 0, 9800, 9801, 5, 663, 
	0, 0, 9801, 9805, 5, 341, 0, 0, 9802, 9803, 5, 365, 0, 0, 9803, 9804, 5, 
	9, 0, 0, 9804, 9806, 3, 820, 410, 0, 9805, 9802, 1, 0, 0, 0, 9805, 9806, 
	1, 0, 0, 0, 9806, 753, 1, 0, 0, 0, 9807, 9808, 5, 764, 0, 0, 9808, 9809, 
	5, 670, 0, 0, 9809, 9811, 5, 466, 0, 0, 9810, 9812, 3, 794, 397, 0, 9811, 
	9810, 1, 0, 0, 0, 9811, 9812, 1, 0, 0, 0, 9812, 755, 1, 0, 0, 0, 9813, 
	9814, 5, 764, 0, 0, 9814, 9816, 5, 694, 0, 0, 9815, 9817, 3, 794, 397, 
	0, 9816, 9815, 1, 0, 0, 0, 9816, 9817, 1, 0, 0, 0, 9817, 757, 1, 0, 0, 
	0, 9818, 9819, 5, 764, 0, 0, 9819, 9820, 5, 698, 0, 0, 9820, 9821, 5, 8, 
	0, 0, 9821, 9823, 5, 582, 0, 0, 9822, 9824, 3, 794, 397, 0, 9823, 9822, 
	1, 0, 0, 0, 9823, 9824, 1, 0, 0, 0, 9824, 9826, 1, 0, 0, 0, 9825, 9827, 
	3, 724, 362, 0, 9826, 9825, 1, 0, 0, 0, 9826, 9827, 1, 0, 0, 0, 9827, 759, 
	1, 0, 0, 0, 9828, 9830, 5, 764, 0, 0, 9829, 9831, 5, 865, 0, 0, 9830, 9829, 
	1, 0, 0, 0, 9830, 9831, 1, 0, 0, 0, 9831, 9832, 1, 0, 0, 0, 9832, 9834, 
	5, 733, 0, 0, 9833, 9835, 5, 349, 0, 0, 9834, 9833, 1, 0, 0, 0, 9834, 9835, 
	1, 0, 0, 0, 9835, 9837, 1, 0, 0, 0, 9836, 9838, 3, 794, 397, 0, 9837, 9836, 
	1, 0, 0, 0, 9837, 9838, 1, 0, 0, 0, 9838, 9847, 1, 0, 0, 0, 9839, 9845, 
	5, 365, 0, 0, 9840, 9846, 5, 9, 0, 0, 9841, 9843, 5, 200, 0, 0, 9842, 9844, 
	3, 820, 410, 0, 9843, 9842, 1, 0, 0, 0, 9843, 9844, 1, 0, 0, 0, 9844, 9846, 
	1, 0, 0, 0, 9845, 9840, 1, 0, 0, 0, 9845, 9841, 1, 0, 0, 0, 9846, 9848, 
	1, 0, 0, 0, 9847, 9839, 1, 0, 0, 0, 9847, 9848, 1, 0, 0, 0, 9848, 9850, 
	1, 0, 0, 0, 9849, 9851, 3, 688, 344, 0, 9850, 9849, 1, 0, 0, 0, 9850, 9851, 
	1, 0, 0, 0, 9851, 9853, 1, 0, 0, 0, 9852, 9854, 3, 690, 345, 0, 9853, 9852, 
	1, 0, 0, 0, 9853, 9854, 1, 0, 0, 0, 9854, 761, 1, 0, 0, 0, 9855, 9856, 
	5, 764, 0, 0, 9856, 9858, 5, 750, 0, 0, 9857, 9859, 3, 794, 397, 0, 9858, 
	9857, 1, 0, 0, 0, 9858, 9859, 1, 0, 0, 0, 9859, 9861, 1, 0, 0, 0, 9860, 
	9862, 3, 724, 362, 0, 9861, 9860, 1, 0, 0, 0, 9861, 9862, 1, 0, 0, 0, 9862, 
	763, 1, 0, 0, 0, 9863, 9864, 5, 764, 0, 0, 9864, 9865, 5, 753, 0, 0, 9865, 
	9866, 5, 582, 0, 0, 9866, 765, 1, 0, 0, 0, 9867, 9868, 5, 764, 0, 0, 9868, 
	9870, 5, 763, 0, 0, 9869, 9871, 3, 794, 397, 0, 9870, 9869, 1, 0, 0, 0, 
	9870, 9871, 1, 0, 0, 0, 9871, 767, 1, 0, 0, 0, 9872, 9873, 5, 764, 0, 0, 
	9873, 9874, 5, 763, 0, 0, 9874, 9875, 5, 365, 0, 0, 9875, 9876, 5, 297, 
	0, 0, 9876, 9877, 5, 338, 0, 0, 9877, 9878, 3, 820, 410, 0, 9878, 769, 
	1, 0, 0, 0, 9879, 9880, 5, 764, 0, 0, 9880, 9881, 5, 763, 0, 0, 9881, 9882, 
	5, 365, 0, 0, 9882, 9883, 5, 663, 0, 0, 9883, 9884, 5, 338, 0, 0, 9884, 
	9885, 3, 820, 410, 0, 9885, 771, 1, 0, 0, 0, 9886, 9887, 5, 764, 0, 0, 
	9887, 9889, 5, 798, 0, 0, 9888, 9890, 3, 794, 397, 0, 9889, 9888, 1, 0, 
	0, 0, 9889, 9890, 1, 0, 0, 0, 9890, 9892, 1, 0, 0, 0, 9891, 9893, 3, 724, 
	362, 0, 9892, 9891, 1, 0, 0, 0, 9892, 9893, 1, 0, 0, 0, 9893, 773, 1, 0, 
	0, 0, 9894, 9895, 5, 764, 0, 0, 9895, 9897, 5, 831, 0, 0, 9896, 9898, 3, 
	794, 397, 0, 9897, 9896, 1, 0, 0, 0, 9897, 9898, 1, 0, 0, 0, 9898, 9900, 
	1, 0, 0, 0, 9899, 9901, 3, 724, 362, 0, 9900, 9899, 1, 0, 0, 0, 9900, 9901, 
	1, 0, 0, 0, 9901, 775, 1, 0, 0, 0, 9902, 9903, 5, 764, 0, 0, 9903, 9905, 
	5, 855, 0, 0, 9904, 9906, 3, 794, 397, 0, 9905, 9904, 1, 0, 0, 0, 9905, 
	9906, 1, 0, 0, 0, 9906, 9908, 1, 0, 0, 0, 9907, 9909, 3, 724, 362, 0, 9908, 
	9907, 1, 0, 0, 0, 9908, 9909, 1, 0, 0, 0, 9909, 777, 1, 0, 0, 0, 9910, 
	9911, 5, 764, 0, 0, 9911, 9913, 5, 859, 0, 0, 9912, 9914, 3, 794, 397, 
	0, 9913, 9912, 1, 0, 0, 0, 9913, 9914, 1, 0, 0, 0, 9914, 9924, 1, 0, 0, 
	0, 9915, 9916, 5, 365, 0, 0, 9916, 9925, 5, 9, 0, 0, 9917, 9925, 5, 200, 
	0, 0, 9918, 9919, 5, 200, 0, 0, 9919, 9925, 3, 820, 410, 0, 9920, 9925, 
	5, 732, 0, 0, 9921, 9922, 5, 732, 0, 0, 9922, 9925, 3, 798, 399, 0, 9923, 
	9925, 3, 798, 399, 0, 9924, 9915, 1, 0, 0, 0, 9924, 9917, 1, 0, 0, 0, 9924, 
	9918, 1, 0, 0, 0, 9924, 9920, 1, 0, 0, 0, 9924, 9921, 1, 0, 0, 0, 9924, 
	9923, 1, 0, 0, 0, 9924, 9925, 1, 0, 0, 0, 9925, 779, 1, 0, 0, 0, 9926, 
	9928, 5, 764, 0, 0, 9927, 9929, 5, 865, 0, 0, 9928, 9927, 1, 0, 0, 0, 9928, 
	9929, 1, 0, 0, 0, 9929, 9930, 1, 0, 0, 0, 9930, 9932, 5, 862, 0, 0, 9931, 
	9933, 3, 794, 397, 0, 9932, 9931, 1, 0, 0, 0, 9932, 9933, 1, 0, 0, 0, 9933, 
	9948, 1, 0, 0, 0, 9934, 9946, 5, 365, 0, 0, 9935, 9947, 5, 9, 0, 0, 9936, 
	9938, 5, 200, 0, 0, 9937, 9939, 3, 820, 410, 0, 9938, 9937, 1, 0, 0, 0, 
	9938, 9939, 1, 0, 0, 0, 9939, 9947, 1, 0, 0, 0, 9940, 9942, 5, 732, 0, 
	0, 9941, 9940, 1, 0, 0, 0, 9941, 9942, 1, 0, 0, 0, 9942, 9944, 1, 0, 0, 
	0, 9943, 9945, 3, 798, 399, 0, 9944, 9943, 1, 0, 0, 0, 9944, 9945, 1, 0, 
	0, 0, 9945, 9947, 1, 0, 0, 0, 9946, 9935, 1, 0, 0, 0, 9946, 9936, 1, 0, 
	0, 0, 9946, 9941, 1, 0, 0, 0, 9947, 9949, 1, 0, 0, 0, 9948, 9934, 1, 0, 
	0, 0, 9948, 9949, 1, 0, 0, 0, 9949, 9951, 1, 0, 0, 0, 9950, 9952, 3, 688, 
	344, 0, 9951, 9950, 1, 0, 0, 0, 9951, 9952, 1, 0, 0, 0, 9952, 9954, 1, 
	0, 0, 0, 9953, 9955, 3, 690, 345, 0, 9954, 9953, 1, 0, 0, 0, 9954, 9955, 
	1, 0, 0, 0, 9955, 781, 1, 0, 0, 0, 9956, 9957, 5, 764, 0, 0, 9957, 9960, 
	5, 898, 0, 0, 9958, 9959, 5, 365, 0, 0, 9959, 9961, 5, 9, 0, 0, 9960, 9958, 
	1, 0, 0, 0, 9960, 9961, 1, 0, 0, 0, 9961, 783, 1, 0, 0, 0, 9962, 9963, 
	5, 764, 0, 0, 9963, 9964, 5, 949, 0, 0, 9964, 9966, 5, 320, 0, 0, 9965, 
	9967, 3, 794, 397, 0, 9966, 9965, 1, 0, 0, 0, 9966, 9967, 1, 0, 0, 0, 9967, 
	9969, 1, 0, 0, 0, 9968, 9970, 3, 724, 362, 0, 9969, 9968, 1, 0, 0, 0, 9969, 
	9970, 1, 0, 0, 0, 9970, 785, 1, 0, 0, 0, 9971, 9973, 5, 764, 0, 0, 9972, 
	9974, 5, 865, 0, 0, 9973, 9972, 1, 0, 0, 0, 9973, 9974, 1, 0, 0, 0, 9974, 
	9975, 1, 0, 0, 0, 9975, 9977, 5, 953, 0, 0, 9976, 9978, 3, 794, 397, 0, 
	9977, 9976, 1, 0, 0, 0, 9977, 9978, 1, 0, 0, 0, 9978, 9982, 1, 0, 0, 0, 
	9979, 9980, 5, 805, 0, 0, 9980, 9981, 5, 982, 0, 0, 9981, 9983, 3, 816, 
	408, 0, 9982, 9979, 1, 0, 0, 0, 9982, 9983, 1, 0, 0, 0, 9983, 9986, 1, 
	0, 0, 0, 9984, 9985, 5, 413, 0, 0, 9985, 9987, 3, 832, 416, 0, 9986, 9984, 
	1, 0, 0, 0, 9986, 9987, 1, 0, 0, 0, 9987, 9990, 1, 0, 0, 0, 9988, 9989, 
	5, 317, 0, 0, 9989, 9991, 3, 816, 408, 0, 9990, 9988, 1, 0, 0, 0, 9990, 
	9991, 1, 0, 0, 0, 9991, 787, 1, 0, 0, 0, 9992, 9993, 5, 764, 0, 0, 9993, 
	9995, 5, 963, 0, 0, 9994, 9996, 3, 794, 397, 0, 9995, 9994, 1, 0, 0, 0, 
	9995, 9996, 1, 0, 0, 0, 9996, 789, 1, 0, 0, 0, 9997, 9999, 5, 764, 0, 0, 
	9998, 10000, 5, 865, 0, 0, 9999, 9998, 1, 0, 0, 0, 9999, 10000, 1, 0, 0, 
	0, 10000, 10001, 1, 0, 0, 0, 10001, 10003, 5, 969, 0, 0, 10002, 10004, 
	3, 794, 397, 0, 10003, 10002, 1, 0, 0, 0, 10003, 10004, 1, 0, 0, 0, 10004, 
	10019, 1, 0, 0, 0, 10005, 10017, 5, 365, 0, 0, 10006, 10018, 5, 9, 0, 0, 
	10007, 10009, 5, 200, 0, 0, 10008, 10010, 3, 820, 410, 0, 10009, 10008, 
	1, 0, 0, 0, 10009, 10010, 1, 0, 0, 0, 10010, 10018, 1, 0, 0, 0, 10011, 
	10013, 5, 732, 0, 0, 10012, 10011, 1, 0, 0, 0, 10012, 10013, 1, 0, 0, 0, 
	10013, 10015, 1, 0, 0, 0, 10014, 10016, 3, 798, 399, 0, 10015, 10014, 1, 
	0, 0, 0, 10015, 10016, 1, 0, 0, 0, 10016, 10018, 1, 0, 0, 0, 10017, 10006, 
	1, 0, 0, 0, 10017, 10007, 1, 0, 0, 0, 10017, 10012, 1, 0, 0, 0, 10018, 
	10020, 1, 0, 0, 0, 10019, 10005, 1, 0, 0, 0, 10019, 10020, 1, 0, 0, 0, 
	10020, 10022, 1, 0, 0, 0, 10021, 10023, 3, 688, 344, 0, 10022, 10021, 1, 
	0, 0, 0, 10022, 10023, 1, 0, 0, 0, 10023, 10025, 1, 0, 0, 0, 10024, 10026, 
	3, 690, 345, 0, 10025, 10024, 1, 0, 0, 0, 10025, 10026, 1, 0, 0, 0, 10026, 
	791, 1, 0, 0, 0, 10027, 10028, 5, 764, 0, 0, 10028, 10030, 5, 975, 0, 0, 
	10029, 10031, 3, 794, 397, 0, 10030, 10029, 1, 0, 0, 0, 10030, 10031, 1, 
	0, 0, 0, 10031, 793, 1, 0, 0, 0, 10032, 10033, 5, 412, 0, 0, 10033, 10034, 
	3, 816, 408, 0, 10034, 795, 1, 0, 0, 0, 10035, 10036, 3, 820, 410, 0, 10036, 
	797, 1, 0, 0, 0, 10037, 10038, 3, 820, 410, 0, 10038, 10039, 5, 1059, 0, 
	0, 10039, 10040, 3, 820, 410, 0, 10040, 10043, 1, 0, 0, 0, 10041, 10043, 
	3, 820, 410, 0, 10042, 10037, 1, 0, 0, 0, 10042, 10041, 1, 0, 0, 0, 10043, 
	799, 1, 0, 0, 0, 10044, 10045, 5, 9, 0, 0, 10045, 10057, 5, 556, 0, 0, 
	10046, 10057, 5, 201, 0, 0, 10047, 10057, 5, 380, 0, 0, 10048, 10049, 5, 
	477, 0, 0, 10049, 10057, 5, 582, 0, 0, 10050, 10051, 5, 670, 0, 0, 10051, 
	10057, 5, 466, 0, 0, 10052, 10057, 5, 694, 0, 0, 10053, 10057, 5, 763, 
	0, 0, 10054, 10057, 5, 953, 0, 0, 10055, 10057, 5, 975, 0, 0, 10056, 10044, 
	1, 0, 0, 0, 10056, 10046, 1, 0, 0, 0, 10056, 10047, 1, 0, 0, 0, 10056, 
	10048, 1, 0, 0, 0, 10056, 10050, 1, 0, 0, 0, 10056, 10052, 1, 0, 0, 0, 
	10056, 10053, 1, 0, 0, 0, 10056, 10054, 1, 0, 0, 0, 10056, 10055, 1, 0, 
	0, 0, 10057, 801, 1, 0, 0, 0, 10058, 10063, 3, 800, 400, 0, 10059, 10060, 
	5, 1069, 0, 0, 10060, 10062, 3, 800, 400, 0, 10061, 10059, 1, 0, 0, 0, 
	10062, 10065, 1, 0, 0, 0, 10063, 10061, 1, 0, 0, 0, 10063, 10064, 1, 0, 
	0, 0, 10064, 803, 1, 0, 0, 0, 10065, 10063, 1, 0, 0, 0, 10066, 10067, 3, 
	816, 408, 0, 10067, 805, 1, 0, 0, 0, 10068, 10069, 3, 820, 410, 0, 10069, 
	807, 1, 0, 0, 0, 10070, 10071, 3, 820, 410, 0, 10071, 809, 1, 0, 0, 0, 
	10072, 10073, 3, 820, 410, 0, 10073, 811, 1, 0, 0, 0, 10074, 10075, 3, 
	820, 410, 0, 10075, 813, 1, 0, 0, 0, 10076, 10077, 3, 820, 410, 0, 10077, 
	815, 1, 0, 0, 0, 10078, 10079, 5, 1043, 0, 0, 10079, 817, 1, 0, 0, 0, 10080, 
	10085, 3, 816, 408, 0, 10081, 10082, 5, 1069, 0, 0, 10082, 10084, 3, 816, 
	408, 0, 10083, 10081, 1, 0, 0, 0, 10084, 10087, 1, 0, 0, 0, 10085, 10083, 
	1, 0, 0, 0, 10085, 10086, 1, 0, 0, 0, 10086, 819, 1, 0, 0, 0, 10087, 10085, 
	1, 0, 0, 0, 10088, 10093, 5, 1036, 0, 0, 10089, 10093, 5, 1033, 0, 0, 10090, 
	10093, 5, 1034, 0, 0, 10091, 10093, 3, 822, 411, 0, 10092, 10088, 1, 0, 
	0, 0, 10092, 10089, 1, 0, 0, 0, 10092, 10090, 1, 0, 0, 0, 10092, 10091, 
	1, 0, 0, 0, 10093, 821, 1, 0, 0, 0, 10094, 10095, 7, 60, 0, 0, 10095, 823, 
	1, 0, 0, 0, 10096, 10097, 5, 565, 0, 0, 10097, 10098, 5, 1052, 0, 0, 10098, 
	10099, 3, 816, 408, 0, 10099, 825, 1, 0, 0, 0, 10100, 10101, 3, 820, 410, 
	0, 10101, 827, 1, 0, 0, 0, 10102, 10107, 3, 826, 413, 0, 10103, 10104, 
	5, 1069, 0, 0, 10104, 10106, 3, 826, 413, 0, 10105, 10103, 1, 0, 0, 0, 
	10106, 10109, 1, 0, 0, 0, 10107, 10105, 1, 0, 0, 0, 10107, 10108, 1, 0, 
	0, 0, 10108, 829, 1, 0, 0, 0, 10109, 10107, 1, 0, 0, 0, 10110, 10111, 3, 
	820, 410, 0, 10111, 10112, 5, 1059, 0, 0, 10112, 10113, 3, 820, 410, 0, 
	10113, 10114, 5, 1059, 0, 0, 10114, 10115, 3, 820, 410, 0, 10115, 10122, 
	1, 0, 0, 0, 10116, 10117, 3, 820, 410, 0, 10117, 10118, 5, 1059, 0, 0, 
	10118, 10119, 3, 820, 410, 0, 10119, 10122, 1, 0, 0, 0, 10120, 10122, 3, 
	820, 410, 0, 10121, 10110, 1, 0, 0, 0, 10121, 10116, 1, 0, 0, 0, 10121, 
	10120, 1, 0, 0, 0, 10122, 831, 1, 0, 0, 0, 10123, 10124, 5, 1044, 0, 0, 
	10124, 833, 1, 0, 0, 0, 10125, 10130, 3, 836, 418, 0, 10126, 10127, 5, 
	1069, 0, 0, 10127, 10129, 3, 836, 418, 0, 10128, 10126, 1, 0, 0, 0, 10129, 
	10132, 1, 0, 0, 0, 10130, 10128, 1, 0, 0, 0, 10130, 10131, 1, 0, 0, 0, 
	10131, 835, 1, 0, 0, 0, 10132, 10130, 1, 0, 0, 0, 10133, 10134, 6, 418, 
	-1, 0, 10134, 10152, 3, 848, 424, 0, 10135, 10152, 3, 856, 428, 0, 10136, 
	10152, 3, 870, 435, 0, 10137, 10152, 3, 866, 433, 0, 10138, 10152, 3, 868, 
	434, 0, 10139, 10140, 7, 61, 0, 0, 10140, 10152, 3, 836, 418, 11, 10141, 
	10152, 3, 844, 422, 0, 10142, 10152, 3, 854, 427, 0, 10143, 10144, 5, 114, 
	0, 0, 10144, 10145, 5, 1063, 0, 0, 10145, 10146, 3, 836, 418, 0, 10146, 
	10147, 5, 53, 0, 0, 10147, 10148, 3, 846, 423, 0, 10148, 10149, 5, 1064, 
	0, 0, 10149, 10152, 1, 0, 0, 0, 10150, 10152, 3, 838, 419, 0, 10151, 10133, 
	1, 0, 0, 0, 10151, 10135, 1, 0, 0, 0, 10151, 10136, 1, 0, 0, 0, 10151, 
	10137, 1, 0, 0, 0, 10151, 10138, 1, 0, 0, 0, 10151, 10139, 1, 0, 0, 0, 
	10151, 10141, 1, 0, 0, 0, 10151, 10142, 1, 0, 0, 0, 10151, 10143, 1, 0, 
	0, 0, 10151, 10150, 1, 0, 0, 0, 10152, 10178, 1, 0, 0, 0, 10153, 10154, 
	10, 10, 0, 0, 10154, 10155, 7, 62, 0, 0, 10155, 10177, 3, 836, 418, 11, 
	10156, 10157, 10, 9, 0, 0, 10157, 10158, 7, 63, 0, 0, 10158, 10177, 3, 
	836, 418, 10, 10159, 10160, 10, 6, 0, 0, 10160, 10161, 5, 1071, 0, 0, 10161, 
	10177, 3, 836, 418, 7, 10162, 10163, 10, 5, 0, 0, 10163, 10164, 5, 1059, 
	0, 0, 10164, 10177, 3, 836, 418, 6, 10165, 10166, 10, 15, 0, 0, 10166, 
	10167, 5, 151, 0, 0, 10167, 10177, 3, 816, 408, 0, 10168, 10169, 10, 8, 
	0, 0, 10169, 10170, 5, 1065, 0, 0, 10170, 10171, 3, 836, 418, 0, 10171, 
	10172, 5, 1066, 0, 0, 10172, 10177, 1, 0, 0, 0, 10173, 10174, 10, 4, 0, 
	0, 10174, 10175, 5, 1072, 0, 0, 10175, 10177, 3, 846, 423, 0, 10176, 10153, 
	1, 0, 0, 0, 10176, 10156, 1, 0, 0, 0, 10176, 10159, 1, 0, 0, 0, 10176, 
	10162, 1, 0, 0, 0, 10176, 10165, 1, 0, 0, 0, 10176, 10168, 1, 0, 0, 0, 
	10176, 10173, 1, 0, 0, 0, 10177, 10180, 1, 0, 0, 0, 10178, 10176, 1, 0, 
	0, 0, 10178, 10179, 1, 0, 0, 0, 10179, 837, 1, 0, 0, 0, 10180, 10178, 1, 
	0, 0, 0, 10181, 10182, 5, 1067, 0, 0, 10182, 10187, 3, 840, 420, 0, 10183, 
	10184, 5, 1069, 0, 0, 10184, 10186, 3, 840, 420, 0, 10185, 10183, 1, 0, 
	0, 0, 10186, 10189, 1, 0, 0, 0, 10187, 10185, 1, 0, 0, 0, 10187, 10188, 
	1, 0, 0, 0, 10188, 10190, 1, 0, 0, 0, 10189, 10187, 1, 0, 0, 0, 10190, 
	10191, 5, 1068, 0, 0, 10191, 10195, 1, 0, 0, 0, 10192, 10193, 5, 1067, 
	0, 0, 10193, 10195, 5, 1068, 0, 0, 10194, 10181, 1, 0, 0, 0, 10194, 10192, 
	1, 0, 0, 0, 10195, 839, 1, 0, 0, 0, 10196, 10197, 5, 1043, 0, 0, 10197, 
	10198, 5, 1071, 0, 0, 10198, 10199, 3, 842, 421, 0, 10199, 841, 1, 0, 0, 
	0, 10200, 10201, 3, 836, 418, 0, 10201, 843, 1, 0, 0, 0, 10202, 10203, 
	5, 1065, 0, 0, 10203, 10208, 3, 842, 421, 0, 10204, 10205, 5, 1069, 0, 
	0, 10205, 10207, 3, 842, 421, 0, 10206, 10204, 1, 0, 0, 0, 10207, 10210, 
	1, 0, 0, 0, 10208, 10206, 1, 0, 0, 0, 10208, 10209, 1, 0, 0, 0, 10209, 
	10211, 1, 0, 0, 0, 10210, 10208, 1, 0, 0, 0, 10211, 10212, 5, 1066, 0, 
	0, 10212, 10216, 1, 0, 0, 0, 10213, 10214, 5, 1065, 0, 0, 10214, 10216, 
	5, 1066, 0, 0, 10215, 10202, 1, 0, 0, 0, 10215, 10213, 1, 0, 0, 0, 10216, 
	845, 1, 0, 0, 0, 10217, 10263, 5, 378, 0, 0, 10218, 10263, 5, 1014, 0, 
	0, 10219, 10263, 5, 1020, 0, 0, 10220, 10263, 5, 1023, 0, 0, 10221, 10263, 
	5, 1004, 0, 0, 10222, 10263, 5, 1001, 0, 0, 10223, 10232, 7, 64, 0, 0, 
	10224, 10225, 5, 1063, 0, 0, 10225, 10228, 3, 832, 416, 0, 10226, 10227, 
	5, 1069, 0, 0, 10227, 10229, 3, 832, 416, 0, 10228, 10226, 1, 0, 0, 0, 
	10228, 10229, 1, 0, 0, 0, 10229, 10230, 1, 0, 0, 0, 10230, 10231, 5, 1064, 
	0, 0, 10231, 10233, 1, 0, 0, 0, 10232, 10224, 1, 0, 0, 0, 10232, 10233, 
	1, 0, 0, 0, 10233, 10263, 1, 0, 0, 0, 10234, 10263, 5, 1011, 0, 0, 10235, 
	10263, 5, 1009, 0, 0, 10236, 10263, 5, 1010, 0, 0, 10237, 10239, 5, 238, 
	0, 0, 10238, 10240, 5, 588, 0, 0, 10239, 10238, 1, 0, 0, 0, 10239, 10240, 
	1, 0, 0, 0, 10240, 10263, 1, 0, 0, 0, 10241, 10263, 5, 1019, 0, 0, 10242, 
	10263, 5, 1003, 0, 0, 10243, 10263, 5, 1006, 0, 0, 10244, 10263, 5, 1007, 
	0, 0, 10245, 10263, 5, 869, 0, 0, 10246, 10263, 5, 875, 0, 0, 10247, 10263, 
	5, 879, 0, 0, 10248, 10263, 5, 881, 0, 0, 10249, 10263, 5, 885, 0, 0, 10250, 
	10263, 5, 1021, 0, 0, 10251, 10263, 5, 122, 0, 0, 10252, 10263, 5, 123, 
	0, 0, 10253, 10263, 5, 1025, 0, 0, 10254, 10263, 5, 1022, 0, 0, 10255, 
	10263, 5, 1002, 0, 0, 10256, 10263, 5, 1024, 0, 0, 10257, 10263, 5, 1026, 
	0, 0, 10258, 10263, 5, 517, 0, 0, 10259, 10263, 5, 1000, 0, 0, 10260, 10263, 
	5, 1012, 0, 0, 10261, 10263, 5, 1013, 0, 0, 10262, 10217, 1, 0, 0, 0, 10262, 
	10218, 1, 0, 0, 0, 10262, 10219, 1, 0, 0, 0, 10262, 10220, 1, 0, 0, 0, 
	10262, 10221, 1, 0, 0, 0, 10262, 10222, 1, 0, 0, 0, 10262, 10223, 1, 0, 
	0, 0, 10262, 10234, 1, 0, 0, 0, 10262, 10235, 1, 0, 0, 0, 10262, 10236, 
	1, 0, 0, 0, 10262, 10237, 1, 0, 0, 0, 10262, 10241, 1, 0, 0, 0, 10262, 
	10242, 1, 0, 0, 0, 10262, 10243, 1, 0, 0, 0, 10262, 10244, 1, 0, 0, 0, 
	10262, 10245, 1, 0, 0, 0, 10262, 10246, 1, 0, 0, 0, 10262, 10247, 1, 0, 
	0, 0, 10262, 10248, 1, 0, 0, 0, 10262, 10249, 1, 0, 0, 0, 10262, 10250, 
	1, 0, 0, 0, 10262, 10251, 1, 0, 0, 0, 10262, 10252, 1, 0, 0, 0, 10262, 
	10253, 1, 0, 0, 0, 10262, 10254, 1, 0, 0, 0, 10262, 10255, 1, 0, 0, 0, 
	10262, 10256, 1, 0, 0, 0, 10262, 10257, 1, 0, 0, 0, 10262, 10258, 1, 0, 
	0, 0, 10262, 10259, 1, 0, 0, 0, 10262, 10260, 1, 0, 0, 0, 10262, 10261, 
	1, 0, 0, 0, 10263, 847, 1, 0, 0, 0, 10264, 10269, 5, 212, 0, 0, 10265, 
	10269, 5, 500, 0, 0, 10266, 10269, 3, 820, 410, 0, 10267, 10269, 3, 862, 
	431, 0, 10268, 10264, 1, 0, 0, 0, 10268, 10265, 1, 0, 0, 0, 10268, 10266, 
	1, 0, 0, 0, 10268, 10267, 1, 0, 0, 0, 10269, 849, 1, 0, 0, 0, 10270, 10271, 
	5, 544, 0, 0, 10271, 10272, 5, 104, 0, 0, 10272, 10273, 3, 836, 418, 0, 
	10273, 851, 1, 0, 0, 0, 10274, 10275, 7, 65, 0, 0, 10275, 853, 1, 0, 0, 
	0, 10276, 10277, 5, 548, 0, 0, 10277, 10279, 5, 1063, 0, 0, 10278, 10280, 
	3, 946, 473, 0, 10279, 10278, 1, 0, 0, 0, 10279, 10280, 1, 0, 0, 0, 10280, 
	10281, 1, 0, 0, 0, 10281, 10283, 3, 850, 425, 0, 10282, 10284, 3, 852, 
	426, 0, 10283, 10282, 1, 0, 0, 0, 10283, 10284, 1, 0, 0, 0, 10284, 10285, 
	1, 0, 0, 0, 10285, 10286, 5, 1064, 0, 0, 10286, 855, 1, 0, 0, 0, 10287, 
	10297, 3, 858, 429, 0, 10288, 10297, 3, 860, 430, 0, 10289, 10290, 3, 830, 
	415, 0, 10290, 10292, 5, 1063, 0, 0, 10291, 10293, 3, 834, 417, 0, 10292, 
	10291, 1, 0, 0, 0, 10292, 10293, 1, 0, 0, 0, 10293, 10294, 1, 0, 0, 0, 
	10294, 10295, 5, 1064, 0, 0, 10295, 10297, 1, 0, 0, 0, 10296, 10287, 1, 
	0, 0, 0, 10296, 10288, 1, 0, 0, 0, 10296, 10289, 1, 0, 0, 0, 10297, 857, 
	1, 0, 0, 0, 10298, 10299, 7, 66, 0, 0, 10299, 10300, 5, 1063, 0, 0, 10300, 
	10301, 5, 1064, 0, 0, 10301, 10309, 3, 854, 427, 0, 10302, 10303, 5, 499, 
	0, 0, 10303, 10304, 5, 1063, 0, 0, 10304, 10305, 3, 836, 418, 0, 10305, 
	10306, 5, 1064, 0, 0, 10306, 10307, 3, 854, 427, 0, 10307, 10309, 1, 0, 
	0, 0, 10308, 10298, 1, 0, 0, 0, 10308, 10302, 1, 0, 0, 0, 10309, 859, 1, 
	0, 0, 0, 10310, 10311, 3, 820, 410, 0, 10311, 10313, 5, 1063, 0, 0, 10312, 
	10314, 5, 236, 0, 0, 10313, 10312, 1, 0, 0, 0, 10313, 10314, 1, 0, 0, 0, 
	10314, 10315, 1, 0, 0, 0, 10315, 10316, 3, 834, 417, 0, 10316, 10317, 5, 
	1064, 0, 0, 10317, 10343, 1, 0, 0, 0, 10318, 10319, 3, 820, 410, 0, 10319, 
	10320, 5, 1063, 0, 0, 10320, 10321, 5, 1073, 0, 0, 10321, 10322, 5, 1064, 
	0, 0, 10322, 10343, 1, 0, 0, 0, 10323, 10324, 5, 1027, 0, 0, 10324, 10326, 
	5, 1063, 0, 0, 10325, 10327, 5, 236, 0, 0, 10326, 10325, 1, 0, 0, 0, 10326, 
	10327, 1, 0, 0, 0, 10327, 10328, 1, 0, 0, 0, 10328, 10331, 3, 836, 418, 
	0, 10329, 10330, 5, 1069, 0, 0, 10330, 10332, 3, 816, 408, 0, 10331, 10329, 
	1, 0, 0, 0, 10331, 10332, 1, 0, 0, 0, 10332, 10333, 1, 0, 0, 0, 10333, 
	10340, 5, 1064, 0, 0, 10334, 10335, 5, 983, 0, 0, 10335, 10336, 5, 338, 
	0, 0, 10336, 10337, 5, 1063, 0, 0, 10337, 10338, 3, 1010, 505, 0, 10338, 
	10339, 5, 1064, 0, 0, 10339, 10341, 1, 0, 0, 0, 10340, 10334, 1, 0, 0, 
	0, 10340, 10341, 1, 0, 0, 0, 10341, 10343, 1, 0, 0, 0, 10342, 10310, 1, 
	0, 0, 0, 10342, 10318, 1, 0, 0, 0, 10342, 10323, 1, 0, 0, 0, 10343, 861, 
	1, 0, 0, 0, 10344, 10356, 5, 1043, 0, 0, 10345, 10347, 3, 864, 432, 0, 
	10346, 10345, 1, 0, 0, 0, 10346, 10347, 1, 0, 0, 0, 10347, 10348, 1, 0, 
	0, 0, 10348, 10356, 5, 1044, 0, 0, 10349, 10351, 3, 864, 432, 0, 10350, 
	10349, 1, 0, 0, 0, 10350, 10351, 1, 0, 0, 0, 10351, 10352, 1, 0, 0, 0, 
	10352, 10356, 7, 67, 0, 0, 10353, 10356, 3, 430, 215, 0, 10354, 10356, 
	5, 500, 0, 0, 10355, 10344, 1, 0, 0, 0, 10355, 10346, 1, 0, 0, 0, 10355, 
	10350, 1, 0, 0, 0, 10355, 10353, 1, 0, 0, 0, 10355, 10354, 1, 0, 0, 0, 
	10356, 863, 1, 0, 0, 0, 10357, 10358, 7, 61, 0, 0, 10358, 865, 1, 0, 0, 
	0, 10359, 10361, 3, 820, 410, 0, 10360, 10359, 1, 0, 0, 0, 10360, 10361, 
	1, 0, 0, 0, 10361, 10362, 1, 0, 0, 0, 10362, 10364, 5, 1059, 0, 0, 10363, 
	10365, 3, 820, 410, 0, 10364, 10363, 1, 0, 0, 0, 10364, 10365, 1, 0, 0, 
	0, 10365, 10366, 1, 0, 0, 0, 10366, 10368, 5, 1059, 0, 0, 10367, 10369, 
	3, 820, 410, 0, 10368, 10367, 1, 0, 0, 0, 10368, 10369, 1, 0, 0, 0, 10369, 
	10370, 1, 0, 0, 0, 10370, 10371, 5, 1059, 0, 0, 10371, 10388, 3, 820, 410, 
	0, 10372, 10374, 3, 820, 410, 0, 10373, 10372, 1, 0, 0, 0, 10373, 10374, 
	1, 0, 0, 0, 10374, 10375, 1, 0, 0, 0, 10375, 10377, 5, 1059, 0, 0, 10376, 
	10378, 3, 820, 410, 0, 10377, 10376, 1, 0, 0, 0, 10377, 10378, 1, 0, 0, 
	0, 10378, 10379, 1, 0, 0, 0, 10379, 10380, 5, 1059, 0, 0, 10380, 10388, 
	3, 820, 410, 0, 10381, 10383, 3, 820, 410, 0, 10382, 10381, 1, 0, 0, 0, 
	10382, 10383, 1, 0, 0, 0, 10383, 10384, 1, 0, 0, 0, 10384, 10385, 5, 1059, 
	0, 0, 10385, 10388, 3, 820, 410, 0, 10386, 10388, 3, 820, 410, 0, 10387, 
	10360, 1, 0, 0, 0, 10387, 10373, 1, 0, 0, 0, 10387, 10382, 1, 0, 0, 0, 
	10387, 10386, 1, 0, 0, 0, 10388, 867, 1, 0, 0, 0, 10389, 10390, 5, 1063, 
	0, 0, 10390, 10391, 3, 836, 418, 0, 10391, 10392, 5, 1064, 0, 0, 10392, 
	10398, 1, 0, 0, 0, 10393, 10394, 5, 1063, 0, 0, 10394, 10395, 3, 994, 497, 
	0, 10395, 10396, 5, 1064, 0, 0, 10396, 10398, 1, 0, 0, 0, 10397, 10389, 
	1, 0, 0, 0, 10397, 10393, 1, 0, 0, 0, 10398, 869, 1, 0, 0, 0, 10399, 10400, 
	5, 111, 0, 0, 10400, 10402, 3, 836, 418, 0, 10401, 10403, 3, 874, 437, 
	0, 10402, 10401, 1, 0, 0, 0, 10403, 10404, 1, 0, 0, 0, 10404, 10402, 1, 
	0, 0, 0, 10404, 10405, 1, 0, 0, 0, 10405, 10408, 1, 0, 0, 0, 10406, 10407, 
	5, 242, 0, 0, 10407, 10409, 3, 836, 418, 0, 10408, 10406, 1, 0, 0, 0, 10408, 
	10409, 1, 0, 0, 0, 10409, 10410, 1, 0, 0, 0, 10410, 10411, 5, 255, 0, 0, 
	10411, 10425, 1, 0, 0, 0, 10412, 10414, 5, 111, 0, 0, 10413, 10415, 3, 
	872, 436, 0, 10414, 10413, 1, 0, 0, 0, 10415, 10416, 1, 0, 0, 0, 10416, 
	10414, 1, 0, 0, 0, 10416, 10417, 1, 0, 0, 0, 10417, 10420, 1, 0, 0, 0, 
	10418, 10419, 5, 242, 0, 0, 10419, 10421, 3, 836, 418, 0, 10420, 10418, 
	1, 0, 0, 0, 10420, 10421, 1, 0, 0, 0, 10421, 10422, 1, 0, 0, 0, 10422, 
	10423, 5, 255, 0, 0, 10423, 10425, 1, 0, 0, 0, 10424, 10399, 1, 0, 0, 0, 
	10424, 10412, 1, 0, 0, 0, 10425, 871, 1, 0, 0, 0, 10426, 10427, 5, 980, 
	0, 0, 10427, 10428, 3, 988, 494, 0, 10428, 10429, 5, 867, 0, 0, 10429, 
	10430, 3, 836, 418, 0, 10430, 873, 1, 0, 0, 0, 10431, 10432, 5, 980, 0, 
	0, 10432, 10433, 3, 836, 418, 0, 10433, 10434, 5, 867, 0, 0, 10434, 10435, 
	3, 836, 418, 0, 10435, 875, 1, 0, 0, 0, 10436, 10438, 3, 878, 439, 0, 10437, 
	10436, 1, 0, 0, 0, 10437, 10438, 1, 0, 0, 0, 10438, 10439, 1, 0, 0, 0, 
	10439, 10443, 3, 882, 441, 0, 10440, 10442, 3, 884, 442, 0, 10441, 10440, 
	1, 0, 0, 0, 10442, 10445, 1, 0, 0, 0, 10443, 10441, 1, 0, 0, 0, 10443, 
	10444, 1, 0, 0, 0, 10444, 877, 1, 0, 0, 0, 10445, 10443, 1, 0, 0, 0, 10446, 
	10447, 5, 982, 0, 0, 10447, 10452, 3, 880, 440, 0, 10448, 10449, 5, 1069, 
	0, 0, 10449, 10451, 3, 880, 440, 0, 10450, 10448, 1, 0, 0, 0, 10451, 10454, 
	1, 0, 0, 0, 10452, 10450, 1, 0, 0, 0, 10452, 10453, 1, 0, 0, 0, 10453, 
	879, 1, 0, 0, 0, 10454, 10452, 1, 0, 0, 0, 10455, 10460, 3, 820, 410, 0, 
	10456, 10457, 5, 1063, 0, 0, 10457, 10458, 3, 828, 414, 0, 10458, 10459, 
	5, 1064, 0, 0, 10459, 10461, 1, 0, 0, 0, 10460, 10456, 1, 0, 0, 0, 10460, 
	10461, 1, 0, 0, 0, 10461, 10462, 1, 0, 0, 0, 10462, 10463, 5, 53, 0, 0, 
	10463, 10464, 5, 1063, 0, 0, 10464, 10465, 3, 882, 441, 0, 10465, 10466, 
	5, 1064, 0, 0, 10466, 881, 1, 0, 0, 0, 10467, 10468, 3, 888, 444, 0, 10468, 
	10470, 3, 886, 443, 0, 10469, 10471, 3, 1016, 508, 0, 10470, 10469, 1, 
	0, 0, 0, 10470, 10471, 1, 0, 0, 0, 10471, 10476, 1, 0, 0, 0, 10472, 10473, 
	3, 890, 445, 0, 10473, 10474, 3, 886, 443, 0, 10474, 10476, 1, 0, 0, 0, 
	10475, 10467, 1, 0, 0, 0, 10475, 10472, 1, 0, 0, 0, 10476, 883, 1, 0, 0, 
	0, 10477, 10479, 5, 928, 0, 0, 10478, 10480, 5, 20, 0, 0, 10479, 10478, 
	1, 0, 0, 0, 10479, 10480, 1, 0, 0, 0, 10480, 10484, 1, 0, 0, 0, 10481, 
	10484, 7, 68, 0, 0, 10482, 10484, 5, 381, 0, 0, 10483, 10477, 1, 0, 0, 
	0, 10483, 10481, 1, 0, 0, 0, 10483, 10482, 1, 0, 0, 0, 10484, 10485, 1, 
	0, 0, 0, 10485, 10491, 3, 882, 441, 0, 10486, 10487, 5, 1063, 0, 0, 10487, 
	10488, 3, 882, 441, 0, 10488, 10489, 5, 1064, 0, 0, 10489, 10491, 1, 0, 
	0, 0, 10490, 10483, 1, 0, 0, 0, 10490, 10486, 1, 0, 0, 0, 10491, 885, 1, 
	0, 0, 0, 10492, 10494, 3, 912, 456, 0, 10493, 10492, 1, 0, 0, 0, 10493, 
	10494, 1, 0, 0, 0, 10494, 10496, 1, 0, 0, 0, 10495, 10497, 3, 918, 459, 
	0, 10496, 10495, 1, 0, 0, 0, 10496, 10497, 1, 0, 0, 0, 10497, 10499, 1, 
	0, 0, 0, 10498, 10500, 3, 998, 499, 0, 10499, 10498, 1, 0, 0, 0, 10499, 
	10500, 1, 0, 0, 0, 10500, 10502, 1, 0, 0, 0, 10501, 10503, 3, 1002, 501, 
	0, 10502, 10501, 1, 0, 0, 0, 10502, 10503, 1, 0, 0, 0, 10503, 10505, 1, 
	0, 0, 0, 10504, 10506, 3, 1006, 503, 0, 10505, 10504, 1, 0, 0, 0, 10505, 
	10506, 1, 0, 0, 0, 10506, 10508, 1, 0, 0, 0, 10507, 10509, 3, 1010, 505, 
	0, 10508, 10507, 1, 0, 0, 0, 10508, 10509, 1, 0, 0, 0, 10509, 887, 1, 0, 
	0, 0, 10510, 10511, 5, 747, 0, 0, 10511, 10512, 3, 892, 446, 0, 10512, 
	889, 1, 0, 0, 0, 10513, 10514, 5, 747, 0, 0, 10514, 10515, 3, 894, 447, 
	0, 10515, 891, 1, 0, 0, 0, 10516, 10518, 3, 908, 454, 0, 10517, 10516, 
	1, 0, 0, 0, 10517, 10518, 1, 0, 0, 0, 10518, 10519, 1, 0, 0, 0, 10519, 
	10520, 3, 896, 448, 0, 10520, 893, 1, 0, 0, 0, 10521, 10523, 3, 908, 454, 
	0, 10522, 10521, 1, 0, 0, 0, 10522, 10523, 1, 0, 0, 0, 10523, 10525, 1, 
	0, 0, 0, 10524, 10526, 3, 910, 455, 0, 10525, 10524, 1, 0, 0, 0, 10525, 
	10526, 1, 0, 0, 0, 10526, 10527, 1, 0, 0, 0, 10527, 10528, 3, 896, 448, 
	0, 10528, 895, 1, 0, 0, 0, 10529, 10534, 3, 898, 449, 0, 10530, 10531, 
	5, 1069, 0, 0, 10531, 10533, 3, 898, 449, 0, 10532, 10530, 1, 0, 0, 0, 
	10533, 10536, 1, 0, 0, 0, 10534, 10532, 1, 0, 0, 0, 10534, 10535, 1, 0, 
	0, 0, 10535, 897, 1, 0, 0, 0, 10536, 10534, 1, 0, 0, 0, 10537, 10540, 3, 
	900, 450, 0, 10538, 10540, 3, 904, 452, 0, 10539, 10537, 1, 0, 0, 0, 10539, 
	10538, 1, 0, 0, 0, 10540, 899, 1, 0, 0, 0, 10541, 10546, 3, 830, 415, 0, 
	10542, 10543, 3, 948, 474, 0, 10543, 10544, 5, 1059, 0, 0, 10544, 10546, 
	1, 0, 0, 0, 10545, 10541, 1, 0, 0, 0, 10545, 10542, 1, 0, 0, 0, 10545, 
	10546, 1, 0, 0, 0, 10546, 10547, 1, 0, 0, 0, 10547, 10570, 5, 1073, 0, 
	0, 10548, 10553, 3, 830, 415, 0, 10549, 10550, 3, 948, 474, 0, 10550, 10551, 
	5, 1059, 0, 0, 10551, 10553, 1, 0, 0, 0, 10552, 10548, 1, 0, 0, 0, 10552, 
	10549, 1, 0, 0, 0, 10552, 10553, 1, 0, 0, 0, 10553, 10554, 1, 0, 0, 0, 
	10554, 10556, 3, 826, 413, 0, 10555, 10557, 3, 902, 451, 0, 10556, 10555, 
	1, 0, 0, 0, 10556, 10557, 1, 0, 0, 0, 10557, 10570, 1, 0, 0, 0, 10558, 
	10563, 3, 830, 415, 0, 10559, 10560, 3, 948, 474, 0, 10560, 10561, 5, 1059, 
	0, 0, 10561, 10563, 1, 0, 0, 0, 10562, 10558, 1, 0, 0, 0, 10562, 10559, 
	1, 0, 0, 0, 10562, 10563, 1, 0, 0, 0, 10563, 10564, 1, 0, 0, 0, 10564, 
	10565, 5, 1062, 0, 0, 10565, 10567, 3, 906, 453, 0, 10566, 10568, 3, 902, 
	451, 0, 10567, 10566, 1, 0, 0, 0, 10567, 10568, 1, 0, 0, 0, 10568, 10570, 
	1, 0, 0, 0, 10569, 10545, 1, 0, 0, 0, 10569, 10552, 1, 0, 0, 0, 10569, 
	10562, 1, 0, 0, 0, 10570, 901, 1, 0, 0, 0, 10571, 10573, 5, 53, 0, 0, 10572, 
	10571, 1, 0, 0, 0, 10572, 10573, 1, 0, 0, 0, 10573, 10574, 1, 0, 0, 0, 
	10574, 10575, 3, 948, 474, 0, 10575, 903, 1, 0, 0, 0, 10576, 10578, 3, 
	836, 418, 0, 10577, 10579, 3, 902, 451, 0, 10578, 10577, 1, 0, 0, 0, 10578, 
	10579, 1, 0, 0, 0, 10579, 905, 1, 0, 0, 0, 10580, 10581, 3, 832, 416, 0, 
	10581, 907, 1, 0, 0, 0, 10582, 10583, 7, 69, 0, 0, 10583, 909, 1, 0, 0, 
	0, 10584, 10585, 5, 889, 0, 0, 10585, 10586, 3, 832, 416, 0, 10586, 911, 
	1, 0, 0, 0, 10587, 10588, 5, 382, 0, 0, 10588, 10589, 3, 914, 457, 0, 10589, 
	913, 1, 0, 0, 0, 10590, 10591, 3, 916, 458, 0, 10591, 10592, 5, 1069, 0, 
	0, 10592, 10593, 3, 916, 458, 0, 10593, 915, 1, 0, 0, 0, 10594, 10595, 
	5, 1071, 0, 0, 10595, 10596, 3, 820, 410, 0, 10596, 917, 1, 0, 0, 0, 10597, 
	10598, 5, 317, 0, 0, 10598, 10599, 3, 920, 460, 0, 10599, 919, 1, 0, 0, 
	0, 10600, 10605, 3, 922, 461, 0, 10601, 10602, 5, 1069, 0, 0, 10602, 10604, 
	3, 922, 461, 0, 10603, 10601, 1, 0, 0, 0, 10604, 10607, 1, 0, 0, 0, 10605, 
	10603, 1, 0, 0, 0, 10605, 10606, 1, 0, 0, 0, 10606, 921, 1, 0, 0, 0, 10607, 
	10605, 1, 0, 0, 0, 10608, 10609, 3, 924, 462, 0, 10609, 923, 1, 0, 0, 0, 
	10610, 10614, 3, 926, 463, 0, 10611, 10613, 3, 936, 468, 0, 10612, 10611, 
	1, 0, 0, 0, 10613, 10616, 1, 0, 0, 0, 10614, 10612, 1, 0, 0, 0, 10614, 
	10615, 1, 0, 0, 0, 10615, 10627, 1, 0, 0, 0, 10616, 10614, 1, 0, 0, 0, 
	10617, 10618, 5, 1063, 0, 0, 10618, 10619, 3, 924, 462, 0, 10619, 10623, 
	5, 1064, 0, 0, 10620, 10622, 3, 936, 468, 0, 10621, 10620, 1, 0, 0, 0, 
	10622, 10625, 1, 0, 0, 0, 10623, 10621, 1, 0, 0, 0, 10623, 10624, 1, 0, 
	0, 0, 10624, 10627, 1, 0, 0, 0, 10625, 10623, 1, 0, 0, 0, 10626, 10610, 
	1, 0, 0, 0, 10626, 10617, 1, 0, 0, 0, 10627, 925, 1, 0, 0, 0, 10628, 10630, 
	3, 830, 415, 0, 10629, 10631, 3, 938, 469, 0, 10630, 10629, 1, 0, 0, 0, 
	10630, 10631, 1, 0, 0, 0, 10631, 10633, 1, 0, 0, 0, 10632, 10634, 3, 942, 
	471, 0, 10633, 10632, 1, 0, 0, 0, 10633, 10634, 1, 0, 0, 0, 10634, 10636, 
	1, 0, 0, 0, 10635, 10637, 3, 968, 484, 0, 10636, 10635, 1, 0, 0, 0, 10636, 
	10637, 1, 0, 0, 0, 10637, 10639, 1, 0, 0, 0, 10638, 10640, 3, 972, 486, 
	0, 10639, 10638, 1, 0, 0, 0, 10639, 10640, 1, 0, 0, 0, 10640, 10642, 1, 
	0, 0, 0, 10641, 10643, 3, 902, 451, 0, 10642, 10641, 1, 0, 0, 0, 10642, 
	10643, 1, 0, 0, 0, 10643, 10645, 1, 0, 0, 0, 10644, 10646, 3, 986, 493, 
	0, 10645, 10644, 1, 0, 0, 0, 10645, 10646, 1, 0, 0, 0, 10646, 10688, 1, 
	0, 0, 0, 10647, 10648, 3, 830, 415, 0, 10648, 10649, 5, 801, 0, 0, 10649, 
	10650, 5, 982, 0, 0, 10650, 10651, 3, 996, 498, 0, 10651, 10652, 5, 164, 
	0, 0, 10652, 10654, 5, 104, 0, 0, 10653, 10655, 3, 928, 464, 0, 10654, 
	10653, 1, 0, 0, 0, 10654, 10655, 1, 0, 0, 0, 10655, 10688, 1, 0, 0, 0, 
	10656, 10657, 5, 851, 0, 0, 10657, 10658, 5, 1063, 0, 0, 10658, 10659, 
	3, 830, 415, 0, 10659, 10660, 5, 1063, 0, 0, 10660, 10661, 3, 834, 417, 
	0, 10661, 10662, 5, 1064, 0, 0, 10662, 10664, 5, 1064, 0, 0, 10663, 10665, 
	3, 972, 486, 0, 10664, 10663, 1, 0, 0, 0, 10664, 10665, 1, 0, 0, 0, 10665, 
	10667, 1, 0, 0, 0, 10666, 10668, 3, 902, 451, 0, 10667, 10666, 1, 0, 0, 
	0, 10667, 10668, 1, 0, 0, 0, 10668, 10670, 1, 0, 0, 0, 10669, 10671, 3, 
	986, 493, 0, 10670, 10669, 1, 0, 0, 0, 10670, 10671, 1, 0, 0, 0, 10671, 
	10688, 1, 0, 0, 0, 10672, 10673, 5, 1063, 0, 0, 10673, 10674, 3, 978, 489, 
	0, 10674, 10676, 5, 1064, 0, 0, 10675, 10677, 3, 986, 493, 0, 10676, 10675, 
	1, 0, 0, 0, 10676, 10677, 1, 0, 0, 0, 10677, 10688, 1, 0, 0, 0, 10678, 
	10680, 5, 407, 0, 0, 10679, 10678, 1, 0, 0, 0, 10679, 10680, 1, 0, 0, 0, 
	10680, 10681, 1, 0, 0, 0, 10681, 10682, 5, 1063, 0, 0, 10682, 10683, 3, 
	994, 497, 0, 10683, 10685, 5, 1064, 0, 0, 10684, 10686, 3, 902, 451, 0, 
	10685, 10684, 1, 0, 0, 0, 10685, 10686, 1, 0, 0, 0, 10686, 10688, 1, 0, 
	0, 0, 10687, 10628, 1, 0, 0, 0, 10687, 10647, 1, 0, 0, 0, 10687, 10656, 
	1, 0, 0, 0, 10687, 10672, 1, 0, 0, 0, 10687, 10679, 1, 0, 0, 0, 10688, 
	927, 1, 0, 0, 0, 10689, 10694, 3, 930, 465, 0, 10690, 10691, 5, 1069, 0, 
	0, 10691, 10693, 3, 930, 465, 0, 10692, 10690, 1, 0, 0, 0, 10693, 10696, 
	1, 0, 0, 0, 10694, 10692, 1, 0, 0, 0, 10694, 10695, 1, 0, 0, 0, 10695, 
	929, 1, 0, 0, 0, 10696, 10694, 1, 0, 0, 0, 10697, 10699, 5, 596, 0, 0, 
	10698, 10697, 1, 0, 0, 0, 10698, 10699, 1, 0, 0, 0, 10699, 10700, 1, 0, 
	0, 0, 10700, 10701, 3, 820, 410, 0, 10701, 10703, 5, 1052, 0, 0, 10702, 
	10704, 5, 596, 0, 0, 10703, 10702, 1, 0, 0, 0, 10703, 10704, 1, 0, 0, 0, 
	10704, 10705, 1, 0, 0, 0, 10705, 10706, 3, 820, 410, 0, 10706, 931, 1, 
	0, 0, 0, 10707, 10709, 7, 70, 0, 0, 10708, 10710, 5, 547, 0, 0, 10709, 
	10708, 1, 0, 0, 0, 10709, 10710, 1, 0, 0, 0, 10710, 933, 1, 0, 0, 0, 10711, 
	10714, 5, 373, 0, 0, 10712, 10714, 3, 932, 466, 0, 10713, 10711, 1, 0, 
	0, 0, 10713, 10712, 1, 0, 0, 0, 10714, 935, 1, 0, 0, 0, 10715, 10717, 3, 
	934, 467, 0, 10716, 10715, 1, 0, 0, 0, 10716, 10717, 1, 0, 0, 0, 10717, 
	10718, 1, 0, 0, 0, 10718, 10719, 5, 390, 0, 0, 10719, 10731, 3, 926, 463, 
	0, 10720, 10721, 5, 531, 0, 0, 10721, 10723, 3, 988, 494, 0, 10722, 10720, 
	1, 0, 0, 0, 10722, 10723, 1, 0, 0, 0, 10723, 10732, 1, 0, 0, 0, 10724, 
	10725, 5, 954, 0, 0, 10725, 10726, 5, 1063, 0, 0, 10726, 10727, 3, 828, 
	414, 0, 10727, 10728, 5, 1064, 0, 0, 10728, 10730, 1, 0, 0, 0, 10729, 10724, 
	1, 0, 0, 0, 10729, 10730, 1, 0, 0, 0, 10730, 10732, 1, 0, 0, 0, 10731, 
	10722, 1, 0, 0, 0, 10731, 10729, 1, 0, 0, 0, 10732, 10743, 1, 0, 0, 0, 
	10733, 10735, 5, 474, 0, 0, 10734, 10736, 3, 932, 466, 0, 10735, 10734, 
	1, 0, 0, 0, 10735, 10736, 1, 0, 0, 0, 10736, 10737, 1, 0, 0, 0, 10737, 
	10738, 5, 390, 0, 0, 10738, 10743, 3, 926, 463, 0, 10739, 10740, 5, 186, 
	0, 0, 10740, 10741, 5, 390, 0, 0, 10741, 10743, 3, 926, 463, 0, 10742, 
	10716, 1, 0, 0, 0, 10742, 10733, 1, 0, 0, 0, 10742, 10739, 1, 0, 0, 0, 
	10743, 937, 1, 0, 0, 0, 10744, 10745, 5, 1061, 0, 0, 10745, 10758, 5, 1063, 
	0, 0, 10746, 10747, 5, 875, 0, 0, 10747, 10748, 5, 1048, 0, 0, 10748, 10759, 
	3, 816, 408, 0, 10749, 10750, 5, 522, 0, 0, 10750, 10751, 5, 1048, 0, 0, 
	10751, 10759, 3, 816, 408, 0, 10752, 10753, 5, 807, 0, 0, 10753, 10754, 
	5, 1048, 0, 0, 10754, 10759, 3, 820, 410, 0, 10755, 10756, 5, 830, 0, 0, 
	10756, 10757, 5, 1048, 0, 0, 10757, 10759, 3, 816, 408, 0, 10758, 10746, 
	1, 0, 0, 0, 10758, 10749, 1, 0, 0, 0, 10758, 10752, 1, 0, 0, 0, 10758, 
	10755, 1, 0, 0, 0, 10759, 10760, 1, 0, 0, 0, 10760, 10761, 5, 1064, 0, 
	0, 10761, 10770, 1, 0, 0, 0, 10762, 10763, 5, 88, 0, 0, 10763, 10764, 5, 
	1063, 0, 0, 10764, 10765, 5, 807, 0, 0, 10765, 10766, 5, 1048, 0, 0, 10766, 
	10767, 3, 820, 410, 0, 10767, 10768, 5, 1064, 0, 0, 10768, 10770, 1, 0, 
	0, 0, 10769, 10744, 1, 0, 0, 0, 10769, 10762, 1, 0, 0, 0, 10770, 939, 1, 
	0, 0, 0, 10771, 10772, 5, 255, 0, 0, 10772, 10773, 5, 1063, 0, 0, 10773, 
	10774, 5, 875, 0, 0, 10774, 10775, 5, 1048, 0, 0, 10775, 10785, 3, 816, 
	408, 0, 10776, 10777, 5, 522, 0, 0, 10777, 10778, 5, 1048, 0, 0, 10778, 
	10785, 3, 816, 408, 0, 10779, 10780, 5, 807, 0, 0, 10780, 10781, 5, 1048, 
	0, 0, 10781, 10782, 3, 820, 410, 0, 10782, 10783, 5, 1064, 0, 0, 10783, 
	10785, 1, 0, 0, 0, 10784, 10771, 1, 0, 0, 0, 10784, 10776, 1, 0, 0, 0, 
	10784, 10779, 1, 0, 0, 0, 10785, 941, 1, 0, 0, 0, 10786, 10787, 5, 120, 
	0, 0, 10787, 10788, 5, 1063, 0, 0, 10788, 10789, 5, 368, 0, 0, 10789, 10790, 
	5, 1049, 0, 0, 10790, 10791, 3, 944, 472, 0, 10791, 10792, 5, 1064, 0, 
	0, 10792, 10794, 3, 938, 469, 0, 10793, 10795, 3, 940, 470, 0, 10794, 10793, 
	1, 0, 0, 0, 10794, 10795, 1, 0, 0, 0, 10795, 943, 1, 0, 0, 0, 10796, 10800, 
	5, 212, 0, 0, 10797, 10798, 5, 49, 0, 0, 10798, 10800, 5, 536, 0, 0, 10799, 
	10796, 1, 0, 0, 0, 10799, 10797, 1, 0, 0, 0, 10800, 945, 1, 0, 0, 0, 10801, 
	10802, 5, 559, 0, 0, 10802, 10803, 5, 104, 0, 0, 10803, 10804, 3, 834, 
	417, 0, 10804, 947, 1, 0, 0, 0, 10805, 10806, 3, 820, 410, 0, 10806, 949, 
	1, 0, 0, 0, 10807, 10809, 3, 836, 418, 0, 10808, 10810, 5, 53, 0, 0, 10809, 
	10808, 1, 0, 0, 0, 10809, 10810, 1, 0, 0, 0, 10810, 10811, 1, 0, 0, 0, 
	10811, 10821, 3, 948, 474, 0, 10812, 10813, 5, 1069, 0, 0, 10813, 10815, 
	3, 836, 418, 0, 10814, 10816, 5, 53, 0, 0, 10815, 10814, 1, 0, 0, 0, 10815, 
	10816, 1, 0, 0, 0, 10816, 10817, 1, 0, 0, 0, 10817, 10818, 3, 948, 474, 
	0, 10818, 10820, 1, 0, 0, 0, 10819, 10812, 1, 0, 0, 0, 10820, 10823, 1, 
	0, 0, 0, 10821, 10819, 1, 0, 0, 0, 10821, 10822, 1, 0, 0, 0, 10822, 951, 
	1, 0, 0, 0, 10823, 10821, 1, 0, 0, 0, 10824, 10825, 5, 451, 0, 0, 10825, 
	10826, 3, 950, 475, 0, 10826, 953, 1, 0, 0, 0, 10827, 10828, 5, 764, 0, 
	0, 10828, 10829, 5, 244, 0, 0, 10829, 10837, 5, 444, 0, 0, 10830, 10831, 
	5, 530, 0, 0, 10831, 10832, 5, 244, 0, 0, 10832, 10837, 5, 444, 0, 0, 10833, 
	10834, 5, 982, 0, 0, 10834, 10835, 5, 934, 0, 0, 10835, 10837, 5, 703, 
	0, 0, 10836, 10827, 1, 0, 0, 0, 10836, 10830, 1, 0, 0, 0, 10836, 10833, 
	1, 0, 0, 0, 10837, 955, 1, 0, 0, 0, 10838, 10839, 5, 534, 0, 0, 10839, 
	10840, 5, 698, 0, 0, 10840, 10841, 5, 566, 0, 0, 10841, 10847, 5, 440, 
	0, 0, 10842, 10843, 5, 20, 0, 0, 10843, 10844, 5, 703, 0, 0, 10844, 10845, 
	5, 566, 0, 0, 10845, 10847, 5, 440, 0, 0, 10846, 10838, 1, 0, 0, 0, 10846, 
	10842, 1, 0, 0, 0, 10847, 10849, 1, 0, 0, 0, 10848, 10850, 3, 954, 477, 
	0, 10849, 10848, 1, 0, 0, 0, 10849, 10850, 1, 0, 0, 0, 10850, 957, 1, 0, 
	0, 0, 10851, 10852, 7, 71, 0, 0, 10852, 959, 1, 0, 0, 0, 10853, 10854, 
	5, 1028, 0, 0, 10854, 961, 1, 0, 0, 0, 10855, 10856, 5, 18, 0, 0, 10856, 
	10857, 5, 440, 0, 0, 10857, 10869, 5, 776, 0, 0, 10858, 10859, 5, 563, 
	0, 0, 10859, 10860, 5, 403, 0, 0, 10860, 10870, 5, 698, 0, 0, 10861, 10862, 
	5, 888, 0, 0, 10862, 10863, 5, 486, 0, 0, 10863, 10870, 5, 698, 0, 0, 10864, 
	10866, 5, 888, 0, 0, 10865, 10867, 3, 958, 479, 0, 10866, 10865, 1, 0, 
	0, 0, 10866, 10867, 1, 0, 0, 0, 10867, 10868, 1, 0, 0, 0, 10868, 10870, 
	3, 960, 480, 0, 10869, 10858, 1, 0, 0, 0, 10869, 10861, 1, 0, 0, 0, 10869, 
	10864, 1, 0, 0, 0, 10870, 963, 1, 0, 0, 0, 10871, 10872, 3, 960, 480, 0, 
	10872, 10873, 5, 53, 0, 0, 10873, 10881, 3, 836, 418, 0, 10874, 10875, 
	5, 1069, 0, 0, 10875, 10876, 3, 960, 480, 0, 10876, 10877, 5, 53, 0, 0, 
	10877, 10878, 3, 836, 418, 0, 10878, 10880, 1, 0, 0, 0, 10879, 10874, 1, 
	0, 0, 0, 10880, 10883, 1, 0, 0, 0, 10881, 10879, 1, 0, 0, 0, 10881, 10882, 
	1, 0, 0, 0, 10882, 965, 1, 0, 0, 0, 10883, 10881, 1, 0, 0, 0, 10884, 10885, 
	5, 219, 0, 0, 10885, 10886, 3, 964, 482, 0, 10886, 967, 1, 0, 0, 0, 10887, 
	10888, 5, 442, 0, 0, 10888, 10890, 5, 1063, 0, 0, 10889, 10891, 3, 946, 
	473, 0, 10890, 10889, 1, 0, 0, 0, 10890, 10891, 1, 0, 0, 0, 10891, 10893, 
	1, 0, 0, 0, 10892, 10894, 3, 1010, 505, 0, 10893, 10892, 1, 0, 0, 0, 10893, 
	10894, 1, 0, 0, 0, 10894, 10896, 1, 0, 0, 0, 10895, 10897, 3, 952, 476, 
	0, 10896, 10895, 1, 0, 0, 0, 10896, 10897, 1, 0, 0, 0, 10897, 10899, 1, 
	0, 0, 0, 10898, 10900, 3, 956, 478, 0, 10899, 10898, 1, 0, 0, 0, 10899, 
	10900, 1, 0, 0, 0, 10900, 10902, 1, 0, 0, 0, 10901, 10903, 3, 962, 481, 
	0, 10902, 10901, 1, 0, 0, 0, 10902, 10903, 1, 0, 0, 0, 10903, 10905, 1, 
	0, 0, 0, 10904, 10906, 3, 824, 412, 0, 10905, 10904, 1, 0, 0, 0, 10905, 
	10906, 1, 0, 0, 0, 10906, 10908, 1, 0, 0, 0, 10907, 10909, 3, 966, 483, 
	0, 10908, 10907, 1, 0, 0, 0, 10908, 10909, 1, 0, 0, 0, 10909, 10910, 1, 
	0, 0, 0, 10910, 10911, 5, 1064, 0, 0, 10911, 969, 1, 0, 0, 0, 10912, 10913, 
	5, 1028, 0, 0, 10913, 971, 1, 0, 0, 0, 10914, 10915, 5, 579, 0, 0, 10915, 
	10916, 5, 1063, 0, 0, 10916, 10917, 3, 820, 410, 0, 10917, 10918, 5, 1063, 
	0, 0, 10918, 10919, 3, 820, 410, 0, 10919, 10920, 5, 1064, 0, 0, 10920, 
	10921, 5, 310, 0, 0, 10921, 10922, 3, 820, 410, 0, 10922, 10923, 5, 365, 
	0, 0, 10923, 10924, 5, 1063, 0, 0, 10924, 10929, 3, 970, 485, 0, 10925, 
	10926, 5, 1069, 0, 0, 10926, 10928, 3, 970, 485, 0, 10927, 10925, 1, 0, 
	0, 0, 10928, 10931, 1, 0, 0, 0, 10929, 10927, 1, 0, 0, 0, 10929, 10930, 
	1, 0, 0, 0, 10930, 10932, 1, 0, 0, 0, 10931, 10929, 1, 0, 0, 0, 10932, 
	10933, 5, 1064, 0, 0, 10933, 10934, 5, 1064, 0, 0, 10934, 10947, 1, 0, 
	0, 0, 10935, 10936, 5, 935, 0, 0, 10936, 10937, 5, 1063, 0, 0, 10937, 10938, 
	3, 820, 410, 0, 10938, 10939, 5, 310, 0, 0, 10939, 10940, 3, 826, 413, 
	0, 10940, 10941, 5, 365, 0, 0, 10941, 10942, 5, 1063, 0, 0, 10942, 10943, 
	3, 828, 414, 0, 10943, 10944, 5, 1064, 0, 0, 10944, 10945, 5, 1064, 0, 
	0, 10945, 10947, 1, 0, 0, 0, 10946, 10914, 1, 0, 0, 0, 10946, 10935, 1, 
	0, 0, 0, 10947, 973, 1, 0, 0, 0, 10948, 10949, 5, 1063, 0, 0, 10949, 10954, 
	3, 820, 410, 0, 10950, 10951, 5, 1069, 0, 0, 10951, 10953, 3, 820, 410, 
	0, 10952, 10950, 1, 0, 0, 0, 10953, 10956, 1, 0, 0, 0, 10954, 10952, 1, 
	0, 0, 0, 10954, 10955, 1, 0, 0, 0, 10955, 10957, 1, 0, 0, 0, 10956, 10954, 
	1, 0, 0, 0, 10957, 10958, 5, 1064, 0, 0, 10958, 975, 1, 0, 0, 0, 10959, 
	10960, 5, 1063, 0, 0, 10960, 10961, 3, 834, 417, 0, 10961, 10962, 5, 1064, 
	0, 0, 10962, 977, 1, 0, 0, 0, 10963, 10964, 5, 961, 0, 0, 10964, 10969, 
	3, 976, 488, 0, 10965, 10966, 5, 1069, 0, 0, 10966, 10968, 3, 976, 488, 
	0, 10967, 10965, 1, 0, 0, 0, 10968, 10971, 1, 0, 0, 0, 10969, 10967, 1, 
	0, 0, 0, 10969, 10970, 1, 0, 0, 0, 10970, 10973, 1, 0, 0, 0, 10971, 10969, 
	1, 0, 0, 0, 10972, 10974, 3, 902, 451, 0, 10973, 10972, 1, 0, 0, 0, 10973, 
	10974, 1, 0, 0, 0, 10974, 10976, 1, 0, 0, 0, 10975, 10977, 3, 974, 487, 
	0, 10976, 10975, 1, 0, 0, 0, 10976, 10977, 1, 0, 0, 0, 10977, 979, 1, 0, 
	0, 0, 10978, 10981, 7, 72, 0, 0, 10979, 10981, 7, 73, 0, 0, 10980, 10978, 
	1, 0, 0, 0, 10980, 10979, 1, 0, 0, 0, 10981, 981, 1, 0, 0, 0, 10982, 10983, 
	7, 74, 0, 0, 10983, 10984, 5, 1063, 0, 0, 10984, 10985, 3, 832, 416, 0, 
	10985, 10986, 5, 1064, 0, 0, 10986, 983, 1, 0, 0, 0, 10987, 10992, 5, 1063, 
	0, 0, 10988, 10993, 3, 832, 416, 0, 10989, 10990, 3, 832, 416, 0, 10990, 
	10991, 5, 703, 0, 0, 10991, 10993, 1, 0, 0, 0, 10992, 10988, 1, 0, 0, 0, 
	10992, 10989, 1, 0, 0, 0, 10993, 10994, 1, 0, 0, 0, 10994, 10996, 5, 1064, 
	0, 0, 10995, 10997, 3, 982, 491, 0, 10996, 10995, 1, 0, 0, 0, 10996, 10997, 
	1, 0, 0, 0, 10997, 985, 1, 0, 0, 0, 10998, 11000, 7, 75, 0, 0, 10999, 11001, 
	3, 980, 490, 0, 11000, 10999, 1, 0, 0, 0, 11000, 11001, 1, 0, 0, 0, 11001, 
	11002, 1, 0, 0, 0, 11002, 11003, 3, 984, 492, 0, 11003, 987, 1, 0, 0, 0, 
	11004, 11008, 6, 494, -1, 0, 11005, 11007, 5, 491, 0, 0, 11006, 11005, 
	1, 0, 0, 0, 11007, 11010, 1, 0, 0, 0, 11008, 11006, 1, 0, 0, 0, 11008, 
	11009, 1, 0, 0, 0, 11009, 11016, 1, 0, 0, 0, 11010, 11008, 1, 0, 0, 0, 
	11011, 11017, 3, 996, 498, 0, 11012, 11013, 5, 1063, 0, 0, 11013, 11014, 
	3, 988, 494, 0, 11014, 11015, 5, 1064, 0, 0, 11015, 11017, 1, 0, 0, 0, 
	11016, 11011, 1, 0, 0, 0, 11016, 11012, 1, 0, 0, 0, 11017, 11026, 1, 0, 
	0, 0, 11018, 11019, 10, 2, 0, 0, 11019, 11020, 5, 37, 0, 0, 11020, 11025, 
	3, 988, 494, 3, 11021, 11022, 10, 1, 0, 0, 11022, 11023, 5, 542, 0, 0, 
	11023, 11025, 3, 988, 494, 2, 11024, 11018, 1, 0, 0, 0, 11024, 11021, 1, 
	0, 0, 0, 11025, 11028, 1, 0, 0, 0, 11026, 11024, 1, 0, 0, 0, 11026, 11027, 
	1, 0, 0, 0, 11027, 989, 1, 0, 0, 0, 11028, 11026, 1, 0, 0, 0, 11029, 11030, 
	7, 76, 0, 0, 11030, 991, 1, 0, 0, 0, 11031, 11033, 5, 491, 0, 0, 11032, 
	11031, 1, 0, 0, 0, 11032, 11033, 1, 0, 0, 0, 11033, 11034, 1, 0, 0, 0, 
	11034, 11035, 5, 500, 0, 0, 11035, 993, 1, 0, 0, 0, 11036, 11037, 3, 882, 
	441, 0, 11037, 995, 1, 0, 0, 0, 11038, 11039, 5, 274, 0, 0, 11039, 11040, 
	5, 1063, 0, 0, 11040, 11041, 3, 994, 497, 0, 11041, 11042, 5, 1064, 0, 
	0, 11042, 11099, 1, 0, 0, 0, 11043, 11044, 3, 836, 418, 0, 11044, 11045, 
	3, 990, 495, 0, 11045, 11046, 3, 836, 418, 0, 11046, 11099, 1, 0, 0, 0, 
	11047, 11048, 3, 836, 418, 0, 11048, 11049, 3, 990, 495, 0, 11049, 11050, 
	7, 77, 0, 0, 11050, 11051, 5, 1063, 0, 0, 11051, 11052, 3, 994, 497, 0, 
	11052, 11053, 5, 1064, 0, 0, 11053, 11099, 1, 0, 0, 0, 11054, 11058, 3, 
	836, 418, 0, 11055, 11057, 5, 491, 0, 0, 11056, 11055, 1, 0, 0, 0, 11057, 
	11060, 1, 0, 0, 0, 11058, 11056, 1, 0, 0, 0, 11058, 11059, 1, 0, 0, 0, 
	11059, 11061, 1, 0, 0, 0, 11060, 11058, 1, 0, 0, 0, 11061, 11062, 5, 91, 
	0, 0, 11062, 11063, 3, 836, 418, 0, 11063, 11064, 5, 37, 0, 0, 11064, 11065, 
	3, 836, 418, 0, 11065, 11099, 1, 0, 0, 0, 11066, 11070, 3, 836, 418, 0, 
	11067, 11069, 5, 491, 0, 0, 11068, 11067, 1, 0, 0, 0, 11069, 11072, 1, 
	0, 0, 0, 11070, 11068, 1, 0, 0, 0, 11070, 11071, 1, 0, 0, 0, 11071, 11073, 
	1, 0, 0, 0, 11072, 11070, 1, 0, 0, 0, 11073, 11074, 5, 365, 0, 0, 11074, 
	11077, 5, 1063, 0, 0, 11075, 11078, 3, 994, 497, 0, 11076, 11078, 3, 834, 
	417, 0, 11077, 11075, 1, 0, 0, 0, 11077, 11076, 1, 0, 0, 0, 11078, 11079, 
	1, 0, 0, 0, 11079, 11080, 5, 1064, 0, 0, 11080, 11099, 1, 0, 0, 0, 11081, 
	11085, 3, 836, 418, 0, 11082, 11084, 5, 491, 0, 0, 11083, 11082, 1, 0, 
	0, 0, 11084, 11087, 1, 0, 0, 0, 11085, 11083, 1, 0, 0, 0, 11085, 11086, 
	1, 0, 0, 0, 11086, 11088, 1, 0, 0, 0, 11087, 11085, 1, 0, 0, 0, 11088, 
	11089, 5, 412, 0, 0, 11089, 11092, 3, 836, 418, 0, 11090, 11091, 5, 267, 
	0, 0, 11091, 11093, 3, 836, 418, 0, 11092, 11090, 1, 0, 0, 0, 11092, 11093, 
	1, 0, 0, 0, 11093, 11099, 1, 0, 0, 0, 11094, 11095, 3, 836, 418, 0, 11095, 
	11096, 5, 383, 0, 0, 11096, 11097, 3, 992, 496, 0, 11097, 11099, 1, 0, 
	0, 0, 11098, 11038, 1, 0, 0, 0, 11098, 11043, 1, 0, 0, 0, 11098, 11047, 
	1, 0, 0, 0, 11098, 11054, 1, 0, 0, 0, 11098, 11066, 1, 0, 0, 0, 11098, 
	11081, 1, 0, 0, 0, 11098, 11094, 1, 0, 0, 0, 11099, 997, 1, 0, 0, 0, 11100, 
	11101, 5, 981, 0, 0, 11101, 11102, 3, 988, 494, 0, 11102, 999, 1, 0, 0, 
	0, 11103, 11107, 3, 820, 410, 0, 11104, 11107, 3, 832, 416, 0, 11105, 11107, 
	3, 836, 418, 0, 11106, 11103, 1, 0, 0, 0, 11106, 11104, 1, 0, 0, 0, 11106, 
	11105, 1, 0, 0, 0, 11107, 1001, 1, 0, 0, 0, 11108, 11109, 5, 338, 0, 0, 
	11109, 11110, 5, 104, 0, 0, 11110, 11115, 3, 1000, 500, 0, 11111, 11112, 
	5, 1069, 0, 0, 11112, 11114, 3, 1000, 500, 0, 11113, 11111, 1, 0, 0, 0, 
	11114, 11117, 1, 0, 0, 0, 11115, 11113, 1, 0, 0, 0, 11115, 11116, 1, 0, 
	0, 0, 11116, 11119, 1, 0, 0, 0, 11117, 11115, 1, 0, 0, 0, 11118, 11120, 
	3, 1004, 502, 0, 11119, 11118, 1, 0, 0, 0, 11119, 11120, 1, 0, 0, 0, 11120, 
	11141, 1, 0, 0, 0, 11121, 11122, 5, 338, 0, 0, 11122, 11127, 5, 104, 0, 
	0, 11123, 11128, 5, 188, 0, 0, 11124, 11125, 5, 339, 0, 0, 11125, 11128, 
	5, 758, 0, 0, 11126, 11128, 5, 696, 0, 0, 11127, 11123, 1, 0, 0, 0, 11127, 
	11124, 1, 0, 0, 0, 11127, 11126, 1, 0, 0, 0, 11128, 11129, 1, 0, 0, 0, 
	11129, 11130, 5, 1063, 0, 0, 11130, 11135, 3, 1000, 500, 0, 11131, 11132, 
	5, 1069, 0, 0, 11132, 11134, 3, 1000, 500, 0, 11133, 11131, 1, 0, 0, 0, 
	11134, 11137, 1, 0, 0, 0, 11135, 11133, 1, 0, 0, 0, 11135, 11136, 1, 0, 
	0, 0, 11136, 11138, 1, 0, 0, 0, 11137, 11135, 1, 0, 0, 0, 11138, 11139, 
	5, 1064, 0, 0, 11139, 11141, 1, 0, 0, 0, 11140, 11108, 1, 0, 0, 0, 11140, 
	11121, 1, 0, 0, 0, 11141, 1003, 1, 0, 0, 0, 11142, 11143, 5, 343, 0, 0, 
	11143, 11144, 3, 836, 418, 0, 11144, 1005, 1, 0, 0, 0, 11145, 11146, 5, 
	615, 0, 0, 11146, 11147, 3, 836, 418, 0, 11147, 1007, 1, 0, 0, 0, 11148, 
	11152, 3, 820, 410, 0, 11149, 11152, 3, 832, 416, 0, 11150, 11152, 3, 836, 
	418, 0, 11151, 11148, 1, 0, 0, 0, 11151, 11149, 1, 0, 0, 0, 11151, 11150, 
	1, 0, 0, 0, 11152, 11154, 1, 0, 0, 0, 11153, 11155, 7, 65, 0, 0, 11154, 
	11153, 1, 0, 0, 0, 11154, 11155, 1, 0, 0, 0, 11155, 11158, 1, 0, 0, 0, 
	11156, 11157, 5, 503, 0, 0, 11157, 11159, 7, 71, 0, 0, 11158, 11156, 1, 
	0, 0, 0, 11158, 11159, 1, 0, 0, 0, 11159, 1009, 1, 0, 0, 0, 11160, 11161, 
	5, 544, 0, 0, 11161, 11162, 5, 104, 0, 0, 11162, 11167, 3, 1008, 504, 0, 
	11163, 11164, 5, 1069, 0, 0, 11164, 11166, 3, 1008, 504, 0, 11165, 11163, 
	1, 0, 0, 0, 11166, 11169, 1, 0, 0, 0, 11167, 11165, 1, 0, 0, 0, 11167, 
	11168, 1, 0, 0, 0, 11168, 1011, 1, 0, 0, 0, 11169, 11167, 1, 0, 0, 0, 11170, 
	11171, 7, 78, 0, 0, 11171, 1013, 1, 0, 0, 0, 11172, 11173, 7, 79, 0, 0, 
	11173, 1015, 1, 0, 0, 0, 11174, 11175, 5, 413, 0, 0, 11175, 11178, 3, 832, 
	416, 0, 11176, 11177, 5, 522, 0, 0, 11177, 11179, 3, 832, 416, 0, 11178, 
	11176, 1, 0, 0, 0, 11178, 11179, 1, 0, 0, 0, 11179, 11199, 1, 0, 0, 0, 
	11180, 11181, 5, 522, 0, 0, 11181, 11183, 3, 832, 416, 0, 11182, 11180, 
	1, 0, 0, 0, 11182, 11183, 1, 0, 0, 0, 11183, 11185, 1, 0, 0, 0, 11184, 
	11186, 3, 1012, 506, 0, 11185, 11184, 1, 0, 0, 0, 11185, 11186, 1, 0, 0, 
	0, 11186, 11187, 1, 0, 0, 0, 11187, 11189, 5, 300, 0, 0, 11188, 11190, 
	3, 1014, 507, 0, 11189, 11188, 1, 0, 0, 0, 11189, 11190, 1, 0, 0, 0, 11190, 
	11191, 1, 0, 0, 0, 11191, 11193, 3, 832, 416, 0, 11192, 11194, 3, 1012, 
	506, 0, 11193, 11192, 1, 0, 0, 0, 11193, 11194, 1, 0, 0, 0, 11194, 11196, 
	1, 0, 0, 0, 11195, 11197, 5, 536, 0, 0, 11196, 11195, 1, 0, 0, 0, 11196, 
	11197, 1, 0, 0, 0, 11197, 11199, 1, 0, 0, 0, 11198, 11174, 1, 0, 0, 0, 
	11198, 11182, 1, 0, 0, 0, 11199, 1017, 1, 0, 0, 0, 1449, 1021, 1028, 1036, 
	1042, 1050, 1054, 1062, 1066, 1070, 1076, 1085, 1089, 1093, 1097, 1105, 
	1108, 1117, 1125, 1140, 1149, 1153, 1166, 1170, 1177, 1197, 1202, 1206, 
	1213, 1222, 1224, 1228, 1239, 1264, 1273, 1276, 1279, 1282, 1287, 1293, 
	1302, 1305, 1308, 1311, 1316, 1319, 1331, 1341, 1355, 1370, 1374, 1381, 
	1389, 1392, 1395, 1398, 1403, 1406, 1410, 1420, 1428, 1434, 1446, 1451, 
	1463, 1468, 1480, 1485, 1487, 1496, 1508, 1511, 1526, 1528, 1538, 1540, 
	1548, 1554, 1556, 1563, 1565, 1574, 1580, 1582, 1592, 1597, 1599, 1610, 
	1612, 1625, 1627, 1632, 1634, 1644, 1646, 1650, 1656, 1663, 1679, 1695, 
	1708, 1710, 1717, 1729, 1736, 1766, 1771, 1778, 1791, 1796, 1814, 1818, 
	1834, 1839, 1842, 1858, 1863, 1868, 1873, 1878, 1881, 1887, 1892, 1894, 
	1901, 1903, 1911, 1917, 1919, 1929, 1934, 1936, 1946, 1948, 1960, 1965, 
	1967, 1977, 1979, 1983, 1987, 2003, 2012, 2014, 2028, 2032, 2046, 2057, 
	2062, 2071, 2074, 2087, 2092, 2132, 2176, 2203, 2263, 2358, 2370, 2374, 
	2381, 2386, 2391, 2394, 2402, 2410, 2413, 2417, 2425, 2433, 2437, 2446, 
	2449, 2460, 2470, 2480, 2487, 2492, 2495, 2498, 2513, 2522, 2536, 2546, 
	2570, 2577, 2586, 2593, 2598, 2604, 2617, 2630, 2637, 2640, 2646, 2656, 
	2671, 2683, 2690, 2705, 2713, 2721, 2728, 2739, 2746, 2749, 2755, 2763, 
	2769, 2781, 2796, 2808, 2820, 2835, 2847, 2855, 2861, 2873, 2878, 2884, 
	2895, 2902, 2906, 2908, 2941, 2954, 2981, 2986, 2991, 3000, 3007, 3019, 
	3030, 3036, 3062, 3065, 3069, 3078, 3082, 3087, 3091, 3095, 3099, 3104, 
	3108, 3112, 3120, 3128, 3136, 3141, 3146, 3149, 3164, 3175, 3184, 3191, 
	3196, 3198, 3203, 3208, 3218, 3223, 3234, 3239, 3248, 3253, 3260, 3266, 
	3277, 3284, 3289, 3295, 3309, 3315, 3321, 3333, 3348, 3360, 3372, 3387, 
	3399, 3407, 3413, 3425, 3434, 3443, 3448, 3466, 3481, 3486, 3489, 3497, 
	3502, 3504, 3513, 3516, 3518, 3523, 3533, 3542, 3551, 3559, 3564, 3571, 
	3584, 3596, 3602, 3607, 3617, 3627, 3634, 3639, 3642, 3645, 3650, 3658, 
	3666, 3675, 3681, 3688, 3695, 3705, 3709, 3713, 3716, 3719, 3724, 3733, 
	3739, 3743, 3752, 3757, 3762, 3767, 3776, 3778, 3783, 3788, 3797, 3799, 
	3804, 3809, 3817, 3825, 3833, 3838, 3843, 3847, 3851, 3860, 3865, 3873, 
	3879, 3889, 3893, 3897, 3904, 3907, 3912, 3917, 3926, 3928, 3933, 3938, 
	3947, 3949, 3954, 3959, 3967, 3975, 3983, 3990, 3998, 4002, 4011, 4016, 
	4024, 4030, 4036, 4040, 4047, 4050, 4055, 4060, 4065, 4070, 4075, 4080, 
	4085, 4090, 4095, 4100, 4105, 4110, 4115, 4119, 4123, 4131, 4139, 4145, 
	4149, 4153, 4160, 4165, 4168, 4172, 4176, 4185, 4190, 4198, 4204, 4211, 
	4221, 4225, 4229, 4232, 4235, 4240, 4249, 4255, 4269, 4272, 4278, 4285, 
	4290, 4293, 4299, 4306, 4311, 4322, 4328, 4333, 4344, 4350, 4355, 4366, 
	4369, 4372, 4377, 4390, 4396, 4401, 4411, 4424, 4429, 4432, 4440, 4447, 
	4452, 4455, 4463, 4466, 4468, 4472, 4476, 4481, 4484, 4492, 4500, 4503, 
	4507, 4511, 4518, 4526, 4530, 4536, 4541, 4546, 4549, 4554, 4567, 4573, 
	4578, 4588, 4598, 4604, 4609, 4617, 4625, 4630, 4638, 4643, 4648, 4653, 
	4656, 4659, 4664, 4672, 4680, 4690, 4695, 4709, 4721, 4741, 4750, 4762, 
	4766, 4773, 4777, 4795, 4797, 4800, 4803, 4815, 4817, 4827, 4830, 4837, 
	4847, 4851, 4858, 4862, 4867, 4870, 4875, 4881, 4887, 4903, 4906, 4921, 
	4930, 4935, 4938, 4942, 4946, 4953, 4961, 4963, 4966, 4969, 4973, 4989, 
	5000, 5008, 5012, 5029, 5032, 5050, 5054, 5057, 5070, 5074, 5076, 5080, 
	5084, 5089, 5093, 5096, 5101, 5103, 5106, 5117, 5120, 5131, 5134, 5136, 
	5142, 5155, 5174, 5177, 5198, 5210, 5213, 5220, 5224, 5238, 5245, 5249, 
	5252, 5258, 5261, 5277, 5285, 5298, 5305, 5310, 5315, 5320, 5325, 5328, 
	5331, 5336, 5341, 5344, 5347, 5350, 5353, 5356, 5359, 5364, 5372, 5380, 
	5390, 5397, 5402, 5410, 5420, 5429, 5450, 5458, 5466, 5480, 5492, 5512, 
	5526, 5540, 5543, 5550, 5562, 5575, 5582, 5601, 5605, 5620, 5626, 5633, 
	5639, 5667, 5675, 5678, 5686, 5696, 5714, 5728, 5732, 5739, 5745, 5748, 
	5758, 5766, 5769, 5772, 5783, 5786, 5791, 5793, 5796, 5819, 5822, 5826, 
	5829, 5832, 5838, 5853, 5860, 5876, 5886, 5927, 5941, 5946, 5954, 5962, 
	5967, 5970, 5974, 5979, 5991, 6004, 6010, 6014, 6019, 6034, 6047, 6053, 
	6078, 6084, 6086, 6090, 6094, 6110, 6114, 6118, 6126, 6129, 6135, 6140, 
	6146, 6159, 6161, 6165, 6168, 6172, 6176, 6181, 6186, 6189, 6192, 6195, 
	6210, 6214, 6230, 6233, 6247, 6250, 6256, 6259, 6271, 6273, 6276, 6279, 
	6292, 6297, 6307, 6312, 6317, 6320, 6325, 6330, 6337, 6342, 6349, 6352, 
	6355, 6363, 6368, 6371, 6377, 6380, 6383, 6386, 6389, 6393, 6398, 6405, 
	6408, 6411, 6421, 6424, 6427, 6430, 6434, 6439, 6446, 6449, 6452, 6464, 
	6467, 6470, 6473, 6476, 6478, 6485, 6488, 6495, 6506, 6512, 6522, 6532, 
	6535, 6544, 6547, 6556, 6559, 6568, 6574, 6579, 6585, 6597, 6601, 6606, 
	6613, 6616, 6626, 6630, 6633, 6643, 6646, 6658, 6661, 6664, 6667, 6670, 
	6682, 6685, 6688, 6712, 6716, 6721, 6732, 6740, 6752, 6755, 6760, 6764, 
	6767, 6770, 6773, 6776, 6779, 6786, 6795, 6802, 6805, 6808, 6826, 6854, 
	6858, 6863, 6874, 6878, 6883, 6897, 6899, 6903, 6907, 6913, 6918, 6923, 
	6928, 6931, 6944, 6948, 6958, 6961, 6973, 6976, 6979, 6983, 6997, 7000, 
	7003, 7006, 7015, 7025, 7035, 7038, 7047, 7050, 7059, 7062, 7071, 7077, 
	7082, 7088, 7100, 7104, 7111, 7114, 7120, 7122, 7127, 7130, 7136, 7138, 
	7142, 7146, 7150, 7164, 7169, 7174, 7178, 7184, 7194, 7203, 7207, 7210, 
	7214, 7218, 7223, 7228, 7233, 7236, 7239, 7242, 7246, 7251, 7273, 7281, 
	7290, 7292, 7300, 7308, 7313, 7318, 7326, 7331, 7336, 7342, 7347, 7360, 
	7365, 7370, 7375, 7383, 7386, 7390, 7395, 7408, 7413, 7418, 7423, 7431, 
	7439, 7444, 7449, 7452, 7457, 7462, 7465, 7467, 7471, 7476, 7497, 7502, 
	7507, 7512, 7517, 7522, 7527, 7532, 7537, 7541, 7546, 7559, 7564, 7567, 
	7577, 7580, 7586, 7589, 7595, 7599, 7603, 7606, 7609, 7612, 7616, 7621, 
	7627, 7632, 7635, 7639, 7644, 7655, 7661, 7676, 7682, 7688, 7697, 7703, 
	7712, 7785, 7794, 7819, 7829, 7847, 7851, 7855, 7857, 7860, 7862, 7894, 
	7897, 7901, 7904, 7912, 7918, 7923, 7928, 7930, 7932, 7946, 7949, 7956, 
	7961, 7966, 7969, 7971, 7996, 8005, 8008, 8017, 8020, 8023, 8032, 8035, 
	8038, 8042, 8046, 8049, 8053, 8057, 8060, 8074, 8077, 8080, 8088, 8091, 
	8094, 8098, 8101, 8105, 8110, 8124, 8127, 8130, 8138, 8141, 8144, 8146, 
	8157, 8168, 8176, 8181, 8189, 8194, 8215, 8218, 8249, 8255, 8259, 8263, 
	8269, 8272, 8275, 8278, 8282, 8286, 8290, 8297, 8300, 8303, 8307, 8313, 
	8319, 8327, 8333, 8336, 8339, 8342, 8344, 8351, 8354, 8357, 8366, 8372, 
	8385, 8399, 8406, 8428, 8430, 8437, 8441, 8446, 8449, 8452, 8457, 8459, 
	8462, 8466, 8469, 8472, 8475, 8478, 8481, 8484, 8488, 8495, 8500, 8503, 
	8507, 8514, 8517, 8525, 8530, 8535, 8538, 8541, 8544, 8547, 8550, 8553, 
	8557, 8561, 8567, 8571, 8575, 8584, 8587, 8589, 8598, 8606, 8615, 8619, 
	8628, 8633, 8638, 8641, 8646, 8651, 8656, 8659, 8662, 8670, 8673, 8677, 
	8685, 8691, 8697, 8701, 8705, 8708, 8711, 8719, 8722, 8725, 8729, 8736, 
	8741, 8745, 8748, 8751, 8754, 8761, 8765, 8769, 8774, 8776, 8781, 8801, 
	8819, 8831, 8833, 8868, 8902, 8909, 8914, 8921, 8925, 8931, 8935, 8941, 
	8949, 8956, 8963, 8967, 8985, 8993, 9000, 9007, 9016, 9028, 9037, 9044, 
	9048, 9053, 9057, 9063, 9074, 9081, 9088, 9092, 9097, 9104, 9111, 9118, 
	9125, 9133, 9141, 9164, 9176, 9181, 9238, 9246, 9253, 9267, 9302, 9347, 
	9418, 9423, 9429, 9433, 9437, 9442, 9445, 9447, 9452, 9462, 9466, 9470, 
	9473, 9476, 9479, 9511, 9517, 9521, 9526, 9532, 9535, 9538, 9540, 9542, 
	9545, 9548, 9556, 9562, 9573, 9575, 9580, 9591, 9593, 9599, 9604, 9618, 
	9633, 9641, 9645, 9649, 9655, 9661, 9667, 9670, 9681, 9687, 9691, 9696, 
	9702, 9705, 9714, 9717, 9723, 9730, 9737, 9741, 9745, 9747, 9752, 9755, 
	9759, 9764, 9769, 9772, 9777, 9783, 9789, 9797, 9805, 9811, 9816, 9823, 
	9826, 9830, 9834, 9837, 9843, 9845, 9847, 9850, 9853, 9858, 9861, 9870, 
	9889, 9892, 9897, 9900, 9905, 9908, 9913, 9924, 9928, 9932, 9938, 9941, 
	9944, 9946, 9948, 9951, 9954, 9960, 9966, 9969, 9973, 9977, 9982, 9986, 
	9990, 9995, 9999, 10003, 10009, 10012, 10015, 10017, 10019, 10022, 10025, 
	10030, 10042, 10056, 10063, 10085, 10092, 10107, 10121, 10130, 10151, 10176, 
	10178, 10187, 10194, 10208, 10215, 10228, 10232, 10239, 10262, 10268, 10279, 
	10283, 10292, 10296, 10308, 10313, 10326, 10331, 10340, 10342, 10346, 10350, 
	10355, 10360, 10364, 10368, 10373, 10377, 10382, 10387, 10397, 10404, 10408, 
	10416, 10420, 10424, 10437, 10443, 10452, 10460, 10470, 10475, 10479, 10483, 
	10490, 10493, 10496, 10499, 10502, 10505, 10508, 10517, 10522, 10525, 10534, 
	10539, 10545, 10552, 10556, 10562, 10567, 10569, 10572, 10578, 10605, 10614, 
	10623, 10626, 10630, 10633, 10636, 10639, 10642, 10645, 10654, 10664, 10667, 
	10670, 10676, 10679, 10685, 10687, 10694, 10698, 10703, 10709, 10713, 10716, 
	10722, 10729, 10731, 10735, 10742, 10758, 10769, 10784, 10794, 10799, 10809, 
	10815, 10821, 10836, 10846, 10849, 10866, 10869, 10881, 10890, 10893, 10896, 
	10899, 10902, 10905, 10908, 10929, 10946, 10954, 10969, 10973, 10976, 10980, 
	10992, 10996, 11000, 11008, 11016, 11024, 11026, 11032, 11058, 11070, 11077, 
	11085, 11092, 11098, 11106, 11115, 11119, 11127, 11135, 11140, 11151, 11154, 
	11158, 11167, 11178, 11182, 11185, 11189, 11193, 11196, 11198,
}
  deserializer := antlr.NewATNDeserializer(nil)
  staticData.atn = deserializer.Deserialize(staticData.serializedATN)
  atn := staticData.atn
  staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
  decisionToDFA := staticData.decisionToDFA
  for index, state := range atn.DecisionToState {
    decisionToDFA[index] = antlr.NewDFA(state, index)
  }
}

// SnowflakeParserInit initializes any static state used to implement SnowflakeParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewSnowflakeParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func SnowflakeParserInit() {
  staticData := &snowflakeparserParserStaticData
  staticData.once.Do(snowflakeparserParserInit)
}

// NewSnowflakeParser produces a new parser instance for the optional input antlr.TokenStream.
func NewSnowflakeParser(input antlr.TokenStream) *SnowflakeParser {
	SnowflakeParserInit()
	this := new(SnowflakeParser)
	this.BaseParser = antlr.NewBaseParser(input)
  staticData := &snowflakeparserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	this.RuleNames = staticData.ruleNames
	this.LiteralNames = staticData.literalNames
	this.SymbolicNames = staticData.symbolicNames
	this.GrammarFileName = "java-escape"

	return this
}


// SnowflakeParser tokens.
const (
	SnowflakeParserEOF = antlr.TokenEOF
	SnowflakeParserAAD_PROVISIONER_Q = 1
	SnowflakeParserABORT = 2
	SnowflakeParserABORT_AFTER_WAIT = 3
	SnowflakeParserABORT_DETACHED_QUERY = 4
	SnowflakeParserABORT_STATEMENT = 5
	SnowflakeParserABSENT = 6
	SnowflakeParserABSOLUTE = 7
	SnowflakeParserACCESS = 8
	SnowflakeParserACCOUNT = 9
	SnowflakeParserACCOUNTS = 10
	SnowflakeParserACTION = 11
	SnowflakeParserACTIVE = 12
	SnowflakeParserADD = 13
	SnowflakeParserADMIN_NAME = 14
	SnowflakeParserADMIN_PASSWORD = 15
	SnowflakeParserADMINISTER = 16
	SnowflakeParserAES = 17
	SnowflakeParserAFTER = 18
	SnowflakeParserAGGREGATE = 19
	SnowflakeParserALL = 20
	SnowflakeParserALLOW_CLIENT_MFA_CACHING = 21
	SnowflakeParserALLOW_CONNECTIONS = 22
	SnowflakeParserALLOW_DUPLICATE = 23
	SnowflakeParserALLOW_ID_TOKEN = 24
	SnowflakeParserALLOW_MULTIPLE_EVENT_LOSS = 25
	SnowflakeParserALLOW_OVERLAPPING_EXECUTION = 26
	SnowflakeParserALLOW_SINGLE_EVENT_LOSS = 27
	SnowflakeParserALLOWED = 28
	SnowflakeParserALLOWED_ACCOUNTS = 29
	SnowflakeParserALLOWED_DATABASES = 30
	SnowflakeParserALLOWED_INTEGRATION_TYPES = 31
	SnowflakeParserALLOWED_IP_LIST = 32
	SnowflakeParserALLOWED_SHARES = 33
	SnowflakeParserALLOWED_VALUES = 34
	SnowflakeParserALTER = 35
	SnowflakeParserALWAYS = 36
	SnowflakeParserAND = 37
	SnowflakeParserANONYMOUS = 38
	SnowflakeParserANSI_DEFAULTS = 39
	SnowflakeParserANY = 40
	SnowflakeParserAPI = 41
	SnowflakeParserAPI_ALLOWED_PREFIXES = 42
	SnowflakeParserAPI_AWS_ROLE_ARN = 43
	SnowflakeParserAPI_BLOCKED_PREFIXES = 44
	SnowflakeParserAPI_INTEGRATION = 45
	SnowflakeParserAPI_KEY = 46
	SnowflakeParserAPI_PROVIDER = 47
	SnowflakeParserAPP_NAME = 48
	SnowflakeParserAPPEND = 49
	SnowflakeParserAPPEND_ONLY = 50
	SnowflakeParserAPPLICATION = 51
	SnowflakeParserAPPLY = 52
	SnowflakeParserAS = 53
	SnowflakeParserASC = 54
	SnowflakeParserAT_KEYWORD = 55
	SnowflakeParserATTACH = 56
	SnowflakeParserAUTHORIZATION = 57
	SnowflakeParserAUTHORIZATIONS = 58
	SnowflakeParserAUTO = 59
	SnowflakeParserAUTO_COMPRESS = 60
	SnowflakeParserAUTO_DETECT = 61
	SnowflakeParserAUTO_INGEST = 62
	SnowflakeParserAUTO_REFRESH = 63
	SnowflakeParserAUTO_RESUME = 64
	SnowflakeParserAUTO_SUSPEND = 65
	SnowflakeParserAUTOCOMMIT = 66
	SnowflakeParserAUTOCOMMIT_API_SUPPORTED = 67
	SnowflakeParserAUTOINCREMENT = 68
	SnowflakeParserAVG = 69
	SnowflakeParserAVRO = 70
	SnowflakeParserAWS_KEY_ID = 71
	SnowflakeParserAWS_ROLE = 72
	SnowflakeParserAWS_SECRET_KEY = 73
	SnowflakeParserAWS_SNS = 74
	SnowflakeParserAWS_SNS_ROLE_ARN = 75
	SnowflakeParserAWS_SNS_TOPIC = 76
	SnowflakeParserAWS_SNS_TOPIC_ARN = 77
	SnowflakeParserAWS_TOKEN = 78
	SnowflakeParserAZURE = 79
	SnowflakeParserAZURE_AD_APPLICATION_ID = 80
	SnowflakeParserAZURE_EVENT_GRID = 81
	SnowflakeParserAZURE_EVENT_GRID_TOPIC_ENDPOINT = 82
	SnowflakeParserAZURE_Q = 83
	SnowflakeParserAZURE_SAS_TOKEN = 84
	SnowflakeParserAZURE_STORAGE_QUEUE_PRIMARY_URI = 85
	SnowflakeParserAZURE_TENANT_ID = 86
	SnowflakeParserBASE64 = 87
	SnowflakeParserBEFORE = 88
	SnowflakeParserBEGIN = 89
	SnowflakeParserBERNOULLI = 90
	SnowflakeParserBETWEEN = 91
	SnowflakeParserBINARY_AS_TEXT = 92
	SnowflakeParserBINARY_CHECKSUM = 93
	SnowflakeParserBINARY_FORMAT = 94
	SnowflakeParserBINARY_INPUT_FORMAT = 95
	SnowflakeParserBINARY_OUTPUT_FORMAT = 96
	SnowflakeParserBINDING = 97
	SnowflakeParserBLOCK = 98
	SnowflakeParserBLOCKED_IP_LIST = 99
	SnowflakeParserBLOCKED_ROLES_LIST = 100
	SnowflakeParserBODY = 101
	SnowflakeParserBROTLI = 102
	SnowflakeParserBUSINESS_CRITICAL = 103
	SnowflakeParserBY = 104
	SnowflakeParserBZ2 = 105
	SnowflakeParserCACHE = 106
	SnowflakeParserCALL = 107
	SnowflakeParserCALLED = 108
	SnowflakeParserCALLER = 109
	SnowflakeParserCASCADE = 110
	SnowflakeParserCASE = 111
	SnowflakeParserCASE_INSENSITIVE = 112
	SnowflakeParserCASE_SENSITIVE = 113
	SnowflakeParserCAST = 114
	SnowflakeParserCATCH = 115
	SnowflakeParserCERTIFICATE = 116
	SnowflakeParserCHANGE = 117
	SnowflakeParserCHANGE_RETENTION = 118
	SnowflakeParserCHANGE_TRACKING = 119
	SnowflakeParserCHANGES = 120
	SnowflakeParserCHANGETABLE = 121
	SnowflakeParserCHAR = 122
	SnowflakeParserCHARACTER = 123
	SnowflakeParserCHARINDEX = 124
	SnowflakeParserCHECK = 125
	SnowflakeParserCHECK_EXPIRATION = 126
	SnowflakeParserCHECK_POLICY = 127
	SnowflakeParserCHECKSUM = 128
	SnowflakeParserCHECKSUM_AGG = 129
	SnowflakeParserCLASSIFIER_FUNCTION = 130
	SnowflakeParserCLEANUP = 131
	SnowflakeParserCLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS = 132
	SnowflakeParserCLIENT_ENCRYPTION_KEY_SIZE = 133
	SnowflakeParserCLIENT_MEMORY_LIMIT = 134
	SnowflakeParserCLIENT_METADATA_REQUEST_USE_CONNECTION_CTX = 135
	SnowflakeParserCLIENT_METADATA_USE_SESSION_DATABASE = 136
	SnowflakeParserCLIENT_PREFETCH_THREADS = 137
	SnowflakeParserCLIENT_RESULT_CHUNK_SIZE = 138
	SnowflakeParserCLIENT_RESULT_COLUMN_CASE_INSENSITIVE = 139
	SnowflakeParserCLIENT_SESSION_KEEP_ALIVE = 140
	SnowflakeParserCLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY = 141
	SnowflakeParserCLIENT_TIMESTAMP_TYPE_MAPPING = 142
	SnowflakeParserCLONE = 143
	SnowflakeParserCLOSE = 144
	SnowflakeParserCLUSTER = 145
	SnowflakeParserCLUSTERED = 146
	SnowflakeParserCLUSTERING = 147
	SnowflakeParserCOALESCE = 148
	SnowflakeParserCOL_LENGTH = 149
	SnowflakeParserCOL_NAME = 150
	SnowflakeParserCOLLATE = 151
	SnowflakeParserCOLLECTION = 152
	SnowflakeParserCOLUMN = 153
	SnowflakeParserCOLUMNS = 154
	SnowflakeParserCOMMENT = 155
	SnowflakeParserCOMMIT = 156
	SnowflakeParserCOMMITTED = 157
	SnowflakeParserCOMPRESS = 158
	SnowflakeParserCOMPRESSION = 159
	SnowflakeParserCONCAT = 160
	SnowflakeParserCONCAT_NULL_YIELDS_NULL = 161
	SnowflakeParserCONCAT_WS = 162
	SnowflakeParserCONFIGURATION = 163
	SnowflakeParserCONNECT = 164
	SnowflakeParserCONNECTION = 165
	SnowflakeParserCONNECTIONS = 166
	SnowflakeParserCONSTRAINT = 167
	SnowflakeParserCONTAINMENT = 168
	SnowflakeParserCONTAINS = 169
	SnowflakeParserCONTENT = 170
	SnowflakeParserCONTEXT = 171
	SnowflakeParserCONTEXT_HEADERS = 172
	SnowflakeParserCONTEXT_INFO = 173
	SnowflakeParserCONTINUE = 174
	SnowflakeParserCONTROL = 175
	SnowflakeParserCONVERSATION = 176
	SnowflakeParserCOOKIE = 177
	SnowflakeParserCOPY = 178
	SnowflakeParserCOPY_ONLY = 179
	SnowflakeParserCOPY_OPTIONS_ = 180
	SnowflakeParserCOUNT = 181
	SnowflakeParserCOUNT_BIG = 182
	SnowflakeParserCREATE = 183
	SnowflakeParserCREDENTIALS = 184
	SnowflakeParserCREDIT_QUOTA = 185
	SnowflakeParserCROSS = 186
	SnowflakeParserCSV = 187
	SnowflakeParserCUBE = 188
	SnowflakeParserCUME_DIST = 189
	SnowflakeParserCURRENT = 190
	SnowflakeParserCURRENT_DATE = 191
	SnowflakeParserCURRENT_TIME = 192
	SnowflakeParserCURRENT_TIMESTAMP = 193
	SnowflakeParserCURRENT_USER = 194
	SnowflakeParserCURSOR = 195
	SnowflakeParserCUSTOM = 196
	SnowflakeParserDAILY = 197
	SnowflakeParserDATA = 198
	SnowflakeParserDATA_RETENTION_TIME_IN_DAYS = 199
	SnowflakeParserDATABASE = 200
	SnowflakeParserDATABASES = 201
	SnowflakeParserDATE_FORMAT = 202
	SnowflakeParserDATE_INPUT_FORMAT = 203
	SnowflakeParserDATE_OUTPUT_FORMAT = 204
	SnowflakeParserDATEADD = 205
	SnowflakeParserDATEDIFF = 206
	SnowflakeParserDATENAME = 207
	SnowflakeParserDATEPART = 208
	SnowflakeParserDAYS = 209
	SnowflakeParserDAYS_TO_EXPIRY = 210
	SnowflakeParserDECLARE = 211
	SnowflakeParserDEFAULT = 212
	SnowflakeParserDEFAULT_DDL_COLLATION_ = 213
	SnowflakeParserDEFAULT_NAMESPACE = 214
	SnowflakeParserDEFAULT_ROLE = 215
	SnowflakeParserDEFAULT_WAREHOUSE = 216
	SnowflakeParserDEFERRABLE = 217
	SnowflakeParserDEFERRED = 218
	SnowflakeParserDEFINE = 219
	SnowflakeParserDEFINITION = 220
	SnowflakeParserDEFLATE = 221
	SnowflakeParserDELEGATED = 222
	SnowflakeParserDELETE = 223
	SnowflakeParserDELTA = 224
	SnowflakeParserDENSE_RANK = 225
	SnowflakeParserDESC = 226
	SnowflakeParserDESCRIBE = 227
	SnowflakeParserDIRECTION = 228
	SnowflakeParserDIRECTORY = 229
	SnowflakeParserDISABLE = 230
	SnowflakeParserDISABLE_AUTO_CONVERT = 231
	SnowflakeParserDISABLE_SNOWFLAKE_DATA = 232
	SnowflakeParserDISABLED = 233
	SnowflakeParserDISK = 234
	SnowflakeParserDISPLAY_NAME = 235
	SnowflakeParserDISTINCT = 236
	SnowflakeParserDO = 237
	SnowflakeParserDOUBLE = 238
	SnowflakeParserDROP = 239
	SnowflakeParserECONOMY = 240
	SnowflakeParserEDITION = 241
	SnowflakeParserELSE = 242
	SnowflakeParserEMAIL = 243
	SnowflakeParserEMPTY = 244
	SnowflakeParserEMPTY_FIELD_AS_NULL = 245
	SnowflakeParserENABLE = 246
	SnowflakeParserENABLE_FOR_PRIVILEGE = 247
	SnowflakeParserENABLE_INTERNAL_STAGES_PRIVATELINK = 248
	SnowflakeParserENABLE_OCTAL = 249
	SnowflakeParserENABLE_QUERY_ACCELERATION = 250
	SnowflakeParserENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION = 251
	SnowflakeParserENABLED = 252
	SnowflakeParserENCODING = 253
	SnowflakeParserENCRYPTION = 254
	SnowflakeParserEND = 255
	SnowflakeParserEND_TIMESTAMP = 256
	SnowflakeParserENDPOINT = 257
	SnowflakeParserENFORCE_LENGTH = 258
	SnowflakeParserENFORCE_SESSION_POLICY = 259
	SnowflakeParserENFORCED = 260
	SnowflakeParserENTERPRISE = 261
	SnowflakeParserEQUALITY = 262
	SnowflakeParserERROR_INTEGRATION = 263
	SnowflakeParserERROR_ON_COLUMN_COUNT_MISMATCH = 264
	SnowflakeParserERROR_ON_NONDETERMINISTIC_MERGE = 265
	SnowflakeParserERROR_ON_NONDETERMINISTIC_UPDATE = 266
	SnowflakeParserESCAPE = 267
	SnowflakeParserESCAPE_UNENCLOSED_FIELD = 268
	SnowflakeParserEXCEPT = 269
	SnowflakeParserEXCHANGE = 270
	SnowflakeParserEXECUTE = 271
	SnowflakeParserEXECUTION = 272
	SnowflakeParserEXIST = 273
	SnowflakeParserEXISTS = 274
	SnowflakeParserEXIT = 275
	SnowflakeParserEXPAND = 276
	SnowflakeParserEXPIRY_DATE = 277
	SnowflakeParserEXPLAIN = 278
	SnowflakeParserEXPLICIT = 279
	SnowflakeParserEXTERNAL = 280
	SnowflakeParserEXTERNAL_OAUTH = 281
	SnowflakeParserEXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST = 282
	SnowflakeParserEXTERNAL_OAUTH_ALLOWED_ROLES_LIST = 283
	SnowflakeParserEXTERNAL_OAUTH_ANY_ROLE_MODE = 284
	SnowflakeParserEXTERNAL_OAUTH_AUDIENCE_LIST = 285
	SnowflakeParserEXTERNAL_OAUTH_BLOCKED_ROLES_LIST = 286
	SnowflakeParserEXTERNAL_OAUTH_ISSUER = 287
	SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL = 288
	SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY = 289
	SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY_2 = 290
	SnowflakeParserEXTERNAL_OAUTH_SCOPE_DELIMITER = 291
	SnowflakeParserEXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE = 292
	SnowflakeParserEXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM = 293
	SnowflakeParserEXTERNAL_OAUTH_TYPE = 294
	SnowflakeParserEXTERNAL_STAGE = 295
	SnowflakeParserFAIL_OPERATION = 296
	SnowflakeParserFAILOVER = 297
	SnowflakeParserFAILOVER_MODE = 298
	SnowflakeParserFALSE = 299
	SnowflakeParserFETCH = 300
	SnowflakeParserFIELD_DELIMITER = 301
	SnowflakeParserFIELD_OPTIONALLY_ENCLOSED_BY = 302
	SnowflakeParserFILE = 303
	SnowflakeParserFILE_EXTENSION = 304
	SnowflakeParserFILE_FORMAT = 305
	SnowflakeParserFILES = 306
	SnowflakeParserFILTER = 307
	SnowflakeParserFIRST = 308
	SnowflakeParserFIRST_NAME = 309
	SnowflakeParserFOR = 310
	SnowflakeParserFORCE = 311
	SnowflakeParserFOREIGN = 312
	SnowflakeParserFORMAT = 313
	SnowflakeParserFORMAT_NAME = 314
	SnowflakeParserFORMATS = 315
	SnowflakeParserFREQUENCY = 316
	SnowflakeParserFROM = 317
	SnowflakeParserFULL = 318
	SnowflakeParserFUNCTION = 319
	SnowflakeParserFUNCTIONS = 320
	SnowflakeParserFUTURE = 321
	SnowflakeParserGCP_PUBSUB = 322
	SnowflakeParserGCP_PUBSUB_SUBSCRIPTION_NAME = 323
	SnowflakeParserGCP_PUBSUB_TOPIC_NAME = 324
	SnowflakeParserGCS = 325
	SnowflakeParserGENERIC_Q = 326
	SnowflakeParserGENERIC_SCIM_PROVISIONER_Q = 327
	SnowflakeParserGEO = 328
	SnowflakeParserGEOGRAPHY_OUTPUT_FORMAT = 329
	SnowflakeParserGEOMETRY_OUTPUT_FORMAT = 330
	SnowflakeParserGET = 331
	SnowflakeParserGET_FILESTREAM_TRANSACTION_CONTEXT = 332
	SnowflakeParserGLOBAL = 333
	SnowflakeParserGOOGLE_AUDIENCE = 334
	SnowflakeParserGOTO = 335
	SnowflakeParserGRANT = 336
	SnowflakeParserGRANTS = 337
	SnowflakeParserGROUP = 338
	SnowflakeParserGROUPING = 339
	SnowflakeParserGROUPING_ID = 340
	SnowflakeParserGROUPS = 341
	SnowflakeParserGZIP = 342
	SnowflakeParserHAVING = 343
	SnowflakeParserHEADER = 344
	SnowflakeParserHEADERS = 345
	SnowflakeParserHEX = 346
	SnowflakeParserHIERARCHYID = 347
	SnowflakeParserHIGH = 348
	SnowflakeParserHISTORY = 349
	SnowflakeParserHOURS = 350
	SnowflakeParserIDENTITY = 351
	SnowflakeParserIF = 352
	SnowflakeParserIGNORE = 353
	SnowflakeParserIGNORE_CONSTRAINTS = 354
	SnowflakeParserIGNORE_DUP_KEY = 355
	SnowflakeParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX = 356
	SnowflakeParserIGNORE_TRIGGERS = 357
	SnowflakeParserIGNORE_UTF8_ERRORS = 358
	SnowflakeParserIMMEDIATE = 359
	SnowflakeParserIMMEDIATELY = 360
	SnowflakeParserIMMUTABLE = 361
	SnowflakeParserIMPLICIT = 362
	SnowflakeParserIMPORT = 363
	SnowflakeParserIMPORTED = 364
	SnowflakeParserIN = 365
	SnowflakeParserINCREMENT = 366
	SnowflakeParserINDEX = 367
	SnowflakeParserINFORMATION = 368
	SnowflakeParserINIT = 369
	SnowflakeParserINITIAL_REPLICATION_SIZE_LIMIT_IN_TB = 370
	SnowflakeParserINITIALLY = 371
	SnowflakeParserINITIALLY_SUSPENDED = 372
	SnowflakeParserINNER = 373
	SnowflakeParserINPUT = 374
	SnowflakeParserINSERT = 375
	SnowflakeParserINSERT_ONLY = 376
	SnowflakeParserINSTEAD = 377
	SnowflakeParserINT = 378
	SnowflakeParserINTEGRATION = 379
	SnowflakeParserINTEGRATIONS = 380
	SnowflakeParserINTERSECT = 381
	SnowflakeParserINTO = 382
	SnowflakeParserIS = 383
	SnowflakeParserISNULL = 384
	SnowflakeParserISNUMERIC = 385
	SnowflakeParserISOLATION = 386
	SnowflakeParserJDBC_TREAT_DECIMAL_AS_INT = 387
	SnowflakeParserJDBC_TREAT_TIMESTAMP_NTZ_AS_UTC = 388
	SnowflakeParserJDBC_USE_SESSION_TIMEZONE = 389
	SnowflakeParserJOIN = 390
	SnowflakeParserJS_TREAT_INTEGER_AS_BIGINT = 391
	SnowflakeParserJSON = 392
	SnowflakeParserJSON_INDENT = 393
	SnowflakeParserKB = 394
	SnowflakeParserKEEP = 395
	SnowflakeParserKEY = 396
	SnowflakeParserKEYS = 397
	SnowflakeParserKEYSET = 398
	SnowflakeParserKMS_KEY_ID = 399
	SnowflakeParserLAG = 400
	SnowflakeParserLANGUAGE = 401
	SnowflakeParserLARGE = 402
	SnowflakeParserLAST = 403
	SnowflakeParserLAST_NAME = 404
	SnowflakeParserLAST_QUERY_ID = 405
	SnowflakeParserLAST_VALUE = 406
	SnowflakeParserLATERAL = 407
	SnowflakeParserLEAD = 408
	SnowflakeParserLEFT = 409
	SnowflakeParserLEN = 410
	SnowflakeParserLEVEL = 411
	SnowflakeParserLIKE = 412
	SnowflakeParserLIMIT = 413
	SnowflakeParserLINENO = 414
	SnowflakeParserLIST = 415
	SnowflakeParserLISTENER_IP = 416
	SnowflakeParserLISTENER_PORT = 417
	SnowflakeParserLISTING = 418
	SnowflakeParserLOAD = 419
	SnowflakeParserLOCAL = 420
	SnowflakeParserLOCAL_SERVICE_NAME = 421
	SnowflakeParserLOCATION = 422
	SnowflakeParserLOCK_TIMEOUT = 423
	SnowflakeParserLOCKS = 424
	SnowflakeParserLOG = 425
	SnowflakeParserLOGIN = 426
	SnowflakeParserLOGIN_NAME = 427
	SnowflakeParserLOOKER = 428
	SnowflakeParserLOW = 429
	SnowflakeParserLOWER = 430
	SnowflakeParserLTRIM = 431
	SnowflakeParserLZO = 432
	SnowflakeParserMANAGE = 433
	SnowflakeParserMANAGED = 434
	SnowflakeParserMASK = 435
	SnowflakeParserMASKED = 436
	SnowflakeParserMASKING = 437
	SnowflakeParserMASTER = 438
	SnowflakeParserMASTER_KEY = 439
	SnowflakeParserMATCH = 440
	SnowflakeParserMATCH_BY_COLUMN_NAME = 441
	SnowflakeParserMATCH_RECOGNIZE = 442
	SnowflakeParserMATCHED = 443
	SnowflakeParserMATCHES = 444
	SnowflakeParserMATERIALIZED = 445
	SnowflakeParserMAX_BATCH_ROWS = 446
	SnowflakeParserMAX_CLUSTER_COUNT = 447
	SnowflakeParserMAX_CONCURRENCY_LEVEL = 448
	SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS = 449
	SnowflakeParserMAX_SIZE = 450
	SnowflakeParserMEASURES = 451
	SnowflakeParserMEDIUM = 452
	SnowflakeParserMERGE = 453
	SnowflakeParserMIDDLE_NAME = 454
	SnowflakeParserMIN = 455
	SnowflakeParserMIN_CLUSTER_COUNT = 456
	SnowflakeParserMIN_DATA_RETENTION_TIME_IN_DAYS = 457
	SnowflakeParserMINS_TO_BYPASS_MFA = 458
	SnowflakeParserMINS_TO_UNLOCK = 459
	SnowflakeParserMINUS_ = 460
	SnowflakeParserMINUTES = 461
	SnowflakeParserMODE = 462
	SnowflakeParserMODIFIED_AFTER = 463
	SnowflakeParserMODIFY = 464
	SnowflakeParserMONITOR = 465
	SnowflakeParserMONITORS = 466
	SnowflakeParserMONTHLY = 467
	SnowflakeParserMOVE = 468
	SnowflakeParserMULTI_STATEMENT_COUNT = 469
	SnowflakeParserMULTI_USER = 470
	SnowflakeParserMUST_CHANGE = 471
	SnowflakeParserMUST_CHANGE_PASSWORD = 472
	SnowflakeParserNAME = 473
	SnowflakeParserNATURAL = 474
	SnowflakeParserNCHAR = 475
	SnowflakeParserNESTED_TRIGGERS = 476
	SnowflakeParserNETWORK = 477
	SnowflakeParserNETWORK_POLICY = 478
	SnowflakeParserNEVER = 479
	SnowflakeParserNEW_ACCOUNT = 480
	SnowflakeParserNEW_BROKER = 481
	SnowflakeParserNEW_PASSWORD = 482
	SnowflakeParserNEWID = 483
	SnowflakeParserNEWNAME = 484
	SnowflakeParserNEWSEQUENTIALID = 485
	SnowflakeParserNEXT = 486
	SnowflakeParserNEXTVAL = 487
	SnowflakeParserNO = 488
	SnowflakeParserNONE = 489
	SnowflakeParserNORELY = 490
	SnowflakeParserNOT = 491
	SnowflakeParserNOTIFICATION = 492
	SnowflakeParserNOTIFICATION_INTEGRATION = 493
	SnowflakeParserNOTIFICATION_PROVIDER = 494
	SnowflakeParserNOTIFICATIONS = 495
	SnowflakeParserNOTIFY = 496
	SnowflakeParserNOTIFY_USERS = 497
	SnowflakeParserNOVALIDATE = 498
	SnowflakeParserNTILE = 499
	SnowflakeParserNULL_ = 500
	SnowflakeParserNULL_IF = 501
	SnowflakeParserNULLIF = 502
	SnowflakeParserNULLS = 503
	SnowflakeParserNUMANODE = 504
	SnowflakeParserNUMBER = 505
	SnowflakeParserNUMERIC_ROUNDABORT = 506
	SnowflakeParserOAUTH = 507
	SnowflakeParserOAUTH_ALLOW_NON_TLS_REDIRECT_URI = 508
	SnowflakeParserOAUTH_CLIENT = 509
	SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY = 510
	SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY_2 = 511
	SnowflakeParserOAUTH_ENFORCE_PKCE = 512
	SnowflakeParserOAUTH_ISSUE_REFRESH_TOKENS = 513
	SnowflakeParserOAUTH_REDIRECT_URI = 514
	SnowflakeParserOAUTH_REFRESH_TOKEN_VALIDITY = 515
	SnowflakeParserOAUTH_USE_SECONDARY_ROLES = 516
	SnowflakeParserOBJECT = 517
	SnowflakeParserOBJECT_TYPES = 518
	SnowflakeParserOBJECTS = 519
	SnowflakeParserOF = 520
	SnowflakeParserOFF = 521
	SnowflakeParserOFFSET = 522
	SnowflakeParserOFFSETS = 523
	SnowflakeParserOKTA = 524
	SnowflakeParserOKTA_PROVISIONER_Q = 525
	SnowflakeParserOKTA_Q = 526
	SnowflakeParserOLD = 527
	SnowflakeParserOLD_ACCOUNT = 528
	SnowflakeParserOLD_PASSWORD = 529
	SnowflakeParserOMIT = 530
	SnowflakeParserON = 531
	SnowflakeParserON_ERROR = 532
	SnowflakeParserON_FAILURE = 533
	SnowflakeParserONE = 534
	SnowflakeParserONLINE = 535
	SnowflakeParserONLY = 536
	SnowflakeParserOPEN = 537
	SnowflakeParserOPERATE = 538
	SnowflakeParserOPERATIONS = 539
	SnowflakeParserOPTIMIZATION = 540
	SnowflakeParserOPTION = 541
	SnowflakeParserOR = 542
	SnowflakeParserORC = 543
	SnowflakeParserORDER = 544
	SnowflakeParserORGANIZATION = 545
	SnowflakeParserOUTBOUND = 546
	SnowflakeParserOUTER = 547
	SnowflakeParserOVER = 548
	SnowflakeParserOVERRIDE = 549
	SnowflakeParserOVERWRITE = 550
	SnowflakeParserOWNER = 551
	SnowflakeParserOWNERSHIP = 552
	SnowflakeParserPAGE = 553
	SnowflakeParserPARALLEL = 554
	SnowflakeParserPARAM_NODE = 555
	SnowflakeParserPARAMETERS = 556
	SnowflakeParserPARQUET = 557
	SnowflakeParserPARTIAL = 558
	SnowflakeParserPARTITION = 559
	SnowflakeParserPARTITION_TYPE = 560
	SnowflakeParserPARTITIONS = 561
	SnowflakeParserPASSWORD = 562
	SnowflakeParserPAST = 563
	SnowflakeParserPATH_ = 564
	SnowflakeParserPATTERN = 565
	SnowflakeParserPER = 566
	SnowflakeParserPERCENT = 567
	SnowflakeParserPERCENT_RANK = 568
	SnowflakeParserPERCENTILE_CONT = 569
	SnowflakeParserPERCENTILE_DISC = 570
	SnowflakeParserPERIODIC_DATA_REKEYING = 571
	SnowflakeParserPERMISSION_SET = 572
	SnowflakeParserPERSIST_SAMPLE_PERCENT = 573
	SnowflakeParserPERSISTED = 574
	SnowflakeParserPING_FEDERATE = 575
	SnowflakeParserPIPE = 576
	SnowflakeParserPIPE_EXECUTION_PAUSED = 577
	SnowflakeParserPIPES = 578
	SnowflakeParserPIVOT = 579
	SnowflakeParserPLAN = 580
	SnowflakeParserPLATFORM = 581
	SnowflakeParserPOLICIES = 582
	SnowflakeParserPOLICY = 583
	SnowflakeParserPOOL = 584
	SnowflakeParserPORT = 585
	SnowflakeParserPRE_AUTHORIZED_ROLES_LIST = 586
	SnowflakeParserPRECEDING = 587
	SnowflakeParserPRECISION = 588
	SnowflakeParserPREDICATE = 589
	SnowflakeParserPREFIX = 590
	SnowflakeParserPRESERVE_SPACE = 591
	SnowflakeParserPREVENT_UNLOAD_TO_INLINE_URL = 592
	SnowflakeParserPREVENT_UNLOAD_TO_INTERNAL_STAGES = 593
	SnowflakeParserPRIMARY = 594
	SnowflakeParserPRIMARY_ROLE = 595
	SnowflakeParserPRIOR = 596
	SnowflakeParserPRIORITY = 597
	SnowflakeParserPRIORITY_LEVEL = 598
	SnowflakeParserPRIVATE = 599
	SnowflakeParserPRIVATE_KEY = 600
	SnowflakeParserPRIVILEGES = 601
	SnowflakeParserPROC = 602
	SnowflakeParserPROCEDURE = 603
	SnowflakeParserPROCEDURE_NAME = 604
	SnowflakeParserPROCEDURES = 605
	SnowflakeParserPROCESS = 606
	SnowflakeParserPROFILE = 607
	SnowflakeParserPROPERTY = 608
	SnowflakeParserPROVIDER = 609
	SnowflakeParserPROVIDER_KEY_NAME = 610
	SnowflakeParserPUBLIC = 611
	SnowflakeParserPURGE = 612
	SnowflakeParserPUT = 613
	SnowflakeParserPYTHON = 614
	SnowflakeParserQUALIFY = 615
	SnowflakeParserQUERIES = 616
	SnowflakeParserQUERY = 617
	SnowflakeParserQUERY_ACCELERATION_MAX_SCALE_FACTOR = 618
	SnowflakeParserQUERY_TAG = 619
	SnowflakeParserQUEUE = 620
	SnowflakeParserQUOTED_IDENTIFIERS_IGNORE_CASE = 621
	SnowflakeParserRANGE = 622
	SnowflakeParserRANK = 623
	SnowflakeParserRAW = 624
	SnowflakeParserRAW_DEFLATE = 625
	SnowflakeParserREAD = 626
	SnowflakeParserREAD_COMMITTED_SNAPSHOT = 627
	SnowflakeParserREAD_ONLY = 628
	SnowflakeParserREAD_ONLY_ROUTING_LIST = 629
	SnowflakeParserREAD_WRITE = 630
	SnowflakeParserREADER = 631
	SnowflakeParserREADONLY = 632
	SnowflakeParserREADPAST = 633
	SnowflakeParserREADTEXT = 634
	SnowflakeParserREADWRITE = 635
	SnowflakeParserREBUILD = 636
	SnowflakeParserRECEIVE = 637
	SnowflakeParserRECLUSTER = 638
	SnowflakeParserRECOMPILE = 639
	SnowflakeParserRECONFIGURE = 640
	SnowflakeParserRECORD_DELIMITER = 641
	SnowflakeParserRECOVERY = 642
	SnowflakeParserRECURSIVE = 643
	SnowflakeParserRECURSIVE_TRIGGERS = 644
	SnowflakeParserREFERENCE_USAGE = 645
	SnowflakeParserREFERENCES = 646
	SnowflakeParserREFRESH = 647
	SnowflakeParserREFRESH_ON_CREATE = 648
	SnowflakeParserREGION = 649
	SnowflakeParserREGION_GROUP = 650
	SnowflakeParserREGIONS = 651
	SnowflakeParserRELATIVE = 652
	SnowflakeParserRELY = 653
	SnowflakeParserREMOTE = 654
	SnowflakeParserREMOTE_PROC_TRANSACTIONS = 655
	SnowflakeParserREMOTE_SERVICE_NAME = 656
	SnowflakeParserREMOVE = 657
	SnowflakeParserRENAME = 658
	SnowflakeParserREPEATABLE = 659
	SnowflakeParserREPLACE = 660
	SnowflakeParserREPLACE_INVALID_CHARACTERS = 661
	SnowflakeParserREPLICA = 662
	SnowflakeParserREPLICATION = 663
	SnowflakeParserREPLICATION_SCHEDULE = 664
	SnowflakeParserREQUEST_TRANSLATOR = 665
	SnowflakeParserREQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION = 666
	SnowflakeParserREQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION = 667
	SnowflakeParserREQUIRED = 668
	SnowflakeParserRESET = 669
	SnowflakeParserRESOURCE = 670
	SnowflakeParserRESOURCE_MONITOR = 671
	SnowflakeParserRESOURCES = 672
	SnowflakeParserRESPONSE_TRANSLATOR = 673
	SnowflakeParserRESTART = 674
	SnowflakeParserRESTORE = 675
	SnowflakeParserRESTRICT = 676
	SnowflakeParserRESTRICTIONS = 677
	SnowflakeParserRESULT = 678
	SnowflakeParserRESUME = 679
	SnowflakeParserRETAINDAYS = 680
	SnowflakeParserRETURN = 681
	SnowflakeParserRETURN_ALL_ERRORS = 682
	SnowflakeParserRETURN_ERRORS = 683
	SnowflakeParserRETURN_FAILED_ONLY = 684
	SnowflakeParserRETURN_N_ROWS = 685
	SnowflakeParserRETURN_ROWS = 686
	SnowflakeParserRETURNS = 687
	SnowflakeParserREVERSE = 688
	SnowflakeParserREVERT = 689
	SnowflakeParserREVOKE = 690
	SnowflakeParserREWIND = 691
	SnowflakeParserRIGHT = 692
	SnowflakeParserROLE = 693
	SnowflakeParserROLES = 694
	SnowflakeParserROLLBACK = 695
	SnowflakeParserROLLUP = 696
	SnowflakeParserROOT = 697
	SnowflakeParserROW = 698
	SnowflakeParserROW_NUMBER = 699
	SnowflakeParserROWCOUNT = 700
	SnowflakeParserROWGUID = 701
	SnowflakeParserROWLOCK = 702
	SnowflakeParserROWS = 703
	SnowflakeParserROWS_PER_RESULTSET = 704
	SnowflakeParserRSA_PUBLIC_KEY = 705
	SnowflakeParserRSA_PUBLIC_KEY_2 = 706
	SnowflakeParserRTRIM = 707
	SnowflakeParserRUN_AS_ROLE = 708
	SnowflakeParserS3 = 709
	SnowflakeParserSAFE = 710
	SnowflakeParserSAFETY = 711
	SnowflakeParserSAML2 = 712
	SnowflakeParserSAML2_ENABLE_SP_INITIATED = 713
	SnowflakeParserSAML2_FORCE_AUTHN = 714
	SnowflakeParserSAML2_ISSUER = 715
	SnowflakeParserSAML2_POST_LOGOUT_REDIRECT_URL = 716
	SnowflakeParserSAML2_PROVIDER = 717
	SnowflakeParserSAML2_REQUESTED_NAMEID_FORMAT = 718
	SnowflakeParserSAML2_SIGN_REQUEST = 719
	SnowflakeParserSAML2_SNOWFLAKE_ACS_URL = 720
	SnowflakeParserSAML2_SNOWFLAKE_ISSUER_URL = 721
	SnowflakeParserSAML2_SNOWFLAKE_X509_CERT = 722
	SnowflakeParserSAML2_SP_INITIATED_LOGIN_PAGE_LABEL = 723
	SnowflakeParserSAML2_SSO_URL = 724
	SnowflakeParserSAML2_X509_CERT = 725
	SnowflakeParserSAML_IDENTITY_PROVIDER = 726
	SnowflakeParserSAMPLE = 727
	SnowflakeParserSAVE_OLD_URL = 728
	SnowflakeParserSCALING_POLICY = 729
	SnowflakeParserSCHEDULE = 730
	SnowflakeParserSCHEDULER = 731
	SnowflakeParserSCHEMA = 732
	SnowflakeParserSCHEMAS = 733
	SnowflakeParserSCHEME = 734
	SnowflakeParserSCIM = 735
	SnowflakeParserSCIM_CLIENT = 736
	SnowflakeParserSCRIPT = 737
	SnowflakeParserSEARCH = 738
	SnowflakeParserSECONDARY = 739
	SnowflakeParserSECONDARY_ONLY = 740
	SnowflakeParserSECONDARY_ROLE = 741
	SnowflakeParserSECONDS = 742
	SnowflakeParserSECRET = 743
	SnowflakeParserSECURE = 744
	SnowflakeParserSECURITY = 745
	SnowflakeParserSEED = 746
	SnowflakeParserSELECT = 747
	SnowflakeParserSELF = 748
	SnowflakeParserSEQUENCE = 749
	SnowflakeParserSEQUENCES = 750
	SnowflakeParserSERVER = 751
	SnowflakeParserSERVICE = 752
	SnowflakeParserSESSION = 753
	SnowflakeParserSESSION_IDLE_TIMEOUT_MINS = 754
	SnowflakeParserSESSION_POLICY = 755
	SnowflakeParserSESSION_UI_IDLE_TIMEOUT_MINS = 756
	SnowflakeParserSET = 757
	SnowflakeParserSETS = 758
	SnowflakeParserSETUSER = 759
	SnowflakeParserSHARE = 760
	SnowflakeParserSHARE_RESTRICTIONS = 761
	SnowflakeParserSHARED = 762
	SnowflakeParserSHARES = 763
	SnowflakeParserSHOW = 764
	SnowflakeParserSHOW_INITIAL_ROWS = 765
	SnowflakeParserSHOWPLAN = 766
	SnowflakeParserSHOWPLAN_ALL = 767
	SnowflakeParserSHOWPLAN_TEXT = 768
	SnowflakeParserSHOWPLAN_XML = 769
	SnowflakeParserSIGNATURE = 770
	SnowflakeParserSIMPLE = 771
	SnowflakeParserSIMULATED_DATA_SHARING_CONSUMER = 772
	SnowflakeParserSINGLE_USER = 773
	SnowflakeParserSIZE = 774
	SnowflakeParserSIZE_LIMIT = 775
	SnowflakeParserSKIP_ = 776
	SnowflakeParserSKIP_BLANK_LINES = 777
	SnowflakeParserSKIP_BYTE_ORDER_MARK = 778
	SnowflakeParserSKIP_FILE = 779
	SnowflakeParserSKIP_FILE_N = 780
	SnowflakeParserSKIP_HEADER = 781
	SnowflakeParserSMALL = 782
	SnowflakeParserSNAPPY = 783
	SnowflakeParserSNAPPY_COMPRESSION = 784
	SnowflakeParserSOME = 785
	SnowflakeParserSOUNDEX = 786
	SnowflakeParserSOURCE = 787
	SnowflakeParserSOURCE_COMPRESSION = 788
	SnowflakeParserSPACE_KEYWORD = 789
	SnowflakeParserSPARSE = 790
	SnowflakeParserSPECIFICATION = 791
	SnowflakeParserSPLIT = 792
	SnowflakeParserSQL = 793
	SnowflakeParserSSO_LOGIN_PAGE = 794
	SnowflakeParserSTAGE = 795
	SnowflakeParserSTAGE_COPY_OPTIONS = 796
	SnowflakeParserSTAGE_FILE_FORMAT = 797
	SnowflakeParserSTAGES = 798
	SnowflakeParserSTANDARD = 799
	SnowflakeParserSTANDBY = 800
	SnowflakeParserSTART = 801
	SnowflakeParserSTART_DATE = 802
	SnowflakeParserSTART_TIMESTAMP = 803
	SnowflakeParserSTARTED = 804
	SnowflakeParserSTARTS = 805
	SnowflakeParserSTATE = 806
	SnowflakeParserSTATEMENT = 807
	SnowflakeParserSTATEMENT_QUEUED_TIMEOUT_IN_SECONDS = 808
	SnowflakeParserSTATEMENT_TIMEOUT_IN_SECONDS = 809
	SnowflakeParserSTATIC = 810
	SnowflakeParserSTATISTICS = 811
	SnowflakeParserSTATS = 812
	SnowflakeParserSTATS_DATE = 813
	SnowflakeParserSTATS_STREAM = 814
	SnowflakeParserSTATUS = 815
	SnowflakeParserSTATUSONLY = 816
	SnowflakeParserSTDEV = 817
	SnowflakeParserSTDEVP = 818
	SnowflakeParserSTOP = 819
	SnowflakeParserSTOPLIST = 820
	SnowflakeParserSTOPPED = 821
	SnowflakeParserSTORAGE = 822
	SnowflakeParserSTORAGE_ALLOWED_LOCATIONS = 823
	SnowflakeParserSTORAGE_AWS_OBJECT_ACL = 824
	SnowflakeParserSTORAGE_AWS_ROLE_ARN = 825
	SnowflakeParserSTORAGE_BLOCKED_LOCATIONS = 826
	SnowflakeParserSTORAGE_INTEGRATION = 827
	SnowflakeParserSTORAGE_PROVIDER = 828
	SnowflakeParserSTR = 829
	SnowflakeParserSTREAM = 830
	SnowflakeParserSTREAMS = 831
	SnowflakeParserSTRICT = 832
	SnowflakeParserSTRICT_JSON_OUTPUT = 833
	SnowflakeParserSTRING_AGG = 834
	SnowflakeParserSTRING_ESCAPE = 835
	SnowflakeParserSTRIP_NULL_VALUES = 836
	SnowflakeParserSTRIP_OUTER_ARRAY = 837
	SnowflakeParserSTRIP_OUTER_ELEMENT = 838
	SnowflakeParserSUBSTRING = 839
	SnowflakeParserSUM = 840
	SnowflakeParserSUPPORTED = 841
	SnowflakeParserSUSPEND = 842
	SnowflakeParserSUSPEND_IMMEDIATE = 843
	SnowflakeParserSUSPEND_TASK_AFTER_NUM_FAILURES = 844
	SnowflakeParserSUSPENDED = 845
	SnowflakeParserSWAP = 846
	SnowflakeParserSWITCH = 847
	SnowflakeParserSYNC_PASSWORD = 848
	SnowflakeParserSYSTEM = 849
	SnowflakeParserSYSTEM_USER = 850
	SnowflakeParserTABLE = 851
	SnowflakeParserTABLE_FORMAT = 852
	SnowflakeParserTABLEAU_DESKTOP = 853
	SnowflakeParserTABLEAU_SERVER = 854
	SnowflakeParserTABLES = 855
	SnowflakeParserTABLESAMPLE = 856
	SnowflakeParserTABULAR = 857
	SnowflakeParserTAG = 858
	SnowflakeParserTAGS = 859
	SnowflakeParserTARGET = 860
	SnowflakeParserTASK = 861
	SnowflakeParserTASKS = 862
	SnowflakeParserTEMP = 863
	SnowflakeParserTEMPORARY = 864
	SnowflakeParserTERSE = 865
	SnowflakeParserTEXTSIZE = 866
	SnowflakeParserTHEN = 867
	SnowflakeParserTIES = 868
	SnowflakeParserTIME = 869
	SnowflakeParserTIME_FORMAT = 870
	SnowflakeParserTIME_INPUT_FORMAT = 871
	SnowflakeParserTIME_OUTPUT_FORMAT = 872
	SnowflakeParserTIMEOUT = 873
	SnowflakeParserTIMER = 874
	SnowflakeParserTIMESTAMP = 875
	SnowflakeParserTIMESTAMP_DAY_IS_ALWAYS_24H = 876
	SnowflakeParserTIMESTAMP_FORMAT = 877
	SnowflakeParserTIMESTAMP_INPUT_FORMAT = 878
	SnowflakeParserTIMESTAMP_LTZ = 879
	SnowflakeParserTIMESTAMP_LTZ_OUTPUT_FORMAT = 880
	SnowflakeParserTIMESTAMP_NTZ = 881
	SnowflakeParserTIMESTAMP_NTZ_OUTPUT_FORMAT = 882
	SnowflakeParserTIMESTAMP_OUTPUT_FORMAT = 883
	SnowflakeParserTIMESTAMP_TYPE_MAPPING = 884
	SnowflakeParserTIMESTAMP_TZ = 885
	SnowflakeParserTIMESTAMP_TZ_OUTPUT_FORMAT = 886
	SnowflakeParserTIMEZONE = 887
	SnowflakeParserTO = 888
	SnowflakeParserTOP = 889
	SnowflakeParserTORN_PAGE_DETECTION = 890
	SnowflakeParserTRACK_CAUSALITY = 891
	SnowflakeParserTRACKING = 892
	SnowflakeParserTRAN = 893
	SnowflakeParserTRANSACTION = 894
	SnowflakeParserTRANSACTION_ABORT_ON_ERROR = 895
	SnowflakeParserTRANSACTION_DEFAULT_ISOLATION_LEVEL = 896
	SnowflakeParserTRANSACTION_ID = 897
	SnowflakeParserTRANSACTIONS = 898
	SnowflakeParserTRANSFORM_NOISE_WORDS = 899
	SnowflakeParserTRANSIENT = 900
	SnowflakeParserTRANSLATE = 901
	SnowflakeParserTRIGGER = 902
	SnowflakeParserTRIGGERS = 903
	SnowflakeParserTRIM = 904
	SnowflakeParserTRIM_SPACE = 905
	SnowflakeParserTRIPLE_DES = 906
	SnowflakeParserTRIPLE_DES_3KEY = 907
	SnowflakeParserTRUE = 908
	SnowflakeParserTRUNCATE = 909
	SnowflakeParserTRUNCATECOLUMNS = 910
	SnowflakeParserTRUSTWORTHY = 911
	SnowflakeParserTRY = 912
	SnowflakeParserTSEQUAL = 913
	SnowflakeParserTSQL = 914
	SnowflakeParserTWO_DIGIT_CENTURY_START = 915
	SnowflakeParserTWO_DIGIT_YEAR_CUTOFF = 916
	SnowflakeParserTYPE = 917
	SnowflakeParserTYPE_ID = 918
	SnowflakeParserTYPE_NAME = 919
	SnowflakeParserTYPE_WARNING = 920
	SnowflakeParserTYPEPROPERTY = 921
	SnowflakeParserUN = 922
	SnowflakeParserUNBOUNDED = 923
	SnowflakeParserUNCHECKED = 924
	SnowflakeParserUNCOMMITTED = 925
	SnowflakeParserUNDROP = 926
	SnowflakeParserUNICODE = 927
	SnowflakeParserUNION = 928
	SnowflakeParserUNIQUE = 929
	SnowflakeParserUNKNOWN = 930
	SnowflakeParserUNLIMITED = 931
	SnowflakeParserUNLOCK = 932
	SnowflakeParserUNMASK = 933
	SnowflakeParserUNMATCHED = 934
	SnowflakeParserUNPIVOT = 935
	SnowflakeParserUNSAFE = 936
	SnowflakeParserUNSET = 937
	SnowflakeParserUNSUPPORTED_DDL_ACTION = 938
	SnowflakeParserUOW = 939
	SnowflakeParserUPDATE = 940
	SnowflakeParserUPDLOCK = 941
	SnowflakeParserUPPER = 942
	SnowflakeParserURL = 943
	SnowflakeParserUSAGE = 944
	SnowflakeParserUSE = 945
	SnowflakeParserUSE_ANY_ROLE = 946
	SnowflakeParserUSE_CACHED_RESULT = 947
	SnowflakeParserUSED = 948
	SnowflakeParserUSER = 949
	SnowflakeParserUSER_SPECIFIED = 950
	SnowflakeParserUSER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = 951
	SnowflakeParserUSER_TASK_TIMEOUT_MS = 952
	SnowflakeParserUSERS = 953
	SnowflakeParserUSING = 954
	SnowflakeParserUTF8 = 955
	SnowflakeParserVALID_XML = 956
	SnowflakeParserVALIDATE = 957
	SnowflakeParserVALIDATION = 958
	SnowflakeParserVALIDATION_MODE = 959
	SnowflakeParserVALUE = 960
	SnowflakeParserVALUES = 961
	SnowflakeParserVAR = 962
	SnowflakeParserVARIABLES = 963
	SnowflakeParserVARP = 964
	SnowflakeParserVARYING = 965
	SnowflakeParserVERSION = 966
	SnowflakeParserVIEW = 967
	SnowflakeParserVIEW_METADATA = 968
	SnowflakeParserVIEWS = 969
	SnowflakeParserVISIBILITY = 970
	SnowflakeParserVOLATILE = 971
	SnowflakeParserWAIT = 972
	SnowflakeParserWAREHOUSE = 973
	SnowflakeParserWAREHOUSE_SIZE = 974
	SnowflakeParserWAREHOUSES = 975
	SnowflakeParserWEEK_OF_YEAR_POLICY = 976
	SnowflakeParserWEEK_START = 977
	SnowflakeParserWEEKLY = 978
	SnowflakeParserWELL_FORMED_XML = 979
	SnowflakeParserWHEN = 980
	SnowflakeParserWHERE = 981
	SnowflakeParserWITH = 982
	SnowflakeParserWITHIN = 983
	SnowflakeParserWITHOUT = 984
	SnowflakeParserWITHOUT_ARRAY_WRAPPER = 985
	SnowflakeParserWORK = 986
	SnowflakeParserWORKLOAD = 987
	SnowflakeParserWRITE = 988
	SnowflakeParserX4LARGE = 989
	SnowflakeParserX5LARGE = 990
	SnowflakeParserX6LARGE = 991
	SnowflakeParserXLARGE = 992
	SnowflakeParserXLOCK = 993
	SnowflakeParserXML = 994
	SnowflakeParserXSMALL = 995
	SnowflakeParserXXLARGE = 996
	SnowflakeParserXXXLARGE = 997
	SnowflakeParserYEARLY = 998
	SnowflakeParserZSTD = 999
	SnowflakeParserARRAY = 1000
	SnowflakeParserBIGINT = 1001
	SnowflakeParserBINARY = 1002
	SnowflakeParserBOOLEAN = 1003
	SnowflakeParserBYTEINT = 1004
	SnowflakeParserCHAR_VARYING = 1005
	SnowflakeParserDATE = 1006
	SnowflakeParserDATETIME = 1007
	SnowflakeParserDECIMAL_ = 1008
	SnowflakeParserFLOAT4 = 1009
	SnowflakeParserFLOAT8 = 1010
	SnowflakeParserFLOAT_ = 1011
	SnowflakeParserGEOGRAPHY = 1012
	SnowflakeParserGEOMETRY = 1013
	SnowflakeParserINTEGER = 1014
	SnowflakeParserNCHAR_VARYING = 1015
	SnowflakeParserNUMERIC = 1016
	SnowflakeParserNVARCHAR2 = 1017
	SnowflakeParserNVARCHAR = 1018
	SnowflakeParserREAL_ = 1019
	SnowflakeParserSMALLINT = 1020
	SnowflakeParserSTRING_ = 1021
	SnowflakeParserTEXT = 1022
	SnowflakeParserTINYINT = 1023
	SnowflakeParserVARBINARY = 1024
	SnowflakeParserVARCHAR = 1025
	SnowflakeParserVARIANT = 1026
	SnowflakeParserLISTAGG = 1027
	SnowflakeParserDUMMY = 1028
	SnowflakeParserSPACE = 1029
	SnowflakeParserSQL_COMMENT = 1030
	SnowflakeParserLINE_COMMENT = 1031
	SnowflakeParserLINE_COMMENT_2 = 1032
	SnowflakeParserDOUBLE_QUOTE_ID = 1033
	SnowflakeParserDOUBLE_QUOTE_BLANK = 1034
	SnowflakeParserSINGLE_QUOTE = 1035
	SnowflakeParserID = 1036
	SnowflakeParserID2 = 1037
	SnowflakeParserS3_PATH = 1038
	SnowflakeParserGCS_PATH = 1039
	SnowflakeParserAZURE_PATH = 1040
	SnowflakeParserFILE_PATH = 1041
	SnowflakeParserDBL_DOLLAR = 1042
	SnowflakeParserSTRING = 1043
	SnowflakeParserDECIMAL = 1044
	SnowflakeParserFLOAT = 1045
	SnowflakeParserREAL = 1046
	SnowflakeParserCHAR_LITERAL = 1047
	SnowflakeParserARROW = 1048
	SnowflakeParserASSOC = 1049
	SnowflakeParserNE = 1050
	SnowflakeParserLTGT = 1051
	SnowflakeParserEQ = 1052
	SnowflakeParserGT = 1053
	SnowflakeParserGE = 1054
	SnowflakeParserLT = 1055
	SnowflakeParserLE = 1056
	SnowflakeParserEXCLAMATION = 1057
	SnowflakeParserPIPE_PIPE = 1058
	SnowflakeParserDOT = 1059
	SnowflakeParserUNDERLINE = 1060
	SnowflakeParserAT = 1061
	SnowflakeParserDOLLAR = 1062
	SnowflakeParserLR_BRACKET = 1063
	SnowflakeParserRR_BRACKET = 1064
	SnowflakeParserLSB = 1065
	SnowflakeParserRSB = 1066
	SnowflakeParserLCB = 1067
	SnowflakeParserRCB = 1068
	SnowflakeParserCOMMA = 1069
	SnowflakeParserSEMI = 1070
	SnowflakeParserCOLON = 1071
	SnowflakeParserCOLON_COLON = 1072
	SnowflakeParserSTAR = 1073
	SnowflakeParserDIVIDE = 1074
	SnowflakeParserMODULE = 1075
	SnowflakeParserPLUS = 1076
	SnowflakeParserMINUS = 1077
	SnowflakeParserPLACEHOLDER = 1078
	SnowflakeParserDEFAULT_DDL_COLLATION = 1079
)

// SnowflakeParser rules.
const (
	SnowflakeParserRULE_snowflake_file = 0
	SnowflakeParserRULE_batch = 1
	SnowflakeParserRULE_sql_command = 2
	SnowflakeParserRULE_ddl_command = 3
	SnowflakeParserRULE_dml_command = 4
	SnowflakeParserRULE_insert_statement = 5
	SnowflakeParserRULE_insert_multi_table_statement = 6
	SnowflakeParserRULE_into_clause2 = 7
	SnowflakeParserRULE_values_list = 8
	SnowflakeParserRULE_value_item = 9
	SnowflakeParserRULE_merge_statement = 10
	SnowflakeParserRULE_merge_matches = 11
	SnowflakeParserRULE_merge_update_delete = 12
	SnowflakeParserRULE_merge_insert = 13
	SnowflakeParserRULE_update_statement = 14
	SnowflakeParserRULE_table_or_query = 15
	SnowflakeParserRULE_delete_statement = 16
	SnowflakeParserRULE_values_builder = 17
	SnowflakeParserRULE_other_command = 18
	SnowflakeParserRULE_copy_into_table = 19
	SnowflakeParserRULE_external_location = 20
	SnowflakeParserRULE_files = 21
	SnowflakeParserRULE_file_format = 22
	SnowflakeParserRULE_format_name = 23
	SnowflakeParserRULE_format_type = 24
	SnowflakeParserRULE_stage_file_format = 25
	SnowflakeParserRULE_copy_into_location = 26
	SnowflakeParserRULE_comment = 27
	SnowflakeParserRULE_comment_object_type = 28
	SnowflakeParserRULE_commit = 29
	SnowflakeParserRULE_execute_immediate = 30
	SnowflakeParserRULE_execute_task = 31
	SnowflakeParserRULE_explain = 32
	SnowflakeParserRULE_parallel = 33
	SnowflakeParserRULE_get = 34
	SnowflakeParserRULE_grant_ownership = 35
	SnowflakeParserRULE_grant_to_role = 36
	SnowflakeParserRULE_global_privileges = 37
	SnowflakeParserRULE_global_privilege = 38
	SnowflakeParserRULE_account_object_privileges = 39
	SnowflakeParserRULE_account_object_privilege = 40
	SnowflakeParserRULE_schema_privileges = 41
	SnowflakeParserRULE_schema_privilege = 42
	SnowflakeParserRULE_schema_object_privileges = 43
	SnowflakeParserRULE_schema_object_privilege = 44
	SnowflakeParserRULE_grant_to_share = 45
	SnowflakeParserRULE_object_privilege = 46
	SnowflakeParserRULE_grant_role = 47
	SnowflakeParserRULE_list = 48
	SnowflakeParserRULE_internal_stage = 49
	SnowflakeParserRULE_external_stage = 50
	SnowflakeParserRULE_put = 51
	SnowflakeParserRULE_remove = 52
	SnowflakeParserRULE_revoke_from_role = 53
	SnowflakeParserRULE_revoke_from_share = 54
	SnowflakeParserRULE_revoke_role = 55
	SnowflakeParserRULE_rollback = 56
	SnowflakeParserRULE_set = 57
	SnowflakeParserRULE_truncate_materialized_view = 58
	SnowflakeParserRULE_truncate_table = 59
	SnowflakeParserRULE_unset = 60
	SnowflakeParserRULE_alter_command = 61
	SnowflakeParserRULE_account_params = 62
	SnowflakeParserRULE_object_params = 63
	SnowflakeParserRULE_default_ddl_collation = 64
	SnowflakeParserRULE_object_properties = 65
	SnowflakeParserRULE_session_params = 66
	SnowflakeParserRULE_alter_account = 67
	SnowflakeParserRULE_enabled_true_false = 68
	SnowflakeParserRULE_alter_api_integration = 69
	SnowflakeParserRULE_api_integration_property = 70
	SnowflakeParserRULE_alter_connection = 71
	SnowflakeParserRULE_alter_database = 72
	SnowflakeParserRULE_database_property = 73
	SnowflakeParserRULE_account_id_list = 74
	SnowflakeParserRULE_alter_external_table = 75
	SnowflakeParserRULE_ignore_edition_check = 76
	SnowflakeParserRULE_replication_schedule = 77
	SnowflakeParserRULE_db_name_list = 78
	SnowflakeParserRULE_share_name_list = 79
	SnowflakeParserRULE_full_acct_list = 80
	SnowflakeParserRULE_alter_failover_group = 81
	SnowflakeParserRULE_alter_file_format = 82
	SnowflakeParserRULE_alter_function = 83
	SnowflakeParserRULE_alter_function_signature = 84
	SnowflakeParserRULE_data_type_list = 85
	SnowflakeParserRULE_alter_masking_policy = 86
	SnowflakeParserRULE_alter_materialized_view = 87
	SnowflakeParserRULE_alter_network_policy = 88
	SnowflakeParserRULE_alter_notification_integration = 89
	SnowflakeParserRULE_alter_pipe = 90
	SnowflakeParserRULE_alter_procedure = 91
	SnowflakeParserRULE_alter_replication_group = 92
	SnowflakeParserRULE_credit_quota = 93
	SnowflakeParserRULE_frequency = 94
	SnowflakeParserRULE_notify_users = 95
	SnowflakeParserRULE_triggerDefinition = 96
	SnowflakeParserRULE_alter_resource_monitor = 97
	SnowflakeParserRULE_alter_role = 98
	SnowflakeParserRULE_alter_row_access_policy = 99
	SnowflakeParserRULE_alter_schema = 100
	SnowflakeParserRULE_schema_property = 101
	SnowflakeParserRULE_alter_security_integration = 102
	SnowflakeParserRULE_alter_security_integration_external_oauth = 103
	SnowflakeParserRULE_security_integration_external_oauth_property = 104
	SnowflakeParserRULE_alter_security_integration_snowflake_oauth = 105
	SnowflakeParserRULE_security_integration_snowflake_oauth_property = 106
	SnowflakeParserRULE_alter_security_integration_saml2 = 107
	SnowflakeParserRULE_alter_security_integration_scim = 108
	SnowflakeParserRULE_security_integration_scim_property = 109
	SnowflakeParserRULE_alter_sequence = 110
	SnowflakeParserRULE_alter_session = 111
	SnowflakeParserRULE_alter_session_policy = 112
	SnowflakeParserRULE_alter_share = 113
	SnowflakeParserRULE_alter_stage = 114
	SnowflakeParserRULE_alter_storage_integration = 115
	SnowflakeParserRULE_alter_stream = 116
	SnowflakeParserRULE_alter_table = 117
	SnowflakeParserRULE_clustering_action = 118
	SnowflakeParserRULE_table_column_action = 119
	SnowflakeParserRULE_inline_constraint = 120
	SnowflakeParserRULE_constraint_properties = 121
	SnowflakeParserRULE_ext_table_column_action = 122
	SnowflakeParserRULE_constraint_action = 123
	SnowflakeParserRULE_outofline_constraint = 124
	SnowflakeParserRULE_search_optimization_action = 125
	SnowflakeParserRULE_search_method_with_target = 126
	SnowflakeParserRULE_alter_table_alter_column = 127
	SnowflakeParserRULE_alter_column_decl_list = 128
	SnowflakeParserRULE_alter_column_decl = 129
	SnowflakeParserRULE_alter_column_opts = 130
	SnowflakeParserRULE_column_set_tags = 131
	SnowflakeParserRULE_column_unset_tags = 132
	SnowflakeParserRULE_alter_tag = 133
	SnowflakeParserRULE_alter_task = 134
	SnowflakeParserRULE_alter_user = 135
	SnowflakeParserRULE_alter_view = 136
	SnowflakeParserRULE_alter_modify = 137
	SnowflakeParserRULE_alter_warehouse = 138
	SnowflakeParserRULE_alter_connection_opts = 139
	SnowflakeParserRULE_alter_user_opts = 140
	SnowflakeParserRULE_alter_tag_opts = 141
	SnowflakeParserRULE_alter_network_policy_opts = 142
	SnowflakeParserRULE_alter_warehouse_opts = 143
	SnowflakeParserRULE_alter_account_opts = 144
	SnowflakeParserRULE_set_tags = 145
	SnowflakeParserRULE_tag_decl_list = 146
	SnowflakeParserRULE_unset_tags = 147
	SnowflakeParserRULE_create_command = 148
	SnowflakeParserRULE_create_account = 149
	SnowflakeParserRULE_create_api_integration = 150
	SnowflakeParserRULE_create_object_clone = 151
	SnowflakeParserRULE_create_connection = 152
	SnowflakeParserRULE_create_database = 153
	SnowflakeParserRULE_clone_at_before = 154
	SnowflakeParserRULE_at_before1 = 155
	SnowflakeParserRULE_header_decl = 156
	SnowflakeParserRULE_compression_type = 157
	SnowflakeParserRULE_compression = 158
	SnowflakeParserRULE_create_external_function = 159
	SnowflakeParserRULE_create_external_table = 160
	SnowflakeParserRULE_external_table_column_decl = 161
	SnowflakeParserRULE_external_table_column_decl_list = 162
	SnowflakeParserRULE_full_acct = 163
	SnowflakeParserRULE_integration_type_name = 164
	SnowflakeParserRULE_create_failover_group = 165
	SnowflakeParserRULE_create_file_format = 166
	SnowflakeParserRULE_arg_decl = 167
	SnowflakeParserRULE_col_decl = 168
	SnowflakeParserRULE_function_definition = 169
	SnowflakeParserRULE_create_function = 170
	SnowflakeParserRULE_create_managed_account = 171
	SnowflakeParserRULE_create_masking_policy = 172
	SnowflakeParserRULE_tag_decl = 173
	SnowflakeParserRULE_column_list_in_parentheses = 174
	SnowflakeParserRULE_create_materialized_view = 175
	SnowflakeParserRULE_create_network_policy = 176
	SnowflakeParserRULE_cloud_provider_params_auto = 177
	SnowflakeParserRULE_cloud_provider_params_push = 178
	SnowflakeParserRULE_create_notification_integration = 179
	SnowflakeParserRULE_create_pipe = 180
	SnowflakeParserRULE_caller_owner = 181
	SnowflakeParserRULE_executa_as = 182
	SnowflakeParserRULE_procedure_definition = 183
	SnowflakeParserRULE_create_procedure = 184
	SnowflakeParserRULE_create_replication_group = 185
	SnowflakeParserRULE_create_resource_monitor = 186
	SnowflakeParserRULE_create_role = 187
	SnowflakeParserRULE_create_row_access_policy = 188
	SnowflakeParserRULE_create_schema = 189
	SnowflakeParserRULE_create_security_integration_external_oauth = 190
	SnowflakeParserRULE_implicit_none = 191
	SnowflakeParserRULE_create_security_integration_snowflake_oauth = 192
	SnowflakeParserRULE_create_security_integration_saml2 = 193
	SnowflakeParserRULE_create_security_integration_scim = 194
	SnowflakeParserRULE_network_policy = 195
	SnowflakeParserRULE_partner_application = 196
	SnowflakeParserRULE_start_with = 197
	SnowflakeParserRULE_increment_by = 198
	SnowflakeParserRULE_create_sequence = 199
	SnowflakeParserRULE_create_session_policy = 200
	SnowflakeParserRULE_create_share = 201
	SnowflakeParserRULE_character = 202
	SnowflakeParserRULE_format_type_options = 203
	SnowflakeParserRULE_copy_options = 204
	SnowflakeParserRULE_internal_stage_params = 205
	SnowflakeParserRULE_stage_type = 206
	SnowflakeParserRULE_stage_master_key = 207
	SnowflakeParserRULE_stage_kms_key = 208
	SnowflakeParserRULE_stage_encryption_opts_aws = 209
	SnowflakeParserRULE_aws_token = 210
	SnowflakeParserRULE_aws_key_id = 211
	SnowflakeParserRULE_aws_secret_key = 212
	SnowflakeParserRULE_aws_role = 213
	SnowflakeParserRULE_external_stage_params = 214
	SnowflakeParserRULE_true_false = 215
	SnowflakeParserRULE_enable = 216
	SnowflakeParserRULE_refresh_on_create = 217
	SnowflakeParserRULE_auto_refresh = 218
	SnowflakeParserRULE_notification_integration = 219
	SnowflakeParserRULE_directory_table_params = 220
	SnowflakeParserRULE_create_stage = 221
	SnowflakeParserRULE_cloud_provider_params = 222
	SnowflakeParserRULE_cloud_provider_params2 = 223
	SnowflakeParserRULE_cloud_provider_params3 = 224
	SnowflakeParserRULE_create_storage_integration = 225
	SnowflakeParserRULE_copy_grants = 226
	SnowflakeParserRULE_append_only = 227
	SnowflakeParserRULE_insert_only = 228
	SnowflakeParserRULE_show_initial_rows = 229
	SnowflakeParserRULE_stream_time = 230
	SnowflakeParserRULE_create_stream = 231
	SnowflakeParserRULE_temporary = 232
	SnowflakeParserRULE_table_type = 233
	SnowflakeParserRULE_with_tags = 234
	SnowflakeParserRULE_with_row_access_policy = 235
	SnowflakeParserRULE_cluster_by = 236
	SnowflakeParserRULE_change_tracking = 237
	SnowflakeParserRULE_with_masking_policy = 238
	SnowflakeParserRULE_collate = 239
	SnowflakeParserRULE_not_null = 240
	SnowflakeParserRULE_default_value = 241
	SnowflakeParserRULE_foreign_key = 242
	SnowflakeParserRULE_out_of_line_constraint = 243
	SnowflakeParserRULE_full_col_decl = 244
	SnowflakeParserRULE_column_decl_item = 245
	SnowflakeParserRULE_column_decl_item_list = 246
	SnowflakeParserRULE_create_table = 247
	SnowflakeParserRULE_create_tag = 248
	SnowflakeParserRULE_session_parameter = 249
	SnowflakeParserRULE_session_parameter_list = 250
	SnowflakeParserRULE_session_parameter_init_list = 251
	SnowflakeParserRULE_session_parameter_init = 252
	SnowflakeParserRULE_create_task = 253
	SnowflakeParserRULE_sql = 254
	SnowflakeParserRULE_call = 255
	SnowflakeParserRULE_create_user = 256
	SnowflakeParserRULE_view_col = 257
	SnowflakeParserRULE_create_view = 258
	SnowflakeParserRULE_create_warehouse = 259
	SnowflakeParserRULE_wh_properties = 260
	SnowflakeParserRULE_wh_params = 261
	SnowflakeParserRULE_trigger_definition = 262
	SnowflakeParserRULE_object_type_name = 263
	SnowflakeParserRULE_object_type_plural = 264
	SnowflakeParserRULE_drop_command = 265
	SnowflakeParserRULE_drop_object = 266
	SnowflakeParserRULE_drop_connection = 267
	SnowflakeParserRULE_drop_database = 268
	SnowflakeParserRULE_drop_external_table = 269
	SnowflakeParserRULE_drop_failover_group = 270
	SnowflakeParserRULE_drop_file_format = 271
	SnowflakeParserRULE_drop_function = 272
	SnowflakeParserRULE_drop_integration = 273
	SnowflakeParserRULE_drop_managed_account = 274
	SnowflakeParserRULE_drop_masking_policy = 275
	SnowflakeParserRULE_drop_materialized_view = 276
	SnowflakeParserRULE_drop_network_policy = 277
	SnowflakeParserRULE_drop_pipe = 278
	SnowflakeParserRULE_drop_procedure = 279
	SnowflakeParserRULE_drop_replication_group = 280
	SnowflakeParserRULE_drop_resource_monitor = 281
	SnowflakeParserRULE_drop_role = 282
	SnowflakeParserRULE_drop_row_access_policy = 283
	SnowflakeParserRULE_drop_schema = 284
	SnowflakeParserRULE_drop_sequence = 285
	SnowflakeParserRULE_drop_session_policy = 286
	SnowflakeParserRULE_drop_share = 287
	SnowflakeParserRULE_drop_stage = 288
	SnowflakeParserRULE_drop_stream = 289
	SnowflakeParserRULE_drop_table = 290
	SnowflakeParserRULE_drop_tag = 291
	SnowflakeParserRULE_drop_task = 292
	SnowflakeParserRULE_drop_user = 293
	SnowflakeParserRULE_drop_view = 294
	SnowflakeParserRULE_drop_warehouse = 295
	SnowflakeParserRULE_cascade_restrict = 296
	SnowflakeParserRULE_arg_types = 297
	SnowflakeParserRULE_undrop_command = 298
	SnowflakeParserRULE_undrop_database = 299
	SnowflakeParserRULE_undrop_schema = 300
	SnowflakeParserRULE_undrop_table = 301
	SnowflakeParserRULE_undrop_tag = 302
	SnowflakeParserRULE_use_command = 303
	SnowflakeParserRULE_use_database = 304
	SnowflakeParserRULE_use_role = 305
	SnowflakeParserRULE_use_schema = 306
	SnowflakeParserRULE_use_secondary_roles = 307
	SnowflakeParserRULE_use_warehouse = 308
	SnowflakeParserRULE_comment_clause = 309
	SnowflakeParserRULE_if_suspended = 310
	SnowflakeParserRULE_if_exists = 311
	SnowflakeParserRULE_if_not_exists = 312
	SnowflakeParserRULE_or_replace = 313
	SnowflakeParserRULE_describe = 314
	SnowflakeParserRULE_describe_command = 315
	SnowflakeParserRULE_describe_database = 316
	SnowflakeParserRULE_describe_external_table = 317
	SnowflakeParserRULE_describe_file_format = 318
	SnowflakeParserRULE_describe_function = 319
	SnowflakeParserRULE_describe_integration = 320
	SnowflakeParserRULE_describe_masking_policy = 321
	SnowflakeParserRULE_describe_materialized_view = 322
	SnowflakeParserRULE_describe_network_policy = 323
	SnowflakeParserRULE_describe_pipe = 324
	SnowflakeParserRULE_describe_procedure = 325
	SnowflakeParserRULE_describe_result = 326
	SnowflakeParserRULE_describe_row_access_policy = 327
	SnowflakeParserRULE_describe_schema = 328
	SnowflakeParserRULE_describe_search_optimization = 329
	SnowflakeParserRULE_describe_sequence = 330
	SnowflakeParserRULE_describe_session_policy = 331
	SnowflakeParserRULE_describe_share = 332
	SnowflakeParserRULE_describe_stage = 333
	SnowflakeParserRULE_describe_stream = 334
	SnowflakeParserRULE_describe_table = 335
	SnowflakeParserRULE_describe_task = 336
	SnowflakeParserRULE_describe_transaction = 337
	SnowflakeParserRULE_describe_user = 338
	SnowflakeParserRULE_describe_view = 339
	SnowflakeParserRULE_describe_warehouse = 340
	SnowflakeParserRULE_show_command = 341
	SnowflakeParserRULE_show_columns = 342
	SnowflakeParserRULE_show_connections = 343
	SnowflakeParserRULE_starts_with = 344
	SnowflakeParserRULE_limit_rows = 345
	SnowflakeParserRULE_show_databases = 346
	SnowflakeParserRULE_show_databases_in_failover_group = 347
	SnowflakeParserRULE_show_databases_in_replication_group = 348
	SnowflakeParserRULE_show_delegated_authorizations = 349
	SnowflakeParserRULE_show_external_functions = 350
	SnowflakeParserRULE_show_external_tables = 351
	SnowflakeParserRULE_show_failover_groups = 352
	SnowflakeParserRULE_show_file_formats = 353
	SnowflakeParserRULE_show_functions = 354
	SnowflakeParserRULE_show_global_accounts = 355
	SnowflakeParserRULE_show_grants = 356
	SnowflakeParserRULE_show_grants_opts = 357
	SnowflakeParserRULE_show_integrations = 358
	SnowflakeParserRULE_show_locks = 359
	SnowflakeParserRULE_show_managed_accounts = 360
	SnowflakeParserRULE_show_masking_policies = 361
	SnowflakeParserRULE_in_obj = 362
	SnowflakeParserRULE_in_obj_2 = 363
	SnowflakeParserRULE_show_materialized_views = 364
	SnowflakeParserRULE_show_network_policies = 365
	SnowflakeParserRULE_show_objects = 366
	SnowflakeParserRULE_show_organization_accounts = 367
	SnowflakeParserRULE_in_for = 368
	SnowflakeParserRULE_show_parameters = 369
	SnowflakeParserRULE_show_pipes = 370
	SnowflakeParserRULE_show_primary_keys = 371
	SnowflakeParserRULE_show_procedures = 372
	SnowflakeParserRULE_show_regions = 373
	SnowflakeParserRULE_show_replication_accounts = 374
	SnowflakeParserRULE_show_replication_databases = 375
	SnowflakeParserRULE_show_replication_groups = 376
	SnowflakeParserRULE_show_resource_monitors = 377
	SnowflakeParserRULE_show_roles = 378
	SnowflakeParserRULE_show_row_access_policies = 379
	SnowflakeParserRULE_show_schemas = 380
	SnowflakeParserRULE_show_sequences = 381
	SnowflakeParserRULE_show_session_policies = 382
	SnowflakeParserRULE_show_shares = 383
	SnowflakeParserRULE_show_shares_in_failover_group = 384
	SnowflakeParserRULE_show_shares_in_replication_group = 385
	SnowflakeParserRULE_show_stages = 386
	SnowflakeParserRULE_show_streams = 387
	SnowflakeParserRULE_show_tables = 388
	SnowflakeParserRULE_show_tags = 389
	SnowflakeParserRULE_show_tasks = 390
	SnowflakeParserRULE_show_transactions = 391
	SnowflakeParserRULE_show_user_functions = 392
	SnowflakeParserRULE_show_users = 393
	SnowflakeParserRULE_show_variables = 394
	SnowflakeParserRULE_show_views = 395
	SnowflakeParserRULE_show_warehouses = 396
	SnowflakeParserRULE_like_pattern = 397
	SnowflakeParserRULE_account_identifier = 398
	SnowflakeParserRULE_schema_name = 399
	SnowflakeParserRULE_object_type = 400
	SnowflakeParserRULE_object_type_list = 401
	SnowflakeParserRULE_tag_value = 402
	SnowflakeParserRULE_arg_data_type = 403
	SnowflakeParserRULE_arg_name = 404
	SnowflakeParserRULE_param_name = 405
	SnowflakeParserRULE_region_group_id = 406
	SnowflakeParserRULE_snowflake_region_id = 407
	SnowflakeParserRULE_string = 408
	SnowflakeParserRULE_string_list = 409
	SnowflakeParserRULE_id_ = 410
	SnowflakeParserRULE_keyword = 411
	SnowflakeParserRULE_pattern = 412
	SnowflakeParserRULE_column_name = 413
	SnowflakeParserRULE_column_list = 414
	SnowflakeParserRULE_object_name = 415
	SnowflakeParserRULE_num = 416
	SnowflakeParserRULE_expr_list = 417
	SnowflakeParserRULE_expr = 418
	SnowflakeParserRULE_json_literal = 419
	SnowflakeParserRULE_kv_pair = 420
	SnowflakeParserRULE_value = 421
	SnowflakeParserRULE_arr_literal = 422
	SnowflakeParserRULE_data_type = 423
	SnowflakeParserRULE_primitive_expression = 424
	SnowflakeParserRULE_order_by_expr = 425
	SnowflakeParserRULE_asc_desc = 426
	SnowflakeParserRULE_over_clause = 427
	SnowflakeParserRULE_function_call = 428
	SnowflakeParserRULE_ranking_windowed_function = 429
	SnowflakeParserRULE_aggregate_function = 430
	SnowflakeParserRULE_literal = 431
	SnowflakeParserRULE_sign = 432
	SnowflakeParserRULE_full_column_name = 433
	SnowflakeParserRULE_bracket_expression = 434
	SnowflakeParserRULE_case_expression = 435
	SnowflakeParserRULE_switch_search_condition_section = 436
	SnowflakeParserRULE_switch_section = 437
	SnowflakeParserRULE_query_statement = 438
	SnowflakeParserRULE_with_expression = 439
	SnowflakeParserRULE_common_table_expression = 440
	SnowflakeParserRULE_select_statement = 441
	SnowflakeParserRULE_set_operators = 442
	SnowflakeParserRULE_select_optional_clauses = 443
	SnowflakeParserRULE_select_clause = 444
	SnowflakeParserRULE_select_top_clause = 445
	SnowflakeParserRULE_select_list_no_top = 446
	SnowflakeParserRULE_select_list_top = 447
	SnowflakeParserRULE_select_list = 448
	SnowflakeParserRULE_select_list_elem = 449
	SnowflakeParserRULE_column_elem = 450
	SnowflakeParserRULE_as_alias = 451
	SnowflakeParserRULE_expression_elem = 452
	SnowflakeParserRULE_column_position = 453
	SnowflakeParserRULE_all_distinct = 454
	SnowflakeParserRULE_top_clause = 455
	SnowflakeParserRULE_into_clause = 456
	SnowflakeParserRULE_var_list = 457
	SnowflakeParserRULE_var = 458
	SnowflakeParserRULE_from_clause = 459
	SnowflakeParserRULE_table_sources = 460
	SnowflakeParserRULE_table_source = 461
	SnowflakeParserRULE_table_source_item_joined = 462
	SnowflakeParserRULE_object_ref = 463
	SnowflakeParserRULE_prior_list = 464
	SnowflakeParserRULE_prior_item = 465
	SnowflakeParserRULE_outer_join = 466
	SnowflakeParserRULE_join_type = 467
	SnowflakeParserRULE_join_clause = 468
	SnowflakeParserRULE_at_before = 469
	SnowflakeParserRULE_end = 470
	SnowflakeParserRULE_changes = 471
	SnowflakeParserRULE_default_append_only = 472
	SnowflakeParserRULE_partition_by = 473
	SnowflakeParserRULE_alias = 474
	SnowflakeParserRULE_expr_alias_list = 475
	SnowflakeParserRULE_measures = 476
	SnowflakeParserRULE_match_opts = 477
	SnowflakeParserRULE_row_match = 478
	SnowflakeParserRULE_first_last = 479
	SnowflakeParserRULE_symbol = 480
	SnowflakeParserRULE_after_match = 481
	SnowflakeParserRULE_symbol_list = 482
	SnowflakeParserRULE_define = 483
	SnowflakeParserRULE_match_recognize = 484
	SnowflakeParserRULE_val = 485
	SnowflakeParserRULE_pivot_unpivot = 486
	SnowflakeParserRULE_column_alias_list_in_brackets = 487
	SnowflakeParserRULE_expr_list_in_parentheses = 488
	SnowflakeParserRULE_values = 489
	SnowflakeParserRULE_sample_method = 490
	SnowflakeParserRULE_repeatable_seed = 491
	SnowflakeParserRULE_sample_opts = 492
	SnowflakeParserRULE_sample = 493
	SnowflakeParserRULE_search_condition = 494
	SnowflakeParserRULE_comparison_operator = 495
	SnowflakeParserRULE_null_not_null = 496
	SnowflakeParserRULE_subquery = 497
	SnowflakeParserRULE_predicate = 498
	SnowflakeParserRULE_where_clause = 499
	SnowflakeParserRULE_group_item = 500
	SnowflakeParserRULE_group_by_clause = 501
	SnowflakeParserRULE_having_clause = 502
	SnowflakeParserRULE_qualify_clause = 503
	SnowflakeParserRULE_order_item = 504
	SnowflakeParserRULE_order_by_clause = 505
	SnowflakeParserRULE_row_rows = 506
	SnowflakeParserRULE_first_next = 507
	SnowflakeParserRULE_limit_clause = 508
)

// ISnowflake_fileContext is an interface to support dynamic dispatch.
type ISnowflake_fileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSnowflake_fileContext differentiates from other interfaces.
	IsSnowflake_fileContext()
}

type Snowflake_fileContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySnowflake_fileContext() *Snowflake_fileContext {
	var p = new(Snowflake_fileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_snowflake_file
	return p
}

func (*Snowflake_fileContext) IsSnowflake_fileContext() {}

func NewSnowflake_fileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Snowflake_fileContext {
	var p = new(Snowflake_fileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_snowflake_file

	return p
}

func (s *Snowflake_fileContext) GetParser() antlr.Parser { return s.parser }

func (s *Snowflake_fileContext) EOF() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEOF, 0)
}

func (s *Snowflake_fileContext) AllBatch() []IBatchContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBatchContext); ok {
			len++
		}
	}

	tst := make([]IBatchContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBatchContext); ok {
			tst[i] = t.(IBatchContext)
			i++
		}
	}

	return tst
}

func (s *Snowflake_fileContext) Batch(i int) IBatchContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBatchContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBatchContext)
}

func (s *Snowflake_fileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Snowflake_fileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Snowflake_fileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSnowflake_file(s)
	}
}

func (s *Snowflake_fileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSnowflake_file(s)
	}
}

func (s *Snowflake_fileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSnowflake_file(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Snowflake_file() (localctx ISnowflake_fileContext) {
	this := p
	_ = this

	localctx = NewSnowflake_fileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SnowflakeParserRULE_snowflake_file)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1021)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserADD || _la == SnowflakeParserALTER || (int64((_la - 155)) & ^0x3f) == 0 && ((int64(1) << (_la - 155)) & 276824067) != 0 || (int64((_la - 223)) & ^0x3f) == 0 && ((int64(1) << (_la - 223)) & 36310271995740185) != 0 || (int64((_la - 331)) & ^0x3f) == 0 && ((int64(1) << (_la - 331)) & 17592186044449) != 0 || _la == SnowflakeParserLIST || _la == SnowflakeParserMERGE || _la == SnowflakeParserPUT || _la == SnowflakeParserREMOVE || (int64((_la - 690)) & ^0x3f) == 0 && ((int64(1) << (_la - 690)) & 144115188075855905) != 0 || _la == SnowflakeParserSET || _la == SnowflakeParserSHOW || (int64((_la - 909)) & ^0x3f) == 0 && ((int64(1) << (_la - 909)) & 71135526913) != 0 || _la == SnowflakeParserWITH {
		{
			p.SetState(1018)
			p.Batch()
		}


		p.SetState(1023)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1024)
		p.Match(SnowflakeParserEOF)
	}



	return localctx
}


// IBatchContext is an interface to support dynamic dispatch.
type IBatchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBatchContext differentiates from other interfaces.
	IsBatchContext()
}

type BatchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBatchContext() *BatchContext {
	var p = new(BatchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_batch
	return p
}

func (*BatchContext) IsBatchContext() {}

func NewBatchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BatchContext {
	var p = new(BatchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_batch

	return p
}

func (s *BatchContext) GetParser() antlr.Parser { return s.parser }

func (s *BatchContext) Sql_command() ISql_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_commandContext)
}

func (s *BatchContext) SEMI() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEMI, 0)
}

func (s *BatchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BatchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *BatchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterBatch(s)
	}
}

func (s *BatchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitBatch(s)
	}
}

func (s *BatchContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitBatch(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Batch() (localctx IBatchContext) {
	this := p
	_ = this

	localctx = NewBatchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SnowflakeParserRULE_batch)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1026)
		p.Sql_command()
	}
	p.SetState(1028)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSEMI {
		{
			p.SetState(1027)
			p.Match(SnowflakeParserSEMI)
		}

	}



	return localctx
}


// ISql_commandContext is an interface to support dynamic dispatch.
type ISql_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_commandContext differentiates from other interfaces.
	IsSql_commandContext()
}

type Sql_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_commandContext() *Sql_commandContext {
	var p = new(Sql_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_sql_command
	return p
}

func (*Sql_commandContext) IsSql_commandContext() {}

func NewSql_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_commandContext {
	var p = new(Sql_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_sql_command

	return p
}

func (s *Sql_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_commandContext) Ddl_command() IDdl_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDdl_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDdl_commandContext)
}

func (s *Sql_commandContext) Dml_command() IDml_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDml_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDml_commandContext)
}

func (s *Sql_commandContext) Show_command() IShow_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_commandContext)
}

func (s *Sql_commandContext) Use_command() IUse_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUse_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUse_commandContext)
}

func (s *Sql_commandContext) Describe_command() IDescribe_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_commandContext)
}

func (s *Sql_commandContext) Other_command() IOther_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOther_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOther_commandContext)
}

func (s *Sql_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Sql_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSql_command(s)
	}
}

func (s *Sql_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSql_command(s)
	}
}

func (s *Sql_commandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSql_command(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Sql_command() (localctx ISql_commandContext) {
	this := p
	_ = this

	localctx = NewSql_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SnowflakeParserRULE_sql_command)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1036)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCREATE, SnowflakeParserDROP, SnowflakeParserUNDROP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1030)
			p.Ddl_command()
		}


	case SnowflakeParserDELETE, SnowflakeParserINSERT, SnowflakeParserMERGE, SnowflakeParserSELECT, SnowflakeParserUPDATE, SnowflakeParserWITH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1031)
			p.Dml_command()
		}


	case SnowflakeParserSHOW:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1032)
			p.Show_command()
		}


	case SnowflakeParserUSE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1033)
			p.Use_command()
		}


	case SnowflakeParserDESC, SnowflakeParserDESCRIBE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1034)
			p.Describe_command()
		}


	case SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCOPY, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserLIST, SnowflakeParserPUT, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSET, SnowflakeParserTRUNCATE, SnowflakeParserUNSET:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1035)
			p.Other_command()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IDdl_commandContext is an interface to support dynamic dispatch.
type IDdl_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDdl_commandContext differentiates from other interfaces.
	IsDdl_commandContext()
}

type Ddl_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdl_commandContext() *Ddl_commandContext {
	var p = new(Ddl_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_ddl_command
	return p
}

func (*Ddl_commandContext) IsDdl_commandContext() {}

func NewDdl_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ddl_commandContext {
	var p = new(Ddl_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_ddl_command

	return p
}

func (s *Ddl_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Ddl_commandContext) Alter_command() IAlter_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_commandContext)
}

func (s *Ddl_commandContext) Create_command() ICreate_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_commandContext)
}

func (s *Ddl_commandContext) Drop_command() IDrop_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_commandContext)
}

func (s *Ddl_commandContext) Undrop_command() IUndrop_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUndrop_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUndrop_commandContext)
}

func (s *Ddl_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ddl_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Ddl_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDdl_command(s)
	}
}

func (s *Ddl_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDdl_command(s)
	}
}

func (s *Ddl_commandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDdl_command(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Ddl_command() (localctx IDdl_commandContext) {
	this := p
	_ = this

	localctx = NewDdl_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SnowflakeParserRULE_ddl_command)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1042)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserADD, SnowflakeParserALTER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1038)
			p.Alter_command()
		}


	case SnowflakeParserCREATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1039)
			p.Create_command()
		}


	case SnowflakeParserDROP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1040)
			p.Drop_command()
		}


	case SnowflakeParserUNDROP:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1041)
			p.Undrop_command()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IDml_commandContext is an interface to support dynamic dispatch.
type IDml_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDml_commandContext differentiates from other interfaces.
	IsDml_commandContext()
}

type Dml_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDml_commandContext() *Dml_commandContext {
	var p = new(Dml_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_dml_command
	return p
}

func (*Dml_commandContext) IsDml_commandContext() {}

func NewDml_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dml_commandContext {
	var p = new(Dml_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_dml_command

	return p
}

func (s *Dml_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Dml_commandContext) Query_statement() IQuery_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_statementContext)
}

func (s *Dml_commandContext) Insert_statement() IInsert_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_statementContext)
}

func (s *Dml_commandContext) Insert_multi_table_statement() IInsert_multi_table_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_multi_table_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_multi_table_statementContext)
}

func (s *Dml_commandContext) Update_statement() IUpdate_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_statementContext)
}

func (s *Dml_commandContext) Delete_statement() IDelete_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelete_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelete_statementContext)
}

func (s *Dml_commandContext) Merge_statement() IMerge_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMerge_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMerge_statementContext)
}

func (s *Dml_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dml_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Dml_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDml_command(s)
	}
}

func (s *Dml_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDml_command(s)
	}
}

func (s *Dml_commandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDml_command(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Dml_command() (localctx IDml_commandContext) {
	this := p
	_ = this

	localctx = NewDml_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SnowflakeParserRULE_dml_command)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1050)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1044)
			p.Query_statement()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1045)
			p.Insert_statement()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1046)
			p.Insert_multi_table_statement()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1047)
			p.Update_statement()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1048)
			p.Delete_statement()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1049)
			p.Merge_statement()
		}

	}


	return localctx
}


// IInsert_statementContext is an interface to support dynamic dispatch.
type IInsert_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_statementContext differentiates from other interfaces.
	IsInsert_statementContext()
}

type Insert_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_statementContext() *Insert_statementContext {
	var p = new(Insert_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_insert_statement
	return p
}

func (*Insert_statementContext) IsInsert_statementContext() {}

func NewInsert_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statementContext {
	var p = new(Insert_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_insert_statement

	return p
}

func (s *Insert_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINSERT, 0)
}

func (s *Insert_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTO, 0)
}

func (s *Insert_statementContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Insert_statementContext) Values_builder() IValues_builderContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValues_builderContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValues_builderContext)
}

func (s *Insert_statementContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Insert_statementContext) OVERWRITE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOVERWRITE, 0)
}

func (s *Insert_statementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Insert_statementContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Insert_statementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Insert_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Insert_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterInsert_statement(s)
	}
}

func (s *Insert_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitInsert_statement(s)
	}
}

func (s *Insert_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitInsert_statement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Insert_statement() (localctx IInsert_statementContext) {
	this := p
	_ = this

	localctx = NewInsert_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SnowflakeParserRULE_insert_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1052)
		p.Match(SnowflakeParserINSERT)
	}
	p.SetState(1054)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOVERWRITE {
		{
			p.SetState(1053)
			p.Match(SnowflakeParserOVERWRITE)
		}

	}
	{
		p.SetState(1056)
		p.Match(SnowflakeParserINTO)
	}
	{
		p.SetState(1057)
		p.Object_name()
	}
	p.SetState(1062)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLR_BRACKET {
		{
			p.SetState(1058)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(1059)
			p.Column_list()
		}
		{
			p.SetState(1060)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	p.SetState(1066)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserVALUES:
		{
			p.SetState(1064)
			p.Values_builder()
		}


	case SnowflakeParserSELECT:
		{
			p.SetState(1065)
			p.Select_statement()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IInsert_multi_table_statementContext is an interface to support dynamic dispatch.
type IInsert_multi_table_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_multi_table_statementContext differentiates from other interfaces.
	IsInsert_multi_table_statementContext()
}

type Insert_multi_table_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_multi_table_statementContext() *Insert_multi_table_statementContext {
	var p = new(Insert_multi_table_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_insert_multi_table_statement
	return p
}

func (*Insert_multi_table_statementContext) IsInsert_multi_table_statementContext() {}

func NewInsert_multi_table_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_multi_table_statementContext {
	var p = new(Insert_multi_table_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_insert_multi_table_statement

	return p
}

func (s *Insert_multi_table_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_multi_table_statementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINSERT, 0)
}

func (s *Insert_multi_table_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *Insert_multi_table_statementContext) AllInto_clause2() []IInto_clause2Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInto_clause2Context); ok {
			len++
		}
	}

	tst := make([]IInto_clause2Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInto_clause2Context); ok {
			tst[i] = t.(IInto_clause2Context)
			i++
		}
	}

	return tst
}

func (s *Insert_multi_table_statementContext) Into_clause2(i int) IInto_clause2Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInto_clause2Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInto_clause2Context)
}

func (s *Insert_multi_table_statementContext) OVERWRITE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOVERWRITE, 0)
}

func (s *Insert_multi_table_statementContext) Subquery() ISubqueryContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubqueryContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Insert_multi_table_statementContext) FIRST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFIRST, 0)
}

func (s *Insert_multi_table_statementContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserWHEN)
}

func (s *Insert_multi_table_statementContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWHEN, i)
}

func (s *Insert_multi_table_statementContext) AllPredicate() []IPredicateContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPredicateContext); ok {
			len++
		}
	}

	tst := make([]IPredicateContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPredicateContext); ok {
			tst[i] = t.(IPredicateContext)
			i++
		}
	}

	return tst
}

func (s *Insert_multi_table_statementContext) Predicate(i int) IPredicateContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPredicateContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Insert_multi_table_statementContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserTHEN)
}

func (s *Insert_multi_table_statementContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTHEN, i)
}

func (s *Insert_multi_table_statementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserELSE, 0)
}

func (s *Insert_multi_table_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_multi_table_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Insert_multi_table_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterInsert_multi_table_statement(s)
	}
}

func (s *Insert_multi_table_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitInsert_multi_table_statement(s)
	}
}

func (s *Insert_multi_table_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitInsert_multi_table_statement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Insert_multi_table_statement() (localctx IInsert_multi_table_statementContext) {
	this := p
	_ = this

	localctx = NewInsert_multi_table_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SnowflakeParserRULE_insert_multi_table_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1097)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1068)
			p.Match(SnowflakeParserINSERT)
		}
		p.SetState(1070)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOVERWRITE {
			{
				p.SetState(1069)
				p.Match(SnowflakeParserOVERWRITE)
			}

		}
		{
			p.SetState(1072)
			p.Match(SnowflakeParserALL)
		}
		{
			p.SetState(1073)
			p.Into_clause2()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1074)
			p.Match(SnowflakeParserINSERT)
		}
		p.SetState(1076)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOVERWRITE {
			{
				p.SetState(1075)
				p.Match(SnowflakeParserOVERWRITE)
			}

		}
		{
			p.SetState(1078)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserALL || _la == SnowflakeParserFIRST) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1087)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SnowflakeParserWHEN {
			{
				p.SetState(1079)
				p.Match(SnowflakeParserWHEN)
			}
			{
				p.SetState(1080)
				p.Predicate()
			}
			{
				p.SetState(1081)
				p.Match(SnowflakeParserTHEN)
			}
			p.SetState(1083)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for ok := true; ok; ok = _la == SnowflakeParserINTO {
				{
					p.SetState(1082)
					p.Into_clause2()
				}


				p.SetState(1085)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}


			p.SetState(1089)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1093)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserELSE {
			{
				p.SetState(1091)
				p.Match(SnowflakeParserELSE)
			}
			{
				p.SetState(1092)
				p.Into_clause2()
			}

		}
		{
			p.SetState(1095)
			p.Subquery()
		}

	}


	return localctx
}


// IInto_clause2Context is an interface to support dynamic dispatch.
type IInto_clause2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInto_clause2Context differentiates from other interfaces.
	IsInto_clause2Context()
}

type Into_clause2Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInto_clause2Context() *Into_clause2Context {
	var p = new(Into_clause2Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_into_clause2
	return p
}

func (*Into_clause2Context) IsInto_clause2Context() {}

func NewInto_clause2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Into_clause2Context {
	var p = new(Into_clause2Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_into_clause2

	return p
}

func (s *Into_clause2Context) GetParser() antlr.Parser { return s.parser }

func (s *Into_clause2Context) INTO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTO, 0)
}

func (s *Into_clause2Context) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Into_clause2Context) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Into_clause2Context) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Into_clause2Context) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Into_clause2Context) Values_list() IValues_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValues_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValues_listContext)
}

func (s *Into_clause2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Into_clause2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Into_clause2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterInto_clause2(s)
	}
}

func (s *Into_clause2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitInto_clause2(s)
	}
}

func (s *Into_clause2Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitInto_clause2(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Into_clause2() (localctx IInto_clause2Context) {
	this := p
	_ = this

	localctx = NewInto_clause2Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SnowflakeParserRULE_into_clause2)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1099)
		p.Match(SnowflakeParserINTO)
	}
	{
		p.SetState(1100)
		p.Object_name()
	}
	p.SetState(1105)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLR_BRACKET {
		{
			p.SetState(1101)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(1102)
			p.Column_list()
		}
		{
			p.SetState(1103)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	p.SetState(1108)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserVALUES {
		{
			p.SetState(1107)
			p.Values_list()
		}

	}



	return localctx
}


// IValues_listContext is an interface to support dynamic dispatch.
type IValues_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValues_listContext differentiates from other interfaces.
	IsValues_listContext()
}

type Values_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValues_listContext() *Values_listContext {
	var p = new(Values_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_values_list
	return p
}

func (*Values_listContext) IsValues_listContext() {}

func NewValues_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Values_listContext {
	var p = new(Values_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_values_list

	return p
}

func (s *Values_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Values_listContext) VALUES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVALUES, 0)
}

func (s *Values_listContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Values_listContext) AllValue_item() []IValue_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IValue_itemContext); ok {
			len++
		}
	}

	tst := make([]IValue_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IValue_itemContext); ok {
			tst[i] = t.(IValue_itemContext)
			i++
		}
	}

	return tst
}

func (s *Values_listContext) Value_item(i int) IValue_itemContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValue_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValue_itemContext)
}

func (s *Values_listContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Values_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Values_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Values_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Values_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Values_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterValues_list(s)
	}
}

func (s *Values_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitValues_list(s)
	}
}

func (s *Values_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitValues_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Values_list() (localctx IValues_listContext) {
	this := p
	_ = this

	localctx = NewValues_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SnowflakeParserRULE_values_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1110)
		p.Match(SnowflakeParserVALUES)
	}
	{
		p.SetState(1111)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(1112)
		p.Value_item()
	}
	p.SetState(1117)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(1113)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(1114)
			p.Value_item()
		}


		p.SetState(1119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1120)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IValue_itemContext is an interface to support dynamic dispatch.
type IValue_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValue_itemContext differentiates from other interfaces.
	IsValue_itemContext()
}

type Value_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValue_itemContext() *Value_itemContext {
	var p = new(Value_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_value_item
	return p
}

func (*Value_itemContext) IsValue_itemContext() {}

func NewValue_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Value_itemContext {
	var p = new(Value_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_value_item

	return p
}

func (s *Value_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Value_itemContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Value_itemContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT, 0)
}

func (s *Value_itemContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, 0)
}

func (s *Value_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Value_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Value_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterValue_item(s)
	}
}

func (s *Value_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitValue_item(s)
	}
}

func (s *Value_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitValue_item(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Value_item() (localctx IValue_itemContext) {
	this := p
	_ = this

	localctx = NewValue_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SnowflakeParserRULE_value_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1125)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserINT, SnowflakeParserSTAGE, SnowflakeParserBIGINT, SnowflakeParserDOUBLE_QUOTE_ID, SnowflakeParserDOUBLE_QUOTE_BLANK, SnowflakeParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1122)
			p.Column_name()
		}


	case SnowflakeParserDEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1123)
			p.Match(SnowflakeParserDEFAULT)
		}


	case SnowflakeParserNULL_:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1124)
			p.Match(SnowflakeParserNULL_)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IMerge_statementContext is an interface to support dynamic dispatch.
type IMerge_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMerge_statementContext differentiates from other interfaces.
	IsMerge_statementContext()
}

type Merge_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMerge_statementContext() *Merge_statementContext {
	var p = new(Merge_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_merge_statement
	return p
}

func (*Merge_statementContext) IsMerge_statementContext() {}

func NewMerge_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Merge_statementContext {
	var p = new(Merge_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_merge_statement

	return p
}

func (s *Merge_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Merge_statementContext) MERGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMERGE, 0)
}

func (s *Merge_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTO, 0)
}

func (s *Merge_statementContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Merge_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSING, 0)
}

func (s *Merge_statementContext) Table_source() ITable_sourceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_sourceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_sourceContext)
}

func (s *Merge_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Merge_statementContext) Search_condition() ISearch_conditionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISearch_conditionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Merge_statementContext) Merge_matches() IMerge_matchesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMerge_matchesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMerge_matchesContext)
}

func (s *Merge_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Merge_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Merge_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterMerge_statement(s)
	}
}

func (s *Merge_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitMerge_statement(s)
	}
}

func (s *Merge_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitMerge_statement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Merge_statement() (localctx IMerge_statementContext) {
	this := p
	_ = this

	localctx = NewMerge_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SnowflakeParserRULE_merge_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1127)
		p.Match(SnowflakeParserMERGE)
	}
	{
		p.SetState(1128)
		p.Match(SnowflakeParserINTO)
	}
	{
		p.SetState(1129)
		p.Object_name()
	}
	{
		p.SetState(1130)
		p.Match(SnowflakeParserUSING)
	}
	{
		p.SetState(1131)
		p.Table_source()
	}
	{
		p.SetState(1132)
		p.Match(SnowflakeParserON)
	}
	{
		p.SetState(1133)
		p.search_condition(0)
	}
	{
		p.SetState(1134)
		p.Merge_matches()
	}



	return localctx
}


// IMerge_matchesContext is an interface to support dynamic dispatch.
type IMerge_matchesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMerge_matchesContext differentiates from other interfaces.
	IsMerge_matchesContext()
}

type Merge_matchesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMerge_matchesContext() *Merge_matchesContext {
	var p = new(Merge_matchesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_merge_matches
	return p
}

func (*Merge_matchesContext) IsMerge_matchesContext() {}

func NewMerge_matchesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Merge_matchesContext {
	var p = new(Merge_matchesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_merge_matches

	return p
}

func (s *Merge_matchesContext) GetParser() antlr.Parser { return s.parser }

func (s *Merge_matchesContext) WHEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWHEN, 0)
}

func (s *Merge_matchesContext) MATCHED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATCHED, 0)
}

func (s *Merge_matchesContext) THEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTHEN, 0)
}

func (s *Merge_matchesContext) Merge_update_delete() IMerge_update_deleteContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMerge_update_deleteContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMerge_update_deleteContext)
}

func (s *Merge_matchesContext) AND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAND, 0)
}

func (s *Merge_matchesContext) Search_condition() ISearch_conditionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISearch_conditionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Merge_matchesContext) NOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, 0)
}

func (s *Merge_matchesContext) Merge_insert() IMerge_insertContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMerge_insertContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMerge_insertContext)
}

func (s *Merge_matchesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Merge_matchesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Merge_matchesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterMerge_matches(s)
	}
}

func (s *Merge_matchesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitMerge_matches(s)
	}
}

func (s *Merge_matchesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitMerge_matches(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Merge_matches() (localctx IMerge_matchesContext) {
	this := p
	_ = this

	localctx = NewMerge_matchesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SnowflakeParserRULE_merge_matches)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1153)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1136)
			p.Match(SnowflakeParserWHEN)
		}
		{
			p.SetState(1137)
			p.Match(SnowflakeParserMATCHED)
		}
		p.SetState(1140)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAND {
			{
				p.SetState(1138)
				p.Match(SnowflakeParserAND)
			}
			{
				p.SetState(1139)
				p.search_condition(0)
			}

		}
		{
			p.SetState(1142)
			p.Match(SnowflakeParserTHEN)
		}
		{
			p.SetState(1143)
			p.Merge_update_delete()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1144)
			p.Match(SnowflakeParserWHEN)
		}
		{
			p.SetState(1145)
			p.Match(SnowflakeParserNOT)
		}
		{
			p.SetState(1146)
			p.Match(SnowflakeParserMATCHED)
		}
		p.SetState(1149)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAND {
			{
				p.SetState(1147)
				p.Match(SnowflakeParserAND)
			}
			{
				p.SetState(1148)
				p.search_condition(0)
			}

		}
		{
			p.SetState(1151)
			p.Match(SnowflakeParserTHEN)
		}
		{
			p.SetState(1152)
			p.Merge_insert()
		}

	}


	return localctx
}


// IMerge_update_deleteContext is an interface to support dynamic dispatch.
type IMerge_update_deleteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMerge_update_deleteContext differentiates from other interfaces.
	IsMerge_update_deleteContext()
}

type Merge_update_deleteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMerge_update_deleteContext() *Merge_update_deleteContext {
	var p = new(Merge_update_deleteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_merge_update_delete
	return p
}

func (*Merge_update_deleteContext) IsMerge_update_deleteContext() {}

func NewMerge_update_deleteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Merge_update_deleteContext {
	var p = new(Merge_update_deleteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_merge_update_delete

	return p
}

func (s *Merge_update_deleteContext) GetParser() antlr.Parser { return s.parser }

func (s *Merge_update_deleteContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUPDATE, 0)
}

func (s *Merge_update_deleteContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Merge_update_deleteContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Merge_update_deleteContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Merge_update_deleteContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Merge_update_deleteContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Merge_update_deleteContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Merge_update_deleteContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Merge_update_deleteContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDELETE, 0)
}

func (s *Merge_update_deleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Merge_update_deleteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Merge_update_deleteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterMerge_update_delete(s)
	}
}

func (s *Merge_update_deleteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitMerge_update_delete(s)
	}
}

func (s *Merge_update_deleteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitMerge_update_delete(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Merge_update_delete() (localctx IMerge_update_deleteContext) {
	this := p
	_ = this

	localctx = NewMerge_update_deleteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SnowflakeParserRULE_merge_update_delete)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1170)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserUPDATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1155)
			p.Match(SnowflakeParserUPDATE)
		}
		{
			p.SetState(1156)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(1157)
			p.Column_name()
		}
		{
			p.SetState(1158)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(1159)
			p.expr(0)
		}
		p.SetState(1166)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(1160)
				p.Column_name()
			}
			{
				p.SetState(1161)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(1162)
				p.expr(0)
			}


			p.SetState(1168)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case SnowflakeParserDELETE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1169)
			p.Match(SnowflakeParserDELETE)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IMerge_insertContext is an interface to support dynamic dispatch.
type IMerge_insertContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMerge_insertContext differentiates from other interfaces.
	IsMerge_insertContext()
}

type Merge_insertContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMerge_insertContext() *Merge_insertContext {
	var p = new(Merge_insertContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_merge_insert
	return p
}

func (*Merge_insertContext) IsMerge_insertContext() {}

func NewMerge_insertContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Merge_insertContext {
	var p = new(Merge_insertContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_merge_insert

	return p
}

func (s *Merge_insertContext) GetParser() antlr.Parser { return s.parser }

func (s *Merge_insertContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINSERT, 0)
}

func (s *Merge_insertContext) VALUES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVALUES, 0)
}

func (s *Merge_insertContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Merge_insertContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Merge_insertContext) Expr_list() IExpr_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Merge_insertContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Merge_insertContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Merge_insertContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Merge_insertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Merge_insertContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Merge_insertContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterMerge_insert(s)
	}
}

func (s *Merge_insertContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitMerge_insert(s)
	}
}

func (s *Merge_insertContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitMerge_insert(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Merge_insert() (localctx IMerge_insertContext) {
	this := p
	_ = this

	localctx = NewMerge_insertContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SnowflakeParserRULE_merge_insert)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1172)
		p.Match(SnowflakeParserINSERT)
	}
	p.SetState(1177)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLR_BRACKET {
		{
			p.SetState(1173)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(1174)
			p.Column_list()
		}
		{
			p.SetState(1175)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	{
		p.SetState(1179)
		p.Match(SnowflakeParserVALUES)
	}
	{
		p.SetState(1180)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(1181)
		p.Expr_list()
	}
	{
		p.SetState(1182)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IUpdate_statementContext is an interface to support dynamic dispatch.
type IUpdate_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdate_statementContext differentiates from other interfaces.
	IsUpdate_statementContext()
}

type Update_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_statementContext() *Update_statementContext {
	var p = new(Update_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_update_statement
	return p
}

func (*Update_statementContext) IsUpdate_statementContext() {}

func NewUpdate_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_statementContext {
	var p = new(Update_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_update_statement

	return p
}

func (s *Update_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUPDATE, 0)
}

func (s *Update_statementContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Update_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Update_statementContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Update_statementContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Update_statementContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Update_statementContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Update_statementContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Update_statementContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Update_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Update_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Update_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *Update_statementContext) Table_sources() ITable_sourcesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_sourcesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Update_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWHERE, 0)
}

func (s *Update_statementContext) Search_condition() ISearch_conditionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISearch_conditionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Update_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Update_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUpdate_statement(s)
	}
}

func (s *Update_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUpdate_statement(s)
	}
}

func (s *Update_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUpdate_statement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Update_statement() (localctx IUpdate_statementContext) {
	this := p
	_ = this

	localctx = NewUpdate_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SnowflakeParserRULE_update_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1184)
		p.Match(SnowflakeParserUPDATE)
	}
	{
		p.SetState(1185)
		p.Object_name()
	}
	{
		p.SetState(1186)
		p.Match(SnowflakeParserSET)
	}
	{
		p.SetState(1187)
		p.Column_name()
	}
	{
		p.SetState(1188)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(1189)
		p.expr(0)
	}
	p.SetState(1197)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(1190)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(1191)
			p.Column_name()
		}
		{
			p.SetState(1192)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(1193)
			p.expr(0)
		}


		p.SetState(1199)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1202)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserFROM {
		{
			p.SetState(1200)
			p.Match(SnowflakeParserFROM)
		}
		{
			p.SetState(1201)
			p.Table_sources()
		}

	}
	p.SetState(1206)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserWHERE {
		{
			p.SetState(1204)
			p.Match(SnowflakeParserWHERE)
		}
		{
			p.SetState(1205)
			p.search_condition(0)
		}

	}



	return localctx
}


// ITable_or_queryContext is an interface to support dynamic dispatch.
type ITable_or_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_or_queryContext differentiates from other interfaces.
	IsTable_or_queryContext()
}

type Table_or_queryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_queryContext() *Table_or_queryContext {
	var p = new(Table_or_queryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_table_or_query
	return p
}

func (*Table_or_queryContext) IsTable_or_queryContext() {}

func NewTable_or_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_queryContext {
	var p = new(Table_or_queryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_table_or_query

	return p
}

func (s *Table_or_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_queryContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Table_or_queryContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Table_or_queryContext) Subquery() ISubqueryContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubqueryContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Table_or_queryContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Table_or_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_or_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTable_or_query(s)
	}
}

func (s *Table_or_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTable_or_query(s)
	}
}

func (s *Table_or_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTable_or_query(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Table_or_query() (localctx ITable_or_queryContext) {
	this := p
	_ = this

	localctx = NewTable_or_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SnowflakeParserRULE_table_or_query)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1213)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserINT, SnowflakeParserSTAGE, SnowflakeParserBIGINT, SnowflakeParserDOUBLE_QUOTE_ID, SnowflakeParserDOUBLE_QUOTE_BLANK, SnowflakeParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1208)
			p.Object_name()
		}


	case SnowflakeParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1209)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(1210)
			p.Subquery()
		}
		{
			p.SetState(1211)
			p.Match(SnowflakeParserRR_BRACKET)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IDelete_statementContext is an interface to support dynamic dispatch.
type IDelete_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelete_statementContext differentiates from other interfaces.
	IsDelete_statementContext()
}

type Delete_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelete_statementContext() *Delete_statementContext {
	var p = new(Delete_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_delete_statement
	return p
}

func (*Delete_statementContext) IsDelete_statementContext() {}

func NewDelete_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_statementContext {
	var p = new(Delete_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_delete_statement

	return p
}

func (s *Delete_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_statementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDELETE, 0)
}

func (s *Delete_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *Delete_statementContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Delete_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSING, 0)
}

func (s *Delete_statementContext) AllTable_or_query() []ITable_or_queryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_or_queryContext); ok {
			len++
		}
	}

	tst := make([]ITable_or_queryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_or_queryContext); ok {
			tst[i] = t.(ITable_or_queryContext)
			i++
		}
	}

	return tst
}

func (s *Delete_statementContext) Table_or_query(i int) ITable_or_queryContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_queryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_queryContext)
}

func (s *Delete_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWHERE, 0)
}

func (s *Delete_statementContext) Search_condition() ISearch_conditionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISearch_conditionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Delete_statementContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, 0)
}

func (s *Delete_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Delete_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDelete_statement(s)
	}
}

func (s *Delete_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDelete_statement(s)
	}
}

func (s *Delete_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDelete_statement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Delete_statement() (localctx IDelete_statementContext) {
	this := p
	_ = this

	localctx = NewDelete_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SnowflakeParserRULE_delete_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1215)
		p.Match(SnowflakeParserDELETE)
	}
	{
		p.SetState(1216)
		p.Match(SnowflakeParserFROM)
	}
	{
		p.SetState(1217)
		p.Object_name()
	}
	p.SetState(1224)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserUSING {
		{
			p.SetState(1218)
			p.Match(SnowflakeParserUSING)
		}
		{
			p.SetState(1219)
			p.Table_or_query()
		}
		p.SetState(1222)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOMMA {
			{
				p.SetState(1220)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(1221)
				p.Table_or_query()
			}

		}

	}
	p.SetState(1228)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserWHERE {
		{
			p.SetState(1226)
			p.Match(SnowflakeParserWHERE)
		}
		{
			p.SetState(1227)
			p.search_condition(0)
		}

	}



	return localctx
}


// IValues_builderContext is an interface to support dynamic dispatch.
type IValues_builderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValues_builderContext differentiates from other interfaces.
	IsValues_builderContext()
}

type Values_builderContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValues_builderContext() *Values_builderContext {
	var p = new(Values_builderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_values_builder
	return p
}

func (*Values_builderContext) IsValues_builderContext() {}

func NewValues_builderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Values_builderContext {
	var p = new(Values_builderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_values_builder

	return p
}

func (s *Values_builderContext) GetParser() antlr.Parser { return s.parser }

func (s *Values_builderContext) VALUES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVALUES, 0)
}

func (s *Values_builderContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Values_builderContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Values_builderContext) AllExpr_list() []IExpr_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpr_listContext); ok {
			len++
		}
	}

	tst := make([]IExpr_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpr_listContext); ok {
			tst[i] = t.(IExpr_listContext)
			i++
		}
	}

	return tst
}

func (s *Values_builderContext) Expr_list(i int) IExpr_listContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Values_builderContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Values_builderContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Values_builderContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, 0)
}

func (s *Values_builderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Values_builderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Values_builderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterValues_builder(s)
	}
}

func (s *Values_builderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitValues_builder(s)
	}
}

func (s *Values_builderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitValues_builder(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Values_builder() (localctx IValues_builderContext) {
	this := p
	_ = this

	localctx = NewValues_builderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SnowflakeParserRULE_values_builder)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1230)
		p.Match(SnowflakeParserVALUES)
	}
	{
		p.SetState(1231)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(1232)
		p.Expr_list()
	}
	{
		p.SetState(1233)
		p.Match(SnowflakeParserRR_BRACKET)
	}
	p.SetState(1239)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOMMA {
		{
			p.SetState(1234)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(1235)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(1236)
			p.Expr_list()
		}
		{
			p.SetState(1237)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}



	return localctx
}


// IOther_commandContext is an interface to support dynamic dispatch.
type IOther_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOther_commandContext differentiates from other interfaces.
	IsOther_commandContext()
}

type Other_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOther_commandContext() *Other_commandContext {
	var p = new(Other_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_other_command
	return p
}

func (*Other_commandContext) IsOther_commandContext() {}

func NewOther_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Other_commandContext {
	var p = new(Other_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_other_command

	return p
}

func (s *Other_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Other_commandContext) Copy_into_table() ICopy_into_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_into_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_into_tableContext)
}

func (s *Other_commandContext) Copy_into_location() ICopy_into_locationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_into_locationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_into_locationContext)
}

func (s *Other_commandContext) Comment() ICommentContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommentContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommentContext)
}

func (s *Other_commandContext) Commit() ICommitContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommitContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommitContext)
}

func (s *Other_commandContext) Execute_immediate() IExecute_immediateContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExecute_immediateContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExecute_immediateContext)
}

func (s *Other_commandContext) Execute_task() IExecute_taskContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExecute_taskContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExecute_taskContext)
}

func (s *Other_commandContext) Explain() IExplainContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExplainContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExplainContext)
}

func (s *Other_commandContext) Get() IGetContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGetContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGetContext)
}

func (s *Other_commandContext) Grant_ownership() IGrant_ownershipContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrant_ownershipContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrant_ownershipContext)
}

func (s *Other_commandContext) Grant_to_role() IGrant_to_roleContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrant_to_roleContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrant_to_roleContext)
}

func (s *Other_commandContext) Grant_to_share() IGrant_to_shareContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrant_to_shareContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrant_to_shareContext)
}

func (s *Other_commandContext) Grant_role() IGrant_roleContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrant_roleContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrant_roleContext)
}

func (s *Other_commandContext) List() IListContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListContext)
}

func (s *Other_commandContext) Put() IPutContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPutContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPutContext)
}

func (s *Other_commandContext) Remove() IRemoveContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRemoveContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRemoveContext)
}

func (s *Other_commandContext) Revoke_from_role() IRevoke_from_roleContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRevoke_from_roleContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRevoke_from_roleContext)
}

func (s *Other_commandContext) Revoke_from_share() IRevoke_from_shareContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRevoke_from_shareContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRevoke_from_shareContext)
}

func (s *Other_commandContext) Revoke_role() IRevoke_roleContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRevoke_roleContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRevoke_roleContext)
}

func (s *Other_commandContext) Rollback() IRollbackContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRollbackContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRollbackContext)
}

func (s *Other_commandContext) Set() ISetContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetContext)
}

func (s *Other_commandContext) Truncate_materialized_view() ITruncate_materialized_viewContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITruncate_materialized_viewContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITruncate_materialized_viewContext)
}

func (s *Other_commandContext) Truncate_table() ITruncate_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITruncate_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITruncate_tableContext)
}

func (s *Other_commandContext) Unset() IUnsetContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnsetContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnsetContext)
}

func (s *Other_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Other_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Other_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterOther_command(s)
	}
}

func (s *Other_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitOther_command(s)
	}
}

func (s *Other_commandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitOther_command(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Other_command() (localctx IOther_commandContext) {
	this := p
	_ = this

	localctx = NewOther_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SnowflakeParserRULE_other_command)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1264)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1241)
			p.Copy_into_table()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1242)
			p.Copy_into_location()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1243)
			p.Comment()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1244)
			p.Commit()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1245)
			p.Execute_immediate()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1246)
			p.Execute_task()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1247)
			p.Explain()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1248)
			p.Get()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1249)
			p.Grant_ownership()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1250)
			p.Grant_to_role()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1251)
			p.Grant_to_share()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1252)
			p.Grant_role()
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1253)
			p.List()
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1254)
			p.Put()
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1255)
			p.Remove()
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1256)
			p.Revoke_from_role()
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1257)
			p.Revoke_from_share()
		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1258)
			p.Revoke_role()
		}


	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1259)
			p.Rollback()
		}


	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1260)
			p.Set()
		}


	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1261)
			p.Truncate_materialized_view()
		}


	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1262)
			p.Truncate_table()
		}


	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1263)
			p.Unset()
		}

	}


	return localctx
}


// ICopy_into_tableContext is an interface to support dynamic dispatch.
type ICopy_into_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCopy_into_tableContext differentiates from other interfaces.
	IsCopy_into_tableContext()
}

type Copy_into_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCopy_into_tableContext() *Copy_into_tableContext {
	var p = new(Copy_into_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_copy_into_table
	return p
}

func (*Copy_into_tableContext) IsCopy_into_tableContext() {}

func NewCopy_into_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_into_tableContext {
	var p = new(Copy_into_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_copy_into_table

	return p
}

func (s *Copy_into_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_into_tableContext) COPY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOPY, 0)
}

func (s *Copy_into_tableContext) INTO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTO, 0)
}

func (s *Copy_into_tableContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Copy_into_tableContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *Copy_into_tableContext) Internal_stage() IInternal_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInternal_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInternal_stageContext)
}

func (s *Copy_into_tableContext) External_stage() IExternal_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternal_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternal_stageContext)
}

func (s *Copy_into_tableContext) External_location() IExternal_locationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternal_locationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternal_locationContext)
}

func (s *Copy_into_tableContext) Files() IFilesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFilesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFilesContext)
}

func (s *Copy_into_tableContext) Pattern() IPatternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *Copy_into_tableContext) File_format() IFile_formatContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFile_formatContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFile_formatContext)
}

func (s *Copy_into_tableContext) AllCopy_options() []ICopy_optionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICopy_optionsContext); ok {
			len++
		}
	}

	tst := make([]ICopy_optionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICopy_optionsContext); ok {
			tst[i] = t.(ICopy_optionsContext)
			i++
		}
	}

	return tst
}

func (s *Copy_into_tableContext) Copy_options(i int) ICopy_optionsContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_optionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_optionsContext)
}

func (s *Copy_into_tableContext) VALIDATION_MODE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVALIDATION_MODE, 0)
}

func (s *Copy_into_tableContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Copy_into_tableContext) RETURN_N_ROWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRETURN_N_ROWS, 0)
}

func (s *Copy_into_tableContext) RETURN_ERRORS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRETURN_ERRORS, 0)
}

func (s *Copy_into_tableContext) RETURN_ALL_ERRORS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRETURN_ALL_ERRORS, 0)
}

func (s *Copy_into_tableContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Copy_into_tableContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Copy_into_tableContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Copy_into_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_into_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Copy_into_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCopy_into_table(s)
	}
}

func (s *Copy_into_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCopy_into_table(s)
	}
}

func (s *Copy_into_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCopy_into_table(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Copy_into_table() (localctx ICopy_into_tableContext) {
	this := p
	_ = this

	localctx = NewCopy_into_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SnowflakeParserRULE_copy_into_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1319)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1266)
			p.Match(SnowflakeParserCOPY)
		}
		{
			p.SetState(1267)
			p.Match(SnowflakeParserINTO)
		}
		{
			p.SetState(1268)
			p.Object_name()
		}
		{
			p.SetState(1269)
			p.Match(SnowflakeParserFROM)
		}
		p.SetState(1273)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1270)
				p.Internal_stage()
			}


		case 2:
			{
				p.SetState(1271)
				p.External_stage()
			}


		case 3:
			{
				p.SetState(1272)
				p.External_location()
			}

		}
		p.SetState(1276)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFILES {
			{
				p.SetState(1275)
				p.Files()
			}

		}
		p.SetState(1279)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserPATTERN {
			{
				p.SetState(1278)
				p.Pattern()
			}

		}
		p.SetState(1282)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFILE_FORMAT {
			{
				p.SetState(1281)
				p.File_format()
			}

		}
		p.SetState(1287)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCASE_INSENSITIVE || _la == SnowflakeParserENFORCE_LENGTH || _la == SnowflakeParserFORCE || _la == SnowflakeParserMATCH_BY_COLUMN_NAME || _la == SnowflakeParserNONE || _la == SnowflakeParserON_ERROR || _la == SnowflakeParserPURGE || _la == SnowflakeParserRETURN_FAILED_ONLY || _la == SnowflakeParserSIZE_LIMIT || _la == SnowflakeParserTRUNCATECOLUMNS {
			{
				p.SetState(1284)
				p.Copy_options()
			}


			p.SetState(1289)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1293)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserVALIDATION_MODE {
			{
				p.SetState(1290)
				p.Match(SnowflakeParserVALIDATION_MODE)
			}
			{
				p.SetState(1291)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(1292)
				_la = p.GetTokenStream().LA(1)

				if !((int64((_la - 682)) & ^0x3f) == 0 && ((int64(1) << (_la - 682)) & 11) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1295)
			p.Match(SnowflakeParserCOPY)
		}
		{
			p.SetState(1296)
			p.Match(SnowflakeParserINTO)
		}
		{
			p.SetState(1297)
			p.Object_name()
		}
		p.SetState(1302)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserLR_BRACKET {
			{
				p.SetState(1298)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(1299)
				p.Column_list()
			}
			{
				p.SetState(1300)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(1305)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFILES {
			{
				p.SetState(1304)
				p.Files()
			}

		}
		p.SetState(1308)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserPATTERN {
			{
				p.SetState(1307)
				p.Pattern()
			}

		}
		p.SetState(1311)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFILE_FORMAT {
			{
				p.SetState(1310)
				p.File_format()
			}

		}
		p.SetState(1316)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCASE_INSENSITIVE || _la == SnowflakeParserENFORCE_LENGTH || _la == SnowflakeParserFORCE || _la == SnowflakeParserMATCH_BY_COLUMN_NAME || _la == SnowflakeParserNONE || _la == SnowflakeParserON_ERROR || _la == SnowflakeParserPURGE || _la == SnowflakeParserRETURN_FAILED_ONLY || _la == SnowflakeParserSIZE_LIMIT || _la == SnowflakeParserTRUNCATECOLUMNS {
			{
				p.SetState(1313)
				p.Copy_options()
			}


			p.SetState(1318)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}


	return localctx
}


// IExternal_locationContext is an interface to support dynamic dispatch.
type IExternal_locationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExternal_locationContext differentiates from other interfaces.
	IsExternal_locationContext()
}

type External_locationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternal_locationContext() *External_locationContext {
	var p = new(External_locationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_external_location
	return p
}

func (*External_locationContext) IsExternal_locationContext() {}

func NewExternal_locationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *External_locationContext {
	var p = new(External_locationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_external_location

	return p
}

func (s *External_locationContext) GetParser() antlr.Parser { return s.parser }

func (s *External_locationContext) S3_PATH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserS3_PATH, 0)
}

func (s *External_locationContext) GCS_PATH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGCS_PATH, 0)
}

func (s *External_locationContext) AZURE_PATH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_PATH, 0)
}

func (s *External_locationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *External_locationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *External_locationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExternal_location(s)
	}
}

func (s *External_locationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExternal_location(s)
	}
}

func (s *External_locationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExternal_location(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) External_location() (localctx IExternal_locationContext) {
	this := p
	_ = this

	localctx = NewExternal_locationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SnowflakeParserRULE_external_location)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1321)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la - 1038)) & ^0x3f) == 0 && ((int64(1) << (_la - 1038)) & 7) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IFilesContext is an interface to support dynamic dispatch.
type IFilesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFilesContext differentiates from other interfaces.
	IsFilesContext()
}

type FilesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilesContext() *FilesContext {
	var p = new(FilesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_files
	return p
}

func (*FilesContext) IsFilesContext() {}

func NewFilesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FilesContext {
	var p = new(FilesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_files

	return p
}

func (s *FilesContext) GetParser() antlr.Parser { return s.parser }

func (s *FilesContext) FILES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILES, 0)
}

func (s *FilesContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *FilesContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *FilesContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *FilesContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *FilesContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *FilesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *FilesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *FilesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FilesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *FilesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFiles(s)
	}
}

func (s *FilesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFiles(s)
	}
}

func (s *FilesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFiles(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Files() (localctx IFilesContext) {
	this := p
	_ = this

	localctx = NewFilesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SnowflakeParserRULE_files)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1323)
		p.Match(SnowflakeParserFILES)
	}
	{
		p.SetState(1324)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(1325)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(1326)
		p.String_()
	}
	p.SetState(1331)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(1327)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(1328)
			p.String_()
		}


		p.SetState(1333)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1334)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IFile_formatContext is an interface to support dynamic dispatch.
type IFile_formatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFile_formatContext differentiates from other interfaces.
	IsFile_formatContext()
}

type File_formatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFile_formatContext() *File_formatContext {
	var p = new(File_formatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_file_format
	return p
}

func (*File_formatContext) IsFile_formatContext() {}

func NewFile_formatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_formatContext {
	var p = new(File_formatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_file_format

	return p
}

func (s *File_formatContext) GetParser() antlr.Parser { return s.parser }

func (s *File_formatContext) FILE_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE_FORMAT, 0)
}

func (s *File_formatContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *File_formatContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *File_formatContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *File_formatContext) Format_name() IFormat_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormat_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormat_nameContext)
}

func (s *File_formatContext) Format_type() IFormat_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormat_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormat_typeContext)
}

func (s *File_formatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_formatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *File_formatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFile_format(s)
	}
}

func (s *File_formatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFile_format(s)
	}
}

func (s *File_formatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFile_format(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) File_format() (localctx IFile_formatContext) {
	this := p
	_ = this

	localctx = NewFile_formatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SnowflakeParserRULE_file_format)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1336)
		p.Match(SnowflakeParserFILE_FORMAT)
	}
	{
		p.SetState(1337)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(1338)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(1341)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserFORMAT_NAME:
		{
			p.SetState(1339)
			p.Format_name()
		}


	case SnowflakeParserTYPE:
		{
			p.SetState(1340)
			p.Format_type()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1343)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IFormat_nameContext is an interface to support dynamic dispatch.
type IFormat_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormat_nameContext differentiates from other interfaces.
	IsFormat_nameContext()
}

type Format_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormat_nameContext() *Format_nameContext {
	var p = new(Format_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_format_name
	return p
}

func (*Format_nameContext) IsFormat_nameContext() {}

func NewFormat_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Format_nameContext {
	var p = new(Format_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_format_name

	return p
}

func (s *Format_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Format_nameContext) FORMAT_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORMAT_NAME, 0)
}

func (s *Format_nameContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Format_nameContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Format_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Format_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Format_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFormat_name(s)
	}
}

func (s *Format_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFormat_name(s)
	}
}

func (s *Format_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFormat_name(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Format_name() (localctx IFormat_nameContext) {
	this := p
	_ = this

	localctx = NewFormat_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SnowflakeParserRULE_format_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1345)
		p.Match(SnowflakeParserFORMAT_NAME)
	}
	{
		p.SetState(1346)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(1347)
		p.String_()
	}



	return localctx
}


// IFormat_typeContext is an interface to support dynamic dispatch.
type IFormat_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormat_typeContext differentiates from other interfaces.
	IsFormat_typeContext()
}

type Format_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormat_typeContext() *Format_typeContext {
	var p = new(Format_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_format_type
	return p
}

func (*Format_typeContext) IsFormat_typeContext() {}

func NewFormat_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Format_typeContext {
	var p = new(Format_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_format_type

	return p
}

func (s *Format_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Format_typeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Format_typeContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Format_typeContext) CSV() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCSV, 0)
}

func (s *Format_typeContext) JSON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserJSON, 0)
}

func (s *Format_typeContext) AVRO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAVRO, 0)
}

func (s *Format_typeContext) ORC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserORC, 0)
}

func (s *Format_typeContext) PARQUET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPARQUET, 0)
}

func (s *Format_typeContext) XML() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserXML, 0)
}

func (s *Format_typeContext) AllFormat_type_options() []IFormat_type_optionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFormat_type_optionsContext); ok {
			len++
		}
	}

	tst := make([]IFormat_type_optionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFormat_type_optionsContext); ok {
			tst[i] = t.(IFormat_type_optionsContext)
			i++
		}
	}

	return tst
}

func (s *Format_typeContext) Format_type_options(i int) IFormat_type_optionsContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormat_type_optionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormat_type_optionsContext)
}

func (s *Format_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Format_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Format_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFormat_type(s)
	}
}

func (s *Format_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFormat_type(s)
	}
}

func (s *Format_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFormat_type(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Format_type() (localctx IFormat_typeContext) {
	this := p
	_ = this

	localctx = NewFormat_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SnowflakeParserRULE_format_type)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1349)
		p.Match(SnowflakeParserTYPE)
	}
	{
		p.SetState(1350)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(1351)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserAVRO || _la == SnowflakeParserCSV || _la == SnowflakeParserJSON || _la == SnowflakeParserORC || _la == SnowflakeParserPARQUET || _la == SnowflakeParserXML) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1355)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserALLOW_DUPLICATE || (int64((_la - 92)) & ^0x3f) == 0 && ((int64(1) << (_la - 92)) & 9221) != 0 || (int64((_la - 159)) & ^0x3f) == 0 && ((int64(1) << (_la - 159)) & 4611694814520410113) != 0 || (int64((_la - 231)) & ^0x3f) == 0 && ((int64(1) << (_la - 231)) & 214752837635) != 0 || (int64((_la - 301)) & ^0x3f) == 0 && ((int64(1) << (_la - 301)) & 144117387099111435) != 0 || _la == SnowflakeParserLZO || _la == SnowflakeParserNONE || _la == SnowflakeParserNULL_IF || (int64((_la - 591)) & ^0x3f) == 0 && ((int64(1) << (_la - 591)) & 1125917086711809) != 0 || _la == SnowflakeParserREPLACE_INVALID_CHARACTERS || (int64((_la - 777)) & ^0x3f) == 0 && ((int64(1) << (_la - 777)) & 4035225266123964627) != 0 || (int64((_la - 870)) & ^0x3f) == 0 && ((int64(1) << (_la - 870)) & 34359738497) != 0 || _la == SnowflakeParserUTF8 || _la == SnowflakeParserZSTD {
		{
			p.SetState(1352)
			p.Format_type_options()
		}


		p.SetState(1357)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IStage_file_formatContext is an interface to support dynamic dispatch.
type IStage_file_formatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStage_file_formatContext differentiates from other interfaces.
	IsStage_file_formatContext()
}

type Stage_file_formatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStage_file_formatContext() *Stage_file_formatContext {
	var p = new(Stage_file_formatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_stage_file_format
	return p
}

func (*Stage_file_formatContext) IsStage_file_formatContext() {}

func NewStage_file_formatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stage_file_formatContext {
	var p = new(Stage_file_formatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_stage_file_format

	return p
}

func (s *Stage_file_formatContext) GetParser() antlr.Parser { return s.parser }

func (s *Stage_file_formatContext) STAGE_FILE_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE_FILE_FORMAT, 0)
}

func (s *Stage_file_formatContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Stage_file_formatContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Stage_file_formatContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Stage_file_formatContext) FORMAT_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORMAT_NAME, 0)
}

func (s *Stage_file_formatContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Stage_file_formatContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Stage_file_formatContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Stage_file_formatContext) CSV() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCSV, 0)
}

func (s *Stage_file_formatContext) JSON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserJSON, 0)
}

func (s *Stage_file_formatContext) AVRO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAVRO, 0)
}

func (s *Stage_file_formatContext) ORC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserORC, 0)
}

func (s *Stage_file_formatContext) PARQUET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPARQUET, 0)
}

func (s *Stage_file_formatContext) XML() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserXML, 0)
}

func (s *Stage_file_formatContext) AllFormat_type_options() []IFormat_type_optionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFormat_type_optionsContext); ok {
			len++
		}
	}

	tst := make([]IFormat_type_optionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFormat_type_optionsContext); ok {
			tst[i] = t.(IFormat_type_optionsContext)
			i++
		}
	}

	return tst
}

func (s *Stage_file_formatContext) Format_type_options(i int) IFormat_type_optionsContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormat_type_optionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormat_type_optionsContext)
}

func (s *Stage_file_formatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stage_file_formatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Stage_file_formatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterStage_file_format(s)
	}
}

func (s *Stage_file_formatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitStage_file_format(s)
	}
}

func (s *Stage_file_formatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitStage_file_format(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Stage_file_format() (localctx IStage_file_formatContext) {
	this := p
	_ = this

	localctx = NewStage_file_formatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SnowflakeParserRULE_stage_file_format)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1374)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserSTAGE_FILE_FORMAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1358)
			p.Match(SnowflakeParserSTAGE_FILE_FORMAT)
		}
		{
			p.SetState(1359)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(1360)
			p.Match(SnowflakeParserLR_BRACKET)
		}

		{
			p.SetState(1361)
			p.Match(SnowflakeParserFORMAT_NAME)
		}
		{
			p.SetState(1362)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(1363)
			p.String_()
		}



	case SnowflakeParserTYPE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1364)
			p.Match(SnowflakeParserTYPE)
		}
		{
			p.SetState(1365)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(1366)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserAVRO || _la == SnowflakeParserCSV || _la == SnowflakeParserJSON || _la == SnowflakeParserORC || _la == SnowflakeParserPARQUET || _la == SnowflakeParserXML) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1368)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SnowflakeParserALLOW_DUPLICATE || (int64((_la - 92)) & ^0x3f) == 0 && ((int64(1) << (_la - 92)) & 9221) != 0 || (int64((_la - 159)) & ^0x3f) == 0 && ((int64(1) << (_la - 159)) & 4611694814520410113) != 0 || (int64((_la - 231)) & ^0x3f) == 0 && ((int64(1) << (_la - 231)) & 214752837635) != 0 || (int64((_la - 301)) & ^0x3f) == 0 && ((int64(1) << (_la - 301)) & 144117387099111435) != 0 || _la == SnowflakeParserLZO || _la == SnowflakeParserNONE || _la == SnowflakeParserNULL_IF || (int64((_la - 591)) & ^0x3f) == 0 && ((int64(1) << (_la - 591)) & 1125917086711809) != 0 || _la == SnowflakeParserREPLACE_INVALID_CHARACTERS || (int64((_la - 777)) & ^0x3f) == 0 && ((int64(1) << (_la - 777)) & 4035225266123964627) != 0 || (int64((_la - 870)) & ^0x3f) == 0 && ((int64(1) << (_la - 870)) & 34359738497) != 0 || _la == SnowflakeParserUTF8 || _la == SnowflakeParserZSTD {
			{
				p.SetState(1367)
				p.Format_type_options()
			}


			p.SetState(1370)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		{
			p.SetState(1372)
			p.Match(SnowflakeParserRR_BRACKET)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICopy_into_locationContext is an interface to support dynamic dispatch.
type ICopy_into_locationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCopy_into_locationContext differentiates from other interfaces.
	IsCopy_into_locationContext()
}

type Copy_into_locationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCopy_into_locationContext() *Copy_into_locationContext {
	var p = new(Copy_into_locationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_copy_into_location
	return p
}

func (*Copy_into_locationContext) IsCopy_into_locationContext() {}

func NewCopy_into_locationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_into_locationContext {
	var p = new(Copy_into_locationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_copy_into_location

	return p
}

func (s *Copy_into_locationContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_into_locationContext) COPY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOPY, 0)
}

func (s *Copy_into_locationContext) INTO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTO, 0)
}

func (s *Copy_into_locationContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *Copy_into_locationContext) Internal_stage() IInternal_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInternal_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInternal_stageContext)
}

func (s *Copy_into_locationContext) External_stage() IExternal_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternal_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternal_stageContext)
}

func (s *Copy_into_locationContext) External_location() IExternal_locationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternal_locationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternal_locationContext)
}

func (s *Copy_into_locationContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Copy_into_locationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Copy_into_locationContext) Query_statement() IQuery_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_statementContext)
}

func (s *Copy_into_locationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Copy_into_locationContext) Partition_by() IPartition_byContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_byContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_byContext)
}

func (s *Copy_into_locationContext) File_format() IFile_formatContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFile_formatContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFile_formatContext)
}

func (s *Copy_into_locationContext) Copy_options() ICopy_optionsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_optionsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_optionsContext)
}

func (s *Copy_into_locationContext) VALIDATION_MODE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVALIDATION_MODE, 0)
}

func (s *Copy_into_locationContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Copy_into_locationContext) RETURN_ROWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRETURN_ROWS, 0)
}

func (s *Copy_into_locationContext) HEADER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserHEADER, 0)
}

func (s *Copy_into_locationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_into_locationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Copy_into_locationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCopy_into_location(s)
	}
}

func (s *Copy_into_locationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCopy_into_location(s)
	}
}

func (s *Copy_into_locationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCopy_into_location(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Copy_into_location() (localctx ICopy_into_locationContext) {
	this := p
	_ = this

	localctx = NewCopy_into_locationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SnowflakeParserRULE_copy_into_location)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1376)
		p.Match(SnowflakeParserCOPY)
	}
	{
		p.SetState(1377)
		p.Match(SnowflakeParserINTO)
	}
	p.SetState(1381)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1378)
			p.Internal_stage()
		}


	case 2:
		{
			p.SetState(1379)
			p.External_stage()
		}


	case 3:
		{
			p.SetState(1380)
			p.External_location()
		}

	}
	{
		p.SetState(1383)
		p.Match(SnowflakeParserFROM)
	}
	p.SetState(1389)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserINT, SnowflakeParserSTAGE, SnowflakeParserBIGINT, SnowflakeParserDOUBLE_QUOTE_ID, SnowflakeParserDOUBLE_QUOTE_BLANK, SnowflakeParserID:
		{
			p.SetState(1384)
			p.Object_name()
		}


	case SnowflakeParserLR_BRACKET:
		{
			p.SetState(1385)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(1386)
			p.Query_statement()
		}
		{
			p.SetState(1387)
			p.Match(SnowflakeParserRR_BRACKET)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1392)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserPARTITION {
		{
			p.SetState(1391)
			p.Partition_by()
		}

	}
	p.SetState(1395)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserFILE_FORMAT {
		{
			p.SetState(1394)
			p.File_format()
		}

	}
	p.SetState(1398)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCASE_INSENSITIVE || _la == SnowflakeParserENFORCE_LENGTH || _la == SnowflakeParserFORCE || _la == SnowflakeParserMATCH_BY_COLUMN_NAME || _la == SnowflakeParserNONE || _la == SnowflakeParserON_ERROR || _la == SnowflakeParserPURGE || _la == SnowflakeParserRETURN_FAILED_ONLY || _la == SnowflakeParserSIZE_LIMIT || _la == SnowflakeParserTRUNCATECOLUMNS {
		{
			p.SetState(1397)
			p.Copy_options()
		}

	}
	p.SetState(1403)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserVALIDATION_MODE {
		{
			p.SetState(1400)
			p.Match(SnowflakeParserVALIDATION_MODE)
		}
		{
			p.SetState(1401)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(1402)
			p.Match(SnowflakeParserRETURN_ROWS)
		}

	}
	p.SetState(1406)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserHEADER {
		{
			p.SetState(1405)
			p.Match(SnowflakeParserHEADER)
		}

	}



	return localctx
}


// ICommentContext is an interface to support dynamic dispatch.
type ICommentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommentContext differentiates from other interfaces.
	IsCommentContext()
}

type CommentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommentContext() *CommentContext {
	var p = new(CommentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_comment
	return p
}

func (*CommentContext) IsCommentContext() {}

func NewCommentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommentContext {
	var p = new(CommentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_comment

	return p
}

func (s *CommentContext) GetParser() antlr.Parser { return s.parser }

func (s *CommentContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *CommentContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *CommentContext) Comment_object_type() IComment_object_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_object_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_object_typeContext)
}

func (s *CommentContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *CommentContext) IS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIS, 0)
}

func (s *CommentContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *CommentContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *CommentContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLUMN, 0)
}

func (s *CommentContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *CommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CommentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterComment(s)
	}
}

func (s *CommentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitComment(s)
	}
}

func (s *CommentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitComment(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Comment() (localctx ICommentContext) {
	this := p
	_ = this

	localctx = NewCommentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SnowflakeParserRULE_comment)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1428)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1408)
			p.Match(SnowflakeParserCOMMENT)
		}
		p.SetState(1410)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(1409)
				p.If_exists()
			}

		}
		{
			p.SetState(1412)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(1413)
			p.Comment_object_type()
		}
		{
			p.SetState(1414)
			p.Object_name()
		}
		{
			p.SetState(1415)
			p.Match(SnowflakeParserIS)
		}
		{
			p.SetState(1416)
			p.String_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1418)
			p.Match(SnowflakeParserCOMMENT)
		}
		p.SetState(1420)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(1419)
				p.If_exists()
			}

		}
		{
			p.SetState(1422)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(1423)
			p.Match(SnowflakeParserCOLUMN)
		}
		{
			p.SetState(1424)
			p.Column_name()
		}
		{
			p.SetState(1425)
			p.Match(SnowflakeParserIS)
		}
		{
			p.SetState(1426)
			p.String_()
		}

	}


	return localctx
}


// IComment_object_typeContext is an interface to support dynamic dispatch.
type IComment_object_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComment_object_typeContext differentiates from other interfaces.
	IsComment_object_typeContext()
}

type Comment_object_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComment_object_typeContext() *Comment_object_typeContext {
	var p = new(Comment_object_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_comment_object_type
	return p
}

func (*Comment_object_typeContext) IsComment_object_typeContext() {}

func NewComment_object_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comment_object_typeContext {
	var p = new(Comment_object_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_comment_object_type

	return p
}

func (s *Comment_object_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Comment_object_typeContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Comment_object_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comment_object_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Comment_object_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterComment_object_type(s)
	}
}

func (s *Comment_object_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitComment_object_type(s)
	}
}

func (s *Comment_object_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitComment_object_type(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Comment_object_type() (localctx IComment_object_typeContext) {
	this := p
	_ = this

	localctx = NewComment_object_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SnowflakeParserRULE_comment_object_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1430)
		p.Match(SnowflakeParserTABLE)
	}



	return localctx
}


// ICommitContext is an interface to support dynamic dispatch.
type ICommitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommitContext differentiates from other interfaces.
	IsCommitContext()
}

type CommitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommitContext() *CommitContext {
	var p = new(CommitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_commit
	return p
}

func (*CommitContext) IsCommitContext() {}

func NewCommitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommitContext {
	var p = new(CommitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_commit

	return p
}

func (s *CommitContext) GetParser() antlr.Parser { return s.parser }

func (s *CommitContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMIT, 0)
}

func (s *CommitContext) WORK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWORK, 0)
}

func (s *CommitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CommitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCommit(s)
	}
}

func (s *CommitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCommit(s)
	}
}

func (s *CommitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCommit(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Commit() (localctx ICommitContext) {
	this := p
	_ = this

	localctx = NewCommitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SnowflakeParserRULE_commit)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1432)
		p.Match(SnowflakeParserCOMMIT)
	}
	p.SetState(1434)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserWORK {
		{
			p.SetState(1433)
			p.Match(SnowflakeParserWORK)
		}

	}



	return localctx
}


// IExecute_immediateContext is an interface to support dynamic dispatch.
type IExecute_immediateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecute_immediateContext differentiates from other interfaces.
	IsExecute_immediateContext()
}

type Execute_immediateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecute_immediateContext() *Execute_immediateContext {
	var p = new(Execute_immediateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_execute_immediate
	return p
}

func (*Execute_immediateContext) IsExecute_immediateContext() {}

func NewExecute_immediateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_immediateContext {
	var p = new(Execute_immediateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_execute_immediate

	return p
}

func (s *Execute_immediateContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_immediateContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXECUTE, 0)
}

func (s *Execute_immediateContext) IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIMMEDIATE, 0)
}

func (s *Execute_immediateContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Execute_immediateContext) USING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSING, 0)
}

func (s *Execute_immediateContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Execute_immediateContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Execute_immediateContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Execute_immediateContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Execute_immediateContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Execute_immediateContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Execute_immediateContext) ID2() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserID2, 0)
}

func (s *Execute_immediateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_immediateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Execute_immediateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExecute_immediate(s)
	}
}

func (s *Execute_immediateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExecute_immediate(s)
	}
}

func (s *Execute_immediateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExecute_immediate(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Execute_immediate() (localctx IExecute_immediateContext) {
	this := p
	_ = this

	localctx = NewExecute_immediateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SnowflakeParserRULE_execute_immediate)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1487)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1436)
			p.Match(SnowflakeParserEXECUTE)
		}
		{
			p.SetState(1437)
			p.Match(SnowflakeParserIMMEDIATE)
		}
		{
			p.SetState(1438)
			p.String_()
		}
		p.SetState(1451)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserUSING {
			{
				p.SetState(1439)
				p.Match(SnowflakeParserUSING)
			}
			{
				p.SetState(1440)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(1441)
				p.Id_()
			}
			p.SetState(1446)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(1442)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(1443)
					p.Id_()
				}


				p.SetState(1448)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1449)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1453)
			p.Match(SnowflakeParserEXECUTE)
		}
		{
			p.SetState(1454)
			p.Match(SnowflakeParserIMMEDIATE)
		}
		{
			p.SetState(1455)
			p.Id_()
		}
		p.SetState(1468)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserUSING {
			{
				p.SetState(1456)
				p.Match(SnowflakeParserUSING)
			}
			{
				p.SetState(1457)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(1458)
				p.Id_()
			}
			p.SetState(1463)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(1459)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(1460)
					p.Id_()
				}


				p.SetState(1465)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1466)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1470)
			p.Match(SnowflakeParserEXECUTE)
		}
		{
			p.SetState(1471)
			p.Match(SnowflakeParserIMMEDIATE)
		}
		{
			p.SetState(1472)
			p.Match(SnowflakeParserID2)
		}
		p.SetState(1485)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserUSING {
			{
				p.SetState(1473)
				p.Match(SnowflakeParserUSING)
			}
			{
				p.SetState(1474)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(1475)
				p.Id_()
			}
			p.SetState(1480)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(1476)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(1477)
					p.Id_()
				}


				p.SetState(1482)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1483)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}

	}


	return localctx
}


// IExecute_taskContext is an interface to support dynamic dispatch.
type IExecute_taskContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecute_taskContext differentiates from other interfaces.
	IsExecute_taskContext()
}

type Execute_taskContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecute_taskContext() *Execute_taskContext {
	var p = new(Execute_taskContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_execute_task
	return p
}

func (*Execute_taskContext) IsExecute_taskContext() {}

func NewExecute_taskContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_taskContext {
	var p = new(Execute_taskContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_execute_task

	return p
}

func (s *Execute_taskContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_taskContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXECUTE, 0)
}

func (s *Execute_taskContext) TASK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTASK, 0)
}

func (s *Execute_taskContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Execute_taskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_taskContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Execute_taskContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExecute_task(s)
	}
}

func (s *Execute_taskContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExecute_task(s)
	}
}

func (s *Execute_taskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExecute_task(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Execute_task() (localctx IExecute_taskContext) {
	this := p
	_ = this

	localctx = NewExecute_taskContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SnowflakeParserRULE_execute_task)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1489)
		p.Match(SnowflakeParserEXECUTE)
	}
	{
		p.SetState(1490)
		p.Match(SnowflakeParserTASK)
	}
	{
		p.SetState(1491)
		p.Object_name()
	}



	return localctx
}


// IExplainContext is an interface to support dynamic dispatch.
type IExplainContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplainContext differentiates from other interfaces.
	IsExplainContext()
}

type ExplainContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplainContext() *ExplainContext {
	var p = new(ExplainContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_explain
	return p
}

func (*ExplainContext) IsExplainContext() {}

func NewExplainContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplainContext {
	var p = new(ExplainContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_explain

	return p
}

func (s *ExplainContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplainContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXPLAIN, 0)
}

func (s *ExplainContext) Sql_command() ISql_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_commandContext)
}

func (s *ExplainContext) USING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSING, 0)
}

func (s *ExplainContext) TABULAR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABULAR, 0)
}

func (s *ExplainContext) JSON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserJSON, 0)
}

func (s *ExplainContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTEXT, 0)
}

func (s *ExplainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExplainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExplain(s)
	}
}

func (s *ExplainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExplain(s)
	}
}

func (s *ExplainContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExplain(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Explain() (localctx IExplainContext) {
	this := p
	_ = this

	localctx = NewExplainContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SnowflakeParserRULE_explain)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1493)
		p.Match(SnowflakeParserEXPLAIN)
	}
	p.SetState(1496)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserUSING {
		{
			p.SetState(1494)
			p.Match(SnowflakeParserUSING)
		}
		{
			p.SetState(1495)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserJSON || _la == SnowflakeParserTABULAR || _la == SnowflakeParserTEXT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1498)
		p.Sql_command()
	}



	return localctx
}


// IParallelContext is an interface to support dynamic dispatch.
type IParallelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParallelContext differentiates from other interfaces.
	IsParallelContext()
}

type ParallelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParallelContext() *ParallelContext {
	var p = new(ParallelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_parallel
	return p
}

func (*ParallelContext) IsParallelContext() {}

func NewParallelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParallelContext {
	var p = new(ParallelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_parallel

	return p
}

func (s *ParallelContext) GetParser() antlr.Parser { return s.parser }

func (s *ParallelContext) PARALLEL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPARALLEL, 0)
}

func (s *ParallelContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *ParallelContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *ParallelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParallelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ParallelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterParallel(s)
	}
}

func (s *ParallelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitParallel(s)
	}
}

func (s *ParallelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitParallel(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Parallel() (localctx IParallelContext) {
	this := p
	_ = this

	localctx = NewParallelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SnowflakeParserRULE_parallel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1500)
		p.Match(SnowflakeParserPARALLEL)
	}
	{
		p.SetState(1501)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(1502)
		p.Num()
	}



	return localctx
}


// IGetContext is an interface to support dynamic dispatch.
type IGetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGetContext differentiates from other interfaces.
	IsGetContext()
}

type GetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGetContext() *GetContext {
	var p = new(GetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_get
	return p
}

func (*GetContext) IsGetContext() {}

func NewGetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GetContext {
	var p = new(GetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_get

	return p
}

func (s *GetContext) GetParser() antlr.Parser { return s.parser }

func (s *GetContext) GET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGET, 0)
}

func (s *GetContext) Internal_stage() IInternal_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInternal_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInternal_stageContext)
}

func (s *GetContext) FILE_PATH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE_PATH, 0)
}

func (s *GetContext) Parallel() IParallelContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParallelContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParallelContext)
}

func (s *GetContext) Pattern() IPatternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *GetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *GetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterGet(s)
	}
}

func (s *GetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitGet(s)
	}
}

func (s *GetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitGet(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Get() (localctx IGetContext) {
	this := p
	_ = this

	localctx = NewGetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SnowflakeParserRULE_get)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1504)
		p.Match(SnowflakeParserGET)
	}
	{
		p.SetState(1505)
		p.Internal_stage()
	}
	{
		p.SetState(1506)
		p.Match(SnowflakeParserFILE_PATH)
	}
	p.SetState(1508)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserPARALLEL {
		{
			p.SetState(1507)
			p.Parallel()
		}

	}
	p.SetState(1511)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserPATTERN {
		{
			p.SetState(1510)
			p.Pattern()
		}

	}



	return localctx
}


// IGrant_ownershipContext is an interface to support dynamic dispatch.
type IGrant_ownershipContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrant_ownershipContext differentiates from other interfaces.
	IsGrant_ownershipContext()
}

type Grant_ownershipContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_ownershipContext() *Grant_ownershipContext {
	var p = new(Grant_ownershipContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_grant_ownership
	return p
}

func (*Grant_ownershipContext) IsGrant_ownershipContext() {}

func NewGrant_ownershipContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_ownershipContext {
	var p = new(Grant_ownershipContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_grant_ownership

	return p
}

func (s *Grant_ownershipContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_ownershipContext) GRANT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGRANT, 0)
}

func (s *Grant_ownershipContext) OWNERSHIP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOWNERSHIP, 0)
}

func (s *Grant_ownershipContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Grant_ownershipContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, 0)
}

func (s *Grant_ownershipContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Grant_ownershipContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Grant_ownershipContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Grant_ownershipContext) FUTURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUTURE, 0)
}

func (s *Grant_ownershipContext) Object_type_plural() IObject_type_pluralContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_type_pluralContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_type_pluralContext)
}

func (s *Grant_ownershipContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Grant_ownershipContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCURRENT, 0)
}

func (s *Grant_ownershipContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGRANTS, 0)
}

func (s *Grant_ownershipContext) Object_type_name() IObject_type_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_type_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_type_nameContext)
}

func (s *Grant_ownershipContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Grant_ownershipContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *Grant_ownershipContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Grant_ownershipContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Grant_ownershipContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Grant_ownershipContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREVOKE, 0)
}

func (s *Grant_ownershipContext) COPY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOPY, 0)
}

func (s *Grant_ownershipContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_ownershipContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Grant_ownershipContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterGrant_ownership(s)
	}
}

func (s *Grant_ownershipContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitGrant_ownership(s)
	}
}

func (s *Grant_ownershipContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitGrant_ownership(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Grant_ownership() (localctx IGrant_ownershipContext) {
	this := p
	_ = this

	localctx = NewGrant_ownershipContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SnowflakeParserRULE_grant_ownership)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1513)
		p.Match(SnowflakeParserGRANT)
	}
	{
		p.SetState(1514)
		p.Match(SnowflakeParserOWNERSHIP)
	}
	p.SetState(1540)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1515)
			p.Match(SnowflakeParserON)
		}
		p.SetState(1528)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserDATABASE, SnowflakeParserFILE, SnowflakeParserFUNCTION, SnowflakeParserINTEGRATION, SnowflakeParserMASKING, SnowflakeParserNETWORK, SnowflakeParserPIPE, SnowflakeParserPROCEDURE, SnowflakeParserROLE, SnowflakeParserROW, SnowflakeParserSCHEMA, SnowflakeParserSEQUENCE, SnowflakeParserSESSION, SnowflakeParserSTAGE, SnowflakeParserSTREAM, SnowflakeParserTABLE, SnowflakeParserTAG, SnowflakeParserTASK, SnowflakeParserUSER, SnowflakeParserVIEW, SnowflakeParserWAREHOUSE:
			{
				p.SetState(1516)
				p.Object_type_name()
			}
			{
				p.SetState(1517)
				p.Object_name()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1519)
				p.Match(SnowflakeParserALL)
			}
			{
				p.SetState(1520)
				p.Object_type_plural()
			}
			{
				p.SetState(1521)
				p.Match(SnowflakeParserIN)
			}
			p.SetState(1526)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SnowflakeParserDATABASE:
				{
					p.SetState(1522)
					p.Match(SnowflakeParserDATABASE)
				}
				{
					p.SetState(1523)
					p.Id_()
				}


			case SnowflakeParserSCHEMA:
				{
					p.SetState(1524)
					p.Match(SnowflakeParserSCHEMA)
				}
				{
					p.SetState(1525)
					p.Schema_name()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 2:
		{
			p.SetState(1530)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(1531)
			p.Match(SnowflakeParserFUTURE)
		}
		{
			p.SetState(1532)
			p.Object_type_plural()
		}
		{
			p.SetState(1533)
			p.Match(SnowflakeParserIN)
		}
		p.SetState(1538)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserDATABASE:
			{
				p.SetState(1534)
				p.Match(SnowflakeParserDATABASE)
			}
			{
				p.SetState(1535)
				p.Id_()
			}


		case SnowflakeParserSCHEMA:
			{
				p.SetState(1536)
				p.Match(SnowflakeParserSCHEMA)
			}
			{
				p.SetState(1537)
				p.Schema_name()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	{
		p.SetState(1542)
		p.Match(SnowflakeParserTO)
	}
	{
		p.SetState(1543)
		p.Match(SnowflakeParserROLE)
	}
	{
		p.SetState(1544)
		p.Id_()
	}
	p.SetState(1548)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1545)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserCOPY || _la == SnowflakeParserREVOKE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1546)
			p.Match(SnowflakeParserCURRENT)
		}
		{
			p.SetState(1547)
			p.Match(SnowflakeParserGRANTS)
		}


	}



	return localctx
}


// IGrant_to_roleContext is an interface to support dynamic dispatch.
type IGrant_to_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrant_to_roleContext differentiates from other interfaces.
	IsGrant_to_roleContext()
}

type Grant_to_roleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_to_roleContext() *Grant_to_roleContext {
	var p = new(Grant_to_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_grant_to_role
	return p
}

func (*Grant_to_roleContext) IsGrant_to_roleContext() {}

func NewGrant_to_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_to_roleContext {
	var p = new(Grant_to_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_grant_to_role

	return p
}

func (s *Grant_to_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_to_roleContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserGRANT)
}

func (s *Grant_to_roleContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGRANT, i)
}

func (s *Grant_to_roleContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Grant_to_roleContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Grant_to_roleContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Grant_to_roleContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Grant_to_roleContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Grant_to_roleContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Grant_to_roleContext) FUTURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUTURE, 0)
}

func (s *Grant_to_roleContext) Object_type_plural() IObject_type_pluralContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_type_pluralContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_type_pluralContext)
}

func (s *Grant_to_roleContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Grant_to_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, 0)
}

func (s *Grant_to_roleContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Grant_to_roleContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOPTION, 0)
}

func (s *Grant_to_roleContext) Global_privileges() IGlobal_privilegesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGlobal_privilegesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGlobal_privilegesContext)
}

func (s *Grant_to_roleContext) AllALL() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserALL)
}

func (s *Grant_to_roleContext) ALL(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, i)
}

func (s *Grant_to_roleContext) Account_object_privileges() IAccount_object_privilegesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccount_object_privilegesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccount_object_privilegesContext)
}

func (s *Grant_to_roleContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Grant_to_roleContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESOURCE, 0)
}

func (s *Grant_to_roleContext) MONITOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMONITOR, 0)
}

func (s *Grant_to_roleContext) WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE, 0)
}

func (s *Grant_to_roleContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Grant_to_roleContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Grant_to_roleContext) Schema_privileges() ISchema_privilegesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_privilegesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_privilegesContext)
}

func (s *Grant_to_roleContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Grant_to_roleContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Grant_to_roleContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMAS, 0)
}

func (s *Grant_to_roleContext) Schema_object_privileges() ISchema_object_privilegesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_object_privilegesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_object_privilegesContext)
}

func (s *Grant_to_roleContext) Object_type() IObject_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_typeContext)
}

func (s *Grant_to_roleContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIVILEGES, 0)
}

func (s *Grant_to_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_to_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Grant_to_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterGrant_to_role(s)
	}
}

func (s *Grant_to_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitGrant_to_role(s)
	}
}

func (s *Grant_to_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitGrant_to_role(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Grant_to_role() (localctx IGrant_to_roleContext) {
	this := p
	_ = this

	localctx = NewGrant_to_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SnowflakeParserRULE_grant_to_role)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1550)
		p.Match(SnowflakeParserGRANT)
	}
	p.SetState(1646)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1556)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserAPPLY, SnowflakeParserATTACH, SnowflakeParserCREATE, SnowflakeParserEXECUTE, SnowflakeParserIMPORT, SnowflakeParserMANAGE, SnowflakeParserMONITOR, SnowflakeParserOVERRIDE:
			{
				p.SetState(1551)
				p.Global_privileges()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1552)
				p.Match(SnowflakeParserALL)
			}
			p.SetState(1554)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserPRIVILEGES {
				{
					p.SetState(1553)
					p.Match(SnowflakeParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1558)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(1559)
			p.Match(SnowflakeParserACCOUNT)
		}


	case 2:
		p.SetState(1565)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserCREATE, SnowflakeParserIMPORTED, SnowflakeParserMODIFY, SnowflakeParserMONITOR, SnowflakeParserOPERATE, SnowflakeParserUSAGE, SnowflakeParserUSE_ANY_ROLE:
			{
				p.SetState(1560)
				p.Account_object_privileges()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1561)
				p.Match(SnowflakeParserALL)
			}
			p.SetState(1563)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserPRIVILEGES {
				{
					p.SetState(1562)
					p.Match(SnowflakeParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1567)
			p.Match(SnowflakeParserON)
		}
		p.SetState(1574)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserUSER:
			{
				p.SetState(1568)
				p.Match(SnowflakeParserUSER)
			}


		case SnowflakeParserRESOURCE:
			{
				p.SetState(1569)
				p.Match(SnowflakeParserRESOURCE)
			}
			{
				p.SetState(1570)
				p.Match(SnowflakeParserMONITOR)
			}


		case SnowflakeParserWAREHOUSE:
			{
				p.SetState(1571)
				p.Match(SnowflakeParserWAREHOUSE)
			}


		case SnowflakeParserDATABASE:
			{
				p.SetState(1572)
				p.Match(SnowflakeParserDATABASE)
			}


		case SnowflakeParserINTEGRATION:
			{
				p.SetState(1573)
				p.Match(SnowflakeParserINTEGRATION)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1576)
			p.Object_name()
		}


	case 3:
		p.SetState(1582)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserADD, SnowflakeParserCREATE, SnowflakeParserMODIFY, SnowflakeParserMONITOR, SnowflakeParserUSAGE:
			{
				p.SetState(1577)
				p.Schema_privileges()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1578)
				p.Match(SnowflakeParserALL)
			}
			p.SetState(1580)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserPRIVILEGES {
				{
					p.SetState(1579)
					p.Match(SnowflakeParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1584)
			p.Match(SnowflakeParserON)
		}
		p.SetState(1592)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSCHEMA:
			{
				p.SetState(1585)
				p.Match(SnowflakeParserSCHEMA)
			}
			{
				p.SetState(1586)
				p.Schema_name()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1587)
				p.Match(SnowflakeParserALL)
			}
			{
				p.SetState(1588)
				p.Match(SnowflakeParserSCHEMAS)
			}
			{
				p.SetState(1589)
				p.Match(SnowflakeParserIN)
			}
			{
				p.SetState(1590)
				p.Match(SnowflakeParserDATABASE)
			}
			{
				p.SetState(1591)
				p.Id_()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 4:
		p.SetState(1599)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserADD, SnowflakeParserCREATE, SnowflakeParserMODIFY, SnowflakeParserMONITOR, SnowflakeParserUSAGE:
			{
				p.SetState(1594)
				p.Schema_privileges()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1595)
				p.Match(SnowflakeParserALL)
			}
			p.SetState(1597)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserPRIVILEGES {
				{
					p.SetState(1596)
					p.Match(SnowflakeParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1601)
			p.Match(SnowflakeParserON)
		}

		{
			p.SetState(1602)
			p.Match(SnowflakeParserFUTURE)
		}
		{
			p.SetState(1603)
			p.Match(SnowflakeParserSCHEMAS)
		}
		{
			p.SetState(1604)
			p.Match(SnowflakeParserIN)
		}
		{
			p.SetState(1605)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(1606)
			p.Id_()
		}



	case 5:
		p.SetState(1612)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserAPPLY, SnowflakeParserDELETE, SnowflakeParserINSERT, SnowflakeParserMONITOR, SnowflakeParserOPERATE, SnowflakeParserREAD, SnowflakeParserREFERENCES, SnowflakeParserSELECT, SnowflakeParserTRUNCATE, SnowflakeParserUPDATE, SnowflakeParserUSAGE:
			{
				p.SetState(1607)
				p.Schema_object_privileges()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1608)
				p.Match(SnowflakeParserALL)
			}
			p.SetState(1610)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserPRIVILEGES {
				{
					p.SetState(1609)
					p.Match(SnowflakeParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1614)
			p.Match(SnowflakeParserON)
		}
		p.SetState(1627)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserACCOUNT, SnowflakeParserDATABASES, SnowflakeParserINTEGRATIONS, SnowflakeParserNETWORK, SnowflakeParserRESOURCE, SnowflakeParserROLES, SnowflakeParserSHARES, SnowflakeParserUSERS, SnowflakeParserWAREHOUSES:
			{
				p.SetState(1615)
				p.Object_type()
			}
			{
				p.SetState(1616)
				p.Object_name()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1618)
				p.Match(SnowflakeParserALL)
			}
			{
				p.SetState(1619)
				p.Object_type_plural()
			}
			{
				p.SetState(1620)
				p.Match(SnowflakeParserIN)
			}
			p.SetState(1625)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SnowflakeParserDATABASE:
				{
					p.SetState(1621)
					p.Match(SnowflakeParserDATABASE)
				}
				{
					p.SetState(1622)
					p.Id_()
				}


			case SnowflakeParserSCHEMA:
				{
					p.SetState(1623)
					p.Match(SnowflakeParserSCHEMA)
				}
				{
					p.SetState(1624)
					p.Schema_name()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 6:
		p.SetState(1634)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserAPPLY, SnowflakeParserDELETE, SnowflakeParserINSERT, SnowflakeParserMONITOR, SnowflakeParserOPERATE, SnowflakeParserREAD, SnowflakeParserREFERENCES, SnowflakeParserSELECT, SnowflakeParserTRUNCATE, SnowflakeParserUPDATE, SnowflakeParserUSAGE:
			{
				p.SetState(1629)
				p.Schema_object_privileges()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1630)
				p.Match(SnowflakeParserALL)
			}
			p.SetState(1632)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserPRIVILEGES {
				{
					p.SetState(1631)
					p.Match(SnowflakeParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1636)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(1637)
			p.Match(SnowflakeParserFUTURE)
		}
		{
			p.SetState(1638)
			p.Object_type_plural()
		}
		{
			p.SetState(1639)
			p.Match(SnowflakeParserIN)
		}
		p.SetState(1644)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserDATABASE:
			{
				p.SetState(1640)
				p.Match(SnowflakeParserDATABASE)
			}
			{
				p.SetState(1641)
				p.Id_()
			}


		case SnowflakeParserSCHEMA:
			{
				p.SetState(1642)
				p.Match(SnowflakeParserSCHEMA)
			}
			{
				p.SetState(1643)
				p.Schema_name()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	{
		p.SetState(1648)
		p.Match(SnowflakeParserTO)
	}
	p.SetState(1650)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserROLE {
		{
			p.SetState(1649)
			p.Match(SnowflakeParserROLE)
		}

	}
	{
		p.SetState(1652)
		p.Id_()
	}
	p.SetState(1656)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1653)
			p.Match(SnowflakeParserWITH)
		}
		{
			p.SetState(1654)
			p.Match(SnowflakeParserGRANT)
		}
		{
			p.SetState(1655)
			p.Match(SnowflakeParserOPTION)
		}


	}



	return localctx
}


// IGlobal_privilegesContext is an interface to support dynamic dispatch.
type IGlobal_privilegesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGlobal_privilegesContext differentiates from other interfaces.
	IsGlobal_privilegesContext()
}

type Global_privilegesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGlobal_privilegesContext() *Global_privilegesContext {
	var p = new(Global_privilegesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_global_privileges
	return p
}

func (*Global_privilegesContext) IsGlobal_privilegesContext() {}

func NewGlobal_privilegesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Global_privilegesContext {
	var p = new(Global_privilegesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_global_privileges

	return p
}

func (s *Global_privilegesContext) GetParser() antlr.Parser { return s.parser }

func (s *Global_privilegesContext) AllGlobal_privilege() []IGlobal_privilegeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGlobal_privilegeContext); ok {
			len++
		}
	}

	tst := make([]IGlobal_privilegeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGlobal_privilegeContext); ok {
			tst[i] = t.(IGlobal_privilegeContext)
			i++
		}
	}

	return tst
}

func (s *Global_privilegesContext) Global_privilege(i int) IGlobal_privilegeContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGlobal_privilegeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGlobal_privilegeContext)
}

func (s *Global_privilegesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Global_privilegesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Global_privilegesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Global_privilegesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Global_privilegesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterGlobal_privileges(s)
	}
}

func (s *Global_privilegesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitGlobal_privileges(s)
	}
}

func (s *Global_privilegesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitGlobal_privileges(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Global_privileges() (localctx IGlobal_privilegesContext) {
	this := p
	_ = this

	localctx = NewGlobal_privilegesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SnowflakeParserRULE_global_privileges)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1658)
		p.Global_privilege()
	}
	p.SetState(1663)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(1659)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(1660)
			p.Global_privilege()
		}


		p.SetState(1665)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IGlobal_privilegeContext is an interface to support dynamic dispatch.
type IGlobal_privilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGlobal_privilegeContext differentiates from other interfaces.
	IsGlobal_privilegeContext()
}

type Global_privilegeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGlobal_privilegeContext() *Global_privilegeContext {
	var p = new(Global_privilegeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_global_privilege
	return p
}

func (*Global_privilegeContext) IsGlobal_privilegeContext() {}

func NewGlobal_privilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Global_privilegeContext {
	var p = new(Global_privilegeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_global_privilege

	return p
}

func (s *Global_privilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *Global_privilegeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Global_privilegeContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Global_privilegeContext) DATA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA, 0)
}

func (s *Global_privilegeContext) EXCHANGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXCHANGE, 0)
}

func (s *Global_privilegeContext) LISTING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLISTING, 0)
}

func (s *Global_privilegeContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Global_privilegeContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Global_privilegeContext) NETWORK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK, 0)
}

func (s *Global_privilegeContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Global_privilegeContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, 0)
}

func (s *Global_privilegeContext) SHARE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARE, 0)
}

func (s *Global_privilegeContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Global_privilegeContext) WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE, 0)
}

func (s *Global_privilegeContext) APPLY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPPLY, 0)
}

func (s *Global_privilegeContext) MASKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, 0)
}

func (s *Global_privilegeContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *Global_privilegeContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, 0)
}

func (s *Global_privilegeContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION, 0)
}

func (s *Global_privilegeContext) TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTAG, 0)
}

func (s *Global_privilegeContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserATTACH, 0)
}

func (s *Global_privilegeContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXECUTE, 0)
}

func (s *Global_privilegeContext) TASK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTASK, 0)
}

func (s *Global_privilegeContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIMPORT, 0)
}

func (s *Global_privilegeContext) MANAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMANAGE, 0)
}

func (s *Global_privilegeContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGRANTS, 0)
}

func (s *Global_privilegeContext) MONITOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMONITOR, 0)
}

func (s *Global_privilegeContext) OVERRIDE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOVERRIDE, 0)
}

func (s *Global_privilegeContext) RESTRICTIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESTRICTIONS, 0)
}

func (s *Global_privilegeContext) EXECUTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXECUTION, 0)
}

func (s *Global_privilegeContext) USAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSAGE, 0)
}

func (s *Global_privilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Global_privilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Global_privilegeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterGlobal_privilege(s)
	}
}

func (s *Global_privilegeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitGlobal_privilege(s)
	}
}

func (s *Global_privilegeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitGlobal_privilege(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Global_privilege() (localctx IGlobal_privilegeContext) {
	this := p
	_ = this

	localctx = NewGlobal_privilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SnowflakeParserRULE_global_privilege)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1710)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserCREATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1666)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(1679)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserACCOUNT:
			{
				p.SetState(1667)
				p.Match(SnowflakeParserACCOUNT)
			}


		case SnowflakeParserDATA:
			{
				p.SetState(1668)
				p.Match(SnowflakeParserDATA)
			}
			{
				p.SetState(1669)
				p.Match(SnowflakeParserEXCHANGE)
			}
			{
				p.SetState(1670)
				p.Match(SnowflakeParserLISTING)
			}


		case SnowflakeParserDATABASE:
			{
				p.SetState(1671)
				p.Match(SnowflakeParserDATABASE)
			}


		case SnowflakeParserINTEGRATION:
			{
				p.SetState(1672)
				p.Match(SnowflakeParserINTEGRATION)
			}


		case SnowflakeParserNETWORK:
			{
				p.SetState(1673)
				p.Match(SnowflakeParserNETWORK)
			}
			{
				p.SetState(1674)
				p.Match(SnowflakeParserPOLICY)
			}


		case SnowflakeParserROLE:
			{
				p.SetState(1675)
				p.Match(SnowflakeParserROLE)
			}


		case SnowflakeParserSHARE:
			{
				p.SetState(1676)
				p.Match(SnowflakeParserSHARE)
			}


		case SnowflakeParserUSER:
			{
				p.SetState(1677)
				p.Match(SnowflakeParserUSER)
			}


		case SnowflakeParserWAREHOUSE:
			{
				p.SetState(1678)
				p.Match(SnowflakeParserWAREHOUSE)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SnowflakeParserAPPLY, SnowflakeParserATTACH:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1695)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1681)
				p.Match(SnowflakeParserAPPLY)
			}
			{
				p.SetState(1682)
				p.Match(SnowflakeParserMASKING)
			}
			{
				p.SetState(1683)
				p.Match(SnowflakeParserPOLICY)
			}


		case 2:
			{
				p.SetState(1684)
				p.Match(SnowflakeParserAPPLY)
			}
			{
				p.SetState(1685)
				p.Match(SnowflakeParserROW)
			}
			{
				p.SetState(1686)
				p.Match(SnowflakeParserACCESS)
			}
			{
				p.SetState(1687)
				p.Match(SnowflakeParserPOLICY)
			}


		case 3:
			{
				p.SetState(1688)
				p.Match(SnowflakeParserAPPLY)
			}
			{
				p.SetState(1689)
				p.Match(SnowflakeParserSESSION)
			}
			{
				p.SetState(1690)
				p.Match(SnowflakeParserPOLICY)
			}


		case 4:
			{
				p.SetState(1691)
				p.Match(SnowflakeParserAPPLY)
			}
			{
				p.SetState(1692)
				p.Match(SnowflakeParserTAG)
			}


		case 5:
			{
				p.SetState(1693)
				p.Match(SnowflakeParserATTACH)
			}
			{
				p.SetState(1694)
				p.Match(SnowflakeParserPOLICY)
			}

		}


	case SnowflakeParserEXECUTE, SnowflakeParserIMPORT, SnowflakeParserMANAGE, SnowflakeParserMONITOR, SnowflakeParserOVERRIDE:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1708)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserEXECUTE:
			{
				p.SetState(1697)
				p.Match(SnowflakeParserEXECUTE)
			}
			{
				p.SetState(1698)
				p.Match(SnowflakeParserTASK)
			}


		case SnowflakeParserIMPORT:
			{
				p.SetState(1699)
				p.Match(SnowflakeParserIMPORT)
			}
			{
				p.SetState(1700)
				p.Match(SnowflakeParserSHARE)
			}


		case SnowflakeParserMANAGE:
			{
				p.SetState(1701)
				p.Match(SnowflakeParserMANAGE)
			}
			{
				p.SetState(1702)
				p.Match(SnowflakeParserGRANTS)
			}


		case SnowflakeParserMONITOR:
			{
				p.SetState(1703)
				p.Match(SnowflakeParserMONITOR)
			}
			{
				p.SetState(1704)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SnowflakeParserEXECUTION || _la == SnowflakeParserUSAGE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}


		case SnowflakeParserOVERRIDE:
			{
				p.SetState(1705)
				p.Match(SnowflakeParserOVERRIDE)
			}
			{
				p.SetState(1706)
				p.Match(SnowflakeParserSHARE)
			}
			{
				p.SetState(1707)
				p.Match(SnowflakeParserRESTRICTIONS)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAccount_object_privilegesContext is an interface to support dynamic dispatch.
type IAccount_object_privilegesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccount_object_privilegesContext differentiates from other interfaces.
	IsAccount_object_privilegesContext()
}

type Account_object_privilegesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccount_object_privilegesContext() *Account_object_privilegesContext {
	var p = new(Account_object_privilegesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_account_object_privileges
	return p
}

func (*Account_object_privilegesContext) IsAccount_object_privilegesContext() {}

func NewAccount_object_privilegesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Account_object_privilegesContext {
	var p = new(Account_object_privilegesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_account_object_privileges

	return p
}

func (s *Account_object_privilegesContext) GetParser() antlr.Parser { return s.parser }

func (s *Account_object_privilegesContext) AllAccount_object_privilege() []IAccount_object_privilegeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAccount_object_privilegeContext); ok {
			len++
		}
	}

	tst := make([]IAccount_object_privilegeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAccount_object_privilegeContext); ok {
			tst[i] = t.(IAccount_object_privilegeContext)
			i++
		}
	}

	return tst
}

func (s *Account_object_privilegesContext) Account_object_privilege(i int) IAccount_object_privilegeContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccount_object_privilegeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccount_object_privilegeContext)
}

func (s *Account_object_privilegesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Account_object_privilegesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Account_object_privilegesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Account_object_privilegesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Account_object_privilegesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAccount_object_privileges(s)
	}
}

func (s *Account_object_privilegesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAccount_object_privileges(s)
	}
}

func (s *Account_object_privilegesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAccount_object_privileges(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Account_object_privileges() (localctx IAccount_object_privilegesContext) {
	this := p
	_ = this

	localctx = NewAccount_object_privilegesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SnowflakeParserRULE_account_object_privileges)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1712)
		p.Account_object_privilege()
	}
	p.SetState(1717)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(1713)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(1714)
			p.Account_object_privilege()
		}


		p.SetState(1719)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IAccount_object_privilegeContext is an interface to support dynamic dispatch.
type IAccount_object_privilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccount_object_privilegeContext differentiates from other interfaces.
	IsAccount_object_privilegeContext()
}

type Account_object_privilegeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccount_object_privilegeContext() *Account_object_privilegeContext {
	var p = new(Account_object_privilegeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_account_object_privilege
	return p
}

func (*Account_object_privilegeContext) IsAccount_object_privilegeContext() {}

func NewAccount_object_privilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Account_object_privilegeContext {
	var p = new(Account_object_privilegeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_account_object_privilege

	return p
}

func (s *Account_object_privilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *Account_object_privilegeContext) MONITOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMONITOR, 0)
}

func (s *Account_object_privilegeContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMODIFY, 0)
}

func (s *Account_object_privilegeContext) USAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSAGE, 0)
}

func (s *Account_object_privilegeContext) OPERATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOPERATE, 0)
}

func (s *Account_object_privilegeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Account_object_privilegeContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Account_object_privilegeContext) IMPORTED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIMPORTED, 0)
}

func (s *Account_object_privilegeContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIVILEGES, 0)
}

func (s *Account_object_privilegeContext) USE_ANY_ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSE_ANY_ROLE, 0)
}

func (s *Account_object_privilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Account_object_privilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Account_object_privilegeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAccount_object_privilege(s)
	}
}

func (s *Account_object_privilegeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAccount_object_privilege(s)
	}
}

func (s *Account_object_privilegeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAccount_object_privilege(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Account_object_privilege() (localctx IAccount_object_privilegeContext) {
	this := p
	_ = this

	localctx = NewAccount_object_privilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SnowflakeParserRULE_account_object_privilege)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1729)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserMONITOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1720)
			p.Match(SnowflakeParserMONITOR)
		}


	case SnowflakeParserMODIFY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1721)
			p.Match(SnowflakeParserMODIFY)
		}


	case SnowflakeParserUSAGE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1722)
			p.Match(SnowflakeParserUSAGE)
		}


	case SnowflakeParserOPERATE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1723)
			p.Match(SnowflakeParserOPERATE)
		}


	case SnowflakeParserCREATE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1724)
			p.Match(SnowflakeParserCREATE)
		}
		{
			p.SetState(1725)
			p.Match(SnowflakeParserSCHEMA)
		}


	case SnowflakeParserIMPORTED:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1726)
			p.Match(SnowflakeParserIMPORTED)
		}
		{
			p.SetState(1727)
			p.Match(SnowflakeParserPRIVILEGES)
		}


	case SnowflakeParserUSE_ANY_ROLE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1728)
			p.Match(SnowflakeParserUSE_ANY_ROLE)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISchema_privilegesContext is an interface to support dynamic dispatch.
type ISchema_privilegesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_privilegesContext differentiates from other interfaces.
	IsSchema_privilegesContext()
}

type Schema_privilegesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_privilegesContext() *Schema_privilegesContext {
	var p = new(Schema_privilegesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_schema_privileges
	return p
}

func (*Schema_privilegesContext) IsSchema_privilegesContext() {}

func NewSchema_privilegesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_privilegesContext {
	var p = new(Schema_privilegesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_schema_privileges

	return p
}

func (s *Schema_privilegesContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_privilegesContext) AllSchema_privilege() []ISchema_privilegeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISchema_privilegeContext); ok {
			len++
		}
	}

	tst := make([]ISchema_privilegeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISchema_privilegeContext); ok {
			tst[i] = t.(ISchema_privilegeContext)
			i++
		}
	}

	return tst
}

func (s *Schema_privilegesContext) Schema_privilege(i int) ISchema_privilegeContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_privilegeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_privilegeContext)
}

func (s *Schema_privilegesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Schema_privilegesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Schema_privilegesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_privilegesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_privilegesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSchema_privileges(s)
	}
}

func (s *Schema_privilegesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSchema_privileges(s)
	}
}

func (s *Schema_privilegesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSchema_privileges(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Schema_privileges() (localctx ISchema_privilegesContext) {
	this := p
	_ = this

	localctx = NewSchema_privilegesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SnowflakeParserRULE_schema_privileges)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1731)
		p.Schema_privilege()
	}
	p.SetState(1736)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(1732)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(1733)
			p.Schema_privilege()
		}


		p.SetState(1738)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ISchema_privilegeContext is an interface to support dynamic dispatch.
type ISchema_privilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_privilegeContext differentiates from other interfaces.
	IsSchema_privilegeContext()
}

type Schema_privilegeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_privilegeContext() *Schema_privilegeContext {
	var p = new(Schema_privilegeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_schema_privilege
	return p
}

func (*Schema_privilegeContext) IsSchema_privilegeContext() {}

func NewSchema_privilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_privilegeContext {
	var p = new(Schema_privilegeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_schema_privilege

	return p
}

func (s *Schema_privilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_privilegeContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMODIFY, 0)
}

func (s *Schema_privilegeContext) MONITOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMONITOR, 0)
}

func (s *Schema_privilegeContext) USAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSAGE, 0)
}

func (s *Schema_privilegeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Schema_privilegeContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Schema_privilegeContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL, 0)
}

func (s *Schema_privilegeContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Schema_privilegeContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATERIALIZED, 0)
}

func (s *Schema_privilegeContext) MASKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, 0)
}

func (s *Schema_privilegeContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Schema_privilegeContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *Schema_privilegeContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, 0)
}

func (s *Schema_privilegeContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION, 0)
}

func (s *Schema_privilegeContext) TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTAG, 0)
}

func (s *Schema_privilegeContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEQUENCE, 0)
}

func (s *Schema_privilegeContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUNCTION, 0)
}

func (s *Schema_privilegeContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPROCEDURE, 0)
}

func (s *Schema_privilegeContext) FILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE, 0)
}

func (s *Schema_privilegeContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORMAT, 0)
}

func (s *Schema_privilegeContext) STAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE, 0)
}

func (s *Schema_privilegeContext) PIPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPIPE, 0)
}

func (s *Schema_privilegeContext) STREAM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTREAM, 0)
}

func (s *Schema_privilegeContext) TASK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTASK, 0)
}

func (s *Schema_privilegeContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Schema_privilegeContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEARCH, 0)
}

func (s *Schema_privilegeContext) OPTIMIZATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOPTIMIZATION, 0)
}

func (s *Schema_privilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_privilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_privilegeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSchema_privilege(s)
	}
}

func (s *Schema_privilegeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSchema_privilege(s)
	}
}

func (s *Schema_privilegeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSchema_privilege(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Schema_privilege() (localctx ISchema_privilegeContext) {
	this := p
	_ = this

	localctx = NewSchema_privilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SnowflakeParserRULE_schema_privilege)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1771)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserMODIFY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1739)
			p.Match(SnowflakeParserMODIFY)
		}


	case SnowflakeParserMONITOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1740)
			p.Match(SnowflakeParserMONITOR)
		}


	case SnowflakeParserUSAGE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1741)
			p.Match(SnowflakeParserUSAGE)
		}


	case SnowflakeParserCREATE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1742)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(1766)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserTABLE:
			{
				p.SetState(1743)
				p.Match(SnowflakeParserTABLE)
			}


		case SnowflakeParserEXTERNAL:
			{
				p.SetState(1744)
				p.Match(SnowflakeParserEXTERNAL)
			}
			{
				p.SetState(1745)
				p.Match(SnowflakeParserTABLE)
			}


		case SnowflakeParserVIEW:
			{
				p.SetState(1746)
				p.Match(SnowflakeParserVIEW)
			}


		case SnowflakeParserMATERIALIZED:
			{
				p.SetState(1747)
				p.Match(SnowflakeParserMATERIALIZED)
			}
			{
				p.SetState(1748)
				p.Match(SnowflakeParserVIEW)
			}


		case SnowflakeParserMASKING:
			{
				p.SetState(1749)
				p.Match(SnowflakeParserMASKING)
			}
			{
				p.SetState(1750)
				p.Match(SnowflakeParserPOLICY)
			}


		case SnowflakeParserROW:
			{
				p.SetState(1751)
				p.Match(SnowflakeParserROW)
			}
			{
				p.SetState(1752)
				p.Match(SnowflakeParserACCESS)
			}
			{
				p.SetState(1753)
				p.Match(SnowflakeParserPOLICY)
			}


		case SnowflakeParserSESSION:
			{
				p.SetState(1754)
				p.Match(SnowflakeParserSESSION)
			}
			{
				p.SetState(1755)
				p.Match(SnowflakeParserPOLICY)
			}


		case SnowflakeParserTAG:
			{
				p.SetState(1756)
				p.Match(SnowflakeParserTAG)
			}


		case SnowflakeParserSEQUENCE:
			{
				p.SetState(1757)
				p.Match(SnowflakeParserSEQUENCE)
			}


		case SnowflakeParserFUNCTION:
			{
				p.SetState(1758)
				p.Match(SnowflakeParserFUNCTION)
			}


		case SnowflakeParserPROCEDURE:
			{
				p.SetState(1759)
				p.Match(SnowflakeParserPROCEDURE)
			}


		case SnowflakeParserFILE:
			{
				p.SetState(1760)
				p.Match(SnowflakeParserFILE)
			}
			{
				p.SetState(1761)
				p.Match(SnowflakeParserFORMAT)
			}


		case SnowflakeParserSTAGE:
			{
				p.SetState(1762)
				p.Match(SnowflakeParserSTAGE)
			}


		case SnowflakeParserPIPE:
			{
				p.SetState(1763)
				p.Match(SnowflakeParserPIPE)
			}


		case SnowflakeParserSTREAM:
			{
				p.SetState(1764)
				p.Match(SnowflakeParserSTREAM)
			}


		case SnowflakeParserTASK:
			{
				p.SetState(1765)
				p.Match(SnowflakeParserTASK)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SnowflakeParserADD:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1768)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(1769)
			p.Match(SnowflakeParserSEARCH)
		}
		{
			p.SetState(1770)
			p.Match(SnowflakeParserOPTIMIZATION)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISchema_object_privilegesContext is an interface to support dynamic dispatch.
type ISchema_object_privilegesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_object_privilegesContext differentiates from other interfaces.
	IsSchema_object_privilegesContext()
}

type Schema_object_privilegesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_object_privilegesContext() *Schema_object_privilegesContext {
	var p = new(Schema_object_privilegesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_schema_object_privileges
	return p
}

func (*Schema_object_privilegesContext) IsSchema_object_privilegesContext() {}

func NewSchema_object_privilegesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_object_privilegesContext {
	var p = new(Schema_object_privilegesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_schema_object_privileges

	return p
}

func (s *Schema_object_privilegesContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_object_privilegesContext) AllSchema_object_privilege() []ISchema_object_privilegeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISchema_object_privilegeContext); ok {
			len++
		}
	}

	tst := make([]ISchema_object_privilegeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISchema_object_privilegeContext); ok {
			tst[i] = t.(ISchema_object_privilegeContext)
			i++
		}
	}

	return tst
}

func (s *Schema_object_privilegesContext) Schema_object_privilege(i int) ISchema_object_privilegeContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_object_privilegeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_object_privilegeContext)
}

func (s *Schema_object_privilegesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Schema_object_privilegesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Schema_object_privilegesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_object_privilegesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_object_privilegesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSchema_object_privileges(s)
	}
}

func (s *Schema_object_privilegesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSchema_object_privileges(s)
	}
}

func (s *Schema_object_privilegesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSchema_object_privileges(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Schema_object_privileges() (localctx ISchema_object_privilegesContext) {
	this := p
	_ = this

	localctx = NewSchema_object_privilegesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SnowflakeParserRULE_schema_object_privileges)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1773)
		p.Schema_object_privilege()
	}
	p.SetState(1778)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(1774)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(1775)
			p.Schema_object_privilege()
		}


		p.SetState(1780)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ISchema_object_privilegeContext is an interface to support dynamic dispatch.
type ISchema_object_privilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_object_privilegeContext differentiates from other interfaces.
	IsSchema_object_privilegeContext()
}

type Schema_object_privilegeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_object_privilegeContext() *Schema_object_privilegeContext {
	var p = new(Schema_object_privilegeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_schema_object_privilege
	return p
}

func (*Schema_object_privilegeContext) IsSchema_object_privilegeContext() {}

func NewSchema_object_privilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_object_privilegeContext {
	var p = new(Schema_object_privilegeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_schema_object_privilege

	return p
}

func (s *Schema_object_privilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_object_privilegeContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSELECT, 0)
}

func (s *Schema_object_privilegeContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINSERT, 0)
}

func (s *Schema_object_privilegeContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUPDATE, 0)
}

func (s *Schema_object_privilegeContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDELETE, 0)
}

func (s *Schema_object_privilegeContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRUNCATE, 0)
}

func (s *Schema_object_privilegeContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREFERENCES, 0)
}

func (s *Schema_object_privilegeContext) USAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSAGE, 0)
}

func (s *Schema_object_privilegeContext) READ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREAD, 0)
}

func (s *Schema_object_privilegeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, 0)
}

func (s *Schema_object_privilegeContext) WRITE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWRITE, 0)
}

func (s *Schema_object_privilegeContext) MONITOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMONITOR, 0)
}

func (s *Schema_object_privilegeContext) OPERATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOPERATE, 0)
}

func (s *Schema_object_privilegeContext) APPLY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPPLY, 0)
}

func (s *Schema_object_privilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_object_privilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_object_privilegeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSchema_object_privilege(s)
	}
}

func (s *Schema_object_privilegeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSchema_object_privilege(s)
	}
}

func (s *Schema_object_privilegeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSchema_object_privilege(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Schema_object_privilege() (localctx ISchema_object_privilegeContext) {
	this := p
	_ = this

	localctx = NewSchema_object_privilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SnowflakeParserRULE_schema_object_privilege)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1796)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserSELECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1781)
			p.Match(SnowflakeParserSELECT)
		}


	case SnowflakeParserINSERT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1782)
			p.Match(SnowflakeParserINSERT)
		}


	case SnowflakeParserUPDATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1783)
			p.Match(SnowflakeParserUPDATE)
		}


	case SnowflakeParserDELETE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1784)
			p.Match(SnowflakeParserDELETE)
		}


	case SnowflakeParserTRUNCATE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1785)
			p.Match(SnowflakeParserTRUNCATE)
		}


	case SnowflakeParserREFERENCES:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1786)
			p.Match(SnowflakeParserREFERENCES)
		}


	case SnowflakeParserUSAGE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1787)
			p.Match(SnowflakeParserUSAGE)
		}


	case SnowflakeParserREAD:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1788)
			p.Match(SnowflakeParserREAD)
		}
		p.SetState(1791)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1789)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(1790)
				p.Match(SnowflakeParserWRITE)
			}


		}


	case SnowflakeParserMONITOR:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1793)
			p.Match(SnowflakeParserMONITOR)
		}


	case SnowflakeParserOPERATE:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1794)
			p.Match(SnowflakeParserOPERATE)
		}


	case SnowflakeParserAPPLY:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1795)
			p.Match(SnowflakeParserAPPLY)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IGrant_to_shareContext is an interface to support dynamic dispatch.
type IGrant_to_shareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrant_to_shareContext differentiates from other interfaces.
	IsGrant_to_shareContext()
}

type Grant_to_shareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_to_shareContext() *Grant_to_shareContext {
	var p = new(Grant_to_shareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_grant_to_share
	return p
}

func (*Grant_to_shareContext) IsGrant_to_shareContext() {}

func NewGrant_to_shareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_to_shareContext {
	var p = new(Grant_to_shareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_grant_to_share

	return p
}

func (s *Grant_to_shareContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_to_shareContext) GRANT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGRANT, 0)
}

func (s *Grant_to_shareContext) Object_privilege() IObject_privilegeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_privilegeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_privilegeContext)
}

func (s *Grant_to_shareContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Grant_to_shareContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Grant_to_shareContext) SHARE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARE, 0)
}

func (s *Grant_to_shareContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Grant_to_shareContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Grant_to_shareContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Grant_to_shareContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Grant_to_shareContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUNCTION, 0)
}

func (s *Grant_to_shareContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Grant_to_shareContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Grant_to_shareContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Grant_to_shareContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *Grant_to_shareContext) TABLES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLES, 0)
}

func (s *Grant_to_shareContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Grant_to_shareContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Grant_to_shareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_to_shareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Grant_to_shareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterGrant_to_share(s)
	}
}

func (s *Grant_to_shareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitGrant_to_share(s)
	}
}

func (s *Grant_to_shareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitGrant_to_share(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Grant_to_share() (localctx IGrant_to_shareContext) {
	this := p
	_ = this

	localctx = NewGrant_to_shareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SnowflakeParserRULE_grant_to_share)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1798)
		p.Match(SnowflakeParserGRANT)
	}
	{
		p.SetState(1799)
		p.Object_privilege()
	}
	{
		p.SetState(1800)
		p.Match(SnowflakeParserON)
	}
	p.SetState(1818)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserDATABASE:
		{
			p.SetState(1801)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(1802)
			p.Id_()
		}


	case SnowflakeParserSCHEMA:
		{
			p.SetState(1803)
			p.Match(SnowflakeParserSCHEMA)
		}
		{
			p.SetState(1804)
			p.Id_()
		}


	case SnowflakeParserFUNCTION:
		{
			p.SetState(1805)
			p.Match(SnowflakeParserFUNCTION)
		}
		{
			p.SetState(1806)
			p.Id_()
		}


	case SnowflakeParserALL, SnowflakeParserTABLE:
		p.SetState(1814)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserTABLE:
			{
				p.SetState(1807)
				p.Match(SnowflakeParserTABLE)
			}
			{
				p.SetState(1808)
				p.Object_name()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1809)
				p.Match(SnowflakeParserALL)
			}
			{
				p.SetState(1810)
				p.Match(SnowflakeParserTABLES)
			}
			{
				p.SetState(1811)
				p.Match(SnowflakeParserIN)
			}
			{
				p.SetState(1812)
				p.Match(SnowflakeParserSCHEMA)
			}
			{
				p.SetState(1813)
				p.Schema_name()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SnowflakeParserVIEW:
		{
			p.SetState(1816)
			p.Match(SnowflakeParserVIEW)
		}
		{
			p.SetState(1817)
			p.Id_()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1820)
		p.Match(SnowflakeParserTO)
	}
	{
		p.SetState(1821)
		p.Match(SnowflakeParserSHARE)
	}
	{
		p.SetState(1822)
		p.Id_()
	}



	return localctx
}


// IObject_privilegeContext is an interface to support dynamic dispatch.
type IObject_privilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObject_privilegeContext differentiates from other interfaces.
	IsObject_privilegeContext()
}

type Object_privilegeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObject_privilegeContext() *Object_privilegeContext {
	var p = new(Object_privilegeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_object_privilege
	return p
}

func (*Object_privilegeContext) IsObject_privilegeContext() {}

func NewObject_privilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Object_privilegeContext {
	var p = new(Object_privilegeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_object_privilege

	return p
}

func (s *Object_privilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *Object_privilegeContext) USAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSAGE, 0)
}

func (s *Object_privilegeContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSELECT, 0)
}

func (s *Object_privilegeContext) REFERENCE_USAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREFERENCE_USAGE, 0)
}

func (s *Object_privilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Object_privilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Object_privilegeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterObject_privilege(s)
	}
}

func (s *Object_privilegeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitObject_privilege(s)
	}
}

func (s *Object_privilegeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitObject_privilege(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Object_privilege() (localctx IObject_privilegeContext) {
	this := p
	_ = this

	localctx = NewObject_privilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SnowflakeParserRULE_object_privilege)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1824)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserREFERENCE_USAGE || _la == SnowflakeParserSELECT || _la == SnowflakeParserUSAGE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IGrant_roleContext is an interface to support dynamic dispatch.
type IGrant_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrant_roleContext differentiates from other interfaces.
	IsGrant_roleContext()
}

type Grant_roleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_roleContext() *Grant_roleContext {
	var p = new(Grant_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_grant_role
	return p
}

func (*Grant_roleContext) IsGrant_roleContext() {}

func NewGrant_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_roleContext {
	var p = new(Grant_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_grant_role

	return p
}

func (s *Grant_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_roleContext) GRANT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGRANT, 0)
}

func (s *Grant_roleContext) AllROLE() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserROLE)
}

func (s *Grant_roleContext) ROLE(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, i)
}

func (s *Grant_roleContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Grant_roleContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Grant_roleContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Grant_roleContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Grant_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Grant_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterGrant_role(s)
	}
}

func (s *Grant_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitGrant_role(s)
	}
}

func (s *Grant_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitGrant_role(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Grant_role() (localctx IGrant_roleContext) {
	this := p
	_ = this

	localctx = NewGrant_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SnowflakeParserRULE_grant_role)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1826)
		p.Match(SnowflakeParserGRANT)
	}
	{
		p.SetState(1827)
		p.Match(SnowflakeParserROLE)
	}
	{
		p.SetState(1828)
		p.Id_()
	}
	{
		p.SetState(1829)
		p.Match(SnowflakeParserTO)
	}
	p.SetState(1834)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserROLE:
		{
			p.SetState(1830)
			p.Match(SnowflakeParserROLE)
		}
		{
			p.SetState(1831)
			p.Id_()
		}


	case SnowflakeParserUSER:
		{
			p.SetState(1832)
			p.Match(SnowflakeParserUSER)
		}
		{
			p.SetState(1833)
			p.Id_()
		}


	case SnowflakeParserEOF, SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCOPY, SnowflakeParserCREATE, SnowflakeParserDELETE, SnowflakeParserDESC, SnowflakeParserDESCRIBE, SnowflakeParserDROP, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserINSERT, SnowflakeParserLIST, SnowflakeParserMERGE, SnowflakeParserPUT, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSELECT, SnowflakeParserSET, SnowflakeParserSHOW, SnowflakeParserTRUNCATE, SnowflakeParserUNDROP, SnowflakeParserUNSET, SnowflakeParserUPDATE, SnowflakeParserUSE, SnowflakeParserWITH, SnowflakeParserSEMI:



	default:
	}



	return localctx
}


// IListContext is an interface to support dynamic dispatch.
type IListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListContext differentiates from other interfaces.
	IsListContext()
}

type ListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListContext() *ListContext {
	var p = new(ListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_list
	return p
}

func (*ListContext) IsListContext() {}

func NewListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListContext {
	var p = new(ListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_list

	return p
}

func (s *ListContext) GetParser() antlr.Parser { return s.parser }

func (s *ListContext) LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLIST, 0)
}

func (s *ListContext) Internal_stage() IInternal_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInternal_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInternal_stageContext)
}

func (s *ListContext) External_stage() IExternal_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternal_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternal_stageContext)
}

func (s *ListContext) Pattern() IPatternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *ListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterList(s)
	}
}

func (s *ListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitList(s)
	}
}

func (s *ListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitList(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) List() (localctx IListContext) {
	this := p
	_ = this

	localctx = NewListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SnowflakeParserRULE_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1836)
		p.Match(SnowflakeParserLIST)
	}
	p.SetState(1839)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1837)
			p.Internal_stage()
		}


	case 2:
		{
			p.SetState(1838)
			p.External_stage()
		}

	}
	p.SetState(1842)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserPATTERN {
		{
			p.SetState(1841)
			p.Pattern()
		}

	}



	return localctx
}


// IInternal_stageContext is an interface to support dynamic dispatch.
type IInternal_stageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInternal_stageContext differentiates from other interfaces.
	IsInternal_stageContext()
}

type Internal_stageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInternal_stageContext() *Internal_stageContext {
	var p = new(Internal_stageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_internal_stage
	return p
}

func (*Internal_stageContext) IsInternal_stageContext() {}

func NewInternal_stageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Internal_stageContext {
	var p = new(Internal_stageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_internal_stage

	return p
}

func (s *Internal_stageContext) GetParser() antlr.Parser { return s.parser }

func (s *Internal_stageContext) AT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAT, 0)
}

func (s *Internal_stageContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Internal_stageContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDIVIDE, 0)
}

func (s *Internal_stageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Internal_stageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Internal_stageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterInternal_stage(s)
	}
}

func (s *Internal_stageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitInternal_stage(s)
	}
}

func (s *Internal_stageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitInternal_stage(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Internal_stage() (localctx IInternal_stageContext) {
	this := p
	_ = this

	localctx = NewInternal_stageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SnowflakeParserRULE_internal_stage)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1844)
		p.Match(SnowflakeParserAT)
	}
	{
		p.SetState(1845)
		p.Id_()
	}
	{
		p.SetState(1846)
		p.Match(SnowflakeParserDIVIDE)
	}



	return localctx
}


// IExternal_stageContext is an interface to support dynamic dispatch.
type IExternal_stageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExternal_stageContext differentiates from other interfaces.
	IsExternal_stageContext()
}

type External_stageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternal_stageContext() *External_stageContext {
	var p = new(External_stageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_external_stage
	return p
}

func (*External_stageContext) IsExternal_stageContext() {}

func NewExternal_stageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *External_stageContext {
	var p = new(External_stageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_external_stage

	return p
}

func (s *External_stageContext) GetParser() antlr.Parser { return s.parser }

func (s *External_stageContext) AT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAT, 0)
}

func (s *External_stageContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *External_stageContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDIVIDE, 0)
}

func (s *External_stageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *External_stageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *External_stageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExternal_stage(s)
	}
}

func (s *External_stageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExternal_stage(s)
	}
}

func (s *External_stageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExternal_stage(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) External_stage() (localctx IExternal_stageContext) {
	this := p
	_ = this

	localctx = NewExternal_stageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SnowflakeParserRULE_external_stage)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1848)
		p.Match(SnowflakeParserAT)
	}
	{
		p.SetState(1849)
		p.Id_()
	}
	{
		p.SetState(1850)
		p.Match(SnowflakeParserDIVIDE)
	}



	return localctx
}


// IPutContext is an interface to support dynamic dispatch.
type IPutContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPutContext differentiates from other interfaces.
	IsPutContext()
}

type PutContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPutContext() *PutContext {
	var p = new(PutContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_put
	return p
}

func (*PutContext) IsPutContext() {}

func NewPutContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PutContext {
	var p = new(PutContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_put

	return p
}

func (s *PutContext) GetParser() antlr.Parser { return s.parser }

func (s *PutContext) PUT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPUT, 0)
}

func (s *PutContext) FILE_PATH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE_PATH, 0)
}

func (s *PutContext) Internal_stage() IInternal_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInternal_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInternal_stageContext)
}

func (s *PutContext) PARALLEL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPARALLEL, 0)
}

func (s *PutContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *PutContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *PutContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *PutContext) AUTO_COMPRESS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTO_COMPRESS, 0)
}

func (s *PutContext) AllTrue_false() []ITrue_falseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITrue_falseContext); ok {
			len++
		}
	}

	tst := make([]ITrue_falseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITrue_falseContext); ok {
			tst[i] = t.(ITrue_falseContext)
			i++
		}
	}

	return tst
}

func (s *PutContext) True_false(i int) ITrue_falseContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *PutContext) SOURCE_COMPRESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSOURCE_COMPRESSION, 0)
}

func (s *PutContext) OVERWRITE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOVERWRITE, 0)
}

func (s *PutContext) AUTO_DETECT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTO_DETECT, 0)
}

func (s *PutContext) GZIP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGZIP, 0)
}

func (s *PutContext) BZ2() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBZ2, 0)
}

func (s *PutContext) BROTLI() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBROTLI, 0)
}

func (s *PutContext) ZSTD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserZSTD, 0)
}

func (s *PutContext) DEFLATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFLATE, 0)
}

func (s *PutContext) RAW_DEFLATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRAW_DEFLATE, 0)
}

func (s *PutContext) NONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNONE, 0)
}

func (s *PutContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PutContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PutContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterPut(s)
	}
}

func (s *PutContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitPut(s)
	}
}

func (s *PutContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitPut(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Put() (localctx IPutContext) {
	this := p
	_ = this

	localctx = NewPutContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SnowflakeParserRULE_put)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1852)
		p.Match(SnowflakeParserPUT)
	}
	{
		p.SetState(1853)
		p.Match(SnowflakeParserFILE_PATH)
	}
	{
		p.SetState(1854)
		p.Internal_stage()
	}
	p.SetState(1858)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserPARALLEL {
		{
			p.SetState(1855)
			p.Match(SnowflakeParserPARALLEL)
		}
		{
			p.SetState(1856)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(1857)
			p.Num()
		}

	}
	p.SetState(1863)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAUTO_COMPRESS {
		{
			p.SetState(1860)
			p.Match(SnowflakeParserAUTO_COMPRESS)
		}
		{
			p.SetState(1861)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(1862)
			p.True_false()
		}

	}
	p.SetState(1868)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSOURCE_COMPRESSION {
		{
			p.SetState(1865)
			p.Match(SnowflakeParserSOURCE_COMPRESSION)
		}
		{
			p.SetState(1866)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(1867)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la - 61)) & ^0x3f) == 0 && ((int64(1) << (_la - 61)) & 19791209299969) != 0 || _la == SnowflakeParserDEFLATE || _la == SnowflakeParserGZIP || _la == SnowflakeParserNONE || _la == SnowflakeParserRAW_DEFLATE || _la == SnowflakeParserZSTD) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1873)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOVERWRITE {
		{
			p.SetState(1870)
			p.Match(SnowflakeParserOVERWRITE)
		}
		{
			p.SetState(1871)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(1872)
			p.True_false()
		}

	}



	return localctx
}


// IRemoveContext is an interface to support dynamic dispatch.
type IRemoveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRemoveContext differentiates from other interfaces.
	IsRemoveContext()
}

type RemoveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRemoveContext() *RemoveContext {
	var p = new(RemoveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_remove
	return p
}

func (*RemoveContext) IsRemoveContext() {}

func NewRemoveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RemoveContext {
	var p = new(RemoveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_remove

	return p
}

func (s *RemoveContext) GetParser() antlr.Parser { return s.parser }

func (s *RemoveContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREMOVE, 0)
}

func (s *RemoveContext) Internal_stage() IInternal_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInternal_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInternal_stageContext)
}

func (s *RemoveContext) External_stage() IExternal_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternal_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternal_stageContext)
}

func (s *RemoveContext) Pattern() IPatternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *RemoveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RemoveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *RemoveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterRemove(s)
	}
}

func (s *RemoveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitRemove(s)
	}
}

func (s *RemoveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitRemove(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Remove() (localctx IRemoveContext) {
	this := p
	_ = this

	localctx = NewRemoveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SnowflakeParserRULE_remove)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1875)
		p.Match(SnowflakeParserREMOVE)
	}
	p.SetState(1878)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1876)
			p.Internal_stage()
		}


	case 2:
		{
			p.SetState(1877)
			p.External_stage()
		}

	}
	p.SetState(1881)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserPATTERN {
		{
			p.SetState(1880)
			p.Pattern()
		}

	}



	return localctx
}


// IRevoke_from_roleContext is an interface to support dynamic dispatch.
type IRevoke_from_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevoke_from_roleContext differentiates from other interfaces.
	IsRevoke_from_roleContext()
}

type Revoke_from_roleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevoke_from_roleContext() *Revoke_from_roleContext {
	var p = new(Revoke_from_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_revoke_from_role
	return p
}

func (*Revoke_from_roleContext) IsRevoke_from_roleContext() {}

func NewRevoke_from_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Revoke_from_roleContext {
	var p = new(Revoke_from_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_revoke_from_role

	return p
}

func (s *Revoke_from_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Revoke_from_roleContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREVOKE, 0)
}

func (s *Revoke_from_roleContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *Revoke_from_roleContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Revoke_from_roleContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Revoke_from_roleContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Revoke_from_roleContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Revoke_from_roleContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Revoke_from_roleContext) FUTURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUTURE, 0)
}

func (s *Revoke_from_roleContext) Object_type_plural() IObject_type_pluralContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_type_pluralContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_type_pluralContext)
}

func (s *Revoke_from_roleContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Revoke_from_roleContext) GRANT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGRANT, 0)
}

func (s *Revoke_from_roleContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOPTION, 0)
}

func (s *Revoke_from_roleContext) FOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFOR, 0)
}

func (s *Revoke_from_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, 0)
}

func (s *Revoke_from_roleContext) Cascade_restrict() ICascade_restrictContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICascade_restrictContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Revoke_from_roleContext) Global_privilege() IGlobal_privilegeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGlobal_privilegeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGlobal_privilegeContext)
}

func (s *Revoke_from_roleContext) AllALL() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserALL)
}

func (s *Revoke_from_roleContext) ALL(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, i)
}

func (s *Revoke_from_roleContext) Account_object_privileges() IAccount_object_privilegesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccount_object_privilegesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccount_object_privilegesContext)
}

func (s *Revoke_from_roleContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESOURCE, 0)
}

func (s *Revoke_from_roleContext) MONITOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMONITOR, 0)
}

func (s *Revoke_from_roleContext) WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE, 0)
}

func (s *Revoke_from_roleContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Revoke_from_roleContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Revoke_from_roleContext) Schema_privileges() ISchema_privilegesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_privilegesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_privilegesContext)
}

func (s *Revoke_from_roleContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Revoke_from_roleContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Revoke_from_roleContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMAS, 0)
}

func (s *Revoke_from_roleContext) Schema_object_privileges() ISchema_object_privilegesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_object_privilegesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_object_privilegesContext)
}

func (s *Revoke_from_roleContext) Object_type() IObject_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_typeContext)
}

func (s *Revoke_from_roleContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIVILEGES, 0)
}

func (s *Revoke_from_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Revoke_from_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Revoke_from_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterRevoke_from_role(s)
	}
}

func (s *Revoke_from_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitRevoke_from_role(s)
	}
}

func (s *Revoke_from_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitRevoke_from_role(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Revoke_from_role() (localctx IRevoke_from_roleContext) {
	this := p
	_ = this

	localctx = NewRevoke_from_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SnowflakeParserRULE_revoke_from_role)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1883)
		p.Match(SnowflakeParserREVOKE)
	}
	p.SetState(1887)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserGRANT {
		{
			p.SetState(1884)
			p.Match(SnowflakeParserGRANT)
		}
		{
			p.SetState(1885)
			p.Match(SnowflakeParserOPTION)
		}
		{
			p.SetState(1886)
			p.Match(SnowflakeParserFOR)
		}

	}
	p.SetState(1979)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1894)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserAPPLY, SnowflakeParserATTACH, SnowflakeParserCREATE, SnowflakeParserEXECUTE, SnowflakeParserIMPORT, SnowflakeParserMANAGE, SnowflakeParserMONITOR, SnowflakeParserOVERRIDE:
			{
				p.SetState(1889)
				p.Global_privilege()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1890)
				p.Match(SnowflakeParserALL)
			}
			p.SetState(1892)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserPRIVILEGES {
				{
					p.SetState(1891)
					p.Match(SnowflakeParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1896)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(1897)
			p.Match(SnowflakeParserACCOUNT)
		}


	case 2:
		p.SetState(1903)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserCREATE, SnowflakeParserIMPORTED, SnowflakeParserMODIFY, SnowflakeParserMONITOR, SnowflakeParserOPERATE, SnowflakeParserUSAGE, SnowflakeParserUSE_ANY_ROLE:
			{
				p.SetState(1898)
				p.Account_object_privileges()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1899)
				p.Match(SnowflakeParserALL)
			}
			p.SetState(1901)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserPRIVILEGES {
				{
					p.SetState(1900)
					p.Match(SnowflakeParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1905)
			p.Match(SnowflakeParserON)
		}
		p.SetState(1911)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserRESOURCE:
			{
				p.SetState(1906)
				p.Match(SnowflakeParserRESOURCE)
			}
			{
				p.SetState(1907)
				p.Match(SnowflakeParserMONITOR)
			}


		case SnowflakeParserWAREHOUSE:
			{
				p.SetState(1908)
				p.Match(SnowflakeParserWAREHOUSE)
			}


		case SnowflakeParserDATABASE:
			{
				p.SetState(1909)
				p.Match(SnowflakeParserDATABASE)
			}


		case SnowflakeParserINTEGRATION:
			{
				p.SetState(1910)
				p.Match(SnowflakeParserINTEGRATION)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1913)
			p.Object_name()
		}


	case 3:
		p.SetState(1919)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserADD, SnowflakeParserCREATE, SnowflakeParserMODIFY, SnowflakeParserMONITOR, SnowflakeParserUSAGE:
			{
				p.SetState(1914)
				p.Schema_privileges()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1915)
				p.Match(SnowflakeParserALL)
			}
			p.SetState(1917)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserPRIVILEGES {
				{
					p.SetState(1916)
					p.Match(SnowflakeParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1921)
			p.Match(SnowflakeParserON)
		}
		p.SetState(1929)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSCHEMA:
			{
				p.SetState(1922)
				p.Match(SnowflakeParserSCHEMA)
			}
			{
				p.SetState(1923)
				p.Schema_name()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1924)
				p.Match(SnowflakeParserALL)
			}
			{
				p.SetState(1925)
				p.Match(SnowflakeParserSCHEMAS)
			}
			{
				p.SetState(1926)
				p.Match(SnowflakeParserIN)
			}
			{
				p.SetState(1927)
				p.Match(SnowflakeParserDATABASE)
			}
			{
				p.SetState(1928)
				p.Id_()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 4:
		p.SetState(1936)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserADD, SnowflakeParserCREATE, SnowflakeParserMODIFY, SnowflakeParserMONITOR, SnowflakeParserUSAGE:
			{
				p.SetState(1931)
				p.Schema_privileges()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1932)
				p.Match(SnowflakeParserALL)
			}
			p.SetState(1934)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserPRIVILEGES {
				{
					p.SetState(1933)
					p.Match(SnowflakeParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1938)
			p.Match(SnowflakeParserON)
		}

		{
			p.SetState(1939)
			p.Match(SnowflakeParserFUTURE)
		}
		{
			p.SetState(1940)
			p.Match(SnowflakeParserSCHEMAS)
		}
		{
			p.SetState(1941)
			p.Match(SnowflakeParserIN)
		}
		{
			p.SetState(1942)
			p.Match(SnowflakeParserDATABASE)
		}



	case 5:
		p.SetState(1948)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserAPPLY, SnowflakeParserDELETE, SnowflakeParserINSERT, SnowflakeParserMONITOR, SnowflakeParserOPERATE, SnowflakeParserREAD, SnowflakeParserREFERENCES, SnowflakeParserSELECT, SnowflakeParserTRUNCATE, SnowflakeParserUPDATE, SnowflakeParserUSAGE:
			{
				p.SetState(1943)
				p.Schema_object_privileges()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1944)
				p.Match(SnowflakeParserALL)
			}
			p.SetState(1946)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserPRIVILEGES {
				{
					p.SetState(1945)
					p.Match(SnowflakeParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1950)
			p.Match(SnowflakeParserON)
		}
		p.SetState(1960)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserACCOUNT, SnowflakeParserDATABASES, SnowflakeParserINTEGRATIONS, SnowflakeParserNETWORK, SnowflakeParserRESOURCE, SnowflakeParserROLES, SnowflakeParserSHARES, SnowflakeParserUSERS, SnowflakeParserWAREHOUSES:
			{
				p.SetState(1951)
				p.Object_type()
			}
			{
				p.SetState(1952)
				p.Object_name()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1954)
				p.Match(SnowflakeParserALL)
			}
			{
				p.SetState(1955)
				p.Object_type_plural()
			}
			{
				p.SetState(1956)
				p.Match(SnowflakeParserIN)
			}
			{
				p.SetState(1957)
				p.Match(SnowflakeParserSCHEMA)
			}
			{
				p.SetState(1958)
				p.Schema_name()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 6:
		p.SetState(1967)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserAPPLY, SnowflakeParserDELETE, SnowflakeParserINSERT, SnowflakeParserMONITOR, SnowflakeParserOPERATE, SnowflakeParserREAD, SnowflakeParserREFERENCES, SnowflakeParserSELECT, SnowflakeParserTRUNCATE, SnowflakeParserUPDATE, SnowflakeParserUSAGE:
			{
				p.SetState(1962)
				p.Schema_object_privileges()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1963)
				p.Match(SnowflakeParserALL)
			}
			p.SetState(1965)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserPRIVILEGES {
				{
					p.SetState(1964)
					p.Match(SnowflakeParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1969)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(1970)
			p.Match(SnowflakeParserFUTURE)
		}
		{
			p.SetState(1971)
			p.Object_type_plural()
		}
		{
			p.SetState(1972)
			p.Match(SnowflakeParserIN)
		}
		p.SetState(1977)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserDATABASE:
			{
				p.SetState(1973)
				p.Match(SnowflakeParserDATABASE)
			}
			{
				p.SetState(1974)
				p.Id_()
			}


		case SnowflakeParserSCHEMA:
			{
				p.SetState(1975)
				p.Match(SnowflakeParserSCHEMA)
			}
			{
				p.SetState(1976)
				p.Schema_name()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	{
		p.SetState(1981)
		p.Match(SnowflakeParserFROM)
	}
	p.SetState(1983)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserROLE {
		{
			p.SetState(1982)
			p.Match(SnowflakeParserROLE)
		}

	}
	{
		p.SetState(1985)
		p.Id_()
	}
	p.SetState(1987)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCASCADE || _la == SnowflakeParserRESTRICT {
		{
			p.SetState(1986)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IRevoke_from_shareContext is an interface to support dynamic dispatch.
type IRevoke_from_shareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevoke_from_shareContext differentiates from other interfaces.
	IsRevoke_from_shareContext()
}

type Revoke_from_shareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevoke_from_shareContext() *Revoke_from_shareContext {
	var p = new(Revoke_from_shareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_revoke_from_share
	return p
}

func (*Revoke_from_shareContext) IsRevoke_from_shareContext() {}

func NewRevoke_from_shareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Revoke_from_shareContext {
	var p = new(Revoke_from_shareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_revoke_from_share

	return p
}

func (s *Revoke_from_shareContext) GetParser() antlr.Parser { return s.parser }

func (s *Revoke_from_shareContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREVOKE, 0)
}

func (s *Revoke_from_shareContext) Object_privilege() IObject_privilegeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_privilegeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_privilegeContext)
}

func (s *Revoke_from_shareContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Revoke_from_shareContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *Revoke_from_shareContext) SHARE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARE, 0)
}

func (s *Revoke_from_shareContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Revoke_from_shareContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Revoke_from_shareContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Revoke_from_shareContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Revoke_from_shareContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Revoke_from_shareContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Revoke_from_shareContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Revoke_from_shareContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *Revoke_from_shareContext) TABLES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLES, 0)
}

func (s *Revoke_from_shareContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Revoke_from_shareContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Revoke_from_shareContext) VIEWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEWS, 0)
}

func (s *Revoke_from_shareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Revoke_from_shareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Revoke_from_shareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterRevoke_from_share(s)
	}
}

func (s *Revoke_from_shareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitRevoke_from_share(s)
	}
}

func (s *Revoke_from_shareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitRevoke_from_share(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Revoke_from_share() (localctx IRevoke_from_shareContext) {
	this := p
	_ = this

	localctx = NewRevoke_from_shareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SnowflakeParserRULE_revoke_from_share)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1989)
		p.Match(SnowflakeParserREVOKE)
	}
	{
		p.SetState(1990)
		p.Object_privilege()
	}
	{
		p.SetState(1991)
		p.Match(SnowflakeParserON)
	}
	p.SetState(2014)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1992)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(1993)
			p.Id_()
		}


	case 2:
		{
			p.SetState(1994)
			p.Match(SnowflakeParserSCHEMA)
		}
		{
			p.SetState(1995)
			p.Schema_name()
		}


	case 3:
		p.SetState(2003)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserTABLE:
			{
				p.SetState(1996)
				p.Match(SnowflakeParserTABLE)
			}
			{
				p.SetState(1997)
				p.Object_name()
			}


		case SnowflakeParserALL:
			{
				p.SetState(1998)
				p.Match(SnowflakeParserALL)
			}
			{
				p.SetState(1999)
				p.Match(SnowflakeParserTABLES)
			}
			{
				p.SetState(2000)
				p.Match(SnowflakeParserIN)
			}
			{
				p.SetState(2001)
				p.Match(SnowflakeParserSCHEMA)
			}
			{
				p.SetState(2002)
				p.Schema_name()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 4:
		p.SetState(2012)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserVIEW:
			{
				p.SetState(2005)
				p.Match(SnowflakeParserVIEW)
			}
			{
				p.SetState(2006)
				p.Object_name()
			}


		case SnowflakeParserALL:
			{
				p.SetState(2007)
				p.Match(SnowflakeParserALL)
			}
			{
				p.SetState(2008)
				p.Match(SnowflakeParserVIEWS)
			}
			{
				p.SetState(2009)
				p.Match(SnowflakeParserIN)
			}
			{
				p.SetState(2010)
				p.Match(SnowflakeParserSCHEMA)
			}
			{
				p.SetState(2011)
				p.Schema_name()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	{
		p.SetState(2016)
		p.Match(SnowflakeParserFROM)
	}
	{
		p.SetState(2017)
		p.Match(SnowflakeParserSHARE)
	}
	{
		p.SetState(2018)
		p.Id_()
	}



	return localctx
}


// IRevoke_roleContext is an interface to support dynamic dispatch.
type IRevoke_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevoke_roleContext differentiates from other interfaces.
	IsRevoke_roleContext()
}

type Revoke_roleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevoke_roleContext() *Revoke_roleContext {
	var p = new(Revoke_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_revoke_role
	return p
}

func (*Revoke_roleContext) IsRevoke_roleContext() {}

func NewRevoke_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Revoke_roleContext {
	var p = new(Revoke_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_revoke_role

	return p
}

func (s *Revoke_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Revoke_roleContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREVOKE, 0)
}

func (s *Revoke_roleContext) AllROLE() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserROLE)
}

func (s *Revoke_roleContext) ROLE(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, i)
}

func (s *Revoke_roleContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Revoke_roleContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Revoke_roleContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *Revoke_roleContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Revoke_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Revoke_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Revoke_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterRevoke_role(s)
	}
}

func (s *Revoke_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitRevoke_role(s)
	}
}

func (s *Revoke_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitRevoke_role(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Revoke_role() (localctx IRevoke_roleContext) {
	this := p
	_ = this

	localctx = NewRevoke_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SnowflakeParserRULE_revoke_role)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2020)
		p.Match(SnowflakeParserREVOKE)
	}
	{
		p.SetState(2021)
		p.Match(SnowflakeParserROLE)
	}
	{
		p.SetState(2022)
		p.Id_()
	}
	{
		p.SetState(2023)
		p.Match(SnowflakeParserFROM)
	}
	p.SetState(2028)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserROLE:
		{
			p.SetState(2024)
			p.Match(SnowflakeParserROLE)
		}
		{
			p.SetState(2025)
			p.Id_()
		}


	case SnowflakeParserUSER:
		{
			p.SetState(2026)
			p.Match(SnowflakeParserUSER)
		}
		{
			p.SetState(2027)
			p.Id_()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IRollbackContext is an interface to support dynamic dispatch.
type IRollbackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollbackContext differentiates from other interfaces.
	IsRollbackContext()
}

type RollbackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollbackContext() *RollbackContext {
	var p = new(RollbackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_rollback
	return p
}

func (*RollbackContext) IsRollbackContext() {}

func NewRollbackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RollbackContext {
	var p = new(RollbackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_rollback

	return p
}

func (s *RollbackContext) GetParser() antlr.Parser { return s.parser }

func (s *RollbackContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLLBACK, 0)
}

func (s *RollbackContext) WORK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWORK, 0)
}

func (s *RollbackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RollbackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *RollbackContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterRollback(s)
	}
}

func (s *RollbackContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitRollback(s)
	}
}

func (s *RollbackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitRollback(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Rollback() (localctx IRollbackContext) {
	this := p
	_ = this

	localctx = NewRollbackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SnowflakeParserRULE_rollback)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2030)
		p.Match(SnowflakeParserROLLBACK)
	}
	p.SetState(2032)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserWORK {
		{
			p.SetState(2031)
			p.Match(SnowflakeParserWORK)
		}

	}



	return localctx
}


// ISetContext is an interface to support dynamic dispatch.
type ISetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetContext differentiates from other interfaces.
	IsSetContext()
}

type SetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetContext() *SetContext {
	var p = new(SetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_set
	return p
}

func (*SetContext) IsSetContext() {}

func NewSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetContext {
	var p = new(SetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_set

	return p
}

func (s *SetContext) GetParser() antlr.Parser { return s.parser }

func (s *SetContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *SetContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *SetContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *SetContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *SetContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *SetContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SetContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *SetContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *SetContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *SetContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *SetContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *SetContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *SetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSet(s)
	}
}

func (s *SetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSet(s)
	}
}

func (s *SetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSet(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Set() (localctx ISetContext) {
	this := p
	_ = this

	localctx = NewSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SnowflakeParserRULE_set)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2062)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2034)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(2035)
			p.Id_()
		}
		{
			p.SetState(2036)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2037)
			p.expr(0)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2039)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(2040)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(2041)
			p.Id_()
		}
		p.SetState(2046)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(2042)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(2043)
				p.Id_()
			}


			p.SetState(2048)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2049)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		{
			p.SetState(2050)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2051)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(2052)
			p.expr(0)
		}
		p.SetState(2057)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(2053)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(2054)
				p.expr(0)
			}


			p.SetState(2059)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2060)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}


	return localctx
}


// ITruncate_materialized_viewContext is an interface to support dynamic dispatch.
type ITruncate_materialized_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTruncate_materialized_viewContext differentiates from other interfaces.
	IsTruncate_materialized_viewContext()
}

type Truncate_materialized_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruncate_materialized_viewContext() *Truncate_materialized_viewContext {
	var p = new(Truncate_materialized_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_truncate_materialized_view
	return p
}

func (*Truncate_materialized_viewContext) IsTruncate_materialized_viewContext() {}

func NewTruncate_materialized_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Truncate_materialized_viewContext {
	var p = new(Truncate_materialized_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_truncate_materialized_view

	return p
}

func (s *Truncate_materialized_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Truncate_materialized_viewContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRUNCATE, 0)
}

func (s *Truncate_materialized_viewContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATERIALIZED, 0)
}

func (s *Truncate_materialized_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Truncate_materialized_viewContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Truncate_materialized_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Truncate_materialized_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Truncate_materialized_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTruncate_materialized_view(s)
	}
}

func (s *Truncate_materialized_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTruncate_materialized_view(s)
	}
}

func (s *Truncate_materialized_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTruncate_materialized_view(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Truncate_materialized_view() (localctx ITruncate_materialized_viewContext) {
	this := p
	_ = this

	localctx = NewTruncate_materialized_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SnowflakeParserRULE_truncate_materialized_view)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2064)
		p.Match(SnowflakeParserTRUNCATE)
	}
	{
		p.SetState(2065)
		p.Match(SnowflakeParserMATERIALIZED)
	}
	{
		p.SetState(2066)
		p.Match(SnowflakeParserVIEW)
	}
	{
		p.SetState(2067)
		p.Object_name()
	}



	return localctx
}


// ITruncate_tableContext is an interface to support dynamic dispatch.
type ITruncate_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTruncate_tableContext differentiates from other interfaces.
	IsTruncate_tableContext()
}

type Truncate_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruncate_tableContext() *Truncate_tableContext {
	var p = new(Truncate_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_truncate_table
	return p
}

func (*Truncate_tableContext) IsTruncate_tableContext() {}

func NewTruncate_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Truncate_tableContext {
	var p = new(Truncate_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_truncate_table

	return p
}

func (s *Truncate_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Truncate_tableContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRUNCATE, 0)
}

func (s *Truncate_tableContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Truncate_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Truncate_tableContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Truncate_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Truncate_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Truncate_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTruncate_table(s)
	}
}

func (s *Truncate_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTruncate_table(s)
	}
}

func (s *Truncate_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTruncate_table(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Truncate_table() (localctx ITruncate_tableContext) {
	this := p
	_ = this

	localctx = NewTruncate_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SnowflakeParserRULE_truncate_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2069)
		p.Match(SnowflakeParserTRUNCATE)
	}
	p.SetState(2071)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTABLE {
		{
			p.SetState(2070)
			p.Match(SnowflakeParserTABLE)
		}

	}
	p.SetState(2074)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(2073)
			p.If_exists()
		}

	}
	{
		p.SetState(2076)
		p.Object_name()
	}



	return localctx
}


// IUnsetContext is an interface to support dynamic dispatch.
type IUnsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnsetContext differentiates from other interfaces.
	IsUnsetContext()
}

type UnsetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnsetContext() *UnsetContext {
	var p = new(UnsetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_unset
	return p
}

func (*UnsetContext) IsUnsetContext() {}

func NewUnsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnsetContext {
	var p = new(UnsetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_unset

	return p
}

func (s *UnsetContext) GetParser() antlr.Parser { return s.parser }

func (s *UnsetContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *UnsetContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *UnsetContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *UnsetContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *UnsetContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *UnsetContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *UnsetContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *UnsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *UnsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUnset(s)
	}
}

func (s *UnsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUnset(s)
	}
}

func (s *UnsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUnset(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Unset() (localctx IUnsetContext) {
	this := p
	_ = this

	localctx = NewUnsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SnowflakeParserRULE_unset)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2092)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 151, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2078)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(2079)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2080)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(2081)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(2082)
			p.Id_()
		}
		p.SetState(2087)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(2083)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(2084)
				p.Id_()
			}


			p.SetState(2089)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2090)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}


	return localctx
}


// IAlter_commandContext is an interface to support dynamic dispatch.
type IAlter_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_commandContext differentiates from other interfaces.
	IsAlter_commandContext()
}

type Alter_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_commandContext() *Alter_commandContext {
	var p = new(Alter_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_command
	return p
}

func (*Alter_commandContext) IsAlter_commandContext() {}

func NewAlter_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_commandContext {
	var p = new(Alter_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_command

	return p
}

func (s *Alter_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_commandContext) Alter_account() IAlter_accountContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_accountContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_accountContext)
}

func (s *Alter_commandContext) Alter_api_integration() IAlter_api_integrationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_api_integrationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_api_integrationContext)
}

func (s *Alter_commandContext) Alter_connection() IAlter_connectionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_connectionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_connectionContext)
}

func (s *Alter_commandContext) Alter_database() IAlter_databaseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_databaseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_databaseContext)
}

func (s *Alter_commandContext) Alter_external_table() IAlter_external_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_external_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_external_tableContext)
}

func (s *Alter_commandContext) Alter_failover_group() IAlter_failover_groupContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_failover_groupContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_failover_groupContext)
}

func (s *Alter_commandContext) Alter_file_format() IAlter_file_formatContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_file_formatContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_file_formatContext)
}

func (s *Alter_commandContext) Alter_function() IAlter_functionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_functionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_functionContext)
}

func (s *Alter_commandContext) Alter_masking_policy() IAlter_masking_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_masking_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_masking_policyContext)
}

func (s *Alter_commandContext) Alter_materialized_view() IAlter_materialized_viewContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_materialized_viewContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_materialized_viewContext)
}

func (s *Alter_commandContext) Alter_network_policy() IAlter_network_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_network_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_network_policyContext)
}

func (s *Alter_commandContext) Alter_notification_integration() IAlter_notification_integrationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_notification_integrationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_notification_integrationContext)
}

func (s *Alter_commandContext) Alter_pipe() IAlter_pipeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_pipeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_pipeContext)
}

func (s *Alter_commandContext) Alter_procedure() IAlter_procedureContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_procedureContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_procedureContext)
}

func (s *Alter_commandContext) Alter_replication_group() IAlter_replication_groupContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_replication_groupContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_replication_groupContext)
}

func (s *Alter_commandContext) Alter_resource_monitor() IAlter_resource_monitorContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_resource_monitorContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_resource_monitorContext)
}

func (s *Alter_commandContext) Alter_role() IAlter_roleContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_roleContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_roleContext)
}

func (s *Alter_commandContext) Alter_row_access_policy() IAlter_row_access_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_row_access_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_row_access_policyContext)
}

func (s *Alter_commandContext) Alter_schema() IAlter_schemaContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_schemaContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_schemaContext)
}

func (s *Alter_commandContext) Alter_security_integration() IAlter_security_integrationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_security_integrationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_security_integrationContext)
}

func (s *Alter_commandContext) Alter_security_integration_external_oauth() IAlter_security_integration_external_oauthContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_security_integration_external_oauthContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_security_integration_external_oauthContext)
}

func (s *Alter_commandContext) Alter_security_integration_snowflake_oauth() IAlter_security_integration_snowflake_oauthContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_security_integration_snowflake_oauthContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_security_integration_snowflake_oauthContext)
}

func (s *Alter_commandContext) Alter_security_integration_saml2() IAlter_security_integration_saml2Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_security_integration_saml2Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_security_integration_saml2Context)
}

func (s *Alter_commandContext) Alter_security_integration_scim() IAlter_security_integration_scimContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_security_integration_scimContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_security_integration_scimContext)
}

func (s *Alter_commandContext) Alter_sequence() IAlter_sequenceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_sequenceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_sequenceContext)
}

func (s *Alter_commandContext) Alter_session() IAlter_sessionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_sessionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_sessionContext)
}

func (s *Alter_commandContext) Alter_session_policy() IAlter_session_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_session_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_session_policyContext)
}

func (s *Alter_commandContext) Alter_share() IAlter_shareContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_shareContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_shareContext)
}

func (s *Alter_commandContext) Alter_stage() IAlter_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_stageContext)
}

func (s *Alter_commandContext) Alter_storage_integration() IAlter_storage_integrationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_storage_integrationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_storage_integrationContext)
}

func (s *Alter_commandContext) Alter_stream() IAlter_streamContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_streamContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_streamContext)
}

func (s *Alter_commandContext) Alter_table() IAlter_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_tableContext)
}

func (s *Alter_commandContext) Alter_table_alter_column() IAlter_table_alter_columnContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_table_alter_columnContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_table_alter_columnContext)
}

func (s *Alter_commandContext) Alter_tag() IAlter_tagContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_tagContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_tagContext)
}

func (s *Alter_commandContext) Alter_task() IAlter_taskContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_taskContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_taskContext)
}

func (s *Alter_commandContext) Alter_user() IAlter_userContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_userContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_userContext)
}

func (s *Alter_commandContext) Alter_view() IAlter_viewContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_viewContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_viewContext)
}

func (s *Alter_commandContext) Alter_warehouse() IAlter_warehouseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_warehouseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_warehouseContext)
}

func (s *Alter_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_command(s)
	}
}

func (s *Alter_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_command(s)
	}
}

func (s *Alter_commandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_command(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_command() (localctx IAlter_commandContext) {
	this := p
	_ = this

	localctx = NewAlter_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SnowflakeParserRULE_alter_command)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2132)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2094)
			p.Alter_account()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2095)
			p.Alter_api_integration()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2096)
			p.Alter_connection()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2097)
			p.Alter_database()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2098)
			p.Alter_external_table()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2099)
			p.Alter_failover_group()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2100)
			p.Alter_file_format()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2101)
			p.Alter_function()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2102)
			p.Alter_masking_policy()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2103)
			p.Alter_materialized_view()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2104)
			p.Alter_network_policy()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2105)
			p.Alter_notification_integration()
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2106)
			p.Alter_pipe()
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2107)
			p.Alter_procedure()
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2108)
			p.Alter_replication_group()
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2109)
			p.Alter_resource_monitor()
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2110)
			p.Alter_role()
		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2111)
			p.Alter_row_access_policy()
		}


	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(2112)
			p.Alter_schema()
		}


	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(2113)
			p.Alter_security_integration()
		}


	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(2114)
			p.Alter_security_integration_external_oauth()
		}


	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(2115)
			p.Alter_security_integration_snowflake_oauth()
		}


	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(2116)
			p.Alter_security_integration_saml2()
		}


	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(2117)
			p.Alter_security_integration_scim()
		}


	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(2118)
			p.Alter_sequence()
		}


	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(2119)
			p.Alter_session()
		}


	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(2120)
			p.Alter_session_policy()
		}


	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(2121)
			p.Alter_share()
		}


	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(2122)
			p.Alter_stage()
		}


	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(2123)
			p.Alter_storage_integration()
		}


	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(2124)
			p.Alter_stream()
		}


	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(2125)
			p.Alter_table()
		}


	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(2126)
			p.Alter_table_alter_column()
		}


	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(2127)
			p.Alter_tag()
		}


	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(2128)
			p.Alter_task()
		}


	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(2129)
			p.Alter_user()
		}


	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(2130)
			p.Alter_view()
		}


	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(2131)
			p.Alter_warehouse()
		}

	}


	return localctx
}


// IAccount_paramsContext is an interface to support dynamic dispatch.
type IAccount_paramsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccount_paramsContext differentiates from other interfaces.
	IsAccount_paramsContext()
}

type Account_paramsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccount_paramsContext() *Account_paramsContext {
	var p = new(Account_paramsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_account_params
	return p
}

func (*Account_paramsContext) IsAccount_paramsContext() {}

func NewAccount_paramsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Account_paramsContext {
	var p = new(Account_paramsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_account_params

	return p
}

func (s *Account_paramsContext) GetParser() antlr.Parser { return s.parser }

func (s *Account_paramsContext) ALLOW_ID_TOKEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOW_ID_TOKEN, 0)
}

func (s *Account_paramsContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Account_paramsContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Account_paramsContext) CLIENT_ENCRYPTION_KEY_SIZE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLIENT_ENCRYPTION_KEY_SIZE, 0)
}

func (s *Account_paramsContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Account_paramsContext) ENFORCE_SESSION_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENFORCE_SESSION_POLICY, 0)
}

func (s *Account_paramsContext) EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST, 0)
}

func (s *Account_paramsContext) INITIAL_REPLICATION_SIZE_LIMIT_IN_TB() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINITIAL_REPLICATION_SIZE_LIMIT_IN_TB, 0)
}

func (s *Account_paramsContext) NETWORK_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK_POLICY, 0)
}

func (s *Account_paramsContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Account_paramsContext) PERIODIC_DATA_REKEYING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPERIODIC_DATA_REKEYING, 0)
}

func (s *Account_paramsContext) PREVENT_UNLOAD_TO_INLINE_URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPREVENT_UNLOAD_TO_INLINE_URL, 0)
}

func (s *Account_paramsContext) PREVENT_UNLOAD_TO_INTERNAL_STAGES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPREVENT_UNLOAD_TO_INTERNAL_STAGES, 0)
}

func (s *Account_paramsContext) REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION, 0)
}

func (s *Account_paramsContext) REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION, 0)
}

func (s *Account_paramsContext) SAML_IDENTITY_PROVIDER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML_IDENTITY_PROVIDER, 0)
}

func (s *Account_paramsContext) Json_literal() IJson_literalContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJson_literalContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJson_literalContext)
}

func (s *Account_paramsContext) SESSION_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION_POLICY, 0)
}

func (s *Account_paramsContext) SSO_LOGIN_PAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSSO_LOGIN_PAGE, 0)
}

func (s *Account_paramsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Account_paramsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Account_paramsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAccount_params(s)
	}
}

func (s *Account_paramsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAccount_params(s)
	}
}

func (s *Account_paramsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAccount_params(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Account_params() (localctx IAccount_paramsContext) {
	this := p
	_ = this

	localctx = NewAccount_paramsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SnowflakeParserRULE_account_params)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2176)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserALLOW_ID_TOKEN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2134)
			p.Match(SnowflakeParserALLOW_ID_TOKEN)
		}
		{
			p.SetState(2135)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2136)
			p.True_false()
		}


	case SnowflakeParserCLIENT_ENCRYPTION_KEY_SIZE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2137)
			p.Match(SnowflakeParserCLIENT_ENCRYPTION_KEY_SIZE)
		}
		{
			p.SetState(2138)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2139)
			p.Num()
		}


	case SnowflakeParserENFORCE_SESSION_POLICY:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2140)
			p.Match(SnowflakeParserENFORCE_SESSION_POLICY)
		}
		{
			p.SetState(2141)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2142)
			p.True_false()
		}


	case SnowflakeParserEXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2143)
			p.Match(SnowflakeParserEXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST)
		}
		{
			p.SetState(2144)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2145)
			p.True_false()
		}


	case SnowflakeParserINITIAL_REPLICATION_SIZE_LIMIT_IN_TB:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2146)
			p.Match(SnowflakeParserINITIAL_REPLICATION_SIZE_LIMIT_IN_TB)
		}
		{
			p.SetState(2147)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2148)
			p.Num()
		}


	case SnowflakeParserNETWORK_POLICY:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2149)
			p.Match(SnowflakeParserNETWORK_POLICY)
		}
		{
			p.SetState(2150)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2151)
			p.String_()
		}


	case SnowflakeParserPERIODIC_DATA_REKEYING:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2152)
			p.Match(SnowflakeParserPERIODIC_DATA_REKEYING)
		}
		{
			p.SetState(2153)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2154)
			p.True_false()
		}


	case SnowflakeParserPREVENT_UNLOAD_TO_INLINE_URL:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2155)
			p.Match(SnowflakeParserPREVENT_UNLOAD_TO_INLINE_URL)
		}
		{
			p.SetState(2156)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2157)
			p.True_false()
		}


	case SnowflakeParserPREVENT_UNLOAD_TO_INTERNAL_STAGES:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2158)
			p.Match(SnowflakeParserPREVENT_UNLOAD_TO_INTERNAL_STAGES)
		}
		{
			p.SetState(2159)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2160)
			p.True_false()
		}


	case SnowflakeParserREQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2161)
			p.Match(SnowflakeParserREQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION)
		}
		{
			p.SetState(2162)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2163)
			p.True_false()
		}


	case SnowflakeParserREQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2164)
			p.Match(SnowflakeParserREQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION)
		}
		{
			p.SetState(2165)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2166)
			p.True_false()
		}


	case SnowflakeParserSAML_IDENTITY_PROVIDER:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2167)
			p.Match(SnowflakeParserSAML_IDENTITY_PROVIDER)
		}
		{
			p.SetState(2168)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2169)
			p.Json_literal()
		}


	case SnowflakeParserSESSION_POLICY:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2170)
			p.Match(SnowflakeParserSESSION_POLICY)
		}
		{
			p.SetState(2171)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2172)
			p.String_()
		}


	case SnowflakeParserSSO_LOGIN_PAGE:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2173)
			p.Match(SnowflakeParserSSO_LOGIN_PAGE)
		}
		{
			p.SetState(2174)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2175)
			p.True_false()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IObject_paramsContext is an interface to support dynamic dispatch.
type IObject_paramsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObject_paramsContext differentiates from other interfaces.
	IsObject_paramsContext()
}

type Object_paramsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObject_paramsContext() *Object_paramsContext {
	var p = new(Object_paramsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_object_params
	return p
}

func (*Object_paramsContext) IsObject_paramsContext() {}

func NewObject_paramsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Object_paramsContext {
	var p = new(Object_paramsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_object_params

	return p
}

func (s *Object_paramsContext) GetParser() antlr.Parser { return s.parser }

func (s *Object_paramsContext) DATA_RETENTION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS, 0)
}

func (s *Object_paramsContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Object_paramsContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Object_paramsContext) MAX_DATA_EXTENSION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS, 0)
}

func (s *Object_paramsContext) Default_ddl_collation() IDefault_ddl_collationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_ddl_collationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_ddl_collationContext)
}

func (s *Object_paramsContext) MAX_CONCURRENCY_LEVEL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_CONCURRENCY_LEVEL, 0)
}

func (s *Object_paramsContext) NETWORK_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK_POLICY, 0)
}

func (s *Object_paramsContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Object_paramsContext) PIPE_EXECUTION_PAUSED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPIPE_EXECUTION_PAUSED, 0)
}

func (s *Object_paramsContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Object_paramsContext) SESSION_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION_POLICY, 0)
}

func (s *Object_paramsContext) STATEMENT_QUEUED_TIMEOUT_IN_SECONDS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTATEMENT_QUEUED_TIMEOUT_IN_SECONDS, 0)
}

func (s *Object_paramsContext) STATEMENT_TIMEOUT_IN_SECONDS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTATEMENT_TIMEOUT_IN_SECONDS, 0)
}

func (s *Object_paramsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Object_paramsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Object_paramsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterObject_params(s)
	}
}

func (s *Object_paramsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitObject_params(s)
	}
}

func (s *Object_paramsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitObject_params(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Object_params() (localctx IObject_paramsContext) {
	this := p
	_ = this

	localctx = NewObject_paramsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SnowflakeParserRULE_object_params)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2203)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserDATA_RETENTION_TIME_IN_DAYS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2178)
			p.Match(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS)
		}
		{
			p.SetState(2179)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2180)
			p.Num()
		}


	case SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2181)
			p.Match(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS)
		}
		{
			p.SetState(2182)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2183)
			p.Num()
		}


	case SnowflakeParserDEFAULT_DDL_COLLATION_:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2184)
			p.Default_ddl_collation()
		}


	case SnowflakeParserMAX_CONCURRENCY_LEVEL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2185)
			p.Match(SnowflakeParserMAX_CONCURRENCY_LEVEL)
		}
		{
			p.SetState(2186)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2187)
			p.Num()
		}


	case SnowflakeParserNETWORK_POLICY:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2188)
			p.Match(SnowflakeParserNETWORK_POLICY)
		}
		{
			p.SetState(2189)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2190)
			p.String_()
		}


	case SnowflakeParserPIPE_EXECUTION_PAUSED:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2191)
			p.Match(SnowflakeParserPIPE_EXECUTION_PAUSED)
		}
		{
			p.SetState(2192)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2193)
			p.True_false()
		}


	case SnowflakeParserSESSION_POLICY:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2194)
			p.Match(SnowflakeParserSESSION_POLICY)
		}
		{
			p.SetState(2195)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2196)
			p.String_()
		}


	case SnowflakeParserSTATEMENT_QUEUED_TIMEOUT_IN_SECONDS:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2197)
			p.Match(SnowflakeParserSTATEMENT_QUEUED_TIMEOUT_IN_SECONDS)
		}
		{
			p.SetState(2198)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2199)
			p.Num()
		}


	case SnowflakeParserSTATEMENT_TIMEOUT_IN_SECONDS:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2200)
			p.Match(SnowflakeParserSTATEMENT_TIMEOUT_IN_SECONDS)
		}
		{
			p.SetState(2201)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2202)
			p.Num()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IDefault_ddl_collationContext is an interface to support dynamic dispatch.
type IDefault_ddl_collationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefault_ddl_collationContext differentiates from other interfaces.
	IsDefault_ddl_collationContext()
}

type Default_ddl_collationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_ddl_collationContext() *Default_ddl_collationContext {
	var p = new(Default_ddl_collationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_default_ddl_collation
	return p
}

func (*Default_ddl_collationContext) IsDefault_ddl_collationContext() {}

func NewDefault_ddl_collationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_ddl_collationContext {
	var p = new(Default_ddl_collationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_default_ddl_collation

	return p
}

func (s *Default_ddl_collationContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_ddl_collationContext) DEFAULT_DDL_COLLATION_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT_DDL_COLLATION_, 0)
}

func (s *Default_ddl_collationContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Default_ddl_collationContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Default_ddl_collationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_ddl_collationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Default_ddl_collationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDefault_ddl_collation(s)
	}
}

func (s *Default_ddl_collationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDefault_ddl_collation(s)
	}
}

func (s *Default_ddl_collationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDefault_ddl_collation(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Default_ddl_collation() (localctx IDefault_ddl_collationContext) {
	this := p
	_ = this

	localctx = NewDefault_ddl_collationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SnowflakeParserRULE_default_ddl_collation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2205)
		p.Match(SnowflakeParserDEFAULT_DDL_COLLATION_)
	}
	{
		p.SetState(2206)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(2207)
		p.String_()
	}



	return localctx
}


// IObject_propertiesContext is an interface to support dynamic dispatch.
type IObject_propertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObject_propertiesContext differentiates from other interfaces.
	IsObject_propertiesContext()
}

type Object_propertiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObject_propertiesContext() *Object_propertiesContext {
	var p = new(Object_propertiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_object_properties
	return p
}

func (*Object_propertiesContext) IsObject_propertiesContext() {}

func NewObject_propertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Object_propertiesContext {
	var p = new(Object_propertiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_object_properties

	return p
}

func (s *Object_propertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *Object_propertiesContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPASSWORD, 0)
}

func (s *Object_propertiesContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Object_propertiesContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Object_propertiesContext) LOGIN_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLOGIN_NAME, 0)
}

func (s *Object_propertiesContext) DISPLAY_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISPLAY_NAME, 0)
}

func (s *Object_propertiesContext) FIRST_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFIRST_NAME, 0)
}

func (s *Object_propertiesContext) MIDDLE_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMIDDLE_NAME, 0)
}

func (s *Object_propertiesContext) LAST_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLAST_NAME, 0)
}

func (s *Object_propertiesContext) EMAIL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEMAIL, 0)
}

func (s *Object_propertiesContext) MUST_CHANGE_PASSWORD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMUST_CHANGE_PASSWORD, 0)
}

func (s *Object_propertiesContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Object_propertiesContext) DISABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISABLED, 0)
}

func (s *Object_propertiesContext) DAYS_TO_EXPIRY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDAYS_TO_EXPIRY, 0)
}

func (s *Object_propertiesContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Object_propertiesContext) MINS_TO_UNLOCK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMINS_TO_UNLOCK, 0)
}

func (s *Object_propertiesContext) DEFAULT_WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT_WAREHOUSE, 0)
}

func (s *Object_propertiesContext) DEFAULT_NAMESPACE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT_NAMESPACE, 0)
}

func (s *Object_propertiesContext) DEFAULT_ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT_ROLE, 0)
}

func (s *Object_propertiesContext) MINS_TO_BYPASS_MFA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMINS_TO_BYPASS_MFA, 0)
}

func (s *Object_propertiesContext) RSA_PUBLIC_KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRSA_PUBLIC_KEY, 0)
}

func (s *Object_propertiesContext) RSA_PUBLIC_KEY_2() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRSA_PUBLIC_KEY_2, 0)
}

func (s *Object_propertiesContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Object_propertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Object_propertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Object_propertiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterObject_properties(s)
	}
}

func (s *Object_propertiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitObject_properties(s)
	}
}

func (s *Object_propertiesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitObject_properties(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Object_properties() (localctx IObject_propertiesContext) {
	this := p
	_ = this

	localctx = NewObject_propertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SnowflakeParserRULE_object_properties)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2263)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserPASSWORD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2209)
			p.Match(SnowflakeParserPASSWORD)
		}
		{
			p.SetState(2210)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2211)
			p.String_()
		}


	case SnowflakeParserLOGIN_NAME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2212)
			p.Match(SnowflakeParserLOGIN_NAME)
		}
		{
			p.SetState(2213)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2214)
			p.String_()
		}


	case SnowflakeParserDISPLAY_NAME:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2215)
			p.Match(SnowflakeParserDISPLAY_NAME)
		}
		{
			p.SetState(2216)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2217)
			p.String_()
		}


	case SnowflakeParserFIRST_NAME:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2218)
			p.Match(SnowflakeParserFIRST_NAME)
		}
		{
			p.SetState(2219)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2220)
			p.String_()
		}


	case SnowflakeParserMIDDLE_NAME:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2221)
			p.Match(SnowflakeParserMIDDLE_NAME)
		}
		{
			p.SetState(2222)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2223)
			p.String_()
		}


	case SnowflakeParserLAST_NAME:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2224)
			p.Match(SnowflakeParserLAST_NAME)
		}
		{
			p.SetState(2225)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2226)
			p.String_()
		}


	case SnowflakeParserEMAIL:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2227)
			p.Match(SnowflakeParserEMAIL)
		}
		{
			p.SetState(2228)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2229)
			p.String_()
		}


	case SnowflakeParserMUST_CHANGE_PASSWORD:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2230)
			p.Match(SnowflakeParserMUST_CHANGE_PASSWORD)
		}
		{
			p.SetState(2231)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2232)
			p.True_false()
		}


	case SnowflakeParserDISABLED:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2233)
			p.Match(SnowflakeParserDISABLED)
		}
		{
			p.SetState(2234)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2235)
			p.True_false()
		}


	case SnowflakeParserDAYS_TO_EXPIRY:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2236)
			p.Match(SnowflakeParserDAYS_TO_EXPIRY)
		}
		{
			p.SetState(2237)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2238)
			p.Num()
		}


	case SnowflakeParserMINS_TO_UNLOCK:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2239)
			p.Match(SnowflakeParserMINS_TO_UNLOCK)
		}
		{
			p.SetState(2240)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2241)
			p.Num()
		}


	case SnowflakeParserDEFAULT_WAREHOUSE:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2242)
			p.Match(SnowflakeParserDEFAULT_WAREHOUSE)
		}
		{
			p.SetState(2243)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2244)
			p.String_()
		}


	case SnowflakeParserDEFAULT_NAMESPACE:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2245)
			p.Match(SnowflakeParserDEFAULT_NAMESPACE)
		}
		{
			p.SetState(2246)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2247)
			p.String_()
		}


	case SnowflakeParserDEFAULT_ROLE:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2248)
			p.Match(SnowflakeParserDEFAULT_ROLE)
		}
		{
			p.SetState(2249)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2250)
			p.String_()
		}


	case SnowflakeParserMINS_TO_BYPASS_MFA:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2251)
			p.Match(SnowflakeParserMINS_TO_BYPASS_MFA)
		}
		{
			p.SetState(2252)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2253)
			p.Num()
		}


	case SnowflakeParserRSA_PUBLIC_KEY:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2254)
			p.Match(SnowflakeParserRSA_PUBLIC_KEY)
		}
		{
			p.SetState(2255)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2256)
			p.String_()
		}


	case SnowflakeParserRSA_PUBLIC_KEY_2:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2257)
			p.Match(SnowflakeParserRSA_PUBLIC_KEY_2)
		}
		{
			p.SetState(2258)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2259)
			p.String_()
		}


	case SnowflakeParserCOMMENT:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2260)
			p.Match(SnowflakeParserCOMMENT)
		}
		{
			p.SetState(2261)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2262)
			p.String_()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISession_paramsContext is an interface to support dynamic dispatch.
type ISession_paramsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSession_paramsContext differentiates from other interfaces.
	IsSession_paramsContext()
}

type Session_paramsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySession_paramsContext() *Session_paramsContext {
	var p = new(Session_paramsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_session_params
	return p
}

func (*Session_paramsContext) IsSession_paramsContext() {}

func NewSession_paramsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Session_paramsContext {
	var p = new(Session_paramsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_session_params

	return p
}

func (s *Session_paramsContext) GetParser() antlr.Parser { return s.parser }

func (s *Session_paramsContext) ABORT_DETACHED_QUERY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserABORT_DETACHED_QUERY, 0)
}

func (s *Session_paramsContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Session_paramsContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Session_paramsContext) AUTOCOMMIT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTOCOMMIT, 0)
}

func (s *Session_paramsContext) BINARY_INPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBINARY_INPUT_FORMAT, 0)
}

func (s *Session_paramsContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Session_paramsContext) BINARY_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBINARY_OUTPUT_FORMAT, 0)
}

func (s *Session_paramsContext) DATE_INPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATE_INPUT_FORMAT, 0)
}

func (s *Session_paramsContext) DATE_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATE_OUTPUT_FORMAT, 0)
}

func (s *Session_paramsContext) ERROR_ON_NONDETERMINISTIC_MERGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserERROR_ON_NONDETERMINISTIC_MERGE, 0)
}

func (s *Session_paramsContext) ERROR_ON_NONDETERMINISTIC_UPDATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserERROR_ON_NONDETERMINISTIC_UPDATE, 0)
}

func (s *Session_paramsContext) JSON_INDENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserJSON_INDENT, 0)
}

func (s *Session_paramsContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Session_paramsContext) LOCK_TIMEOUT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLOCK_TIMEOUT, 0)
}

func (s *Session_paramsContext) QUERY_TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserQUERY_TAG, 0)
}

func (s *Session_paramsContext) ROWS_PER_RESULTSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROWS_PER_RESULTSET, 0)
}

func (s *Session_paramsContext) SIMULATED_DATA_SHARING_CONSUMER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSIMULATED_DATA_SHARING_CONSUMER, 0)
}

func (s *Session_paramsContext) STATEMENT_TIMEOUT_IN_SECONDS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTATEMENT_TIMEOUT_IN_SECONDS, 0)
}

func (s *Session_paramsContext) STRICT_JSON_OUTPUT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRICT_JSON_OUTPUT, 0)
}

func (s *Session_paramsContext) TIMESTAMP_DAY_IS_ALWAYS_24H() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_DAY_IS_ALWAYS_24H, 0)
}

func (s *Session_paramsContext) TIMESTAMP_INPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_INPUT_FORMAT, 0)
}

func (s *Session_paramsContext) TIMESTAMP_LTZ_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_LTZ_OUTPUT_FORMAT, 0)
}

func (s *Session_paramsContext) TIMESTAMP_NTZ_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_NTZ_OUTPUT_FORMAT, 0)
}

func (s *Session_paramsContext) TIMESTAMP_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_OUTPUT_FORMAT, 0)
}

func (s *Session_paramsContext) TIMESTAMP_TYPE_MAPPING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_TYPE_MAPPING, 0)
}

func (s *Session_paramsContext) TIMESTAMP_TZ_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_TZ_OUTPUT_FORMAT, 0)
}

func (s *Session_paramsContext) TIMEZONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMEZONE, 0)
}

func (s *Session_paramsContext) TIME_INPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIME_INPUT_FORMAT, 0)
}

func (s *Session_paramsContext) TIME_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIME_OUTPUT_FORMAT, 0)
}

func (s *Session_paramsContext) TRANSACTION_DEFAULT_ISOLATION_LEVEL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRANSACTION_DEFAULT_ISOLATION_LEVEL, 0)
}

func (s *Session_paramsContext) TWO_DIGIT_CENTURY_START() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTWO_DIGIT_CENTURY_START, 0)
}

func (s *Session_paramsContext) UNSUPPORTED_DDL_ACTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSUPPORTED_DDL_ACTION, 0)
}

func (s *Session_paramsContext) USE_CACHED_RESULT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSE_CACHED_RESULT, 0)
}

func (s *Session_paramsContext) WEEK_OF_YEAR_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWEEK_OF_YEAR_POLICY, 0)
}

func (s *Session_paramsContext) WEEK_START() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWEEK_START, 0)
}

func (s *Session_paramsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Session_paramsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Session_paramsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSession_params(s)
	}
}

func (s *Session_paramsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSession_params(s)
	}
}

func (s *Session_paramsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSession_params(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Session_params() (localctx ISession_paramsContext) {
	this := p
	_ = this

	localctx = NewSession_paramsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SnowflakeParserRULE_session_params)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2358)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserABORT_DETACHED_QUERY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2265)
			p.Match(SnowflakeParserABORT_DETACHED_QUERY)
		}
		{
			p.SetState(2266)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2267)
			p.True_false()
		}


	case SnowflakeParserAUTOCOMMIT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2268)
			p.Match(SnowflakeParserAUTOCOMMIT)
		}
		{
			p.SetState(2269)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2270)
			p.True_false()
		}


	case SnowflakeParserBINARY_INPUT_FORMAT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2271)
			p.Match(SnowflakeParserBINARY_INPUT_FORMAT)
		}
		{
			p.SetState(2272)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2273)
			p.String_()
		}


	case SnowflakeParserBINARY_OUTPUT_FORMAT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2274)
			p.Match(SnowflakeParserBINARY_OUTPUT_FORMAT)
		}
		{
			p.SetState(2275)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2276)
			p.String_()
		}


	case SnowflakeParserDATE_INPUT_FORMAT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2277)
			p.Match(SnowflakeParserDATE_INPUT_FORMAT)
		}
		{
			p.SetState(2278)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2279)
			p.String_()
		}


	case SnowflakeParserDATE_OUTPUT_FORMAT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2280)
			p.Match(SnowflakeParserDATE_OUTPUT_FORMAT)
		}
		{
			p.SetState(2281)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2282)
			p.String_()
		}


	case SnowflakeParserERROR_ON_NONDETERMINISTIC_MERGE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2283)
			p.Match(SnowflakeParserERROR_ON_NONDETERMINISTIC_MERGE)
		}
		{
			p.SetState(2284)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2285)
			p.True_false()
		}


	case SnowflakeParserERROR_ON_NONDETERMINISTIC_UPDATE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2286)
			p.Match(SnowflakeParserERROR_ON_NONDETERMINISTIC_UPDATE)
		}
		{
			p.SetState(2287)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2288)
			p.True_false()
		}


	case SnowflakeParserJSON_INDENT:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2289)
			p.Match(SnowflakeParserJSON_INDENT)
		}
		{
			p.SetState(2290)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2291)
			p.Num()
		}


	case SnowflakeParserLOCK_TIMEOUT:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2292)
			p.Match(SnowflakeParserLOCK_TIMEOUT)
		}
		{
			p.SetState(2293)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2294)
			p.Num()
		}


	case SnowflakeParserQUERY_TAG:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2295)
			p.Match(SnowflakeParserQUERY_TAG)
		}
		{
			p.SetState(2296)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2297)
			p.String_()
		}


	case SnowflakeParserROWS_PER_RESULTSET:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2298)
			p.Match(SnowflakeParserROWS_PER_RESULTSET)
		}
		{
			p.SetState(2299)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2300)
			p.Num()
		}


	case SnowflakeParserSIMULATED_DATA_SHARING_CONSUMER:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2301)
			p.Match(SnowflakeParserSIMULATED_DATA_SHARING_CONSUMER)
		}
		{
			p.SetState(2302)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2303)
			p.String_()
		}


	case SnowflakeParserSTATEMENT_TIMEOUT_IN_SECONDS:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2304)
			p.Match(SnowflakeParserSTATEMENT_TIMEOUT_IN_SECONDS)
		}
		{
			p.SetState(2305)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2306)
			p.Num()
		}


	case SnowflakeParserSTRICT_JSON_OUTPUT:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2307)
			p.Match(SnowflakeParserSTRICT_JSON_OUTPUT)
		}
		{
			p.SetState(2308)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2309)
			p.True_false()
		}


	case SnowflakeParserTIMESTAMP_DAY_IS_ALWAYS_24H:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2310)
			p.Match(SnowflakeParserTIMESTAMP_DAY_IS_ALWAYS_24H)
		}
		{
			p.SetState(2311)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2312)
			p.True_false()
		}


	case SnowflakeParserTIMESTAMP_INPUT_FORMAT:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2313)
			p.Match(SnowflakeParserTIMESTAMP_INPUT_FORMAT)
		}
		{
			p.SetState(2314)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2315)
			p.String_()
		}


	case SnowflakeParserTIMESTAMP_LTZ_OUTPUT_FORMAT:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2316)
			p.Match(SnowflakeParserTIMESTAMP_LTZ_OUTPUT_FORMAT)
		}
		{
			p.SetState(2317)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2318)
			p.String_()
		}


	case SnowflakeParserTIMESTAMP_NTZ_OUTPUT_FORMAT:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(2319)
			p.Match(SnowflakeParserTIMESTAMP_NTZ_OUTPUT_FORMAT)
		}
		{
			p.SetState(2320)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2321)
			p.String_()
		}


	case SnowflakeParserTIMESTAMP_OUTPUT_FORMAT:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(2322)
			p.Match(SnowflakeParserTIMESTAMP_OUTPUT_FORMAT)
		}
		{
			p.SetState(2323)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2324)
			p.String_()
		}


	case SnowflakeParserTIMESTAMP_TYPE_MAPPING:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(2325)
			p.Match(SnowflakeParserTIMESTAMP_TYPE_MAPPING)
		}
		{
			p.SetState(2326)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2327)
			p.String_()
		}


	case SnowflakeParserTIMESTAMP_TZ_OUTPUT_FORMAT:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(2328)
			p.Match(SnowflakeParserTIMESTAMP_TZ_OUTPUT_FORMAT)
		}
		{
			p.SetState(2329)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2330)
			p.String_()
		}


	case SnowflakeParserTIMEZONE:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(2331)
			p.Match(SnowflakeParserTIMEZONE)
		}
		{
			p.SetState(2332)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2333)
			p.String_()
		}


	case SnowflakeParserTIME_INPUT_FORMAT:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(2334)
			p.Match(SnowflakeParserTIME_INPUT_FORMAT)
		}
		{
			p.SetState(2335)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2336)
			p.String_()
		}


	case SnowflakeParserTIME_OUTPUT_FORMAT:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(2337)
			p.Match(SnowflakeParserTIME_OUTPUT_FORMAT)
		}
		{
			p.SetState(2338)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2339)
			p.String_()
		}


	case SnowflakeParserTRANSACTION_DEFAULT_ISOLATION_LEVEL:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(2340)
			p.Match(SnowflakeParserTRANSACTION_DEFAULT_ISOLATION_LEVEL)
		}
		{
			p.SetState(2341)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2342)
			p.String_()
		}


	case SnowflakeParserTWO_DIGIT_CENTURY_START:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(2343)
			p.Match(SnowflakeParserTWO_DIGIT_CENTURY_START)
		}
		{
			p.SetState(2344)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2345)
			p.Num()
		}


	case SnowflakeParserUNSUPPORTED_DDL_ACTION:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(2346)
			p.Match(SnowflakeParserUNSUPPORTED_DDL_ACTION)
		}
		{
			p.SetState(2347)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2348)
			p.String_()
		}


	case SnowflakeParserUSE_CACHED_RESULT:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(2349)
			p.Match(SnowflakeParserUSE_CACHED_RESULT)
		}
		{
			p.SetState(2350)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2351)
			p.True_false()
		}


	case SnowflakeParserWEEK_OF_YEAR_POLICY:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(2352)
			p.Match(SnowflakeParserWEEK_OF_YEAR_POLICY)
		}
		{
			p.SetState(2353)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2354)
			p.Num()
		}


	case SnowflakeParserWEEK_START:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(2355)
			p.Match(SnowflakeParserWEEK_START)
		}
		{
			p.SetState(2356)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2357)
			p.Num()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAlter_accountContext is an interface to support dynamic dispatch.
type IAlter_accountContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_accountContext differentiates from other interfaces.
	IsAlter_accountContext()
}

type Alter_accountContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_accountContext() *Alter_accountContext {
	var p = new(Alter_accountContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_account
	return p
}

func (*Alter_accountContext) IsAlter_accountContext() {}

func NewAlter_accountContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_accountContext {
	var p = new(Alter_accountContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_account

	return p
}

func (s *Alter_accountContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_accountContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_accountContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Alter_accountContext) Alter_account_opts() IAlter_account_optsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_account_optsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_account_optsContext)
}

func (s *Alter_accountContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_accountContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_accountContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_account(s)
	}
}

func (s *Alter_accountContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_account(s)
	}
}

func (s *Alter_accountContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_account(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_account() (localctx IAlter_accountContext) {
	this := p
	_ = this

	localctx = NewAlter_accountContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SnowflakeParserRULE_alter_account)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2360)
		p.Match(SnowflakeParserALTER)
	}
	{
		p.SetState(2361)
		p.Match(SnowflakeParserACCOUNT)
	}
	{
		p.SetState(2362)
		p.Alter_account_opts()
	}



	return localctx
}


// IEnabled_true_falseContext is an interface to support dynamic dispatch.
type IEnabled_true_falseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnabled_true_falseContext differentiates from other interfaces.
	IsEnabled_true_falseContext()
}

type Enabled_true_falseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnabled_true_falseContext() *Enabled_true_falseContext {
	var p = new(Enabled_true_falseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_enabled_true_false
	return p
}

func (*Enabled_true_falseContext) IsEnabled_true_falseContext() {}

func NewEnabled_true_falseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Enabled_true_falseContext {
	var p = new(Enabled_true_falseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_enabled_true_false

	return p
}

func (s *Enabled_true_falseContext) GetParser() antlr.Parser { return s.parser }

func (s *Enabled_true_falseContext) ENABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLED, 0)
}

func (s *Enabled_true_falseContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Enabled_true_falseContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Enabled_true_falseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Enabled_true_falseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Enabled_true_falseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterEnabled_true_false(s)
	}
}

func (s *Enabled_true_falseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitEnabled_true_false(s)
	}
}

func (s *Enabled_true_falseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitEnabled_true_false(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Enabled_true_false() (localctx IEnabled_true_falseContext) {
	this := p
	_ = this

	localctx = NewEnabled_true_falseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SnowflakeParserRULE_enabled_true_false)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2364)
		p.Match(SnowflakeParserENABLED)
	}
	{
		p.SetState(2365)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(2366)
		p.True_false()
	}



	return localctx
}


// IAlter_api_integrationContext is an interface to support dynamic dispatch.
type IAlter_api_integrationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_api_integrationContext differentiates from other interfaces.
	IsAlter_api_integrationContext()
}

type Alter_api_integrationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_api_integrationContext() *Alter_api_integrationContext {
	var p = new(Alter_api_integrationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_api_integration
	return p
}

func (*Alter_api_integrationContext) IsAlter_api_integrationContext() {}

func NewAlter_api_integrationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_api_integrationContext {
	var p = new(Alter_api_integrationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_api_integration

	return p
}

func (s *Alter_api_integrationContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_api_integrationContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_api_integrationContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Alter_api_integrationContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_api_integrationContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_api_integrationContext) API() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI, 0)
}

func (s *Alter_api_integrationContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_api_integrationContext) API_AWS_ROLE_ARN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_AWS_ROLE_ARN, 0)
}

func (s *Alter_api_integrationContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_api_integrationContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_api_integrationContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Alter_api_integrationContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Alter_api_integrationContext) AZURE_AD_APPLICATION_ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_AD_APPLICATION_ID, 0)
}

func (s *Alter_api_integrationContext) API_KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_KEY, 0)
}

func (s *Alter_api_integrationContext) Enabled_true_false() IEnabled_true_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnabled_true_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnabled_true_falseContext)
}

func (s *Alter_api_integrationContext) API_ALLOWED_PREFIXES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_ALLOWED_PREFIXES, 0)
}

func (s *Alter_api_integrationContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Alter_api_integrationContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Alter_api_integrationContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Alter_api_integrationContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Alter_api_integrationContext) API_BLOCKED_PREFIXES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_BLOCKED_PREFIXES, 0)
}

func (s *Alter_api_integrationContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_api_integrationContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_api_integrationContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_api_integrationContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_api_integrationContext) AllApi_integration_property() []IApi_integration_propertyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IApi_integration_propertyContext); ok {
			len++
		}
	}

	tst := make([]IApi_integration_propertyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IApi_integration_propertyContext); ok {
			tst[i] = t.(IApi_integration_propertyContext)
			i++
		}
	}

	return tst
}

func (s *Alter_api_integrationContext) Api_integration_property(i int) IApi_integration_propertyContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IApi_integration_propertyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IApi_integration_propertyContext)
}

func (s *Alter_api_integrationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_api_integrationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_api_integrationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_api_integrationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_api_integrationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_api_integration(s)
	}
}

func (s *Alter_api_integrationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_api_integration(s)
	}
}

func (s *Alter_api_integrationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_api_integration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_api_integration() (localctx IAlter_api_integrationContext) {
	this := p
	_ = this

	localctx = NewAlter_api_integrationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, SnowflakeParserRULE_alter_api_integration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2449)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2368)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(2370)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI {
			{
				p.SetState(2369)
				p.Match(SnowflakeParserAPI)
			}

		}
		{
			p.SetState(2372)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(2374)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2373)
				p.If_exists()
			}

		}
		{
			p.SetState(2376)
			p.Id_()
		}
		{
			p.SetState(2377)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(2381)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI_AWS_ROLE_ARN {
			{
				p.SetState(2378)
				p.Match(SnowflakeParserAPI_AWS_ROLE_ARN)
			}
			{
				p.SetState(2379)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(2380)
				p.String_()
			}

		}
		p.SetState(2386)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAZURE_AD_APPLICATION_ID {
			{
				p.SetState(2383)
				p.Match(SnowflakeParserAZURE_AD_APPLICATION_ID)
			}
			{
				p.SetState(2384)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(2385)
				p.String_()
			}

		}
		p.SetState(2391)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI_KEY {
			{
				p.SetState(2388)
				p.Match(SnowflakeParserAPI_KEY)
			}
			{
				p.SetState(2389)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(2390)
				p.String_()
			}

		}
		p.SetState(2394)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENABLED {
			{
				p.SetState(2393)
				p.Enabled_true_false()
			}

		}
		p.SetState(2402)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI_ALLOWED_PREFIXES {
			{
				p.SetState(2396)
				p.Match(SnowflakeParserAPI_ALLOWED_PREFIXES)
			}
			{
				p.SetState(2397)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(2398)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(2399)
				p.String_()
			}
			{
				p.SetState(2400)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(2410)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI_BLOCKED_PREFIXES {
			{
				p.SetState(2404)
				p.Match(SnowflakeParserAPI_BLOCKED_PREFIXES)
			}
			{
				p.SetState(2405)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(2406)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(2407)
				p.String_()
			}
			{
				p.SetState(2408)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(2413)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2412)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2415)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(2417)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI {
			{
				p.SetState(2416)
				p.Match(SnowflakeParserAPI)
			}

		}
		{
			p.SetState(2419)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(2420)
			p.Id_()
		}
		{
			p.SetState(2421)
			p.Set_tags()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2423)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(2425)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI {
			{
				p.SetState(2424)
				p.Match(SnowflakeParserAPI)
			}

		}
		{
			p.SetState(2427)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(2428)
			p.Id_()
		}
		{
			p.SetState(2429)
			p.Unset_tags()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2431)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(2433)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI {
			{
				p.SetState(2432)
				p.Match(SnowflakeParserAPI)
			}

		}
		{
			p.SetState(2435)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(2437)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2436)
				p.If_exists()
			}

		}
		{
			p.SetState(2439)
			p.Id_()
		}
		{
			p.SetState(2440)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(2441)
			p.Api_integration_property()
		}
		p.SetState(2446)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(2442)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(2443)
				p.Api_integration_property()
			}


			p.SetState(2448)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}


	return localctx
}


// IApi_integration_propertyContext is an interface to support dynamic dispatch.
type IApi_integration_propertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsApi_integration_propertyContext differentiates from other interfaces.
	IsApi_integration_propertyContext()
}

type Api_integration_propertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyApi_integration_propertyContext() *Api_integration_propertyContext {
	var p = new(Api_integration_propertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_api_integration_property
	return p
}

func (*Api_integration_propertyContext) IsApi_integration_propertyContext() {}

func NewApi_integration_propertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Api_integration_propertyContext {
	var p = new(Api_integration_propertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_api_integration_property

	return p
}

func (s *Api_integration_propertyContext) GetParser() antlr.Parser { return s.parser }

func (s *Api_integration_propertyContext) API_KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_KEY, 0)
}

func (s *Api_integration_propertyContext) ENABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLED, 0)
}

func (s *Api_integration_propertyContext) API_BLOCKED_PREFIXES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_BLOCKED_PREFIXES, 0)
}

func (s *Api_integration_propertyContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Api_integration_propertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Api_integration_propertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Api_integration_propertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterApi_integration_property(s)
	}
}

func (s *Api_integration_propertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitApi_integration_property(s)
	}
}

func (s *Api_integration_propertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitApi_integration_property(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Api_integration_property() (localctx IApi_integration_propertyContext) {
	this := p
	_ = this

	localctx = NewApi_integration_propertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, SnowflakeParserRULE_api_integration_property)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2451)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserAPI_BLOCKED_PREFIXES || _la == SnowflakeParserAPI_KEY || _la == SnowflakeParserCOMMENT || _la == SnowflakeParserENABLED) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IAlter_connectionContext is an interface to support dynamic dispatch.
type IAlter_connectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_connectionContext differentiates from other interfaces.
	IsAlter_connectionContext()
}

type Alter_connectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_connectionContext() *Alter_connectionContext {
	var p = new(Alter_connectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_connection
	return p
}

func (*Alter_connectionContext) IsAlter_connectionContext() {}

func NewAlter_connectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_connectionContext {
	var p = new(Alter_connectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_connection

	return p
}

func (s *Alter_connectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_connectionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_connectionContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCONNECTION, 0)
}

func (s *Alter_connectionContext) Alter_connection_opts() IAlter_connection_optsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_connection_optsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_connection_optsContext)
}

func (s *Alter_connectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_connectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_connectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_connection(s)
	}
}

func (s *Alter_connectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_connection(s)
	}
}

func (s *Alter_connectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_connection(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_connection() (localctx IAlter_connectionContext) {
	this := p
	_ = this

	localctx = NewAlter_connectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, SnowflakeParserRULE_alter_connection)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2453)
		p.Match(SnowflakeParserALTER)
	}
	{
		p.SetState(2454)
		p.Match(SnowflakeParserCONNECTION)
	}
	{
		p.SetState(2455)
		p.Alter_connection_opts()
	}



	return localctx
}


// IAlter_databaseContext is an interface to support dynamic dispatch.
type IAlter_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_databaseContext differentiates from other interfaces.
	IsAlter_databaseContext()
}

type Alter_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_databaseContext() *Alter_databaseContext {
	var p = new(Alter_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_database
	return p
}

func (*Alter_databaseContext) IsAlter_databaseContext() {}

func NewAlter_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_databaseContext {
	var p = new(Alter_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_database

	return p
}

func (s *Alter_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_databaseContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Alter_databaseContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_databaseContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_databaseContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_databaseContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_databaseContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_databaseContext) SWAP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSWAP, 0)
}

func (s *Alter_databaseContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Alter_databaseContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_databaseContext) DATA_RETENTION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS, 0)
}

func (s *Alter_databaseContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_databaseContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_databaseContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Alter_databaseContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Alter_databaseContext) MAX_DATA_EXTENSION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS, 0)
}

func (s *Alter_databaseContext) Default_ddl_collation() IDefault_ddl_collationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_ddl_collationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_ddl_collationContext)
}

func (s *Alter_databaseContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_databaseContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_databaseContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_databaseContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_databaseContext) AllDatabase_property() []IDatabase_propertyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDatabase_propertyContext); ok {
			len++
		}
	}

	tst := make([]IDatabase_propertyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDatabase_propertyContext); ok {
			tst[i] = t.(IDatabase_propertyContext)
			i++
		}
	}

	return tst
}

func (s *Alter_databaseContext) Database_property(i int) IDatabase_propertyContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_propertyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_propertyContext)
}

func (s *Alter_databaseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_databaseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_databaseContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE, 0)
}

func (s *Alter_databaseContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION, 0)
}

func (s *Alter_databaseContext) ACCOUNTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNTS, 0)
}

func (s *Alter_databaseContext) Account_id_list() IAccount_id_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccount_id_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccount_id_listContext)
}

func (s *Alter_databaseContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIGNORE, 0)
}

func (s *Alter_databaseContext) EDITION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEDITION, 0)
}

func (s *Alter_databaseContext) CHECK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCHECK, 0)
}

func (s *Alter_databaseContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISABLE, 0)
}

func (s *Alter_databaseContext) REFRESH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREFRESH, 0)
}

func (s *Alter_databaseContext) FAILOVER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFAILOVER, 0)
}

func (s *Alter_databaseContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIMARY, 0)
}

func (s *Alter_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_database(s)
	}
}

func (s *Alter_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_database(s)
	}
}

func (s *Alter_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_database(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_database() (localctx IAlter_databaseContext) {
	this := p
	_ = this

	localctx = NewAlter_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, SnowflakeParserRULE_alter_database)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2577)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2457)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2458)
			p.Match(SnowflakeParserDATABASE)
		}
		p.SetState(2460)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2459)
				p.If_exists()
			}

		}
		{
			p.SetState(2462)
			p.Id_()
		}
		{
			p.SetState(2463)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(2464)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(2465)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2467)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2468)
			p.Match(SnowflakeParserDATABASE)
		}
		p.SetState(2470)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2469)
				p.If_exists()
			}

		}
		{
			p.SetState(2472)
			p.Id_()
		}
		{
			p.SetState(2473)
			p.Match(SnowflakeParserSWAP)
		}
		{
			p.SetState(2474)
			p.Match(SnowflakeParserWITH)
		}
		{
			p.SetState(2475)
			p.Id_()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2477)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2478)
			p.Match(SnowflakeParserDATABASE)
		}
		p.SetState(2480)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2479)
				p.If_exists()
			}

		}
		{
			p.SetState(2482)
			p.Id_()
		}
		{
			p.SetState(2483)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(2487)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserDATA_RETENTION_TIME_IN_DAYS {
			{
				p.SetState(2484)
				p.Match(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS)
			}
			{
				p.SetState(2485)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(2486)
				p.Num()
			}

		}
		p.SetState(2492)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS {
			{
				p.SetState(2489)
				p.Match(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS)
			}
			{
				p.SetState(2490)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(2491)
				p.Num()
			}

		}
		p.SetState(2495)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserDEFAULT_DDL_COLLATION_ {
			{
				p.SetState(2494)
				p.Default_ddl_collation()
			}

		}
		p.SetState(2498)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2497)
				p.Comment_clause()
			}


		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2500)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2501)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(2502)
			p.Id_()
		}
		{
			p.SetState(2503)
			p.Set_tags()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2505)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2506)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(2507)
			p.Id_()
		}
		{
			p.SetState(2508)
			p.Unset_tags()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2510)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2511)
			p.Match(SnowflakeParserDATABASE)
		}
		p.SetState(2513)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2512)
				p.If_exists()
			}

		}
		{
			p.SetState(2515)
			p.Id_()
		}
		{
			p.SetState(2516)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(2517)
			p.Database_property()
		}
		p.SetState(2522)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(2518)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(2519)
				p.Database_property()
			}


			p.SetState(2524)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2525)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2526)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(2527)
			p.Id_()
		}
		{
			p.SetState(2528)
			p.Match(SnowflakeParserENABLE)
		}
		{
			p.SetState(2529)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(2530)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(2531)
			p.Match(SnowflakeParserACCOUNTS)
		}
		{
			p.SetState(2532)
			p.Account_id_list()
		}
		p.SetState(2536)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIGNORE {
			{
				p.SetState(2533)
				p.Match(SnowflakeParserIGNORE)
			}
			{
				p.SetState(2534)
				p.Match(SnowflakeParserEDITION)
			}
			{
				p.SetState(2535)
				p.Match(SnowflakeParserCHECK)
			}

		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2538)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2539)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(2540)
			p.Id_()
		}
		{
			p.SetState(2541)
			p.Match(SnowflakeParserDISABLE)
		}
		{
			p.SetState(2542)
			p.Match(SnowflakeParserREPLICATION)
		}
		p.SetState(2546)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTO {
			{
				p.SetState(2543)
				p.Match(SnowflakeParserTO)
			}
			{
				p.SetState(2544)
				p.Match(SnowflakeParserACCOUNTS)
			}
			{
				p.SetState(2545)
				p.Account_id_list()
			}

		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2548)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2549)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(2550)
			p.Id_()
		}
		{
			p.SetState(2551)
			p.Match(SnowflakeParserREFRESH)
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2553)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2554)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(2555)
			p.Id_()
		}
		{
			p.SetState(2556)
			p.Match(SnowflakeParserENABLE)
		}
		{
			p.SetState(2557)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2558)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(2559)
			p.Match(SnowflakeParserACCOUNTS)
		}
		{
			p.SetState(2560)
			p.Account_id_list()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2562)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2563)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(2564)
			p.Id_()
		}
		{
			p.SetState(2565)
			p.Match(SnowflakeParserDISABLE)
		}
		{
			p.SetState(2566)
			p.Match(SnowflakeParserFAILOVER)
		}
		p.SetState(2570)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTO {
			{
				p.SetState(2567)
				p.Match(SnowflakeParserTO)
			}
			{
				p.SetState(2568)
				p.Match(SnowflakeParserACCOUNTS)
			}
			{
				p.SetState(2569)
				p.Account_id_list()
			}

		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2572)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2573)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(2574)
			p.Id_()
		}
		{
			p.SetState(2575)
			p.Match(SnowflakeParserPRIMARY)
		}

	}


	return localctx
}


// IDatabase_propertyContext is an interface to support dynamic dispatch.
type IDatabase_propertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_propertyContext differentiates from other interfaces.
	IsDatabase_propertyContext()
}

type Database_propertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_propertyContext() *Database_propertyContext {
	var p = new(Database_propertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_database_property
	return p
}

func (*Database_propertyContext) IsDatabase_propertyContext() {}

func NewDatabase_propertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_propertyContext {
	var p = new(Database_propertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_database_property

	return p
}

func (s *Database_propertyContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_propertyContext) DATA_RETENTION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS, 0)
}

func (s *Database_propertyContext) MAX_DATA_EXTENSION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS, 0)
}

func (s *Database_propertyContext) DEFAULT_DDL_COLLATION_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT_DDL_COLLATION_, 0)
}

func (s *Database_propertyContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Database_propertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_propertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Database_propertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDatabase_property(s)
	}
}

func (s *Database_propertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDatabase_property(s)
	}
}

func (s *Database_propertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDatabase_property(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Database_property() (localctx IDatabase_propertyContext) {
	this := p
	_ = this

	localctx = NewDatabase_propertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, SnowflakeParserRULE_database_property)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2579)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la - 155)) & ^0x3f) == 0 && ((int64(1) << (_la - 155)) & 288247968337756161) != 0 || _la == SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IAccount_id_listContext is an interface to support dynamic dispatch.
type IAccount_id_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccount_id_listContext differentiates from other interfaces.
	IsAccount_id_listContext()
}

type Account_id_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccount_id_listContext() *Account_id_listContext {
	var p = new(Account_id_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_account_id_list
	return p
}

func (*Account_id_listContext) IsAccount_id_listContext() {}

func NewAccount_id_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Account_id_listContext {
	var p = new(Account_id_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_account_id_list

	return p
}

func (s *Account_id_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Account_id_listContext) AllAccount_identifier() []IAccount_identifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAccount_identifierContext); ok {
			len++
		}
	}

	tst := make([]IAccount_identifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAccount_identifierContext); ok {
			tst[i] = t.(IAccount_identifierContext)
			i++
		}
	}

	return tst
}

func (s *Account_id_listContext) Account_identifier(i int) IAccount_identifierContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccount_identifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccount_identifierContext)
}

func (s *Account_id_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Account_id_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Account_id_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Account_id_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Account_id_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAccount_id_list(s)
	}
}

func (s *Account_id_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAccount_id_list(s)
	}
}

func (s *Account_id_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAccount_id_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Account_id_list() (localctx IAccount_id_listContext) {
	this := p
	_ = this

	localctx = NewAccount_id_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, SnowflakeParserRULE_account_id_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2581)
		p.Account_identifier()
	}
	p.SetState(2586)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(2582)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(2583)
			p.Account_identifier()
		}


		p.SetState(2588)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IAlter_external_tableContext is an interface to support dynamic dispatch.
type IAlter_external_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_external_tableContext differentiates from other interfaces.
	IsAlter_external_tableContext()
}

type Alter_external_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_external_tableContext() *Alter_external_tableContext {
	var p = new(Alter_external_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_external_table
	return p
}

func (*Alter_external_tableContext) IsAlter_external_tableContext() {}

func NewAlter_external_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_external_tableContext {
	var p = new(Alter_external_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_external_table

	return p
}

func (s *Alter_external_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_external_tableContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_external_tableContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL, 0)
}

func (s *Alter_external_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Alter_external_tableContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Alter_external_tableContext) REFRESH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREFRESH, 0)
}

func (s *Alter_external_tableContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_external_tableContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Alter_external_tableContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Alter_external_tableContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Alter_external_tableContext) FILES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILES, 0)
}

func (s *Alter_external_tableContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Alter_external_tableContext) String_list() IString_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_listContext)
}

func (s *Alter_external_tableContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Alter_external_tableContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREMOVE, 0)
}

func (s *Alter_external_tableContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_external_tableContext) AUTO_REFRESH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTO_REFRESH, 0)
}

func (s *Alter_external_tableContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_external_tableContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_external_tableContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Alter_external_tableContext) Tag_decl_list() ITag_decl_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITag_decl_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITag_decl_listContext)
}

func (s *Alter_external_tableContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_external_tableContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPARTITION, 0)
}

func (s *Alter_external_tableContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Alter_external_tableContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Alter_external_tableContext) LOCATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLOCATION, 0)
}

func (s *Alter_external_tableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_external_tableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_external_tableContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Alter_external_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_external_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_external_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_external_table(s)
	}
}

func (s *Alter_external_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_external_table(s)
	}
}

func (s *Alter_external_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_external_table(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_external_table() (localctx IAlter_external_tableContext) {
	this := p
	_ = this

	localctx = NewAlter_external_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, SnowflakeParserRULE_alter_external_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2690)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2589)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2590)
			p.Match(SnowflakeParserEXTERNAL)
		}
		{
			p.SetState(2591)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(2593)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2592)
				p.If_exists()
			}

		}
		{
			p.SetState(2595)
			p.Object_name()
		}
		{
			p.SetState(2596)
			p.Match(SnowflakeParserREFRESH)
		}
		p.SetState(2598)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTRING {
			{
				p.SetState(2597)
				p.String_()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2600)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2601)
			p.Match(SnowflakeParserEXTERNAL)
		}
		{
			p.SetState(2602)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(2604)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2603)
				p.If_exists()
			}

		}
		{
			p.SetState(2606)
			p.Object_name()
		}
		{
			p.SetState(2607)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(2608)
			p.Match(SnowflakeParserFILES)
		}
		{
			p.SetState(2609)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(2610)
			p.String_list()
		}
		{
			p.SetState(2611)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2613)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2614)
			p.Match(SnowflakeParserEXTERNAL)
		}
		{
			p.SetState(2615)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(2617)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2616)
				p.If_exists()
			}

		}
		{
			p.SetState(2619)
			p.Object_name()
		}
		{
			p.SetState(2620)
			p.Match(SnowflakeParserREMOVE)
		}
		{
			p.SetState(2621)
			p.Match(SnowflakeParserFILES)
		}
		{
			p.SetState(2622)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(2623)
			p.String_list()
		}
		{
			p.SetState(2624)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2626)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2627)
			p.Match(SnowflakeParserEXTERNAL)
		}
		{
			p.SetState(2628)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(2630)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2629)
				p.If_exists()
			}

		}
		{
			p.SetState(2632)
			p.Object_name()
		}
		{
			p.SetState(2633)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(2637)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAUTO_REFRESH {
			{
				p.SetState(2634)
				p.Match(SnowflakeParserAUTO_REFRESH)
			}
			{
				p.SetState(2635)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(2636)
				p.True_false()
			}

		}
		p.SetState(2640)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTAG {
			{
				p.SetState(2639)
				p.Tag_decl_list()
			}

		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2642)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2643)
			p.Match(SnowflakeParserEXTERNAL)
		}
		{
			p.SetState(2644)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(2646)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2645)
				p.If_exists()
			}

		}
		{
			p.SetState(2648)
			p.Object_name()
		}
		{
			p.SetState(2649)
			p.Unset_tags()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2651)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2652)
			p.Match(SnowflakeParserEXTERNAL)
		}
		{
			p.SetState(2653)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(2654)
			p.Object_name()
		}
		p.SetState(2656)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2655)
				p.If_exists()
			}

		}
		{
			p.SetState(2658)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(2659)
			p.Match(SnowflakeParserPARTITION)
		}
		{
			p.SetState(2660)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(2661)
			p.Column_name()
		}
		{
			p.SetState(2662)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2663)
			p.String_()
		}
		p.SetState(2671)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(2664)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(2665)
				p.Column_name()
			}
			{
				p.SetState(2666)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(2667)
				p.String_()
			}


			p.SetState(2673)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2674)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		{
			p.SetState(2675)
			p.Match(SnowflakeParserLOCATION)
		}
		{
			p.SetState(2676)
			p.String_()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2678)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2679)
			p.Match(SnowflakeParserEXTERNAL)
		}
		{
			p.SetState(2680)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(2681)
			p.Object_name()
		}
		p.SetState(2683)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2682)
				p.If_exists()
			}

		}
		{
			p.SetState(2685)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(2686)
			p.Match(SnowflakeParserPARTITION)
		}
		{
			p.SetState(2687)
			p.Match(SnowflakeParserLOCATION)
		}
		{
			p.SetState(2688)
			p.String_()
		}

	}


	return localctx
}


// IIgnore_edition_checkContext is an interface to support dynamic dispatch.
type IIgnore_edition_checkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIgnore_edition_checkContext differentiates from other interfaces.
	IsIgnore_edition_checkContext()
}

type Ignore_edition_checkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIgnore_edition_checkContext() *Ignore_edition_checkContext {
	var p = new(Ignore_edition_checkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_ignore_edition_check
	return p
}

func (*Ignore_edition_checkContext) IsIgnore_edition_checkContext() {}

func NewIgnore_edition_checkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ignore_edition_checkContext {
	var p = new(Ignore_edition_checkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_ignore_edition_check

	return p
}

func (s *Ignore_edition_checkContext) GetParser() antlr.Parser { return s.parser }

func (s *Ignore_edition_checkContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIGNORE, 0)
}

func (s *Ignore_edition_checkContext) EDITION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEDITION, 0)
}

func (s *Ignore_edition_checkContext) CHECK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCHECK, 0)
}

func (s *Ignore_edition_checkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ignore_edition_checkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Ignore_edition_checkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterIgnore_edition_check(s)
	}
}

func (s *Ignore_edition_checkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitIgnore_edition_check(s)
	}
}

func (s *Ignore_edition_checkContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitIgnore_edition_check(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Ignore_edition_check() (localctx IIgnore_edition_checkContext) {
	this := p
	_ = this

	localctx = NewIgnore_edition_checkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, SnowflakeParserRULE_ignore_edition_check)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2692)
		p.Match(SnowflakeParserIGNORE)
	}
	{
		p.SetState(2693)
		p.Match(SnowflakeParserEDITION)
	}
	{
		p.SetState(2694)
		p.Match(SnowflakeParserCHECK)
	}



	return localctx
}


// IReplication_scheduleContext is an interface to support dynamic dispatch.
type IReplication_scheduleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplication_scheduleContext differentiates from other interfaces.
	IsReplication_scheduleContext()
}

type Replication_scheduleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplication_scheduleContext() *Replication_scheduleContext {
	var p = new(Replication_scheduleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_replication_schedule
	return p
}

func (*Replication_scheduleContext) IsReplication_scheduleContext() {}

func NewReplication_scheduleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Replication_scheduleContext {
	var p = new(Replication_scheduleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_replication_schedule

	return p
}

func (s *Replication_scheduleContext) GetParser() antlr.Parser { return s.parser }

func (s *Replication_scheduleContext) REPLICATION_SCHEDULE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION_SCHEDULE, 0)
}

func (s *Replication_scheduleContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Replication_scheduleContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Replication_scheduleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Replication_scheduleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Replication_scheduleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterReplication_schedule(s)
	}
}

func (s *Replication_scheduleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitReplication_schedule(s)
	}
}

func (s *Replication_scheduleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitReplication_schedule(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Replication_schedule() (localctx IReplication_scheduleContext) {
	this := p
	_ = this

	localctx = NewReplication_scheduleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, SnowflakeParserRULE_replication_schedule)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2696)
		p.Match(SnowflakeParserREPLICATION_SCHEDULE)
	}
	{
		p.SetState(2697)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(2698)
		p.String_()
	}



	return localctx
}


// IDb_name_listContext is an interface to support dynamic dispatch.
type IDb_name_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_name_listContext differentiates from other interfaces.
	IsDb_name_listContext()
}

type Db_name_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_name_listContext() *Db_name_listContext {
	var p = new(Db_name_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_db_name_list
	return p
}

func (*Db_name_listContext) IsDb_name_listContext() {}

func NewDb_name_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_name_listContext {
	var p = new(Db_name_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_db_name_list

	return p
}

func (s *Db_name_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_name_listContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Db_name_listContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Db_name_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Db_name_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Db_name_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_name_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Db_name_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDb_name_list(s)
	}
}

func (s *Db_name_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDb_name_list(s)
	}
}

func (s *Db_name_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDb_name_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Db_name_list() (localctx IDb_name_listContext) {
	this := p
	_ = this

	localctx = NewDb_name_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, SnowflakeParserRULE_db_name_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2700)
		p.Id_()
	}
	p.SetState(2705)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(2701)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(2702)
			p.Id_()
		}


		p.SetState(2707)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IShare_name_listContext is an interface to support dynamic dispatch.
type IShare_name_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShare_name_listContext differentiates from other interfaces.
	IsShare_name_listContext()
}

type Share_name_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShare_name_listContext() *Share_name_listContext {
	var p = new(Share_name_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_share_name_list
	return p
}

func (*Share_name_listContext) IsShare_name_listContext() {}

func NewShare_name_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Share_name_listContext {
	var p = new(Share_name_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_share_name_list

	return p
}

func (s *Share_name_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Share_name_listContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Share_name_listContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Share_name_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Share_name_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Share_name_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Share_name_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Share_name_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShare_name_list(s)
	}
}

func (s *Share_name_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShare_name_list(s)
	}
}

func (s *Share_name_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShare_name_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Share_name_list() (localctx IShare_name_listContext) {
	this := p
	_ = this

	localctx = NewShare_name_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, SnowflakeParserRULE_share_name_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2708)
		p.Id_()
	}
	p.SetState(2713)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(2709)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(2710)
			p.Id_()
		}


		p.SetState(2715)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IFull_acct_listContext is an interface to support dynamic dispatch.
type IFull_acct_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFull_acct_listContext differentiates from other interfaces.
	IsFull_acct_listContext()
}

type Full_acct_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFull_acct_listContext() *Full_acct_listContext {
	var p = new(Full_acct_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_full_acct_list
	return p
}

func (*Full_acct_listContext) IsFull_acct_listContext() {}

func NewFull_acct_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_acct_listContext {
	var p = new(Full_acct_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_full_acct_list

	return p
}

func (s *Full_acct_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_acct_listContext) AllFull_acct() []IFull_acctContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFull_acctContext); ok {
			len++
		}
	}

	tst := make([]IFull_acctContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFull_acctContext); ok {
			tst[i] = t.(IFull_acctContext)
			i++
		}
	}

	return tst
}

func (s *Full_acct_listContext) Full_acct(i int) IFull_acctContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFull_acctContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFull_acctContext)
}

func (s *Full_acct_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Full_acct_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Full_acct_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_acct_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Full_acct_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFull_acct_list(s)
	}
}

func (s *Full_acct_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFull_acct_list(s)
	}
}

func (s *Full_acct_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFull_acct_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Full_acct_list() (localctx IFull_acct_listContext) {
	this := p
	_ = this

	localctx = NewFull_acct_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, SnowflakeParserRULE_full_acct_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2716)
		p.Full_acct()
	}
	p.SetState(2721)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(2717)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(2718)
			p.Full_acct()
		}


		p.SetState(2723)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IAlter_failover_groupContext is an interface to support dynamic dispatch.
type IAlter_failover_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_failover_groupContext differentiates from other interfaces.
	IsAlter_failover_groupContext()
}

type Alter_failover_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_failover_groupContext() *Alter_failover_groupContext {
	var p = new(Alter_failover_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_failover_group
	return p
}

func (*Alter_failover_groupContext) IsAlter_failover_groupContext() {}

func NewAlter_failover_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_failover_groupContext {
	var p = new(Alter_failover_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_failover_group

	return p
}

func (s *Alter_failover_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_failover_groupContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_failover_groupContext) AllFAILOVER() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserFAILOVER)
}

func (s *Alter_failover_groupContext) FAILOVER(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFAILOVER, i)
}

func (s *Alter_failover_groupContext) AllGROUP() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserGROUP)
}

func (s *Alter_failover_groupContext) GROUP(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUP, i)
}

func (s *Alter_failover_groupContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_failover_groupContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_failover_groupContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_failover_groupContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_failover_groupContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_failover_groupContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_failover_groupContext) OBJECT_TYPES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOBJECT_TYPES, 0)
}

func (s *Alter_failover_groupContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Alter_failover_groupContext) Object_type_list() IObject_type_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_type_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_type_listContext)
}

func (s *Alter_failover_groupContext) Replication_schedule() IReplication_scheduleContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReplication_scheduleContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReplication_scheduleContext)
}

func (s *Alter_failover_groupContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Alter_failover_groupContext) Db_name_list() IDb_name_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDb_name_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDb_name_listContext)
}

func (s *Alter_failover_groupContext) ALLOWED_DATABASES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_DATABASES, 0)
}

func (s *Alter_failover_groupContext) MOVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMOVE, 0)
}

func (s *Alter_failover_groupContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASES, 0)
}

func (s *Alter_failover_groupContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREMOVE, 0)
}

func (s *Alter_failover_groupContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *Alter_failover_groupContext) Share_name_list() IShare_name_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShare_name_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShare_name_listContext)
}

func (s *Alter_failover_groupContext) ALLOWED_SHARES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_SHARES, 0)
}

func (s *Alter_failover_groupContext) SHARES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARES, 0)
}

func (s *Alter_failover_groupContext) Full_acct_list() IFull_acct_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFull_acct_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFull_acct_listContext)
}

func (s *Alter_failover_groupContext) ALLOWED_ACCOUNTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_ACCOUNTS, 0)
}

func (s *Alter_failover_groupContext) Ignore_edition_check() IIgnore_edition_checkContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIgnore_edition_checkContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIgnore_edition_checkContext)
}

func (s *Alter_failover_groupContext) REFRESH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREFRESH, 0)
}

func (s *Alter_failover_groupContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIMARY, 0)
}

func (s *Alter_failover_groupContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND, 0)
}

func (s *Alter_failover_groupContext) RESUME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESUME, 0)
}

func (s *Alter_failover_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_failover_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_failover_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_failover_group(s)
	}
}

func (s *Alter_failover_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_failover_group(s)
	}
}

func (s *Alter_failover_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_failover_group(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_failover_group() (localctx IAlter_failover_groupContext) {
	this := p
	_ = this

	localctx = NewAlter_failover_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, SnowflakeParserRULE_alter_failover_group)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2878)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2724)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2725)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2726)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(2728)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2727)
				p.If_exists()
			}

		}
		{
			p.SetState(2730)
			p.Id_()
		}
		{
			p.SetState(2731)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(2732)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(2733)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2735)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2736)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2737)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(2739)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2738)
				p.If_exists()
			}

		}
		{
			p.SetState(2741)
			p.Id_()
		}
		{
			p.SetState(2742)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(2746)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOBJECT_TYPES {
			{
				p.SetState(2743)
				p.Match(SnowflakeParserOBJECT_TYPES)
			}
			{
				p.SetState(2744)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(2745)
				p.Object_type_list()
			}

		}
		p.SetState(2749)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserREPLICATION_SCHEDULE {
			{
				p.SetState(2748)
				p.Replication_schedule()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2751)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2752)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2753)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(2755)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2754)
				p.If_exists()
			}

		}
		{
			p.SetState(2757)
			p.Id_()
		}
		{
			p.SetState(2758)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(2759)
			p.Match(SnowflakeParserOBJECT_TYPES)
		}
		{
			p.SetState(2760)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2761)
			p.Object_type_list()
		}
		p.SetState(2763)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserREPLICATION_SCHEDULE {
			{
				p.SetState(2762)
				p.Replication_schedule()
			}

		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2765)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2766)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2767)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(2769)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2768)
				p.If_exists()
			}

		}
		{
			p.SetState(2771)
			p.Id_()
		}
		{
			p.SetState(2772)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(2773)
			p.Db_name_list()
		}
		{
			p.SetState(2774)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(2775)
			p.Match(SnowflakeParserALLOWED_DATABASES)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2777)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2778)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2779)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(2781)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2780)
				p.If_exists()
			}

		}
		{
			p.SetState(2783)
			p.Id_()
		}
		{
			p.SetState(2784)
			p.Match(SnowflakeParserMOVE)
		}
		{
			p.SetState(2785)
			p.Match(SnowflakeParserDATABASES)
		}
		{
			p.SetState(2786)
			p.Db_name_list()
		}
		{
			p.SetState(2787)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(2788)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2789)
			p.Match(SnowflakeParserGROUP)
		}
		{
			p.SetState(2790)
			p.Id_()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2792)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2793)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2794)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(2796)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2795)
				p.If_exists()
			}

		}
		{
			p.SetState(2798)
			p.Id_()
		}
		{
			p.SetState(2799)
			p.Match(SnowflakeParserREMOVE)
		}
		{
			p.SetState(2800)
			p.Db_name_list()
		}
		{
			p.SetState(2801)
			p.Match(SnowflakeParserFROM)
		}
		{
			p.SetState(2802)
			p.Match(SnowflakeParserALLOWED_DATABASES)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2804)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2805)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2806)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(2808)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2807)
				p.If_exists()
			}

		}
		{
			p.SetState(2810)
			p.Id_()
		}
		{
			p.SetState(2811)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(2812)
			p.Share_name_list()
		}
		{
			p.SetState(2813)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(2814)
			p.Match(SnowflakeParserALLOWED_SHARES)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2816)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2817)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2818)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(2820)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2819)
				p.If_exists()
			}

		}
		{
			p.SetState(2822)
			p.Id_()
		}
		{
			p.SetState(2823)
			p.Match(SnowflakeParserMOVE)
		}
		{
			p.SetState(2824)
			p.Match(SnowflakeParserSHARES)
		}
		{
			p.SetState(2825)
			p.Share_name_list()
		}
		{
			p.SetState(2826)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(2827)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2828)
			p.Match(SnowflakeParserGROUP)
		}
		{
			p.SetState(2829)
			p.Id_()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2831)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2832)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2833)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(2835)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2834)
				p.If_exists()
			}

		}
		{
			p.SetState(2837)
			p.Id_()
		}
		{
			p.SetState(2838)
			p.Match(SnowflakeParserREMOVE)
		}
		{
			p.SetState(2839)
			p.Share_name_list()
		}
		{
			p.SetState(2840)
			p.Match(SnowflakeParserFROM)
		}
		{
			p.SetState(2841)
			p.Match(SnowflakeParserALLOWED_SHARES)
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2843)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2844)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2845)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(2847)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2846)
				p.If_exists()
			}

		}
		{
			p.SetState(2849)
			p.Id_()
		}
		{
			p.SetState(2850)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(2851)
			p.Full_acct_list()
		}
		{
			p.SetState(2852)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(2853)
			p.Match(SnowflakeParserALLOWED_ACCOUNTS)
		}
		p.SetState(2855)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIGNORE {
			{
				p.SetState(2854)
				p.Ignore_edition_check()
			}

		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2857)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2858)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2859)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(2861)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2860)
				p.If_exists()
			}

		}
		{
			p.SetState(2863)
			p.Id_()
		}
		{
			p.SetState(2864)
			p.Match(SnowflakeParserREMOVE)
		}
		{
			p.SetState(2865)
			p.Full_acct_list()
		}
		{
			p.SetState(2866)
			p.Match(SnowflakeParserFROM)
		}
		{
			p.SetState(2867)
			p.Match(SnowflakeParserALLOWED_ACCOUNTS)
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2869)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2870)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(2871)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(2873)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2872)
				p.If_exists()
			}

		}
		{
			p.SetState(2875)
			p.Id_()
		}
		{
			p.SetState(2876)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserPRIMARY || _la == SnowflakeParserREFRESH || _la == SnowflakeParserRESUME || _la == SnowflakeParserSUSPEND) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}


	return localctx
}


// IAlter_file_formatContext is an interface to support dynamic dispatch.
type IAlter_file_formatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_file_formatContext differentiates from other interfaces.
	IsAlter_file_formatContext()
}

type Alter_file_formatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_file_formatContext() *Alter_file_formatContext {
	var p = new(Alter_file_formatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_file_format
	return p
}

func (*Alter_file_formatContext) IsAlter_file_formatContext() {}

func NewAlter_file_formatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_file_formatContext {
	var p = new(Alter_file_formatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_file_format

	return p
}

func (s *Alter_file_formatContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_file_formatContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_file_formatContext) FILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE, 0)
}

func (s *Alter_file_formatContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORMAT, 0)
}

func (s *Alter_file_formatContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_file_formatContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_file_formatContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_file_formatContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_file_formatContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_file_formatContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_file_formatContext) AllFormat_type_options() []IFormat_type_optionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFormat_type_optionsContext); ok {
			len++
		}
	}

	tst := make([]IFormat_type_optionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFormat_type_optionsContext); ok {
			tst[i] = t.(IFormat_type_optionsContext)
			i++
		}
	}

	return tst
}

func (s *Alter_file_formatContext) Format_type_options(i int) IFormat_type_optionsContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormat_type_optionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormat_type_optionsContext)
}

func (s *Alter_file_formatContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_file_formatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_file_formatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_file_formatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_file_format(s)
	}
}

func (s *Alter_file_formatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_file_format(s)
	}
}

func (s *Alter_file_formatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_file_format(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_file_format() (localctx IAlter_file_formatContext) {
	this := p
	_ = this

	localctx = NewAlter_file_formatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, SnowflakeParserRULE_alter_file_format)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2908)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2880)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2881)
			p.Match(SnowflakeParserFILE)
		}
		{
			p.SetState(2882)
			p.Match(SnowflakeParserFORMAT)
		}
		p.SetState(2884)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2883)
				p.If_exists()
			}

		}
		{
			p.SetState(2886)
			p.Id_()
		}
		{
			p.SetState(2887)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(2888)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(2889)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2891)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(2892)
			p.Match(SnowflakeParserFILE)
		}
		{
			p.SetState(2893)
			p.Match(SnowflakeParserFORMAT)
		}
		p.SetState(2895)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(2894)
				p.If_exists()
			}

		}
		{
			p.SetState(2897)
			p.Id_()
		}
		{
			p.SetState(2898)
			p.Match(SnowflakeParserSET)
		}

		p.SetState(2902)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserALLOW_DUPLICATE || (int64((_la - 92)) & ^0x3f) == 0 && ((int64(1) << (_la - 92)) & 9221) != 0 || (int64((_la - 159)) & ^0x3f) == 0 && ((int64(1) << (_la - 159)) & 4611694814520410113) != 0 || (int64((_la - 231)) & ^0x3f) == 0 && ((int64(1) << (_la - 231)) & 214752837635) != 0 || (int64((_la - 301)) & ^0x3f) == 0 && ((int64(1) << (_la - 301)) & 144117387099111435) != 0 || _la == SnowflakeParserLZO || _la == SnowflakeParserNONE || _la == SnowflakeParserNULL_IF || (int64((_la - 591)) & ^0x3f) == 0 && ((int64(1) << (_la - 591)) & 1125917086711809) != 0 || _la == SnowflakeParserREPLACE_INVALID_CHARACTERS || (int64((_la - 777)) & ^0x3f) == 0 && ((int64(1) << (_la - 777)) & 4035225266123964627) != 0 || (int64((_la - 870)) & ^0x3f) == 0 && ((int64(1) << (_la - 870)) & 34359738497) != 0 || _la == SnowflakeParserUTF8 || _la == SnowflakeParserZSTD {
			{
				p.SetState(2899)
				p.Format_type_options()
			}


			p.SetState(2904)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2906)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2905)
				p.Comment_clause()
			}


		}


	}


	return localctx
}


// IAlter_functionContext is an interface to support dynamic dispatch.
type IAlter_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_functionContext differentiates from other interfaces.
	IsAlter_functionContext()
}

type Alter_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_functionContext() *Alter_functionContext {
	var p = new(Alter_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_function
	return p
}

func (*Alter_functionContext) IsAlter_functionContext() {}

func NewAlter_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_functionContext {
	var p = new(Alter_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_function

	return p
}

func (s *Alter_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_functionContext) Alter_function_signature() IAlter_function_signatureContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_function_signatureContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_function_signatureContext)
}

func (s *Alter_functionContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_functionContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_functionContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_functionContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_functionContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_functionContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_functionContext) SECURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURE, 0)
}

func (s *Alter_functionContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_functionContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_functionContext) API_INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_INTEGRATION, 0)
}

func (s *Alter_functionContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Alter_functionContext) HEADERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserHEADERS, 0)
}

func (s *Alter_functionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Alter_functionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Alter_functionContext) AllHeader_decl() []IHeader_declContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IHeader_declContext); ok {
			len++
		}
	}

	tst := make([]IHeader_declContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IHeader_declContext); ok {
			tst[i] = t.(IHeader_declContext)
			i++
		}
	}

	return tst
}

func (s *Alter_functionContext) Header_decl(i int) IHeader_declContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHeader_declContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHeader_declContext)
}

func (s *Alter_functionContext) CONTEXT_HEADERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCONTEXT_HEADERS, 0)
}

func (s *Alter_functionContext) MAX_BATCH_ROWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_BATCH_ROWS, 0)
}

func (s *Alter_functionContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Alter_functionContext) COMPRESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMPRESSION, 0)
}

func (s *Alter_functionContext) Compression_type() ICompression_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompression_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompression_typeContext)
}

func (s *Alter_functionContext) REQUEST_TRANSLATOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREQUEST_TRANSLATOR, 0)
}

func (s *Alter_functionContext) RESPONSE_TRANSLATOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESPONSE_TRANSLATOR, 0)
}

func (s *Alter_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_function(s)
	}
}

func (s *Alter_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_function(s)
	}
}

func (s *Alter_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_function(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_function() (localctx IAlter_functionContext) {
	this := p
	_ = this

	localctx = NewAlter_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, SnowflakeParserRULE_alter_function)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2981)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2910)
			p.Alter_function_signature()
		}
		{
			p.SetState(2911)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(2912)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(2913)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2915)
			p.Alter_function_signature()
		}
		{
			p.SetState(2916)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(2917)
			p.Comment_clause()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2919)
			p.Alter_function_signature()
		}
		{
			p.SetState(2920)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(2921)
			p.Match(SnowflakeParserSECURE)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2923)
			p.Alter_function_signature()
		}
		{
			p.SetState(2924)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(2925)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserCOMMENT || _la == SnowflakeParserSECURE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2927)
			p.Alter_function_signature()
		}
		{
			p.SetState(2928)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(2929)
			p.Match(SnowflakeParserAPI_INTEGRATION)
		}
		{
			p.SetState(2930)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2931)
			p.Id_()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2933)
			p.Alter_function_signature()
		}
		{
			p.SetState(2934)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(2935)
			p.Match(SnowflakeParserHEADERS)
		}
		{
			p.SetState(2936)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2937)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(2941)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserSTRING {
			{
				p.SetState(2938)
				p.Header_decl()
			}


			p.SetState(2943)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2944)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2946)
			p.Alter_function_signature()
		}
		{
			p.SetState(2947)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(2948)
			p.Match(SnowflakeParserCONTEXT_HEADERS)
		}
		{
			p.SetState(2949)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2950)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(2954)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(2951)
				p.Id_()
			}


			p.SetState(2956)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2957)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2959)
			p.Alter_function_signature()
		}
		{
			p.SetState(2960)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(2961)
			p.Match(SnowflakeParserMAX_BATCH_ROWS)
		}
		{
			p.SetState(2962)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2963)
			p.Num()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2965)
			p.Alter_function_signature()
		}
		{
			p.SetState(2966)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(2967)
			p.Match(SnowflakeParserCOMPRESSION)
		}
		{
			p.SetState(2968)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2969)
			p.Compression_type()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2971)
			p.Alter_function_signature()
		}
		{
			p.SetState(2972)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(2973)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserREQUEST_TRANSLATOR || _la == SnowflakeParserRESPONSE_TRANSLATOR) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2974)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(2975)
			p.Id_()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2977)
			p.Alter_function_signature()
		}
		{
			p.SetState(2978)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(2979)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la - 155)) & ^0x3f) == 0 && ((int64(1) << (_la - 155)) & 131089) != 0 || _la == SnowflakeParserHEADERS || _la == SnowflakeParserMAX_BATCH_ROWS || _la == SnowflakeParserREQUEST_TRANSLATOR || _la == SnowflakeParserRESPONSE_TRANSLATOR || _la == SnowflakeParserSECURE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}


	return localctx
}


// IAlter_function_signatureContext is an interface to support dynamic dispatch.
type IAlter_function_signatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_function_signatureContext differentiates from other interfaces.
	IsAlter_function_signatureContext()
}

type Alter_function_signatureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_function_signatureContext() *Alter_function_signatureContext {
	var p = new(Alter_function_signatureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_function_signature
	return p
}

func (*Alter_function_signatureContext) IsAlter_function_signatureContext() {}

func NewAlter_function_signatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_function_signatureContext {
	var p = new(Alter_function_signatureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_function_signature

	return p
}

func (s *Alter_function_signatureContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_function_signatureContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_function_signatureContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUNCTION, 0)
}

func (s *Alter_function_signatureContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_function_signatureContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Alter_function_signatureContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Alter_function_signatureContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_function_signatureContext) Data_type_list() IData_type_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_type_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_type_listContext)
}

func (s *Alter_function_signatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_function_signatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_function_signatureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_function_signature(s)
	}
}

func (s *Alter_function_signatureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_function_signature(s)
	}
}

func (s *Alter_function_signatureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_function_signature(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_function_signature() (localctx IAlter_function_signatureContext) {
	this := p
	_ = this

	localctx = NewAlter_function_signatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, SnowflakeParserRULE_alter_function_signature)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2983)
		p.Match(SnowflakeParserALTER)
	}
	{
		p.SetState(2984)
		p.Match(SnowflakeParserFUNCTION)
	}
	p.SetState(2986)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(2985)
			p.If_exists()
		}

	}
	{
		p.SetState(2988)
		p.Id_()
	}
	{
		p.SetState(2989)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(2991)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCHAR || _la == SnowflakeParserCHARACTER || _la == SnowflakeParserDOUBLE || _la == SnowflakeParserINT || _la == SnowflakeParserNUMBER || _la == SnowflakeParserOBJECT || (int64((_la - 869)) & ^0x3f) == 0 && ((int64(1) << (_la - 869)) & 70721) != 0 || (int64((_la - 1000)) & ^0x3f) == 0 && ((int64(1) << (_la - 1000)) & 133791711) != 0 {
		{
			p.SetState(2990)
			p.Data_type_list()
		}

	}
	{
		p.SetState(2993)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IData_type_listContext is an interface to support dynamic dispatch.
type IData_type_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_listContext differentiates from other interfaces.
	IsData_type_listContext()
}

type Data_type_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_listContext() *Data_type_listContext {
	var p = new(Data_type_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_data_type_list
	return p
}

func (*Data_type_listContext) IsData_type_listContext() {}

func NewData_type_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_listContext {
	var p = new(Data_type_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_data_type_list

	return p
}

func (s *Data_type_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_listContext) AllData_type() []IData_typeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IData_typeContext); ok {
			len++
		}
	}

	tst := make([]IData_typeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IData_typeContext); ok {
			tst[i] = t.(IData_typeContext)
			i++
		}
	}

	return tst
}

func (s *Data_type_listContext) Data_type(i int) IData_typeContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_typeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Data_type_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Data_type_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Data_type_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Data_type_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterData_type_list(s)
	}
}

func (s *Data_type_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitData_type_list(s)
	}
}

func (s *Data_type_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitData_type_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Data_type_list() (localctx IData_type_listContext) {
	this := p
	_ = this

	localctx = NewData_type_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, SnowflakeParserRULE_data_type_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2995)
		p.Data_type()
	}
	p.SetState(3000)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(2996)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(2997)
			p.Data_type()
		}


		p.SetState(3002)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IAlter_masking_policyContext is an interface to support dynamic dispatch.
type IAlter_masking_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_masking_policyContext differentiates from other interfaces.
	IsAlter_masking_policyContext()
}

type Alter_masking_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_masking_policyContext() *Alter_masking_policyContext {
	var p = new(Alter_masking_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_masking_policy
	return p
}

func (*Alter_masking_policyContext) IsAlter_masking_policyContext() {}

func NewAlter_masking_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_masking_policyContext {
	var p = new(Alter_masking_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_masking_policy

	return p
}

func (s *Alter_masking_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_masking_policyContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_masking_policyContext) MASKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, 0)
}

func (s *Alter_masking_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Alter_masking_policyContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_masking_policyContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_masking_policyContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_masking_policyContext) BODY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBODY, 0)
}

func (s *Alter_masking_policyContext) ARROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserARROW, 0)
}

func (s *Alter_masking_policyContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Alter_masking_policyContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_masking_policyContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_masking_policyContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_masking_policyContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_masking_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_masking_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_masking_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_masking_policy(s)
	}
}

func (s *Alter_masking_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_masking_policy(s)
	}
}

func (s *Alter_masking_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_masking_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_masking_policy() (localctx IAlter_masking_policyContext) {
	this := p
	_ = this

	localctx = NewAlter_masking_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, SnowflakeParserRULE_alter_masking_policy)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3036)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 232, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3003)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3004)
			p.Match(SnowflakeParserMASKING)
		}
		{
			p.SetState(3005)
			p.Match(SnowflakeParserPOLICY)
		}
		p.SetState(3007)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3006)
				p.If_exists()
			}

		}
		{
			p.SetState(3009)
			p.Id_()
		}
		{
			p.SetState(3010)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(3011)
			p.Match(SnowflakeParserBODY)
		}
		{
			p.SetState(3012)
			p.Match(SnowflakeParserARROW)
		}
		{
			p.SetState(3013)
			p.expr(0)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3015)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3016)
			p.Match(SnowflakeParserMASKING)
		}
		{
			p.SetState(3017)
			p.Match(SnowflakeParserPOLICY)
		}
		p.SetState(3019)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3018)
				p.If_exists()
			}

		}
		{
			p.SetState(3021)
			p.Id_()
		}
		{
			p.SetState(3022)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(3023)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3024)
			p.Id_()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3026)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3027)
			p.Match(SnowflakeParserMASKING)
		}
		{
			p.SetState(3028)
			p.Match(SnowflakeParserPOLICY)
		}
		p.SetState(3030)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3029)
				p.If_exists()
			}

		}
		{
			p.SetState(3032)
			p.Id_()
		}
		{
			p.SetState(3033)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(3034)
			p.Comment_clause()
		}

	}


	return localctx
}


// IAlter_materialized_viewContext is an interface to support dynamic dispatch.
type IAlter_materialized_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_materialized_viewContext differentiates from other interfaces.
	IsAlter_materialized_viewContext()
}

type Alter_materialized_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_materialized_viewContext() *Alter_materialized_viewContext {
	var p = new(Alter_materialized_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_materialized_view
	return p
}

func (*Alter_materialized_viewContext) IsAlter_materialized_viewContext() {}

func NewAlter_materialized_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_materialized_viewContext {
	var p = new(Alter_materialized_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_materialized_view

	return p
}

func (s *Alter_materialized_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_materialized_viewContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_materialized_viewContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATERIALIZED, 0)
}

func (s *Alter_materialized_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Alter_materialized_viewContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_materialized_viewContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_materialized_viewContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_materialized_viewContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_materialized_viewContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLUSTER, 0)
}

func (s *Alter_materialized_viewContext) BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBY, 0)
}

func (s *Alter_materialized_viewContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Alter_materialized_viewContext) Expr_list() IExpr_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Alter_materialized_viewContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Alter_materialized_viewContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Alter_materialized_viewContext) CLUSTERING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLUSTERING, 0)
}

func (s *Alter_materialized_viewContext) KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserKEY, 0)
}

func (s *Alter_materialized_viewContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND, 0)
}

func (s *Alter_materialized_viewContext) RECLUSTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRECLUSTER, 0)
}

func (s *Alter_materialized_viewContext) RESUME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESUME, 0)
}

func (s *Alter_materialized_viewContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_materialized_viewContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_materialized_viewContext) SECURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURE, 0)
}

func (s *Alter_materialized_viewContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_materialized_viewContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_materialized_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_materialized_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_materialized_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_materialized_view(s)
	}
}

func (s *Alter_materialized_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_materialized_view(s)
	}
}

func (s *Alter_materialized_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_materialized_view(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_materialized_view() (localctx IAlter_materialized_viewContext) {
	this := p
	_ = this

	localctx = NewAlter_materialized_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, SnowflakeParserRULE_alter_materialized_view)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3038)
		p.Match(SnowflakeParserALTER)
	}
	{
		p.SetState(3039)
		p.Match(SnowflakeParserMATERIALIZED)
	}
	{
		p.SetState(3040)
		p.Match(SnowflakeParserVIEW)
	}
	{
		p.SetState(3041)
		p.Id_()
	}
	p.SetState(3069)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3042)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(3043)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3044)
			p.Id_()
		}


	case 2:
		{
			p.SetState(3045)
			p.Match(SnowflakeParserCLUSTER)
		}
		{
			p.SetState(3046)
			p.Match(SnowflakeParserBY)
		}
		{
			p.SetState(3047)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(3048)
			p.Expr_list()
		}
		{
			p.SetState(3049)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 3:
		{
			p.SetState(3051)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(3052)
			p.Match(SnowflakeParserCLUSTERING)
		}
		{
			p.SetState(3053)
			p.Match(SnowflakeParserKEY)
		}


	case 4:
		{
			p.SetState(3054)
			p.Match(SnowflakeParserSUSPEND)
		}
		{
			p.SetState(3055)
			p.Match(SnowflakeParserRECLUSTER)
		}


	case 5:
		{
			p.SetState(3056)
			p.Match(SnowflakeParserRESUME)
		}
		{
			p.SetState(3057)
			p.Match(SnowflakeParserRECLUSTER)
		}


	case 6:
		{
			p.SetState(3058)
			p.Match(SnowflakeParserSUSPEND)
		}


	case 7:
		{
			p.SetState(3059)
			p.Match(SnowflakeParserRESUME)
		}


	case 8:
		{
			p.SetState(3060)
			p.Match(SnowflakeParserSET)
		}

		p.SetState(3062)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURE {
			{
				p.SetState(3061)
				p.Match(SnowflakeParserSECURE)
			}

		}
		p.SetState(3065)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3064)
				p.Comment_clause()
			}


		}



	case 9:
		{
			p.SetState(3067)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(3068)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserCOMMENT || _la == SnowflakeParserSECURE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}



	return localctx
}


// IAlter_network_policyContext is an interface to support dynamic dispatch.
type IAlter_network_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_network_policyContext differentiates from other interfaces.
	IsAlter_network_policyContext()
}

type Alter_network_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_network_policyContext() *Alter_network_policyContext {
	var p = new(Alter_network_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_network_policy
	return p
}

func (*Alter_network_policyContext) IsAlter_network_policyContext() {}

func NewAlter_network_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_network_policyContext {
	var p = new(Alter_network_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_network_policy

	return p
}

func (s *Alter_network_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_network_policyContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_network_policyContext) NETWORK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK, 0)
}

func (s *Alter_network_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Alter_network_policyContext) Alter_network_policy_opts() IAlter_network_policy_optsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_network_policy_optsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_network_policy_optsContext)
}

func (s *Alter_network_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_network_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_network_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_network_policy(s)
	}
}

func (s *Alter_network_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_network_policy(s)
	}
}

func (s *Alter_network_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_network_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_network_policy() (localctx IAlter_network_policyContext) {
	this := p
	_ = this

	localctx = NewAlter_network_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, SnowflakeParserRULE_alter_network_policy)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3071)
		p.Match(SnowflakeParserALTER)
	}
	{
		p.SetState(3072)
		p.Match(SnowflakeParserNETWORK)
	}
	{
		p.SetState(3073)
		p.Match(SnowflakeParserPOLICY)
	}
	{
		p.SetState(3074)
		p.Alter_network_policy_opts()
	}



	return localctx
}


// IAlter_notification_integrationContext is an interface to support dynamic dispatch.
type IAlter_notification_integrationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_notification_integrationContext differentiates from other interfaces.
	IsAlter_notification_integrationContext()
}

type Alter_notification_integrationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_notification_integrationContext() *Alter_notification_integrationContext {
	var p = new(Alter_notification_integrationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_notification_integration
	return p
}

func (*Alter_notification_integrationContext) IsAlter_notification_integrationContext() {}

func NewAlter_notification_integrationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_notification_integrationContext {
	var p = new(Alter_notification_integrationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_notification_integration

	return p
}

func (s *Alter_notification_integrationContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_notification_integrationContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_notification_integrationContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Alter_notification_integrationContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_notification_integrationContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_notification_integrationContext) Cloud_provider_params_auto() ICloud_provider_params_autoContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloud_provider_params_autoContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloud_provider_params_autoContext)
}

func (s *Alter_notification_integrationContext) NOTIFICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOTIFICATION, 0)
}

func (s *Alter_notification_integrationContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_notification_integrationContext) Enabled_true_false() IEnabled_true_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnabled_true_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnabled_true_falseContext)
}

func (s *Alter_notification_integrationContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_notification_integrationContext) Cloud_provider_params_push() ICloud_provider_params_pushContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloud_provider_params_pushContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloud_provider_params_pushContext)
}

func (s *Alter_notification_integrationContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_notification_integrationContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_notification_integrationContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_notification_integrationContext) ENABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLED, 0)
}

func (s *Alter_notification_integrationContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_notification_integrationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_notification_integrationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_notification_integrationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_notification_integration(s)
	}
}

func (s *Alter_notification_integrationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_notification_integration(s)
	}
}

func (s *Alter_notification_integrationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_notification_integration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_notification_integration() (localctx IAlter_notification_integrationContext) {
	this := p
	_ = this

	localctx = NewAlter_notification_integrationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, SnowflakeParserRULE_alter_notification_integration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3136)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3076)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(3078)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNOTIFICATION {
			{
				p.SetState(3077)
				p.Match(SnowflakeParserNOTIFICATION)
			}

		}
		{
			p.SetState(3080)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(3082)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3081)
				p.If_exists()
			}

		}
		{
			p.SetState(3084)
			p.Id_()
		}
		{
			p.SetState(3085)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(3087)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENABLED {
			{
				p.SetState(3086)
				p.Enabled_true_false()
			}

		}
		{
			p.SetState(3089)
			p.Cloud_provider_params_auto()
		}
		p.SetState(3091)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 239, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3090)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3093)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(3095)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNOTIFICATION {
			{
				p.SetState(3094)
				p.Match(SnowflakeParserNOTIFICATION)
			}

		}
		{
			p.SetState(3097)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(3099)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3098)
				p.If_exists()
			}

		}
		{
			p.SetState(3101)
			p.Id_()
		}
		{
			p.SetState(3102)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(3104)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENABLED {
			{
				p.SetState(3103)
				p.Enabled_true_false()
			}

		}
		{
			p.SetState(3106)
			p.Cloud_provider_params_push()
		}
		p.SetState(3108)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 243, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3107)
				p.Comment_clause()
			}


		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3110)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(3112)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNOTIFICATION {
			{
				p.SetState(3111)
				p.Match(SnowflakeParserNOTIFICATION)
			}

		}
		{
			p.SetState(3114)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(3115)
			p.Id_()
		}
		{
			p.SetState(3116)
			p.Set_tags()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3118)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(3120)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNOTIFICATION {
			{
				p.SetState(3119)
				p.Match(SnowflakeParserNOTIFICATION)
			}

		}
		{
			p.SetState(3122)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(3123)
			p.Id_()
		}
		{
			p.SetState(3124)
			p.Unset_tags()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3126)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(3128)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNOTIFICATION {
			{
				p.SetState(3127)
				p.Match(SnowflakeParserNOTIFICATION)
			}

		}
		{
			p.SetState(3130)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(3131)
			p.If_exists()
		}
		{
			p.SetState(3132)
			p.Id_()
		}
		{
			p.SetState(3133)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(3134)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserCOMMENT || _la == SnowflakeParserENABLED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}


	return localctx
}


// IAlter_pipeContext is an interface to support dynamic dispatch.
type IAlter_pipeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_pipeContext differentiates from other interfaces.
	IsAlter_pipeContext()
}

type Alter_pipeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_pipeContext() *Alter_pipeContext {
	var p = new(Alter_pipeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_pipe
	return p
}

func (*Alter_pipeContext) IsAlter_pipeContext() {}

func NewAlter_pipeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_pipeContext {
	var p = new(Alter_pipeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_pipe

	return p
}

func (s *Alter_pipeContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_pipeContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_pipeContext) PIPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPIPE, 0)
}

func (s *Alter_pipeContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_pipeContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_pipeContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_pipeContext) Object_properties() IObject_propertiesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_propertiesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_propertiesContext)
}

func (s *Alter_pipeContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_pipeContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_pipeContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_pipeContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_pipeContext) PIPE_EXECUTION_PAUSED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPIPE_EXECUTION_PAUSED, 0)
}

func (s *Alter_pipeContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_pipeContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_pipeContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Alter_pipeContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_pipeContext) REFRESH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREFRESH, 0)
}

func (s *Alter_pipeContext) PREFIX() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPREFIX, 0)
}

func (s *Alter_pipeContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Alter_pipeContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Alter_pipeContext) MODIFIED_AFTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMODIFIED_AFTER, 0)
}

func (s *Alter_pipeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_pipeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_pipeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_pipe(s)
	}
}

func (s *Alter_pipeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_pipe(s)
	}
}

func (s *Alter_pipeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_pipe(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_pipe() (localctx IAlter_pipeContext) {
	this := p
	_ = this

	localctx = NewAlter_pipeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, SnowflakeParserRULE_alter_pipe)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3198)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 256, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3138)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3139)
			p.Match(SnowflakeParserPIPE)
		}
		p.SetState(3141)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3140)
				p.If_exists()
			}

		}
		{
			p.SetState(3143)
			p.Id_()
		}
		{
			p.SetState(3144)
			p.Match(SnowflakeParserSET)
		}

		p.SetState(3146)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3145)
				p.Object_properties()
			}


		}
		p.SetState(3149)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 250, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3148)
				p.Comment_clause()
			}


		}



	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3151)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3152)
			p.Match(SnowflakeParserPIPE)
		}
		{
			p.SetState(3153)
			p.Id_()
		}
		{
			p.SetState(3154)
			p.Set_tags()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3156)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3157)
			p.Match(SnowflakeParserPIPE)
		}
		{
			p.SetState(3158)
			p.Id_()
		}
		{
			p.SetState(3159)
			p.Unset_tags()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3161)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3162)
			p.Match(SnowflakeParserPIPE)
		}
		p.SetState(3164)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3163)
				p.If_exists()
			}

		}
		{
			p.SetState(3166)
			p.Id_()
		}
		{
			p.SetState(3167)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(3168)
			p.Match(SnowflakeParserPIPE_EXECUTION_PAUSED)
		}
		{
			p.SetState(3169)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(3170)
			p.True_false()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3172)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3173)
			p.Match(SnowflakeParserPIPE)
		}
		p.SetState(3175)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3174)
				p.If_exists()
			}

		}
		{
			p.SetState(3177)
			p.Id_()
		}
		{
			p.SetState(3178)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(3179)
			p.Match(SnowflakeParserCOMMENT)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3181)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3182)
			p.Match(SnowflakeParserPIPE)
		}
		p.SetState(3184)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3183)
				p.If_exists()
			}

		}
		{
			p.SetState(3186)
			p.Id_()
		}
		{
			p.SetState(3187)
			p.Match(SnowflakeParserREFRESH)
		}
		p.SetState(3191)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserPREFIX {
			{
				p.SetState(3188)
				p.Match(SnowflakeParserPREFIX)
			}
			{
				p.SetState(3189)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3190)
				p.String_()
			}

		}
		p.SetState(3196)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserMODIFIED_AFTER {
			{
				p.SetState(3193)
				p.Match(SnowflakeParserMODIFIED_AFTER)
			}
			{
				p.SetState(3194)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3195)
				p.String_()
			}

		}

	}


	return localctx
}


// IAlter_procedureContext is an interface to support dynamic dispatch.
type IAlter_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_procedureContext differentiates from other interfaces.
	IsAlter_procedureContext()
}

type Alter_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_procedureContext() *Alter_procedureContext {
	var p = new(Alter_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_procedure
	return p
}

func (*Alter_procedureContext) IsAlter_procedureContext() {}

func NewAlter_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_procedureContext {
	var p = new(Alter_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_procedure

	return p
}

func (s *Alter_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_procedureContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPROCEDURE, 0)
}

func (s *Alter_procedureContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_procedureContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_procedureContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Alter_procedureContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Alter_procedureContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_procedureContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_procedureContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_procedureContext) Data_type_list() IData_type_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_type_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_type_listContext)
}

func (s *Alter_procedureContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_procedureContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_procedureContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Alter_procedureContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Alter_procedureContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_procedureContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXECUTE, 0)
}

func (s *Alter_procedureContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Alter_procedureContext) Caller_owner() ICaller_ownerContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICaller_ownerContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICaller_ownerContext)
}

func (s *Alter_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_procedure(s)
	}
}

func (s *Alter_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_procedure(s)
	}
}

func (s *Alter_procedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_procedure(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_procedure() (localctx IAlter_procedureContext) {
	this := p
	_ = this

	localctx = NewAlter_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, SnowflakeParserRULE_alter_procedure)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3260)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 265, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3200)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3201)
			p.Match(SnowflakeParserPROCEDURE)
		}
		p.SetState(3203)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3202)
				p.If_exists()
			}

		}
		{
			p.SetState(3205)
			p.Id_()
		}
		{
			p.SetState(3206)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(3208)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCHAR || _la == SnowflakeParserCHARACTER || _la == SnowflakeParserDOUBLE || _la == SnowflakeParserINT || _la == SnowflakeParserNUMBER || _la == SnowflakeParserOBJECT || (int64((_la - 869)) & ^0x3f) == 0 && ((int64(1) << (_la - 869)) & 70721) != 0 || (int64((_la - 1000)) & ^0x3f) == 0 && ((int64(1) << (_la - 1000)) & 133791711) != 0 {
			{
				p.SetState(3207)
				p.Data_type_list()
			}

		}
		{
			p.SetState(3210)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		{
			p.SetState(3211)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(3212)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3213)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3215)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3216)
			p.Match(SnowflakeParserPROCEDURE)
		}
		p.SetState(3218)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3217)
				p.If_exists()
			}

		}
		{
			p.SetState(3220)
			p.Id_()
		}
		{
			p.SetState(3221)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(3223)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCHAR || _la == SnowflakeParserCHARACTER || _la == SnowflakeParserDOUBLE || _la == SnowflakeParserINT || _la == SnowflakeParserNUMBER || _la == SnowflakeParserOBJECT || (int64((_la - 869)) & ^0x3f) == 0 && ((int64(1) << (_la - 869)) & 70721) != 0 || (int64((_la - 1000)) & ^0x3f) == 0 && ((int64(1) << (_la - 1000)) & 133791711) != 0 {
			{
				p.SetState(3222)
				p.Data_type_list()
			}

		}
		{
			p.SetState(3225)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		{
			p.SetState(3226)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(3227)
			p.Match(SnowflakeParserCOMMENT)
		}
		{
			p.SetState(3228)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(3229)
			p.String_()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3231)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3232)
			p.Match(SnowflakeParserPROCEDURE)
		}
		p.SetState(3234)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3233)
				p.If_exists()
			}

		}
		{
			p.SetState(3236)
			p.Id_()
		}
		{
			p.SetState(3237)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(3239)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCHAR || _la == SnowflakeParserCHARACTER || _la == SnowflakeParserDOUBLE || _la == SnowflakeParserINT || _la == SnowflakeParserNUMBER || _la == SnowflakeParserOBJECT || (int64((_la - 869)) & ^0x3f) == 0 && ((int64(1) << (_la - 869)) & 70721) != 0 || (int64((_la - 1000)) & ^0x3f) == 0 && ((int64(1) << (_la - 1000)) & 133791711) != 0 {
			{
				p.SetState(3238)
				p.Data_type_list()
			}

		}
		{
			p.SetState(3241)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		{
			p.SetState(3242)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(3243)
			p.Match(SnowflakeParserCOMMENT)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3245)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3246)
			p.Match(SnowflakeParserPROCEDURE)
		}
		p.SetState(3248)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3247)
				p.If_exists()
			}

		}
		{
			p.SetState(3250)
			p.Id_()
		}
		{
			p.SetState(3251)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(3253)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCHAR || _la == SnowflakeParserCHARACTER || _la == SnowflakeParserDOUBLE || _la == SnowflakeParserINT || _la == SnowflakeParserNUMBER || _la == SnowflakeParserOBJECT || (int64((_la - 869)) & ^0x3f) == 0 && ((int64(1) << (_la - 869)) & 70721) != 0 || (int64((_la - 1000)) & ^0x3f) == 0 && ((int64(1) << (_la - 1000)) & 133791711) != 0 {
			{
				p.SetState(3252)
				p.Data_type_list()
			}

		}
		{
			p.SetState(3255)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		{
			p.SetState(3256)
			p.Match(SnowflakeParserEXECUTE)
		}
		{
			p.SetState(3257)
			p.Match(SnowflakeParserAS)
		}
		{
			p.SetState(3258)
			p.Caller_owner()
		}

	}


	return localctx
}


// IAlter_replication_groupContext is an interface to support dynamic dispatch.
type IAlter_replication_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_replication_groupContext differentiates from other interfaces.
	IsAlter_replication_groupContext()
}

type Alter_replication_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_replication_groupContext() *Alter_replication_groupContext {
	var p = new(Alter_replication_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_replication_group
	return p
}

func (*Alter_replication_groupContext) IsAlter_replication_groupContext() {}

func NewAlter_replication_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_replication_groupContext {
	var p = new(Alter_replication_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_replication_group

	return p
}

func (s *Alter_replication_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_replication_groupContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_replication_groupContext) AllREPLICATION() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserREPLICATION)
}

func (s *Alter_replication_groupContext) REPLICATION(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION, i)
}

func (s *Alter_replication_groupContext) AllGROUP() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserGROUP)
}

func (s *Alter_replication_groupContext) GROUP(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUP, i)
}

func (s *Alter_replication_groupContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_replication_groupContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_replication_groupContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_replication_groupContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_replication_groupContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_replication_groupContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_replication_groupContext) OBJECT_TYPES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOBJECT_TYPES, 0)
}

func (s *Alter_replication_groupContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_replication_groupContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_replication_groupContext) Object_type_list() IObject_type_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_type_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_type_listContext)
}

func (s *Alter_replication_groupContext) REPLICATION_SCHEDULE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION_SCHEDULE, 0)
}

func (s *Alter_replication_groupContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Alter_replication_groupContext) ALLOWED_INTEGRATION_TYPES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_INTEGRATION_TYPES, 0)
}

func (s *Alter_replication_groupContext) AllIntegration_type_name() []IIntegration_type_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegration_type_nameContext); ok {
			len++
		}
	}

	tst := make([]IIntegration_type_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegration_type_nameContext); ok {
			tst[i] = t.(IIntegration_type_nameContext)
			i++
		}
	}

	return tst
}

func (s *Alter_replication_groupContext) Integration_type_name(i int) IIntegration_type_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegration_type_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegration_type_nameContext)
}

func (s *Alter_replication_groupContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_replication_groupContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_replication_groupContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Alter_replication_groupContext) Db_name_list() IDb_name_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDb_name_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDb_name_listContext)
}

func (s *Alter_replication_groupContext) ALLOWED_DATABASES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_DATABASES, 0)
}

func (s *Alter_replication_groupContext) MOVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMOVE, 0)
}

func (s *Alter_replication_groupContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASES, 0)
}

func (s *Alter_replication_groupContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREMOVE, 0)
}

func (s *Alter_replication_groupContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *Alter_replication_groupContext) Share_name_list() IShare_name_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShare_name_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShare_name_listContext)
}

func (s *Alter_replication_groupContext) ALLOWED_SHARES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_SHARES, 0)
}

func (s *Alter_replication_groupContext) SHARES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARES, 0)
}

func (s *Alter_replication_groupContext) Account_id_list() IAccount_id_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccount_id_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccount_id_listContext)
}

func (s *Alter_replication_groupContext) ALLOWED_ACCOUNTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_ACCOUNTS, 0)
}

func (s *Alter_replication_groupContext) Ignore_edition_check() IIgnore_edition_checkContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIgnore_edition_checkContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIgnore_edition_checkContext)
}

func (s *Alter_replication_groupContext) REFRESH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREFRESH, 0)
}

func (s *Alter_replication_groupContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND, 0)
}

func (s *Alter_replication_groupContext) RESUME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESUME, 0)
}

func (s *Alter_replication_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_replication_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_replication_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_replication_group(s)
	}
}

func (s *Alter_replication_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_replication_group(s)
	}
}

func (s *Alter_replication_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_replication_group(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_replication_group() (localctx IAlter_replication_groupContext) {
	this := p
	_ = this

	localctx = NewAlter_replication_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, SnowflakeParserRULE_alter_replication_group)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3448)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 285, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3262)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3263)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3264)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3266)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3265)
				p.If_exists()
			}

		}
		{
			p.SetState(3268)
			p.Id_()
		}
		{
			p.SetState(3269)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(3270)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3271)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3273)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3274)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3275)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3277)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3276)
				p.If_exists()
			}

		}
		{
			p.SetState(3279)
			p.Id_()
		}
		{
			p.SetState(3280)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(3284)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOBJECT_TYPES {
			{
				p.SetState(3281)
				p.Match(SnowflakeParserOBJECT_TYPES)
			}
			{
				p.SetState(3282)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3283)
				p.Object_type_list()
			}

		}
		p.SetState(3289)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserREPLICATION_SCHEDULE {
			{
				p.SetState(3286)
				p.Match(SnowflakeParserREPLICATION_SCHEDULE)
			}
			{
				p.SetState(3287)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3288)
				p.String_()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3291)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3292)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3293)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3295)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3294)
				p.If_exists()
			}

		}
		{
			p.SetState(3297)
			p.Id_()
		}
		{
			p.SetState(3298)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(3299)
			p.Match(SnowflakeParserOBJECT_TYPES)
		}
		{
			p.SetState(3300)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(3301)
			p.Object_type_list()
		}
		{
			p.SetState(3302)
			p.Match(SnowflakeParserALLOWED_INTEGRATION_TYPES)
		}
		{
			p.SetState(3303)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(3304)
			p.Integration_type_name()
		}
		p.SetState(3309)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(3305)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(3306)
				p.Integration_type_name()
			}


			p.SetState(3311)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(3315)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserREPLICATION_SCHEDULE {
			{
				p.SetState(3312)
				p.Match(SnowflakeParserREPLICATION_SCHEDULE)
			}
			{
				p.SetState(3313)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3314)
				p.String_()
			}

		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3317)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3318)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3319)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3321)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3320)
				p.If_exists()
			}

		}
		{
			p.SetState(3323)
			p.Id_()
		}
		{
			p.SetState(3324)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(3325)
			p.Db_name_list()
		}
		{
			p.SetState(3326)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3327)
			p.Match(SnowflakeParserALLOWED_DATABASES)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3329)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3330)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3331)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3333)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3332)
				p.If_exists()
			}

		}
		{
			p.SetState(3335)
			p.Id_()
		}
		{
			p.SetState(3336)
			p.Match(SnowflakeParserMOVE)
		}
		{
			p.SetState(3337)
			p.Match(SnowflakeParserDATABASES)
		}
		{
			p.SetState(3338)
			p.Db_name_list()
		}
		{
			p.SetState(3339)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3340)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3341)
			p.Match(SnowflakeParserGROUP)
		}
		{
			p.SetState(3342)
			p.Id_()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3344)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3345)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3346)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3348)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3347)
				p.If_exists()
			}

		}
		{
			p.SetState(3350)
			p.Id_()
		}
		{
			p.SetState(3351)
			p.Match(SnowflakeParserREMOVE)
		}
		{
			p.SetState(3352)
			p.Db_name_list()
		}
		{
			p.SetState(3353)
			p.Match(SnowflakeParserFROM)
		}
		{
			p.SetState(3354)
			p.Match(SnowflakeParserALLOWED_DATABASES)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3356)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3357)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3358)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3360)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3359)
				p.If_exists()
			}

		}
		{
			p.SetState(3362)
			p.Id_()
		}
		{
			p.SetState(3363)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(3364)
			p.Share_name_list()
		}
		{
			p.SetState(3365)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3366)
			p.Match(SnowflakeParserALLOWED_SHARES)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3368)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3369)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3370)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3372)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3371)
				p.If_exists()
			}

		}
		{
			p.SetState(3374)
			p.Id_()
		}
		{
			p.SetState(3375)
			p.Match(SnowflakeParserMOVE)
		}
		{
			p.SetState(3376)
			p.Match(SnowflakeParserSHARES)
		}
		{
			p.SetState(3377)
			p.Share_name_list()
		}
		{
			p.SetState(3378)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3379)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3380)
			p.Match(SnowflakeParserGROUP)
		}
		{
			p.SetState(3381)
			p.Id_()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3383)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3384)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3385)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3387)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3386)
				p.If_exists()
			}

		}
		{
			p.SetState(3389)
			p.Id_()
		}
		{
			p.SetState(3390)
			p.Match(SnowflakeParserREMOVE)
		}
		{
			p.SetState(3391)
			p.Share_name_list()
		}
		{
			p.SetState(3392)
			p.Match(SnowflakeParserFROM)
		}
		{
			p.SetState(3393)
			p.Match(SnowflakeParserALLOWED_SHARES)
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3395)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3396)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3397)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3399)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3398)
				p.If_exists()
			}

		}
		{
			p.SetState(3401)
			p.Id_()
		}
		{
			p.SetState(3402)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(3403)
			p.Account_id_list()
		}
		{
			p.SetState(3404)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3405)
			p.Match(SnowflakeParserALLOWED_ACCOUNTS)
		}
		p.SetState(3407)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIGNORE {
			{
				p.SetState(3406)
				p.Ignore_edition_check()
			}

		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3409)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3410)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3411)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3413)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3412)
				p.If_exists()
			}

		}
		{
			p.SetState(3415)
			p.Id_()
		}
		{
			p.SetState(3416)
			p.Match(SnowflakeParserREMOVE)
		}
		{
			p.SetState(3417)
			p.Account_id_list()
		}
		{
			p.SetState(3418)
			p.Match(SnowflakeParserFROM)
		}
		{
			p.SetState(3419)
			p.Match(SnowflakeParserALLOWED_ACCOUNTS)
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3421)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3422)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3423)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3425)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3424)
				p.If_exists()
			}

		}
		{
			p.SetState(3427)
			p.Id_()
		}
		{
			p.SetState(3428)
			p.Match(SnowflakeParserREFRESH)
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(3430)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3431)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3432)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3434)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3433)
				p.If_exists()
			}

		}
		{
			p.SetState(3436)
			p.Id_()
		}
		{
			p.SetState(3437)
			p.Match(SnowflakeParserSUSPEND)
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(3439)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3440)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(3441)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(3443)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3442)
				p.If_exists()
			}

		}
		{
			p.SetState(3445)
			p.Id_()
		}
		{
			p.SetState(3446)
			p.Match(SnowflakeParserRESUME)
		}

	}


	return localctx
}


// ICredit_quotaContext is an interface to support dynamic dispatch.
type ICredit_quotaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCredit_quotaContext differentiates from other interfaces.
	IsCredit_quotaContext()
}

type Credit_quotaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCredit_quotaContext() *Credit_quotaContext {
	var p = new(Credit_quotaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_credit_quota
	return p
}

func (*Credit_quotaContext) IsCredit_quotaContext() {}

func NewCredit_quotaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Credit_quotaContext {
	var p = new(Credit_quotaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_credit_quota

	return p
}

func (s *Credit_quotaContext) GetParser() antlr.Parser { return s.parser }

func (s *Credit_quotaContext) CREDIT_QUOTA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREDIT_QUOTA, 0)
}

func (s *Credit_quotaContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Credit_quotaContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Credit_quotaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Credit_quotaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Credit_quotaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCredit_quota(s)
	}
}

func (s *Credit_quotaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCredit_quota(s)
	}
}

func (s *Credit_quotaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCredit_quota(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Credit_quota() (localctx ICredit_quotaContext) {
	this := p
	_ = this

	localctx = NewCredit_quotaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, SnowflakeParserRULE_credit_quota)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3450)
		p.Match(SnowflakeParserCREDIT_QUOTA)
	}
	{
		p.SetState(3451)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(3452)
		p.Num()
	}



	return localctx
}


// IFrequencyContext is an interface to support dynamic dispatch.
type IFrequencyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrequencyContext differentiates from other interfaces.
	IsFrequencyContext()
}

type FrequencyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrequencyContext() *FrequencyContext {
	var p = new(FrequencyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_frequency
	return p
}

func (*FrequencyContext) IsFrequencyContext() {}

func NewFrequencyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrequencyContext {
	var p = new(FrequencyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_frequency

	return p
}

func (s *FrequencyContext) GetParser() antlr.Parser { return s.parser }

func (s *FrequencyContext) FREQUENCY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFREQUENCY, 0)
}

func (s *FrequencyContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *FrequencyContext) MONTHLY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMONTHLY, 0)
}

func (s *FrequencyContext) DAILY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDAILY, 0)
}

func (s *FrequencyContext) WEEKLY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWEEKLY, 0)
}

func (s *FrequencyContext) YEARLY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserYEARLY, 0)
}

func (s *FrequencyContext) NEVER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNEVER, 0)
}

func (s *FrequencyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrequencyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *FrequencyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFrequency(s)
	}
}

func (s *FrequencyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFrequency(s)
	}
}

func (s *FrequencyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFrequency(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Frequency() (localctx IFrequencyContext) {
	this := p
	_ = this

	localctx = NewFrequencyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, SnowflakeParserRULE_frequency)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3454)
		p.Match(SnowflakeParserFREQUENCY)
	}
	{
		p.SetState(3455)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(3456)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserDAILY || _la == SnowflakeParserMONTHLY || _la == SnowflakeParserNEVER || _la == SnowflakeParserWEEKLY || _la == SnowflakeParserYEARLY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// INotify_usersContext is an interface to support dynamic dispatch.
type INotify_usersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNotify_usersContext differentiates from other interfaces.
	IsNotify_usersContext()
}

type Notify_usersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNotify_usersContext() *Notify_usersContext {
	var p = new(Notify_usersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_notify_users
	return p
}

func (*Notify_usersContext) IsNotify_usersContext() {}

func NewNotify_usersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Notify_usersContext {
	var p = new(Notify_usersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_notify_users

	return p
}

func (s *Notify_usersContext) GetParser() antlr.Parser { return s.parser }

func (s *Notify_usersContext) NOTIFY_USERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOTIFY_USERS, 0)
}

func (s *Notify_usersContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Notify_usersContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Notify_usersContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Notify_usersContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Notify_usersContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Notify_usersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Notify_usersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Notify_usersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Notify_usersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Notify_usersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterNotify_users(s)
	}
}

func (s *Notify_usersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitNotify_users(s)
	}
}

func (s *Notify_usersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitNotify_users(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Notify_users() (localctx INotify_usersContext) {
	this := p
	_ = this

	localctx = NewNotify_usersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, SnowflakeParserRULE_notify_users)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3458)
		p.Match(SnowflakeParserNOTIFY_USERS)
	}
	{
		p.SetState(3459)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(3460)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(3461)
		p.Id_()
	}
	p.SetState(3466)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(3462)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(3463)
			p.Id_()
		}


		p.SetState(3468)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3469)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// ITriggerDefinitionContext is an interface to support dynamic dispatch.
type ITriggerDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTriggerDefinitionContext differentiates from other interfaces.
	IsTriggerDefinitionContext()
}

type TriggerDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTriggerDefinitionContext() *TriggerDefinitionContext {
	var p = new(TriggerDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_triggerDefinition
	return p
}

func (*TriggerDefinitionContext) IsTriggerDefinitionContext() {}

func NewTriggerDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TriggerDefinitionContext {
	var p = new(TriggerDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_triggerDefinition

	return p
}

func (s *TriggerDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *TriggerDefinitionContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *TriggerDefinitionContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *TriggerDefinitionContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPERCENT, 0)
}

func (s *TriggerDefinitionContext) DO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDO, 0)
}

func (s *TriggerDefinitionContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND, 0)
}

func (s *TriggerDefinitionContext) SUSPEND_IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND_IMMEDIATE, 0)
}

func (s *TriggerDefinitionContext) NOTIFY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOTIFY, 0)
}

func (s *TriggerDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TriggerDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TriggerDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTriggerDefinition(s)
	}
}

func (s *TriggerDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTriggerDefinition(s)
	}
}

func (s *TriggerDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTriggerDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) TriggerDefinition() (localctx ITriggerDefinitionContext) {
	this := p
	_ = this

	localctx = NewTriggerDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, SnowflakeParserRULE_triggerDefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3471)
		p.Match(SnowflakeParserON)
	}
	{
		p.SetState(3472)
		p.Num()
	}
	{
		p.SetState(3473)
		p.Match(SnowflakeParserPERCENT)
	}
	{
		p.SetState(3474)
		p.Match(SnowflakeParserDO)
	}
	{
		p.SetState(3475)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserNOTIFY || _la == SnowflakeParserSUSPEND || _la == SnowflakeParserSUSPEND_IMMEDIATE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IAlter_resource_monitorContext is an interface to support dynamic dispatch.
type IAlter_resource_monitorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_resource_monitorContext differentiates from other interfaces.
	IsAlter_resource_monitorContext()
}

type Alter_resource_monitorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_resource_monitorContext() *Alter_resource_monitorContext {
	var p = new(Alter_resource_monitorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_resource_monitor
	return p
}

func (*Alter_resource_monitorContext) IsAlter_resource_monitorContext() {}

func NewAlter_resource_monitorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_resource_monitorContext {
	var p = new(Alter_resource_monitorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_resource_monitor

	return p
}

func (s *Alter_resource_monitorContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_resource_monitorContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_resource_monitorContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESOURCE, 0)
}

func (s *Alter_resource_monitorContext) MONITOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMONITOR, 0)
}

func (s *Alter_resource_monitorContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_resource_monitorContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_resource_monitorContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_resource_monitorContext) Notify_users() INotify_usersContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INotify_usersContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INotify_usersContext)
}

func (s *Alter_resource_monitorContext) Credit_quota() ICredit_quotaContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICredit_quotaContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICredit_quotaContext)
}

func (s *Alter_resource_monitorContext) Frequency() IFrequencyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrequencyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrequencyContext)
}

func (s *Alter_resource_monitorContext) START_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTART_TIMESTAMP, 0)
}

func (s *Alter_resource_monitorContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_resource_monitorContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_resource_monitorContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Alter_resource_monitorContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Alter_resource_monitorContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Alter_resource_monitorContext) IMMEDIATELY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIMMEDIATELY, 0)
}

func (s *Alter_resource_monitorContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Alter_resource_monitorContext) END_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEND_TIMESTAMP, 0)
}

func (s *Alter_resource_monitorContext) TRIGGERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRIGGERS, 0)
}

func (s *Alter_resource_monitorContext) AllTriggerDefinition() []ITriggerDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITriggerDefinitionContext); ok {
			len++
		}
	}

	tst := make([]ITriggerDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITriggerDefinitionContext); ok {
			tst[i] = t.(ITriggerDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *Alter_resource_monitorContext) TriggerDefinition(i int) ITriggerDefinitionContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITriggerDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITriggerDefinitionContext)
}

func (s *Alter_resource_monitorContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_resource_monitorContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_resource_monitorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_resource_monitorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_resource_monitorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_resource_monitor(s)
	}
}

func (s *Alter_resource_monitorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_resource_monitor(s)
	}
}

func (s *Alter_resource_monitorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_resource_monitor(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_resource_monitor() (localctx IAlter_resource_monitorContext) {
	this := p
	_ = this

	localctx = NewAlter_resource_monitorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, SnowflakeParserRULE_alter_resource_monitor)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3477)
		p.Match(SnowflakeParserALTER)
	}
	{
		p.SetState(3478)
		p.Match(SnowflakeParserRESOURCE)
	}
	{
		p.SetState(3479)
		p.Match(SnowflakeParserMONITOR)
	}
	p.SetState(3481)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(3480)
			p.If_exists()
		}

	}
	{
		p.SetState(3483)
		p.Id_()
	}
	p.SetState(3504)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 292, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3484)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(3486)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCREDIT_QUOTA {
			{
				p.SetState(3485)
				p.Credit_quota()
			}

		}
		p.SetState(3489)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFREQUENCY {
			{
				p.SetState(3488)
				p.Frequency()
			}

		}
		p.SetState(3497)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSTART_TIMESTAMP:
			{
				p.SetState(3491)
				p.Match(SnowflakeParserSTART_TIMESTAMP)
			}
			{
				p.SetState(3492)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3493)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(3494)
				p.String_()
			}


		case SnowflakeParserIMMEDIATELY:
			{
				p.SetState(3495)
				p.Match(SnowflakeParserIMMEDIATELY)
			}
			{
				p.SetState(3496)
				p.Match(SnowflakeParserRR_BRACKET)
			}


		case SnowflakeParserEOF, SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCOPY, SnowflakeParserCREATE, SnowflakeParserDELETE, SnowflakeParserDESC, SnowflakeParserDESCRIBE, SnowflakeParserDROP, SnowflakeParserEND_TIMESTAMP, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserINSERT, SnowflakeParserLIST, SnowflakeParserMERGE, SnowflakeParserNOTIFY_USERS, SnowflakeParserPUT, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSELECT, SnowflakeParserSET, SnowflakeParserSHOW, SnowflakeParserTRUNCATE, SnowflakeParserUNDROP, SnowflakeParserUNSET, SnowflakeParserUPDATE, SnowflakeParserUSE, SnowflakeParserWITH, SnowflakeParserSEMI:



		default:
		}
		p.SetState(3502)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEND_TIMESTAMP {
			{
				p.SetState(3499)
				p.Match(SnowflakeParserEND_TIMESTAMP)
			}
			{
				p.SetState(3500)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3501)
				p.String_()
			}

		}


	}
	p.SetState(3518)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserNOTIFY_USERS {
		{
			p.SetState(3506)
			p.Notify_users()
		}
		p.SetState(3516)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTRIGGERS {
			{
				p.SetState(3507)
				p.Match(SnowflakeParserTRIGGERS)
			}
			{
				p.SetState(3508)
				p.TriggerDefinition()
			}
			p.SetState(3513)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(3509)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(3510)
					p.TriggerDefinition()
				}


				p.SetState(3515)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	}



	return localctx
}


// IAlter_roleContext is an interface to support dynamic dispatch.
type IAlter_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_roleContext differentiates from other interfaces.
	IsAlter_roleContext()
}

type Alter_roleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_roleContext() *Alter_roleContext {
	var p = new(Alter_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_role
	return p
}

func (*Alter_roleContext) IsAlter_roleContext() {}

func NewAlter_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_roleContext {
	var p = new(Alter_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_role

	return p
}

func (s *Alter_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_roleContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, 0)
}

func (s *Alter_roleContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_roleContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_roleContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_roleContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_roleContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_roleContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_roleContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_roleContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_roleContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_roleContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_roleContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_role(s)
	}
}

func (s *Alter_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_role(s)
	}
}

func (s *Alter_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_role(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_role() (localctx IAlter_roleContext) {
	this := p
	_ = this

	localctx = NewAlter_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, SnowflakeParserRULE_alter_role)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3564)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 301, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3520)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3521)
			p.Match(SnowflakeParserROLE)
		}
		p.SetState(3523)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3522)
				p.If_exists()
			}

		}
		{
			p.SetState(3525)
			p.Id_()
		}
		{
			p.SetState(3526)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(3527)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3528)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3530)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3531)
			p.Match(SnowflakeParserROLE)
		}
		p.SetState(3533)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3532)
				p.If_exists()
			}

		}
		{
			p.SetState(3535)
			p.Id_()
		}
		{
			p.SetState(3536)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(3537)
			p.Comment_clause()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3539)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3540)
			p.Match(SnowflakeParserROLE)
		}
		p.SetState(3542)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3541)
				p.If_exists()
			}

		}
		{
			p.SetState(3544)
			p.Id_()
		}
		{
			p.SetState(3545)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(3546)
			p.Match(SnowflakeParserCOMMENT)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3548)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3549)
			p.Match(SnowflakeParserROLE)
		}
		p.SetState(3551)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3550)
				p.If_exists()
			}

		}
		{
			p.SetState(3553)
			p.Id_()
		}
		{
			p.SetState(3554)
			p.Set_tags()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3556)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3557)
			p.Match(SnowflakeParserROLE)
		}
		p.SetState(3559)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3558)
				p.If_exists()
			}

		}
		{
			p.SetState(3561)
			p.Id_()
		}
		{
			p.SetState(3562)
			p.Unset_tags()
		}

	}


	return localctx
}


// IAlter_row_access_policyContext is an interface to support dynamic dispatch.
type IAlter_row_access_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_row_access_policyContext differentiates from other interfaces.
	IsAlter_row_access_policyContext()
}

type Alter_row_access_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_row_access_policyContext() *Alter_row_access_policyContext {
	var p = new(Alter_row_access_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_row_access_policy
	return p
}

func (*Alter_row_access_policyContext) IsAlter_row_access_policyContext() {}

func NewAlter_row_access_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_row_access_policyContext {
	var p = new(Alter_row_access_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_row_access_policy

	return p
}

func (s *Alter_row_access_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_row_access_policyContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_row_access_policyContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *Alter_row_access_policyContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, 0)
}

func (s *Alter_row_access_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Alter_row_access_policyContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_row_access_policyContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_row_access_policyContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_row_access_policyContext) BODY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBODY, 0)
}

func (s *Alter_row_access_policyContext) ARROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserARROW, 0)
}

func (s *Alter_row_access_policyContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Alter_row_access_policyContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_row_access_policyContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_row_access_policyContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_row_access_policyContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_row_access_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_row_access_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_row_access_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_row_access_policy(s)
	}
}

func (s *Alter_row_access_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_row_access_policy(s)
	}
}

func (s *Alter_row_access_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_row_access_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_row_access_policy() (localctx IAlter_row_access_policyContext) {
	this := p
	_ = this

	localctx = NewAlter_row_access_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, SnowflakeParserRULE_alter_row_access_policy)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3602)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 305, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3566)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3567)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(3568)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(3569)
			p.Match(SnowflakeParserPOLICY)
		}
		p.SetState(3571)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3570)
				p.If_exists()
			}

		}
		{
			p.SetState(3573)
			p.Id_()
		}
		{
			p.SetState(3574)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(3575)
			p.Match(SnowflakeParserBODY)
		}
		{
			p.SetState(3576)
			p.Match(SnowflakeParserARROW)
		}
		{
			p.SetState(3577)
			p.expr(0)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3579)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3580)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(3581)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(3582)
			p.Match(SnowflakeParserPOLICY)
		}
		p.SetState(3584)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3583)
				p.If_exists()
			}

		}
		{
			p.SetState(3586)
			p.Id_()
		}
		{
			p.SetState(3587)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(3588)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3589)
			p.Id_()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3591)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3592)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(3593)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(3594)
			p.Match(SnowflakeParserPOLICY)
		}
		p.SetState(3596)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3595)
				p.If_exists()
			}

		}
		{
			p.SetState(3598)
			p.Id_()
		}
		{
			p.SetState(3599)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(3600)
			p.Comment_clause()
		}

	}


	return localctx
}


// IAlter_schemaContext is an interface to support dynamic dispatch.
type IAlter_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_schemaContext differentiates from other interfaces.
	IsAlter_schemaContext()
}

type Alter_schemaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_schemaContext() *Alter_schemaContext {
	var p = new(Alter_schemaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_schema
	return p
}

func (*Alter_schemaContext) IsAlter_schemaContext() {}

func NewAlter_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_schemaContext {
	var p = new(Alter_schemaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_schema

	return p
}

func (s *Alter_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_schemaContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_schemaContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Alter_schemaContext) AllSchema_name() []ISchema_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISchema_nameContext); ok {
			len++
		}
	}

	tst := make([]ISchema_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISchema_nameContext); ok {
			tst[i] = t.(ISchema_nameContext)
			i++
		}
	}

	return tst
}

func (s *Alter_schemaContext) Schema_name(i int) ISchema_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Alter_schemaContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_schemaContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_schemaContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_schemaContext) SWAP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSWAP, 0)
}

func (s *Alter_schemaContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Alter_schemaContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_schemaContext) DATA_RETENTION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS, 0)
}

func (s *Alter_schemaContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_schemaContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_schemaContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Alter_schemaContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Alter_schemaContext) MAX_DATA_EXTENSION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS, 0)
}

func (s *Alter_schemaContext) Default_ddl_collation() IDefault_ddl_collationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_ddl_collationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_ddl_collationContext)
}

func (s *Alter_schemaContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_schemaContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_schemaContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_schemaContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_schemaContext) AllSchema_property() []ISchema_propertyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISchema_propertyContext); ok {
			len++
		}
	}

	tst := make([]ISchema_propertyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISchema_propertyContext); ok {
			tst[i] = t.(ISchema_propertyContext)
			i++
		}
	}

	return tst
}

func (s *Alter_schemaContext) Schema_property(i int) ISchema_propertyContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_propertyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_propertyContext)
}

func (s *Alter_schemaContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_schemaContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_schemaContext) MANAGED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMANAGED, 0)
}

func (s *Alter_schemaContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, 0)
}

func (s *Alter_schemaContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE, 0)
}

func (s *Alter_schemaContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISABLE, 0)
}

func (s *Alter_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_schema(s)
	}
}

func (s *Alter_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_schema(s)
	}
}

func (s *Alter_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_schema(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_schema() (localctx IAlter_schemaContext) {
	this := p
	_ = this

	localctx = NewAlter_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, SnowflakeParserRULE_alter_schema)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3688)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 318, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3604)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3605)
			p.Match(SnowflakeParserSCHEMA)
		}
		p.SetState(3607)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3606)
				p.If_exists()
			}

		}
		{
			p.SetState(3609)
			p.Schema_name()
		}
		{
			p.SetState(3610)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(3611)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3612)
			p.Schema_name()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3614)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3615)
			p.Match(SnowflakeParserSCHEMA)
		}
		p.SetState(3617)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3616)
				p.If_exists()
			}

		}
		{
			p.SetState(3619)
			p.Schema_name()
		}
		{
			p.SetState(3620)
			p.Match(SnowflakeParserSWAP)
		}
		{
			p.SetState(3621)
			p.Match(SnowflakeParserWITH)
		}
		{
			p.SetState(3622)
			p.Schema_name()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3624)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3625)
			p.Match(SnowflakeParserSCHEMA)
		}
		p.SetState(3627)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3626)
				p.If_exists()
			}

		}
		{
			p.SetState(3629)
			p.Schema_name()
		}
		{
			p.SetState(3630)
			p.Match(SnowflakeParserSET)
		}

		p.SetState(3634)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserDATA_RETENTION_TIME_IN_DAYS {
			{
				p.SetState(3631)
				p.Match(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS)
			}
			{
				p.SetState(3632)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3633)
				p.Num()
			}

		}
		p.SetState(3639)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS {
			{
				p.SetState(3636)
				p.Match(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS)
			}
			{
				p.SetState(3637)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3638)
				p.Num()
			}

		}
		p.SetState(3642)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserDEFAULT_DDL_COLLATION_ {
			{
				p.SetState(3641)
				p.Default_ddl_collation()
			}

		}
		p.SetState(3645)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 312, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3644)
				p.Comment_clause()
			}


		}



	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3647)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3648)
			p.Match(SnowflakeParserSCHEMA)
		}
		p.SetState(3650)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3649)
				p.If_exists()
			}

		}
		{
			p.SetState(3652)
			p.Schema_name()
		}
		{
			p.SetState(3653)
			p.Set_tags()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3655)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3656)
			p.Match(SnowflakeParserSCHEMA)
		}
		p.SetState(3658)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3657)
				p.If_exists()
			}

		}
		{
			p.SetState(3660)
			p.Schema_name()
		}
		{
			p.SetState(3661)
			p.Unset_tags()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3663)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3664)
			p.Match(SnowflakeParserSCHEMA)
		}
		p.SetState(3666)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3665)
				p.If_exists()
			}

		}
		{
			p.SetState(3668)
			p.Schema_name()
		}
		{
			p.SetState(3669)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(3670)
			p.Schema_property()
		}
		p.SetState(3675)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(3671)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(3672)
				p.Schema_property()
			}


			p.SetState(3677)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3678)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3679)
			p.Match(SnowflakeParserSCHEMA)
		}
		p.SetState(3681)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3680)
				p.If_exists()
			}

		}
		{
			p.SetState(3683)
			p.Schema_name()
		}
		{
			p.SetState(3684)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserDISABLE || _la == SnowflakeParserENABLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3685)
			p.Match(SnowflakeParserMANAGED)
		}
		{
			p.SetState(3686)
			p.Match(SnowflakeParserACCESS)
		}

	}


	return localctx
}


// ISchema_propertyContext is an interface to support dynamic dispatch.
type ISchema_propertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_propertyContext differentiates from other interfaces.
	IsSchema_propertyContext()
}

type Schema_propertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_propertyContext() *Schema_propertyContext {
	var p = new(Schema_propertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_schema_property
	return p
}

func (*Schema_propertyContext) IsSchema_propertyContext() {}

func NewSchema_propertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_propertyContext {
	var p = new(Schema_propertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_schema_property

	return p
}

func (s *Schema_propertyContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_propertyContext) DATA_RETENTION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS, 0)
}

func (s *Schema_propertyContext) MAX_DATA_EXTENSION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS, 0)
}

func (s *Schema_propertyContext) DEFAULT_DDL_COLLATION_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT_DDL_COLLATION_, 0)
}

func (s *Schema_propertyContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Schema_propertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_propertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_propertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSchema_property(s)
	}
}

func (s *Schema_propertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSchema_property(s)
	}
}

func (s *Schema_propertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSchema_property(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Schema_property() (localctx ISchema_propertyContext) {
	this := p
	_ = this

	localctx = NewSchema_propertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, SnowflakeParserRULE_schema_property)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3690)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la - 155)) & ^0x3f) == 0 && ((int64(1) << (_la - 155)) & 288247968337756161) != 0 || _la == SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IAlter_security_integrationContext is an interface to support dynamic dispatch.
type IAlter_security_integrationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_security_integrationContext differentiates from other interfaces.
	IsAlter_security_integrationContext()
}

type Alter_security_integrationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_security_integrationContext() *Alter_security_integrationContext {
	var p = new(Alter_security_integrationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_security_integration
	return p
}

func (*Alter_security_integrationContext) IsAlter_security_integrationContext() {}

func NewAlter_security_integrationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_security_integrationContext {
	var p = new(Alter_security_integrationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_security_integration

	return p
}

func (s *Alter_security_integrationContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_security_integrationContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_security_integrationContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEQUENCE, 0)
}

func (s *Alter_security_integrationContext) AllObject_name() []IObject_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObject_nameContext); ok {
			len++
		}
	}

	tst := make([]IObject_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObject_nameContext); ok {
			tst[i] = t.(IObject_nameContext)
			i++
		}
	}

	return tst
}

func (s *Alter_security_integrationContext) Object_name(i int) IObject_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Alter_security_integrationContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_security_integrationContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_security_integrationContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_security_integrationContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_security_integrationContext) INCREMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINCREMENT, 0)
}

func (s *Alter_security_integrationContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Alter_security_integrationContext) BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBY, 0)
}

func (s *Alter_security_integrationContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Alter_security_integrationContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_security_integrationContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_security_integrationContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_security_integrationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_security_integrationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_security_integrationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_security_integration(s)
	}
}

func (s *Alter_security_integrationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_security_integration(s)
	}
}

func (s *Alter_security_integrationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_security_integration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_security_integration() (localctx IAlter_security_integrationContext) {
	this := p
	_ = this

	localctx = NewAlter_security_integrationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, SnowflakeParserRULE_alter_security_integration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3739)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 327, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3692)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3693)
			p.Match(SnowflakeParserSEQUENCE)
		}
		p.SetState(3695)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3694)
				p.If_exists()
			}

		}
		{
			p.SetState(3697)
			p.Object_name()
		}
		{
			p.SetState(3698)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(3699)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(3700)
			p.Object_name()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3702)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3703)
			p.Match(SnowflakeParserSEQUENCE)
		}
		p.SetState(3705)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3704)
				p.If_exists()
			}

		}
		{
			p.SetState(3707)
			p.Object_name()
		}
		p.SetState(3709)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 321, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3708)
				p.Match(SnowflakeParserSET)
			}


		}
		p.SetState(3719)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINCREMENT {
			{
				p.SetState(3711)
				p.Match(SnowflakeParserINCREMENT)
			}
			p.SetState(3713)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserBY {
				{
					p.SetState(3712)
					p.Match(SnowflakeParserBY)
				}

			}
			p.SetState(3716)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserEQ {
				{
					p.SetState(3715)
					p.Match(SnowflakeParserEQ)
				}

			}
			{
				p.SetState(3718)
				p.Num()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3721)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3722)
			p.Match(SnowflakeParserSEQUENCE)
		}
		p.SetState(3724)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3723)
				p.If_exists()
			}

		}
		{
			p.SetState(3726)
			p.Object_name()
		}
		{
			p.SetState(3727)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(3728)
			p.Comment_clause()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3730)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(3731)
			p.Match(SnowflakeParserSEQUENCE)
		}
		p.SetState(3733)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3732)
				p.If_exists()
			}

		}
		{
			p.SetState(3735)
			p.Object_name()
		}
		{
			p.SetState(3736)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(3737)
			p.Match(SnowflakeParserCOMMENT)
		}

	}


	return localctx
}


// IAlter_security_integration_external_oauthContext is an interface to support dynamic dispatch.
type IAlter_security_integration_external_oauthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_security_integration_external_oauthContext differentiates from other interfaces.
	IsAlter_security_integration_external_oauthContext()
}

type Alter_security_integration_external_oauthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_security_integration_external_oauthContext() *Alter_security_integration_external_oauthContext {
	var p = new(Alter_security_integration_external_oauthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_security_integration_external_oauth
	return p
}

func (*Alter_security_integration_external_oauthContext) IsAlter_security_integration_external_oauthContext() {}

func NewAlter_security_integration_external_oauthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_security_integration_external_oauthContext {
	var p = new(Alter_security_integration_external_oauthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_security_integration_external_oauth

	return p
}

func (s *Alter_security_integration_external_oauthContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_security_integration_external_oauthContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_security_integration_external_oauthContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Alter_security_integration_external_oauthContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_security_integration_external_oauthContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_security_integration_external_oauthContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_security_integration_external_oauthContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Alter_security_integration_external_oauthContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Alter_security_integration_external_oauthContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_security_integration_external_oauthContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_security_integration_external_oauthContext) EXTERNAL_OAUTH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH, 0)
}

func (s *Alter_security_integration_external_oauthContext) ENABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLED, 0)
}

func (s *Alter_security_integration_external_oauthContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Alter_security_integration_external_oauthContext) EXTERNAL_OAUTH_TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_TYPE, 0)
}

func (s *Alter_security_integration_external_oauthContext) EXTERNAL_OAUTH_ISSUER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_ISSUER, 0)
}

func (s *Alter_security_integration_external_oauthContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Alter_security_integration_external_oauthContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Alter_security_integration_external_oauthContext) EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM, 0)
}

func (s *Alter_security_integration_external_oauthContext) EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE, 0)
}

func (s *Alter_security_integration_external_oauthContext) AllEXTERNAL_OAUTH_JWS_KEYS_URL() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL)
}

func (s *Alter_security_integration_external_oauthContext) EXTERNAL_OAUTH_JWS_KEYS_URL(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL, i)
}

func (s *Alter_security_integration_external_oauthContext) EXTERNAL_OAUTH_RSA_PUBLIC_KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY, 0)
}

func (s *Alter_security_integration_external_oauthContext) EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY_2, 0)
}

func (s *Alter_security_integration_external_oauthContext) EXTERNAL_OAUTH_BLOCKED_ROLES_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_BLOCKED_ROLES_LIST, 0)
}

func (s *Alter_security_integration_external_oauthContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Alter_security_integration_external_oauthContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Alter_security_integration_external_oauthContext) AllString_list() []IString_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IString_listContext); ok {
			len++
		}
	}

	tst := make([]IString_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IString_listContext); ok {
			tst[i] = t.(IString_listContext)
			i++
		}
	}

	return tst
}

func (s *Alter_security_integration_external_oauthContext) String_list(i int) IString_listContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_listContext)
}

func (s *Alter_security_integration_external_oauthContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Alter_security_integration_external_oauthContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Alter_security_integration_external_oauthContext) EXTERNAL_OAUTH_ALLOWED_ROLES_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_ALLOWED_ROLES_LIST, 0)
}

func (s *Alter_security_integration_external_oauthContext) EXTERNAL_OAUTH_AUDIENCE_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_AUDIENCE_LIST, 0)
}

func (s *Alter_security_integration_external_oauthContext) AllEXTERNAL_OAUTH_ANY_ROLE_MODE() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEXTERNAL_OAUTH_ANY_ROLE_MODE)
}

func (s *Alter_security_integration_external_oauthContext) EXTERNAL_OAUTH_ANY_ROLE_MODE(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_ANY_ROLE_MODE, i)
}

func (s *Alter_security_integration_external_oauthContext) OKTA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOKTA, 0)
}

func (s *Alter_security_integration_external_oauthContext) AZURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE, 0)
}

func (s *Alter_security_integration_external_oauthContext) PING_FEDERATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPING_FEDERATE, 0)
}

func (s *Alter_security_integration_external_oauthContext) CUSTOM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCUSTOM, 0)
}

func (s *Alter_security_integration_external_oauthContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISABLE, 0)
}

func (s *Alter_security_integration_external_oauthContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE, 0)
}

func (s *Alter_security_integration_external_oauthContext) ENABLE_FOR_PRIVILEGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE_FOR_PRIVILEGE, 0)
}

func (s *Alter_security_integration_external_oauthContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_security_integration_external_oauthContext) AllSecurity_integration_external_oauth_property() []ISecurity_integration_external_oauth_propertyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISecurity_integration_external_oauth_propertyContext); ok {
			len++
		}
	}

	tst := make([]ISecurity_integration_external_oauth_propertyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISecurity_integration_external_oauth_propertyContext); ok {
			tst[i] = t.(ISecurity_integration_external_oauth_propertyContext)
			i++
		}
	}

	return tst
}

func (s *Alter_security_integration_external_oauthContext) Security_integration_external_oauth_property(i int) ISecurity_integration_external_oauth_propertyContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISecurity_integration_external_oauth_propertyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISecurity_integration_external_oauth_propertyContext)
}

func (s *Alter_security_integration_external_oauthContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_security_integration_external_oauthContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_security_integration_external_oauthContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_security_integration_external_oauthContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_security_integration_external_oauthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_security_integration_external_oauthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_security_integration_external_oauthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_security_integration_external_oauth(s)
	}
}

func (s *Alter_security_integration_external_oauthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_security_integration_external_oauth(s)
	}
}

func (s *Alter_security_integration_external_oauthContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_security_integration_external_oauth(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_security_integration_external_oauth() (localctx IAlter_security_integration_external_oauthContext) {
	this := p
	_ = this

	localctx = NewAlter_security_integration_external_oauthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, SnowflakeParserRULE_alter_security_integration_external_oauth)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3879)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 351, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3741)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(3743)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(3742)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(3745)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(3746)
			p.If_exists()
		}
		{
			p.SetState(3747)
			p.Id_()
		}
		{
			p.SetState(3748)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(3752)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTYPE {
			{
				p.SetState(3749)
				p.Match(SnowflakeParserTYPE)
			}
			{
				p.SetState(3750)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3751)
				p.Match(SnowflakeParserEXTERNAL_OAUTH)
			}

		}
		p.SetState(3757)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENABLED {
			{
				p.SetState(3754)
				p.Match(SnowflakeParserENABLED)
			}
			{
				p.SetState(3755)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3756)
				p.True_false()
			}

		}
		p.SetState(3762)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_TYPE {
			{
				p.SetState(3759)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_TYPE)
			}
			{
				p.SetState(3760)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3761)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SnowflakeParserAZURE || _la == SnowflakeParserCUSTOM || _la == SnowflakeParserOKTA || _la == SnowflakeParserPING_FEDERATE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(3767)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_ISSUER {
			{
				p.SetState(3764)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_ISSUER)
			}
			{
				p.SetState(3765)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3766)
				p.String_()
			}

		}
		p.SetState(3778)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM {
			{
				p.SetState(3769)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM)
			}
			{
				p.SetState(3770)
				p.Match(SnowflakeParserEQ)
			}
			p.SetState(3776)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SnowflakeParserSTRING:
				{
					p.SetState(3771)
					p.String_()
				}


			case SnowflakeParserLR_BRACKET:
				{
					p.SetState(3772)
					p.Match(SnowflakeParserLR_BRACKET)
				}
				{
					p.SetState(3773)
					p.String_list()
				}
				{
					p.SetState(3774)
					p.Match(SnowflakeParserRR_BRACKET)
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(3783)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE {
			{
				p.SetState(3780)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE)
			}
			{
				p.SetState(3781)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3782)
				p.String_()
			}

		}
		p.SetState(3788)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 336, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3785)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL)
			}
			{
				p.SetState(3786)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3787)
				p.String_()
			}


		}
		p.SetState(3799)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL {
			{
				p.SetState(3790)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL)
			}
			{
				p.SetState(3791)
				p.Match(SnowflakeParserEQ)
			}
			p.SetState(3797)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SnowflakeParserSTRING:
				{
					p.SetState(3792)
					p.String_()
				}


			case SnowflakeParserLR_BRACKET:
				{
					p.SetState(3793)
					p.Match(SnowflakeParserLR_BRACKET)
				}
				{
					p.SetState(3794)
					p.String_list()
				}
				{
					p.SetState(3795)
					p.Match(SnowflakeParserRR_BRACKET)
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(3804)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY {
			{
				p.SetState(3801)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY)
			}
			{
				p.SetState(3802)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3803)
				p.String_()
			}

		}
		p.SetState(3809)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY_2 {
			{
				p.SetState(3806)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY_2)
			}
			{
				p.SetState(3807)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3808)
				p.String_()
			}

		}
		p.SetState(3817)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_BLOCKED_ROLES_LIST {
			{
				p.SetState(3811)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_BLOCKED_ROLES_LIST)
			}
			{
				p.SetState(3812)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3813)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(3814)
				p.String_list()
			}
			{
				p.SetState(3815)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(3825)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_ALLOWED_ROLES_LIST {
			{
				p.SetState(3819)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_ALLOWED_ROLES_LIST)
			}
			{
				p.SetState(3820)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3821)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(3822)
				p.String_list()
			}
			{
				p.SetState(3823)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(3833)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_AUDIENCE_LIST {
			{
				p.SetState(3827)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_AUDIENCE_LIST)
			}
			{
				p.SetState(3828)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3829)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(3830)
				p.String_()
			}
			{
				p.SetState(3831)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(3838)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 344, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3835)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_ANY_ROLE_MODE)
			}
			{
				p.SetState(3836)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3837)
				_la = p.GetTokenStream().LA(1)

				if !((int64((_la - 230)) & ^0x3f) == 0 && ((int64(1) << (_la - 230)) & 196609) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}


		}
		p.SetState(3843)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_ANY_ROLE_MODE {
			{
				p.SetState(3840)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_ANY_ROLE_MODE)
			}
			{
				p.SetState(3841)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3842)
				p.String_()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3845)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(3847)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(3846)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(3849)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(3851)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3850)
				p.If_exists()
			}

		}
		{
			p.SetState(3853)
			p.Id_()
		}
		{
			p.SetState(3854)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(3855)
			p.Security_integration_external_oauth_property()
		}
		p.SetState(3860)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(3856)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(3857)
				p.Security_integration_external_oauth_property()
			}


			p.SetState(3862)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3863)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(3865)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(3864)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(3867)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(3868)
			p.Id_()
		}
		{
			p.SetState(3869)
			p.Set_tags()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3871)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(3873)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(3872)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(3875)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(3876)
			p.Id_()
		}
		{
			p.SetState(3877)
			p.Unset_tags()
		}

	}


	return localctx
}


// ISecurity_integration_external_oauth_propertyContext is an interface to support dynamic dispatch.
type ISecurity_integration_external_oauth_propertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSecurity_integration_external_oauth_propertyContext differentiates from other interfaces.
	IsSecurity_integration_external_oauth_propertyContext()
}

type Security_integration_external_oauth_propertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySecurity_integration_external_oauth_propertyContext() *Security_integration_external_oauth_propertyContext {
	var p = new(Security_integration_external_oauth_propertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_security_integration_external_oauth_property
	return p
}

func (*Security_integration_external_oauth_propertyContext) IsSecurity_integration_external_oauth_propertyContext() {}

func NewSecurity_integration_external_oauth_propertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Security_integration_external_oauth_propertyContext {
	var p = new(Security_integration_external_oauth_propertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_security_integration_external_oauth_property

	return p
}

func (s *Security_integration_external_oauth_propertyContext) GetParser() antlr.Parser { return s.parser }

func (s *Security_integration_external_oauth_propertyContext) ENABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLED, 0)
}

func (s *Security_integration_external_oauth_propertyContext) NETWORK_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK_POLICY, 0)
}

func (s *Security_integration_external_oauth_propertyContext) OAUTH_CLIENT_RSA_PUBLIC_KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY, 0)
}

func (s *Security_integration_external_oauth_propertyContext) OAUTH_CLIENT_RSA_PUBLIC_KEY_2() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY_2, 0)
}

func (s *Security_integration_external_oauth_propertyContext) OAUTH_USE_SECONDARY_ROLES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH_USE_SECONDARY_ROLES, 0)
}

func (s *Security_integration_external_oauth_propertyContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Security_integration_external_oauth_propertyContext) IMPLICIT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIMPLICIT, 0)
}

func (s *Security_integration_external_oauth_propertyContext) NONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNONE, 0)
}

func (s *Security_integration_external_oauth_propertyContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Security_integration_external_oauth_propertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Security_integration_external_oauth_propertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Security_integration_external_oauth_propertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSecurity_integration_external_oauth_property(s)
	}
}

func (s *Security_integration_external_oauth_propertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSecurity_integration_external_oauth_property(s)
	}
}

func (s *Security_integration_external_oauth_propertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSecurity_integration_external_oauth_property(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Security_integration_external_oauth_property() (localctx ISecurity_integration_external_oauth_propertyContext) {
	this := p
	_ = this

	localctx = NewSecurity_integration_external_oauth_propertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, SnowflakeParserRULE_security_integration_external_oauth_property)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3889)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserENABLED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3881)
			p.Match(SnowflakeParserENABLED)
		}


	case SnowflakeParserNETWORK_POLICY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3882)
			p.Match(SnowflakeParserNETWORK_POLICY)
		}


	case SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3883)
			p.Match(SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY)
		}


	case SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY_2:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3884)
			p.Match(SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY_2)
		}


	case SnowflakeParserOAUTH_USE_SECONDARY_ROLES:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3885)
			p.Match(SnowflakeParserOAUTH_USE_SECONDARY_ROLES)
		}
		{
			p.SetState(3886)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(3887)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserIMPLICIT || _la == SnowflakeParserNONE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SnowflakeParserCOMMENT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3888)
			p.Match(SnowflakeParserCOMMENT)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAlter_security_integration_snowflake_oauthContext is an interface to support dynamic dispatch.
type IAlter_security_integration_snowflake_oauthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_security_integration_snowflake_oauthContext differentiates from other interfaces.
	IsAlter_security_integration_snowflake_oauthContext()
}

type Alter_security_integration_snowflake_oauthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_security_integration_snowflake_oauthContext() *Alter_security_integration_snowflake_oauthContext {
	var p = new(Alter_security_integration_snowflake_oauthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_security_integration_snowflake_oauth
	return p
}

func (*Alter_security_integration_snowflake_oauthContext) IsAlter_security_integration_snowflake_oauthContext() {}

func NewAlter_security_integration_snowflake_oauthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_security_integration_snowflake_oauthContext {
	var p = new(Alter_security_integration_snowflake_oauthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_security_integration_snowflake_oauth

	return p
}

func (s *Alter_security_integration_snowflake_oauthContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_security_integration_snowflake_oauthContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_security_integration_snowflake_oauthContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH_SCOPE_DELIMITER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_SCOPE_DELIMITER, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_security_integration_snowflake_oauthContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_security_integration_snowflake_oauthContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Alter_security_integration_snowflake_oauthContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Alter_security_integration_snowflake_oauthContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_security_integration_snowflake_oauthContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) Enabled_true_false() IEnabled_true_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnabled_true_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnabled_true_falseContext)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH_TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_TYPE, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH_ISSUER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_ISSUER, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) AllEXTERNAL_OAUTH_JWS_KEYS_URL() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH_JWS_KEYS_URL(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL, i)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH_RSA_PUBLIC_KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY_2, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH_BLOCKED_ROLES_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_BLOCKED_ROLES_LIST, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Alter_security_integration_snowflake_oauthContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Alter_security_integration_snowflake_oauthContext) AllString_list() []IString_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IString_listContext); ok {
			len++
		}
	}

	tst := make([]IString_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IString_listContext); ok {
			tst[i] = t.(IString_listContext)
			i++
		}
	}

	return tst
}

func (s *Alter_security_integration_snowflake_oauthContext) String_list(i int) IString_listContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_listContext)
}

func (s *Alter_security_integration_snowflake_oauthContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Alter_security_integration_snowflake_oauthContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH_ALLOWED_ROLES_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_ALLOWED_ROLES_LIST, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH_AUDIENCE_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_AUDIENCE_LIST, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) EXTERNAL_OAUTH_ANY_ROLE_MODE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_ANY_ROLE_MODE, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISABLE, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) ENABLE_FOR_PRIVILEGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE_FOR_PRIVILEGE, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) OKTA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOKTA, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) AZURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) PING_FEDERATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPING_FEDERATE, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) CUSTOM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCUSTOM, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_security_integration_snowflake_oauthContext) AllSecurity_integration_snowflake_oauth_property() []ISecurity_integration_snowflake_oauth_propertyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISecurity_integration_snowflake_oauth_propertyContext); ok {
			len++
		}
	}

	tst := make([]ISecurity_integration_snowflake_oauth_propertyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISecurity_integration_snowflake_oauth_propertyContext); ok {
			tst[i] = t.(ISecurity_integration_snowflake_oauth_propertyContext)
			i++
		}
	}

	return tst
}

func (s *Alter_security_integration_snowflake_oauthContext) Security_integration_snowflake_oauth_property(i int) ISecurity_integration_snowflake_oauth_propertyContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISecurity_integration_snowflake_oauth_propertyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISecurity_integration_snowflake_oauth_propertyContext)
}

func (s *Alter_security_integration_snowflake_oauthContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_security_integration_snowflake_oauthContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_security_integration_snowflake_oauthContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_security_integration_snowflake_oauthContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_security_integration_snowflake_oauthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_security_integration_snowflake_oauthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_security_integration_snowflake_oauthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_security_integration_snowflake_oauth(s)
	}
}

func (s *Alter_security_integration_snowflake_oauthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_security_integration_snowflake_oauth(s)
	}
}

func (s *Alter_security_integration_snowflake_oauthContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_security_integration_snowflake_oauth(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_security_integration_snowflake_oauth() (localctx IAlter_security_integration_snowflake_oauthContext) {
	this := p
	_ = this

	localctx = NewAlter_security_integration_snowflake_oauthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, SnowflakeParserRULE_alter_security_integration_snowflake_oauth)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4030)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 376, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3891)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(3893)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(3892)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(3895)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(3897)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(3896)
				p.If_exists()
			}

		}
		{
			p.SetState(3899)
			p.Id_()
		}
		{
			p.SetState(3900)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(3904)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTYPE {
			{
				p.SetState(3901)
				p.Match(SnowflakeParserTYPE)
			}
			{
				p.SetState(3902)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3903)
				p.Match(SnowflakeParserEXTERNAL_OAUTH)
			}

		}
		p.SetState(3907)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENABLED {
			{
				p.SetState(3906)
				p.Enabled_true_false()
			}

		}
		p.SetState(3912)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_TYPE {
			{
				p.SetState(3909)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_TYPE)
			}
			{
				p.SetState(3910)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3911)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SnowflakeParserAZURE || _la == SnowflakeParserCUSTOM || _la == SnowflakeParserOKTA || _la == SnowflakeParserPING_FEDERATE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(3917)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_ISSUER {
			{
				p.SetState(3914)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_ISSUER)
			}
			{
				p.SetState(3915)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3916)
				p.String_()
			}

		}
		p.SetState(3928)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM {
			{
				p.SetState(3919)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM)
			}
			{
				p.SetState(3920)
				p.Match(SnowflakeParserEQ)
			}
			p.SetState(3926)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SnowflakeParserSTRING:
				{
					p.SetState(3921)
					p.String_()
				}


			case SnowflakeParserLR_BRACKET:
				{
					p.SetState(3922)
					p.Match(SnowflakeParserLR_BRACKET)
				}
				{
					p.SetState(3923)
					p.String_list()
				}
				{
					p.SetState(3924)
					p.Match(SnowflakeParserRR_BRACKET)
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(3933)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE {
			{
				p.SetState(3930)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE)
			}
			{
				p.SetState(3931)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3932)
				p.String_()
			}

		}
		p.SetState(3938)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 362, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3935)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL)
			}
			{
				p.SetState(3936)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3937)
				p.String_()
			}


		}
		p.SetState(3949)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL {
			{
				p.SetState(3940)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL)
			}
			{
				p.SetState(3941)
				p.Match(SnowflakeParserEQ)
			}
			p.SetState(3947)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SnowflakeParserSTRING:
				{
					p.SetState(3942)
					p.String_()
				}


			case SnowflakeParserLR_BRACKET:
				{
					p.SetState(3943)
					p.Match(SnowflakeParserLR_BRACKET)
				}
				{
					p.SetState(3944)
					p.String_list()
				}
				{
					p.SetState(3945)
					p.Match(SnowflakeParserRR_BRACKET)
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(3954)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY {
			{
				p.SetState(3951)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY)
			}
			{
				p.SetState(3952)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3953)
				p.String_()
			}

		}
		p.SetState(3959)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY_2 {
			{
				p.SetState(3956)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY_2)
			}
			{
				p.SetState(3957)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3958)
				p.String_()
			}

		}
		p.SetState(3967)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_BLOCKED_ROLES_LIST {
			{
				p.SetState(3961)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_BLOCKED_ROLES_LIST)
			}
			{
				p.SetState(3962)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3963)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(3964)
				p.String_list()
			}
			{
				p.SetState(3965)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(3975)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_ALLOWED_ROLES_LIST {
			{
				p.SetState(3969)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_ALLOWED_ROLES_LIST)
			}
			{
				p.SetState(3970)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3971)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(3972)
				p.String_list()
			}
			{
				p.SetState(3973)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(3983)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserEXTERNAL_OAUTH_AUDIENCE_LIST {
			{
				p.SetState(3977)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_AUDIENCE_LIST)
			}
			{
				p.SetState(3978)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3979)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(3980)
				p.String_()
			}
			{
				p.SetState(3981)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(3990)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserEXTERNAL_OAUTH_ANY_ROLE_MODE:
			{
				p.SetState(3985)
				p.Match(SnowflakeParserEXTERNAL_OAUTH_ANY_ROLE_MODE)
			}
			{
				p.SetState(3986)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(3987)
				p.Match(SnowflakeParserDISABLE)
			}


		case SnowflakeParserENABLE:
			{
				p.SetState(3988)
				p.Match(SnowflakeParserENABLE)
			}


		case SnowflakeParserENABLE_FOR_PRIVILEGE:
			{
				p.SetState(3989)
				p.Match(SnowflakeParserENABLE_FOR_PRIVILEGE)
			}


		case SnowflakeParserEXTERNAL_OAUTH_SCOPE_DELIMITER:



		default:
		}

		{
			p.SetState(3992)
			p.Match(SnowflakeParserEXTERNAL_OAUTH_SCOPE_DELIMITER)
		}
		{
			p.SetState(3993)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(3994)
			p.String_()
		}



	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3996)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(3998)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(3997)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(4000)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(4002)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4001)
				p.If_exists()
			}

		}
		{
			p.SetState(4004)
			p.Id_()
		}
		{
			p.SetState(4005)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(4006)
			p.Security_integration_snowflake_oauth_property()
		}
		p.SetState(4011)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(4007)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(4008)
				p.Security_integration_snowflake_oauth_property()
			}


			p.SetState(4013)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4014)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4016)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(4015)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(4018)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(4019)
			p.Id_()
		}
		{
			p.SetState(4020)
			p.Set_tags()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4022)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4024)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(4023)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(4026)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(4027)
			p.Id_()
		}
		{
			p.SetState(4028)
			p.Unset_tags()
		}

	}


	return localctx
}


// ISecurity_integration_snowflake_oauth_propertyContext is an interface to support dynamic dispatch.
type ISecurity_integration_snowflake_oauth_propertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSecurity_integration_snowflake_oauth_propertyContext differentiates from other interfaces.
	IsSecurity_integration_snowflake_oauth_propertyContext()
}

type Security_integration_snowflake_oauth_propertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySecurity_integration_snowflake_oauth_propertyContext() *Security_integration_snowflake_oauth_propertyContext {
	var p = new(Security_integration_snowflake_oauth_propertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_security_integration_snowflake_oauth_property
	return p
}

func (*Security_integration_snowflake_oauth_propertyContext) IsSecurity_integration_snowflake_oauth_propertyContext() {}

func NewSecurity_integration_snowflake_oauth_propertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Security_integration_snowflake_oauth_propertyContext {
	var p = new(Security_integration_snowflake_oauth_propertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_security_integration_snowflake_oauth_property

	return p
}

func (s *Security_integration_snowflake_oauth_propertyContext) GetParser() antlr.Parser { return s.parser }

func (s *Security_integration_snowflake_oauth_propertyContext) ENABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLED, 0)
}

func (s *Security_integration_snowflake_oauth_propertyContext) EXTERNAL_OAUTH_AUDIENCE_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_AUDIENCE_LIST, 0)
}

func (s *Security_integration_snowflake_oauth_propertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Security_integration_snowflake_oauth_propertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Security_integration_snowflake_oauth_propertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSecurity_integration_snowflake_oauth_property(s)
	}
}

func (s *Security_integration_snowflake_oauth_propertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSecurity_integration_snowflake_oauth_property(s)
	}
}

func (s *Security_integration_snowflake_oauth_propertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSecurity_integration_snowflake_oauth_property(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Security_integration_snowflake_oauth_property() (localctx ISecurity_integration_snowflake_oauth_propertyContext) {
	this := p
	_ = this

	localctx = NewSecurity_integration_snowflake_oauth_propertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, SnowflakeParserRULE_security_integration_snowflake_oauth_property)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4032)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserENABLED || _la == SnowflakeParserEXTERNAL_OAUTH_AUDIENCE_LIST) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IAlter_security_integration_saml2Context is an interface to support dynamic dispatch.
type IAlter_security_integration_saml2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_security_integration_saml2Context differentiates from other interfaces.
	IsAlter_security_integration_saml2Context()
}

type Alter_security_integration_saml2Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_security_integration_saml2Context() *Alter_security_integration_saml2Context {
	var p = new(Alter_security_integration_saml2Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_security_integration_saml2
	return p
}

func (*Alter_security_integration_saml2Context) IsAlter_security_integration_saml2Context() {}

func NewAlter_security_integration_saml2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_security_integration_saml2Context {
	var p = new(Alter_security_integration_saml2Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_security_integration_saml2

	return p
}

func (s *Alter_security_integration_saml2Context) GetParser() antlr.Parser { return s.parser }

func (s *Alter_security_integration_saml2Context) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_security_integration_saml2Context) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Alter_security_integration_saml2Context) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_security_integration_saml2Context) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_security_integration_saml2Context) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Alter_security_integration_saml2Context) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_security_integration_saml2Context) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Alter_security_integration_saml2Context) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_security_integration_saml2Context) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_security_integration_saml2Context) SAML2() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2, 0)
}

func (s *Alter_security_integration_saml2Context) Enabled_true_false() IEnabled_true_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnabled_true_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnabled_true_falseContext)
}

func (s *Alter_security_integration_saml2Context) SAML2_ISSUER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_ISSUER, 0)
}

func (s *Alter_security_integration_saml2Context) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Alter_security_integration_saml2Context) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Alter_security_integration_saml2Context) SAML2_SSO_URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_SSO_URL, 0)
}

func (s *Alter_security_integration_saml2Context) SAML2_PROVIDER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_PROVIDER, 0)
}

func (s *Alter_security_integration_saml2Context) SAML2_X509_CERT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_X509_CERT, 0)
}

func (s *Alter_security_integration_saml2Context) SAML2_SP_INITIATED_LOGIN_PAGE_LABEL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_SP_INITIATED_LOGIN_PAGE_LABEL, 0)
}

func (s *Alter_security_integration_saml2Context) SAML2_ENABLE_SP_INITIATED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_ENABLE_SP_INITIATED, 0)
}

func (s *Alter_security_integration_saml2Context) AllTrue_false() []ITrue_falseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITrue_falseContext); ok {
			len++
		}
	}

	tst := make([]ITrue_falseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITrue_falseContext); ok {
			tst[i] = t.(ITrue_falseContext)
			i++
		}
	}

	return tst
}

func (s *Alter_security_integration_saml2Context) True_false(i int) ITrue_falseContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Alter_security_integration_saml2Context) SAML2_SNOWFLAKE_X509_CERT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_SNOWFLAKE_X509_CERT, 0)
}

func (s *Alter_security_integration_saml2Context) SAML2_SIGN_REQUEST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_SIGN_REQUEST, 0)
}

func (s *Alter_security_integration_saml2Context) SAML2_REQUESTED_NAMEID_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_REQUESTED_NAMEID_FORMAT, 0)
}

func (s *Alter_security_integration_saml2Context) SAML2_POST_LOGOUT_REDIRECT_URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_POST_LOGOUT_REDIRECT_URL, 0)
}

func (s *Alter_security_integration_saml2Context) SAML2_FORCE_AUTHN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_FORCE_AUTHN, 0)
}

func (s *Alter_security_integration_saml2Context) SAML2_SNOWFLAKE_ISSUER_URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_SNOWFLAKE_ISSUER_URL, 0)
}

func (s *Alter_security_integration_saml2Context) SAML2_SNOWFLAKE_ACS_URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_SNOWFLAKE_ACS_URL, 0)
}

func (s *Alter_security_integration_saml2Context) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_security_integration_saml2Context) ENABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLED, 0)
}

func (s *Alter_security_integration_saml2Context) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_security_integration_saml2Context) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_security_integration_saml2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_security_integration_saml2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_security_integration_saml2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_security_integration_saml2(s)
	}
}

func (s *Alter_security_integration_saml2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_security_integration_saml2(s)
	}
}

func (s *Alter_security_integration_saml2Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_security_integration_saml2(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_security_integration_saml2() (localctx IAlter_security_integration_saml2Context) {
	this := p
	_ = this

	localctx = NewAlter_security_integration_saml2Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, SnowflakeParserRULE_alter_security_integration_saml2)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4145)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 398, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4034)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4036)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(4035)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(4038)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(4040)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4039)
				p.If_exists()
			}

		}
		{
			p.SetState(4042)
			p.Id_()
		}
		{
			p.SetState(4043)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(4047)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTYPE {
			{
				p.SetState(4044)
				p.Match(SnowflakeParserTYPE)
			}
			{
				p.SetState(4045)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4046)
				p.Match(SnowflakeParserSAML2)
			}

		}
		p.SetState(4050)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENABLED {
			{
				p.SetState(4049)
				p.Enabled_true_false()
			}

		}
		p.SetState(4055)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_ISSUER {
			{
				p.SetState(4052)
				p.Match(SnowflakeParserSAML2_ISSUER)
			}
			{
				p.SetState(4053)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4054)
				p.String_()
			}

		}
		p.SetState(4060)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_SSO_URL {
			{
				p.SetState(4057)
				p.Match(SnowflakeParserSAML2_SSO_URL)
			}
			{
				p.SetState(4058)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4059)
				p.String_()
			}

		}
		p.SetState(4065)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_PROVIDER {
			{
				p.SetState(4062)
				p.Match(SnowflakeParserSAML2_PROVIDER)
			}
			{
				p.SetState(4063)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4064)
				p.String_()
			}

		}
		p.SetState(4070)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_X509_CERT {
			{
				p.SetState(4067)
				p.Match(SnowflakeParserSAML2_X509_CERT)
			}
			{
				p.SetState(4068)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4069)
				p.String_()
			}

		}
		p.SetState(4075)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_SP_INITIATED_LOGIN_PAGE_LABEL {
			{
				p.SetState(4072)
				p.Match(SnowflakeParserSAML2_SP_INITIATED_LOGIN_PAGE_LABEL)
			}
			{
				p.SetState(4073)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4074)
				p.String_()
			}

		}
		p.SetState(4080)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_ENABLE_SP_INITIATED {
			{
				p.SetState(4077)
				p.Match(SnowflakeParserSAML2_ENABLE_SP_INITIATED)
			}
			{
				p.SetState(4078)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4079)
				p.True_false()
			}

		}
		p.SetState(4085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_SNOWFLAKE_X509_CERT {
			{
				p.SetState(4082)
				p.Match(SnowflakeParserSAML2_SNOWFLAKE_X509_CERT)
			}
			{
				p.SetState(4083)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4084)
				p.String_()
			}

		}
		p.SetState(4090)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_SIGN_REQUEST {
			{
				p.SetState(4087)
				p.Match(SnowflakeParserSAML2_SIGN_REQUEST)
			}
			{
				p.SetState(4088)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4089)
				p.True_false()
			}

		}
		p.SetState(4095)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_REQUESTED_NAMEID_FORMAT {
			{
				p.SetState(4092)
				p.Match(SnowflakeParserSAML2_REQUESTED_NAMEID_FORMAT)
			}
			{
				p.SetState(4093)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4094)
				p.String_()
			}

		}
		p.SetState(4100)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_POST_LOGOUT_REDIRECT_URL {
			{
				p.SetState(4097)
				p.Match(SnowflakeParserSAML2_POST_LOGOUT_REDIRECT_URL)
			}
			{
				p.SetState(4098)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4099)
				p.String_()
			}

		}
		p.SetState(4105)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_FORCE_AUTHN {
			{
				p.SetState(4102)
				p.Match(SnowflakeParserSAML2_FORCE_AUTHN)
			}
			{
				p.SetState(4103)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4104)
				p.True_false()
			}

		}
		p.SetState(4110)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_SNOWFLAKE_ISSUER_URL {
			{
				p.SetState(4107)
				p.Match(SnowflakeParserSAML2_SNOWFLAKE_ISSUER_URL)
			}
			{
				p.SetState(4108)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4109)
				p.String_()
			}

		}
		p.SetState(4115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAML2_SNOWFLAKE_ACS_URL {
			{
				p.SetState(4112)
				p.Match(SnowflakeParserSAML2_SNOWFLAKE_ACS_URL)
			}
			{
				p.SetState(4113)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4114)
				p.String_()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4117)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(4118)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(4121)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(4123)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4122)
				p.If_exists()
			}

		}
		{
			p.SetState(4125)
			p.Id_()
		}
		{
			p.SetState(4126)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(4127)
			p.Match(SnowflakeParserENABLED)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4129)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4131)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(4130)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(4133)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(4134)
			p.Id_()
		}
		{
			p.SetState(4135)
			p.Set_tags()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4137)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4139)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(4138)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(4141)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(4142)
			p.Id_()
		}
		{
			p.SetState(4143)
			p.Unset_tags()
		}

	}


	return localctx
}


// IAlter_security_integration_scimContext is an interface to support dynamic dispatch.
type IAlter_security_integration_scimContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_security_integration_scimContext differentiates from other interfaces.
	IsAlter_security_integration_scimContext()
}

type Alter_security_integration_scimContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_security_integration_scimContext() *Alter_security_integration_scimContext {
	var p = new(Alter_security_integration_scimContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_security_integration_scim
	return p
}

func (*Alter_security_integration_scimContext) IsAlter_security_integration_scimContext() {}

func NewAlter_security_integration_scimContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_security_integration_scimContext {
	var p = new(Alter_security_integration_scimContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_security_integration_scim

	return p
}

func (s *Alter_security_integration_scimContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_security_integration_scimContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_security_integration_scimContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Alter_security_integration_scimContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_security_integration_scimContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_security_integration_scimContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Alter_security_integration_scimContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_security_integration_scimContext) NETWORK_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK_POLICY, 0)
}

func (s *Alter_security_integration_scimContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_security_integration_scimContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_security_integration_scimContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Alter_security_integration_scimContext) SYNC_PASSWORD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSYNC_PASSWORD, 0)
}

func (s *Alter_security_integration_scimContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Alter_security_integration_scimContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_security_integration_scimContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_security_integration_scimContext) AllSecurity_integration_scim_property() []ISecurity_integration_scim_propertyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISecurity_integration_scim_propertyContext); ok {
			len++
		}
	}

	tst := make([]ISecurity_integration_scim_propertyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISecurity_integration_scim_propertyContext); ok {
			tst[i] = t.(ISecurity_integration_scim_propertyContext)
			i++
		}
	}

	return tst
}

func (s *Alter_security_integration_scimContext) Security_integration_scim_property(i int) ISecurity_integration_scim_propertyContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISecurity_integration_scim_propertyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISecurity_integration_scim_propertyContext)
}

func (s *Alter_security_integration_scimContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_security_integration_scimContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_security_integration_scimContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_security_integration_scimContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_security_integration_scimContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_security_integration_scimContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_security_integration_scimContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_security_integration_scim(s)
	}
}

func (s *Alter_security_integration_scimContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_security_integration_scim(s)
	}
}

func (s *Alter_security_integration_scimContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_security_integration_scim(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_security_integration_scim() (localctx IAlter_security_integration_scimContext) {
	this := p
	_ = this

	localctx = NewAlter_security_integration_scimContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, SnowflakeParserRULE_alter_security_integration_scim)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4204)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 409, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4147)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4149)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(4148)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(4151)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(4153)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4152)
				p.If_exists()
			}

		}
		{
			p.SetState(4155)
			p.Id_()
		}
		{
			p.SetState(4156)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(4160)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNETWORK_POLICY {
			{
				p.SetState(4157)
				p.Match(SnowflakeParserNETWORK_POLICY)
			}
			{
				p.SetState(4158)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4159)
				p.String_()
			}

		}
		p.SetState(4165)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSYNC_PASSWORD {
			{
				p.SetState(4162)
				p.Match(SnowflakeParserSYNC_PASSWORD)
			}
			{
				p.SetState(4163)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4164)
				p.True_false()
			}

		}
		p.SetState(4168)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 403, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4167)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4170)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4172)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(4171)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(4174)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(4176)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4175)
				p.If_exists()
			}

		}
		{
			p.SetState(4178)
			p.Id_()
		}
		{
			p.SetState(4179)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(4180)
			p.Security_integration_scim_property()
		}
		p.SetState(4185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(4181)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(4182)
				p.Security_integration_scim_property()
			}


			p.SetState(4187)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4188)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4190)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(4189)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(4192)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(4193)
			p.Id_()
		}
		{
			p.SetState(4194)
			p.Set_tags()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4196)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4198)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSECURITY {
			{
				p.SetState(4197)
				p.Match(SnowflakeParserSECURITY)
			}

		}
		{
			p.SetState(4200)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(4201)
			p.Id_()
		}
		{
			p.SetState(4202)
			p.Unset_tags()
		}

	}


	return localctx
}


// ISecurity_integration_scim_propertyContext is an interface to support dynamic dispatch.
type ISecurity_integration_scim_propertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSecurity_integration_scim_propertyContext differentiates from other interfaces.
	IsSecurity_integration_scim_propertyContext()
}

type Security_integration_scim_propertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySecurity_integration_scim_propertyContext() *Security_integration_scim_propertyContext {
	var p = new(Security_integration_scim_propertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_security_integration_scim_property
	return p
}

func (*Security_integration_scim_propertyContext) IsSecurity_integration_scim_propertyContext() {}

func NewSecurity_integration_scim_propertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Security_integration_scim_propertyContext {
	var p = new(Security_integration_scim_propertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_security_integration_scim_property

	return p
}

func (s *Security_integration_scim_propertyContext) GetParser() antlr.Parser { return s.parser }

func (s *Security_integration_scim_propertyContext) NETWORK_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK_POLICY, 0)
}

func (s *Security_integration_scim_propertyContext) SYNC_PASSWORD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSYNC_PASSWORD, 0)
}

func (s *Security_integration_scim_propertyContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Security_integration_scim_propertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Security_integration_scim_propertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Security_integration_scim_propertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSecurity_integration_scim_property(s)
	}
}

func (s *Security_integration_scim_propertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSecurity_integration_scim_property(s)
	}
}

func (s *Security_integration_scim_propertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSecurity_integration_scim_property(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Security_integration_scim_property() (localctx ISecurity_integration_scim_propertyContext) {
	this := p
	_ = this

	localctx = NewSecurity_integration_scim_propertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, SnowflakeParserRULE_security_integration_scim_property)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4206)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserCOMMENT || _la == SnowflakeParserNETWORK_POLICY || _la == SnowflakeParserSYNC_PASSWORD) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IAlter_sequenceContext is an interface to support dynamic dispatch.
type IAlter_sequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_sequenceContext differentiates from other interfaces.
	IsAlter_sequenceContext()
}

type Alter_sequenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_sequenceContext() *Alter_sequenceContext {
	var p = new(Alter_sequenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_sequence
	return p
}

func (*Alter_sequenceContext) IsAlter_sequenceContext() {}

func NewAlter_sequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_sequenceContext {
	var p = new(Alter_sequenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_sequence

	return p
}

func (s *Alter_sequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_sequenceContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_sequenceContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEQUENCE, 0)
}

func (s *Alter_sequenceContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_sequenceContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_sequenceContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_sequenceContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_sequenceContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_sequenceContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_sequenceContext) INCREMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINCREMENT, 0)
}

func (s *Alter_sequenceContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Alter_sequenceContext) BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBY, 0)
}

func (s *Alter_sequenceContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Alter_sequenceContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_sequenceContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_sequenceContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_sequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_sequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_sequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_sequence(s)
	}
}

func (s *Alter_sequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_sequence(s)
	}
}

func (s *Alter_sequenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_sequence(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_sequence() (localctx IAlter_sequenceContext) {
	this := p
	_ = this

	localctx = NewAlter_sequenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, SnowflakeParserRULE_alter_sequence)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4255)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 418, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4208)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4209)
			p.Match(SnowflakeParserSEQUENCE)
		}
		p.SetState(4211)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4210)
				p.If_exists()
			}

		}
		{
			p.SetState(4213)
			p.Id_()
		}
		{
			p.SetState(4214)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(4215)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(4216)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4218)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4219)
			p.Match(SnowflakeParserSEQUENCE)
		}
		p.SetState(4221)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4220)
				p.If_exists()
			}

		}
		{
			p.SetState(4223)
			p.Id_()
		}
		p.SetState(4225)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 412, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4224)
				p.Match(SnowflakeParserSET)
			}


		}
		p.SetState(4235)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINCREMENT {
			{
				p.SetState(4227)
				p.Match(SnowflakeParserINCREMENT)
			}
			p.SetState(4229)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserBY {
				{
					p.SetState(4228)
					p.Match(SnowflakeParserBY)
				}

			}
			p.SetState(4232)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserEQ {
				{
					p.SetState(4231)
					p.Match(SnowflakeParserEQ)
				}

			}
			{
				p.SetState(4234)
				p.Num()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4237)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4238)
			p.Match(SnowflakeParserSEQUENCE)
		}
		p.SetState(4240)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4239)
				p.If_exists()
			}

		}
		{
			p.SetState(4242)
			p.Id_()
		}
		{
			p.SetState(4243)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(4244)
			p.Comment_clause()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4246)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4247)
			p.Match(SnowflakeParserSEQUENCE)
		}
		p.SetState(4249)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4248)
				p.If_exists()
			}

		}
		{
			p.SetState(4251)
			p.Id_()
		}
		{
			p.SetState(4252)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(4253)
			p.Match(SnowflakeParserCOMMENT)
		}

	}


	return localctx
}


// IAlter_sessionContext is an interface to support dynamic dispatch.
type IAlter_sessionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_sessionContext differentiates from other interfaces.
	IsAlter_sessionContext()
}

type Alter_sessionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_sessionContext() *Alter_sessionContext {
	var p = new(Alter_sessionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_session
	return p
}

func (*Alter_sessionContext) IsAlter_sessionContext() {}

func NewAlter_sessionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_sessionContext {
	var p = new(Alter_sessionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_session

	return p
}

func (s *Alter_sessionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_sessionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_sessionContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION, 0)
}

func (s *Alter_sessionContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_sessionContext) Session_params() ISession_paramsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISession_paramsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISession_paramsContext)
}

func (s *Alter_sessionContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_sessionContext) AllParam_name() []IParam_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IParam_nameContext); ok {
			len++
		}
	}

	tst := make([]IParam_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IParam_nameContext); ok {
			tst[i] = t.(IParam_nameContext)
			i++
		}
	}

	return tst
}

func (s *Alter_sessionContext) Param_name(i int) IParam_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParam_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParam_nameContext)
}

func (s *Alter_sessionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_sessionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_sessionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_sessionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_sessionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_session(s)
	}
}

func (s *Alter_sessionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_session(s)
	}
}

func (s *Alter_sessionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_session(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_session() (localctx IAlter_sessionContext) {
	this := p
	_ = this

	localctx = NewAlter_sessionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, SnowflakeParserRULE_alter_session)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4272)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 420, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4257)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4258)
			p.Match(SnowflakeParserSESSION)
		}
		{
			p.SetState(4259)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(4260)
			p.Session_params()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4261)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4262)
			p.Match(SnowflakeParserSESSION)
		}
		{
			p.SetState(4263)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(4264)
			p.Param_name()
		}
		p.SetState(4269)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(4265)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(4266)
				p.Param_name()
			}


			p.SetState(4271)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}


	return localctx
}


// IAlter_session_policyContext is an interface to support dynamic dispatch.
type IAlter_session_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_session_policyContext differentiates from other interfaces.
	IsAlter_session_policyContext()
}

type Alter_session_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_session_policyContext() *Alter_session_policyContext {
	var p = new(Alter_session_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_session_policy
	return p
}

func (*Alter_session_policyContext) IsAlter_session_policyContext() {}

func NewAlter_session_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_session_policyContext {
	var p = new(Alter_session_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_session_policy

	return p
}

func (s *Alter_session_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_session_policyContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_session_policyContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION, 0)
}

func (s *Alter_session_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Alter_session_policyContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_session_policyContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_session_policyContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_session_policyContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_session_policyContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_session_policyContext) SESSION_IDLE_TIMEOUT_MINS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION_IDLE_TIMEOUT_MINS, 0)
}

func (s *Alter_session_policyContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_session_policyContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_session_policyContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Alter_session_policyContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Alter_session_policyContext) SESSION_UI_IDLE_TIMEOUT_MINS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION_UI_IDLE_TIMEOUT_MINS, 0)
}

func (s *Alter_session_policyContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_session_policyContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_session_policyContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_session_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_session_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_session_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_session_policy(s)
	}
}

func (s *Alter_session_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_session_policy(s)
	}
}

func (s *Alter_session_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_session_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_session_policy() (localctx IAlter_session_policyContext) {
	this := p
	_ = this

	localctx = NewAlter_session_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, SnowflakeParserRULE_alter_session_policy)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4306)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 426, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4274)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4275)
			p.Match(SnowflakeParserSESSION)
		}
		{
			p.SetState(4276)
			p.Match(SnowflakeParserPOLICY)
		}
		p.SetState(4278)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4277)
				p.If_exists()
			}

		}
		{
			p.SetState(4280)
			p.Id_()
		}
		{
			p.SetState(4281)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserSET || _la == SnowflakeParserUNSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(4285)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSESSION_IDLE_TIMEOUT_MINS {
			{
				p.SetState(4282)
				p.Match(SnowflakeParserSESSION_IDLE_TIMEOUT_MINS)
			}
			{
				p.SetState(4283)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4284)
				p.Num()
			}

		}
		p.SetState(4290)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSESSION_UI_IDLE_TIMEOUT_MINS {
			{
				p.SetState(4287)
				p.Match(SnowflakeParserSESSION_UI_IDLE_TIMEOUT_MINS)
			}
			{
				p.SetState(4288)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4289)
				p.Num()
			}

		}
		p.SetState(4293)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 424, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4292)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4295)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4296)
			p.Match(SnowflakeParserSESSION)
		}
		{
			p.SetState(4297)
			p.Match(SnowflakeParserPOLICY)
		}
		p.SetState(4299)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4298)
				p.If_exists()
			}

		}
		{
			p.SetState(4301)
			p.Id_()
		}
		{
			p.SetState(4302)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(4303)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(4304)
			p.Id_()
		}

	}


	return localctx
}


// IAlter_shareContext is an interface to support dynamic dispatch.
type IAlter_shareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_shareContext differentiates from other interfaces.
	IsAlter_shareContext()
}

type Alter_shareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_shareContext() *Alter_shareContext {
	var p = new(Alter_shareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_share
	return p
}

func (*Alter_shareContext) IsAlter_shareContext() {}

func NewAlter_shareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_shareContext {
	var p = new(Alter_shareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_share

	return p
}

func (s *Alter_shareContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_shareContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_shareContext) SHARE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARE, 0)
}

func (s *Alter_shareContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_shareContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_shareContext) ACCOUNTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNTS, 0)
}

func (s *Alter_shareContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_shareContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_shareContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Alter_shareContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREMOVE, 0)
}

func (s *Alter_shareContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_shareContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_shareContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_shareContext) SHARE_RESTRICTIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARE_RESTRICTIONS, 0)
}

func (s *Alter_shareContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Alter_shareContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_shareContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_shareContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_shareContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_shareContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_shareContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_shareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_shareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_shareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_share(s)
	}
}

func (s *Alter_shareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_share(s)
	}
}

func (s *Alter_shareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_share(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_share() (localctx IAlter_shareContext) {
	this := p
	_ = this

	localctx = NewAlter_shareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, SnowflakeParserRULE_alter_share)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4396)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 439, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4308)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4309)
			p.Match(SnowflakeParserSHARE)
		}
		p.SetState(4311)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4310)
				p.If_exists()
			}

		}
		{
			p.SetState(4313)
			p.Id_()
		}
		{
			p.SetState(4314)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserADD || _la == SnowflakeParserREMOVE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4315)
			p.Match(SnowflakeParserACCOUNTS)
		}
		{
			p.SetState(4316)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(4317)
			p.Id_()
		}
		p.SetState(4322)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(4318)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(4319)
				p.Id_()
			}


			p.SetState(4324)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4328)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSHARE_RESTRICTIONS {
			{
				p.SetState(4325)
				p.Match(SnowflakeParserSHARE_RESTRICTIONS)
			}
			{
				p.SetState(4326)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4327)
				p.True_false()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4330)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4331)
			p.Match(SnowflakeParserSHARE)
		}
		p.SetState(4333)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4332)
				p.If_exists()
			}

		}
		{
			p.SetState(4335)
			p.Id_()
		}
		{
			p.SetState(4336)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(4337)
			p.Match(SnowflakeParserACCOUNTS)
		}
		{
			p.SetState(4338)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(4339)
			p.Id_()
		}
		p.SetState(4344)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(4340)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(4341)
				p.Id_()
			}


			p.SetState(4346)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4350)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSHARE_RESTRICTIONS {
			{
				p.SetState(4347)
				p.Match(SnowflakeParserSHARE_RESTRICTIONS)
			}
			{
				p.SetState(4348)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4349)
				p.True_false()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4352)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4353)
			p.Match(SnowflakeParserSHARE)
		}
		p.SetState(4355)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4354)
				p.If_exists()
			}

		}
		{
			p.SetState(4357)
			p.Id_()
		}
		{
			p.SetState(4358)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(4369)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserACCOUNTS {
			{
				p.SetState(4359)
				p.Match(SnowflakeParserACCOUNTS)
			}
			{
				p.SetState(4360)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4361)
				p.Id_()
			}
			p.SetState(4366)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(4362)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(4363)
					p.Id_()
				}


				p.SetState(4368)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(4372)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 436, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4371)
				p.Comment_clause()
			}


		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4374)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4375)
			p.Match(SnowflakeParserSHARE)
		}
		p.SetState(4377)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4376)
				p.If_exists()
			}

		}
		{
			p.SetState(4379)
			p.Id_()
		}
		{
			p.SetState(4380)
			p.Set_tags()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4382)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4383)
			p.Match(SnowflakeParserSHARE)
		}
		{
			p.SetState(4384)
			p.Id_()
		}
		{
			p.SetState(4385)
			p.Unset_tags()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4387)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4388)
			p.Match(SnowflakeParserSHARE)
		}
		p.SetState(4390)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4389)
				p.If_exists()
			}

		}
		{
			p.SetState(4392)
			p.Id_()
		}
		{
			p.SetState(4393)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(4394)
			p.Match(SnowflakeParserCOMMENT)
		}

	}


	return localctx
}


// IAlter_stageContext is an interface to support dynamic dispatch.
type IAlter_stageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_stageContext differentiates from other interfaces.
	IsAlter_stageContext()
}

type Alter_stageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_stageContext() *Alter_stageContext {
	var p = new(Alter_stageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_stage
	return p
}

func (*Alter_stageContext) IsAlter_stageContext() {}

func NewAlter_stageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_stageContext {
	var p = new(Alter_stageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_stage

	return p
}

func (s *Alter_stageContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_stageContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_stageContext) STAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE, 0)
}

func (s *Alter_stageContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_stageContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_stageContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_stageContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_stageContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_stageContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_stageContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_stageContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_stageContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_stageContext) Internal_stage_params() IInternal_stage_paramsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInternal_stage_paramsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInternal_stage_paramsContext)
}

func (s *Alter_stageContext) File_format() IFile_formatContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFile_formatContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFile_formatContext)
}

func (s *Alter_stageContext) COPY_OPTIONS_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOPY_OPTIONS_, 0)
}

func (s *Alter_stageContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Alter_stageContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Alter_stageContext) Copy_options() ICopy_optionsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_optionsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_optionsContext)
}

func (s *Alter_stageContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Alter_stageContext) External_stage_params() IExternal_stage_paramsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternal_stage_paramsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternal_stage_paramsContext)
}

func (s *Alter_stageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_stageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_stageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_stage(s)
	}
}

func (s *Alter_stageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_stage(s)
	}
}

func (s *Alter_stageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_stage(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_stage() (localctx IAlter_stageContext) {
	this := p
	_ = this

	localctx = NewAlter_stageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, SnowflakeParserRULE_alter_stage)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4468)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 451, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4398)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4399)
			p.Match(SnowflakeParserSTAGE)
		}
		p.SetState(4401)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4400)
				p.If_exists()
			}

		}
		{
			p.SetState(4403)
			p.Id_()
		}
		{
			p.SetState(4404)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(4405)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(4406)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4408)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4409)
			p.Match(SnowflakeParserSTAGE)
		}
		p.SetState(4411)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4410)
				p.If_exists()
			}

		}
		{
			p.SetState(4413)
			p.Id_()
		}
		{
			p.SetState(4414)
			p.Set_tags()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4416)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4417)
			p.Match(SnowflakeParserSTAGE)
		}
		{
			p.SetState(4418)
			p.Id_()
		}
		{
			p.SetState(4419)
			p.Unset_tags()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4421)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4422)
			p.Match(SnowflakeParserSTAGE)
		}
		p.SetState(4424)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4423)
				p.If_exists()
			}

		}
		{
			p.SetState(4426)
			p.Id_()
		}
		{
			p.SetState(4427)
			p.Match(SnowflakeParserSET)
		}

		p.SetState(4429)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENCRYPTION || _la == SnowflakeParserTYPE {
			{
				p.SetState(4428)
				p.Internal_stage_params()
			}

		}
		p.SetState(4432)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFILE_FORMAT {
			{
				p.SetState(4431)
				p.File_format()
			}

		}
		p.SetState(4440)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOPY_OPTIONS_ {
			{
				p.SetState(4434)
				p.Match(SnowflakeParserCOPY_OPTIONS_)
			}
			{
				p.SetState(4435)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4436)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(4437)
				p.Copy_options()
			}
			{
				p.SetState(4438)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		{
			p.SetState(4442)
			p.Comment_clause()
		}



	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4444)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4445)
			p.Match(SnowflakeParserSTAGE)
		}
		p.SetState(4447)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4446)
				p.If_exists()
			}

		}
		{
			p.SetState(4449)
			p.Id_()
		}
		{
			p.SetState(4450)
			p.Match(SnowflakeParserSET)
		}

		p.SetState(4452)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserURL {
			{
				p.SetState(4451)
				p.External_stage_params()
			}

		}
		p.SetState(4455)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFILE_FORMAT {
			{
				p.SetState(4454)
				p.File_format()
			}

		}
		p.SetState(4463)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOPY_OPTIONS_ {
			{
				p.SetState(4457)
				p.Match(SnowflakeParserCOPY_OPTIONS_)
			}
			{
				p.SetState(4458)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4459)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(4460)
				p.Copy_options()
			}
			{
				p.SetState(4461)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(4466)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 450, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4465)
				p.Comment_clause()
			}


		}


	}


	return localctx
}


// IAlter_storage_integrationContext is an interface to support dynamic dispatch.
type IAlter_storage_integrationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_storage_integrationContext differentiates from other interfaces.
	IsAlter_storage_integrationContext()
}

type Alter_storage_integrationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_storage_integrationContext() *Alter_storage_integrationContext {
	var p = new(Alter_storage_integrationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_storage_integration
	return p
}

func (*Alter_storage_integrationContext) IsAlter_storage_integrationContext() {}

func NewAlter_storage_integrationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_storage_integrationContext {
	var p = new(Alter_storage_integrationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_storage_integration

	return p
}

func (s *Alter_storage_integrationContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_storage_integrationContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_storage_integrationContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Alter_storage_integrationContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_storage_integrationContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_storage_integrationContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE, 0)
}

func (s *Alter_storage_integrationContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_storage_integrationContext) Cloud_provider_params2() ICloud_provider_params2Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloud_provider_params2Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloud_provider_params2Context)
}

func (s *Alter_storage_integrationContext) Enabled_true_false() IEnabled_true_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnabled_true_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnabled_true_falseContext)
}

func (s *Alter_storage_integrationContext) STORAGE_ALLOWED_LOCATIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE_ALLOWED_LOCATIONS, 0)
}

func (s *Alter_storage_integrationContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_storage_integrationContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_storage_integrationContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Alter_storage_integrationContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Alter_storage_integrationContext) AllString_list() []IString_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IString_listContext); ok {
			len++
		}
	}

	tst := make([]IString_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IString_listContext); ok {
			tst[i] = t.(IString_listContext)
			i++
		}
	}

	return tst
}

func (s *Alter_storage_integrationContext) String_list(i int) IString_listContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_listContext)
}

func (s *Alter_storage_integrationContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Alter_storage_integrationContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Alter_storage_integrationContext) STORAGE_BLOCKED_LOCATIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE_BLOCKED_LOCATIONS, 0)
}

func (s *Alter_storage_integrationContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_storage_integrationContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_storage_integrationContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_storage_integrationContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_storage_integrationContext) ENABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLED, 0)
}

func (s *Alter_storage_integrationContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_storage_integrationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_storage_integrationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_storage_integrationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_storage_integration(s)
	}
}

func (s *Alter_storage_integrationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_storage_integration(s)
	}
}

func (s *Alter_storage_integrationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_storage_integration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_storage_integration() (localctx IAlter_storage_integrationContext) {
	this := p
	_ = this

	localctx = NewAlter_storage_integrationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, SnowflakeParserRULE_alter_storage_integration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4536)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 464, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4470)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4472)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTORAGE {
			{
				p.SetState(4471)
				p.Match(SnowflakeParserSTORAGE)
			}

		}
		{
			p.SetState(4474)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(4476)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4475)
				p.If_exists()
			}

		}
		{
			p.SetState(4478)
			p.Id_()
		}
		{
			p.SetState(4479)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(4481)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAZURE_TENANT_ID || _la == SnowflakeParserSTORAGE_AWS_ROLE_ARN {
			{
				p.SetState(4480)
				p.Cloud_provider_params2()
			}

		}
		p.SetState(4484)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENABLED {
			{
				p.SetState(4483)
				p.Enabled_true_false()
			}

		}
		p.SetState(4492)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTORAGE_ALLOWED_LOCATIONS {
			{
				p.SetState(4486)
				p.Match(SnowflakeParserSTORAGE_ALLOWED_LOCATIONS)
			}
			{
				p.SetState(4487)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4488)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(4489)
				p.String_list()
			}
			{
				p.SetState(4490)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(4500)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTORAGE_BLOCKED_LOCATIONS {
			{
				p.SetState(4494)
				p.Match(SnowflakeParserSTORAGE_BLOCKED_LOCATIONS)
			}
			{
				p.SetState(4495)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4496)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(4497)
				p.String_list()
			}
			{
				p.SetState(4498)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(4503)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 458, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4502)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4505)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4507)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTORAGE {
			{
				p.SetState(4506)
				p.Match(SnowflakeParserSTORAGE)
			}

		}
		{
			p.SetState(4509)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(4511)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4510)
				p.If_exists()
			}

		}
		{
			p.SetState(4513)
			p.Id_()
		}
		{
			p.SetState(4514)
			p.Set_tags()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4516)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4518)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTORAGE {
			{
				p.SetState(4517)
				p.Match(SnowflakeParserSTORAGE)
			}

		}
		{
			p.SetState(4520)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(4521)
			p.Id_()
		}
		{
			p.SetState(4522)
			p.Unset_tags()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4524)
			p.Match(SnowflakeParserALTER)
		}
		p.SetState(4526)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTORAGE {
			{
				p.SetState(4525)
				p.Match(SnowflakeParserSTORAGE)
			}

		}
		{
			p.SetState(4528)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(4530)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4529)
				p.If_exists()
			}

		}
		{
			p.SetState(4532)
			p.Id_()
		}
		{
			p.SetState(4533)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(4534)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserCOMMENT || _la == SnowflakeParserENABLED || _la == SnowflakeParserSTORAGE_BLOCKED_LOCATIONS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}


	return localctx
}


// IAlter_streamContext is an interface to support dynamic dispatch.
type IAlter_streamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_streamContext differentiates from other interfaces.
	IsAlter_streamContext()
}

type Alter_streamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_streamContext() *Alter_streamContext {
	var p = new(Alter_streamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_stream
	return p
}

func (*Alter_streamContext) IsAlter_streamContext() {}

func NewAlter_streamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_streamContext {
	var p = new(Alter_streamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_stream

	return p
}

func (s *Alter_streamContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_streamContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_streamContext) STREAM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTREAM, 0)
}

func (s *Alter_streamContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_streamContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_streamContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_streamContext) Tag_decl_list() ITag_decl_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITag_decl_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITag_decl_listContext)
}

func (s *Alter_streamContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_streamContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_streamContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_streamContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_streamContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_streamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_streamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_streamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_stream(s)
	}
}

func (s *Alter_streamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_stream(s)
	}
}

func (s *Alter_streamContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_stream(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_stream() (localctx IAlter_streamContext) {
	this := p
	_ = this

	localctx = NewAlter_streamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, SnowflakeParserRULE_alter_stream)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4573)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 470, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4538)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4539)
			p.Match(SnowflakeParserSTREAM)
		}
		p.SetState(4541)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4540)
				p.If_exists()
			}

		}
		{
			p.SetState(4543)
			p.Id_()
		}
		{
			p.SetState(4544)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(4546)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTAG {
			{
				p.SetState(4545)
				p.Tag_decl_list()
			}

		}
		p.SetState(4549)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 467, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4548)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4551)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4552)
			p.Match(SnowflakeParserSTREAM)
		}
		p.SetState(4554)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4553)
				p.If_exists()
			}

		}
		{
			p.SetState(4556)
			p.Id_()
		}
		{
			p.SetState(4557)
			p.Set_tags()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4559)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4560)
			p.Match(SnowflakeParserSTREAM)
		}
		{
			p.SetState(4561)
			p.Id_()
		}
		{
			p.SetState(4562)
			p.Unset_tags()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4564)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4565)
			p.Match(SnowflakeParserSTREAM)
		}
		p.SetState(4567)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4566)
				p.If_exists()
			}

		}
		{
			p.SetState(4569)
			p.Id_()
		}
		{
			p.SetState(4570)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(4571)
			p.Match(SnowflakeParserCOMMENT)
		}

	}


	return localctx
}


// IAlter_tableContext is an interface to support dynamic dispatch.
type IAlter_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_tableContext differentiates from other interfaces.
	IsAlter_tableContext()
}

type Alter_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_tableContext() *Alter_tableContext {
	var p = new(Alter_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_table
	return p
}

func (*Alter_tableContext) IsAlter_tableContext() {}

func NewAlter_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_tableContext {
	var p = new(Alter_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_table

	return p
}

func (s *Alter_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_tableContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Alter_tableContext) AllObject_name() []IObject_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObject_nameContext); ok {
			len++
		}
	}

	tst := make([]IObject_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObject_nameContext); ok {
			tst[i] = t.(IObject_nameContext)
			i++
		}
	}

	return tst
}

func (s *Alter_tableContext) Object_name(i int) IObject_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Alter_tableContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_tableContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_tableContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_tableContext) SWAP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSWAP, 0)
}

func (s *Alter_tableContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Alter_tableContext) Clustering_action() IClustering_actionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClustering_actionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClustering_actionContext)
}

func (s *Alter_tableContext) Table_column_action() ITable_column_actionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_column_actionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_column_actionContext)
}

func (s *Alter_tableContext) Constraint_action() IConstraint_actionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraint_actionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraint_actionContext)
}

func (s *Alter_tableContext) Ext_table_column_action() IExt_table_column_actionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExt_table_column_actionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExt_table_column_actionContext)
}

func (s *Alter_tableContext) Search_optimization_action() ISearch_optimization_actionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISearch_optimization_actionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISearch_optimization_actionContext)
}

func (s *Alter_tableContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_tableContext) Stage_file_format() IStage_file_formatContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStage_file_formatContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStage_file_formatContext)
}

func (s *Alter_tableContext) STAGE_COPY_OPTIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE_COPY_OPTIONS, 0)
}

func (s *Alter_tableContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_tableContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_tableContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Alter_tableContext) Copy_options() ICopy_optionsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_optionsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_optionsContext)
}

func (s *Alter_tableContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Alter_tableContext) DATA_RETENTION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS, 0)
}

func (s *Alter_tableContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Alter_tableContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Alter_tableContext) MAX_DATA_EXTENSION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS, 0)
}

func (s *Alter_tableContext) CHANGE_TRACKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCHANGE_TRACKING, 0)
}

func (s *Alter_tableContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Alter_tableContext) Default_ddl_collation() IDefault_ddl_collationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_ddl_collationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_ddl_collationContext)
}

func (s *Alter_tableContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_tableContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_tableContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_tableContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_tableContext) DEFAULT_DDL_COLLATION_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT_DDL_COLLATION_, 0)
}

func (s *Alter_tableContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_tableContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Alter_tableContext) AllROW() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserROW)
}

func (s *Alter_tableContext) ROW(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, i)
}

func (s *Alter_tableContext) AllACCESS() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserACCESS)
}

func (s *Alter_tableContext) ACCESS(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, i)
}

func (s *Alter_tableContext) AllPOLICY() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserPOLICY)
}

func (s *Alter_tableContext) POLICY(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, i)
}

func (s *Alter_tableContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_tableContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_tableContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Alter_tableContext) Column_list_in_parentheses() IColumn_list_in_parenthesesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_list_in_parenthesesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_list_in_parenthesesContext)
}

func (s *Alter_tableContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Alter_tableContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, 0)
}

func (s *Alter_tableContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *Alter_tableContext) POLICIES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICIES, 0)
}

func (s *Alter_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_table(s)
	}
}

func (s *Alter_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_table(s)
	}
}

func (s *Alter_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_table(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_table() (localctx IAlter_tableContext) {
	this := p
	_ = this

	localctx = NewAlter_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, SnowflakeParserRULE_alter_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4750)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 493, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4575)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4576)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4578)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4577)
				p.If_exists()
			}

		}
		{
			p.SetState(4580)
			p.Object_name()
		}
		{
			p.SetState(4581)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(4582)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(4583)
			p.Object_name()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4585)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4586)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4588)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4587)
				p.If_exists()
			}

		}
		{
			p.SetState(4590)
			p.Object_name()
		}
		{
			p.SetState(4591)
			p.Match(SnowflakeParserSWAP)
		}
		{
			p.SetState(4592)
			p.Match(SnowflakeParserWITH)
		}
		{
			p.SetState(4593)
			p.Object_name()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4595)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4596)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4598)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4597)
				p.If_exists()
			}

		}
		{
			p.SetState(4600)
			p.Object_name()
		}
		p.SetState(4604)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 474, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4601)
				p.Clustering_action()
			}


		case 2:
			{
				p.SetState(4602)
				p.Table_column_action()
			}


		case 3:
			{
				p.SetState(4603)
				p.Constraint_action()
			}

		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4606)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4607)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4609)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4608)
				p.If_exists()
			}

		}
		{
			p.SetState(4611)
			p.Object_name()
		}
		{
			p.SetState(4612)
			p.Ext_table_column_action()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4614)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4615)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4617)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4616)
				p.If_exists()
			}

		}
		{
			p.SetState(4619)
			p.Object_name()
		}
		{
			p.SetState(4620)
			p.Search_optimization_action()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4622)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4623)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4625)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4624)
				p.If_exists()
			}

		}
		{
			p.SetState(4627)
			p.Object_name()
		}
		{
			p.SetState(4628)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(4630)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTAGE_FILE_FORMAT || _la == SnowflakeParserTYPE {
			{
				p.SetState(4629)
				p.Stage_file_format()
			}

		}
		p.SetState(4638)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTAGE_COPY_OPTIONS {
			{
				p.SetState(4632)
				p.Match(SnowflakeParserSTAGE_COPY_OPTIONS)
			}
			{
				p.SetState(4633)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4634)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(4635)
				p.Copy_options()
			}
			{
				p.SetState(4636)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(4643)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserDATA_RETENTION_TIME_IN_DAYS {
			{
				p.SetState(4640)
				p.Match(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS)
			}
			{
				p.SetState(4641)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4642)
				p.Num()
			}

		}
		p.SetState(4648)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS {
			{
				p.SetState(4645)
				p.Match(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS)
			}
			{
				p.SetState(4646)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4647)
				p.Num()
			}

		}
		p.SetState(4653)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCHANGE_TRACKING {
			{
				p.SetState(4650)
				p.Match(SnowflakeParserCHANGE_TRACKING)
			}
			{
				p.SetState(4651)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4652)
				p.True_false()
			}

		}
		p.SetState(4656)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserDEFAULT_DDL_COLLATION_ {
			{
				p.SetState(4655)
				p.Default_ddl_collation()
			}

		}
		p.SetState(4659)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 484, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4658)
				p.Comment_clause()
			}


		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4661)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4662)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4664)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4663)
				p.If_exists()
			}

		}
		{
			p.SetState(4666)
			p.Object_name()
		}
		{
			p.SetState(4667)
			p.Set_tags()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4669)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4670)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4672)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4671)
				p.If_exists()
			}

		}
		{
			p.SetState(4674)
			p.Object_name()
		}
		{
			p.SetState(4675)
			p.Unset_tags()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4677)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4678)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4680)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4679)
				p.If_exists()
			}

		}
		{
			p.SetState(4682)
			p.Object_name()
		}
		{
			p.SetState(4683)
			p.Match(SnowflakeParserUNSET)
		}
		p.SetState(4690)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 488, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4684)
				p.Match(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS)
			}


		case 2:
			{
				p.SetState(4685)
				p.Match(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS)
			}


		case 3:
			{
				p.SetState(4686)
				p.Match(SnowflakeParserCHANGE_TRACKING)
			}


		case 4:
			{
				p.SetState(4687)
				p.Match(SnowflakeParserDEFAULT_DDL_COLLATION_)
			}


		case 5:
			{
				p.SetState(4688)
				p.Match(SnowflakeParserCOMMENT)
			}


		case 6:

		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4692)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4693)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4695)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4694)
				p.If_exists()
			}

		}
		{
			p.SetState(4697)
			p.Object_name()
		}
		{
			p.SetState(4698)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(4699)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(4700)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(4701)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(4702)
			p.Id_()
		}
		{
			p.SetState(4703)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(4704)
			p.Column_list_in_parentheses()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4706)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4707)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4709)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4708)
				p.If_exists()
			}

		}
		{
			p.SetState(4711)
			p.Object_name()
		}
		{
			p.SetState(4712)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(4713)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(4714)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(4715)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(4716)
			p.Id_()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4718)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4719)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4721)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4720)
				p.If_exists()
			}

		}
		{
			p.SetState(4723)
			p.Object_name()
		}
		{
			p.SetState(4724)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(4725)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(4726)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(4727)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(4728)
			p.Id_()
		}
		{
			p.SetState(4729)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(4730)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(4731)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(4732)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(4733)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(4734)
			p.Id_()
		}
		{
			p.SetState(4735)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(4736)
			p.Column_list_in_parentheses()
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4738)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(4739)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(4741)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(4740)
				p.If_exists()
			}

		}
		{
			p.SetState(4743)
			p.Object_name()
		}
		{
			p.SetState(4744)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(4745)
			p.Match(SnowflakeParserALL)
		}
		{
			p.SetState(4746)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(4747)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(4748)
			p.Match(SnowflakeParserPOLICIES)
		}

	}


	return localctx
}


// IClustering_actionContext is an interface to support dynamic dispatch.
type IClustering_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClustering_actionContext differentiates from other interfaces.
	IsClustering_actionContext()
}

type Clustering_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClustering_actionContext() *Clustering_actionContext {
	var p = new(Clustering_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_clustering_action
	return p
}

func (*Clustering_actionContext) IsClustering_actionContext() {}

func NewClustering_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clustering_actionContext {
	var p = new(Clustering_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_clustering_action

	return p
}

func (s *Clustering_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Clustering_actionContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLUSTER, 0)
}

func (s *Clustering_actionContext) BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBY, 0)
}

func (s *Clustering_actionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Clustering_actionContext) Expr_list() IExpr_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Clustering_actionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Clustering_actionContext) RECLUSTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRECLUSTER, 0)
}

func (s *Clustering_actionContext) MAX_SIZE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_SIZE, 0)
}

func (s *Clustering_actionContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Clustering_actionContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Clustering_actionContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWHERE, 0)
}

func (s *Clustering_actionContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Clustering_actionContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND, 0)
}

func (s *Clustering_actionContext) RESUME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESUME, 0)
}

func (s *Clustering_actionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Clustering_actionContext) CLUSTERING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLUSTERING, 0)
}

func (s *Clustering_actionContext) KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserKEY, 0)
}

func (s *Clustering_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clustering_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Clustering_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterClustering_action(s)
	}
}

func (s *Clustering_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitClustering_action(s)
	}
}

func (s *Clustering_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitClustering_action(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Clustering_action() (localctx IClustering_actionContext) {
	this := p
	_ = this

	localctx = NewClustering_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, SnowflakeParserRULE_clustering_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4773)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserCLUSTER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4752)
			p.Match(SnowflakeParserCLUSTER)
		}
		{
			p.SetState(4753)
			p.Match(SnowflakeParserBY)
		}
		{
			p.SetState(4754)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(4755)
			p.Expr_list()
		}
		{
			p.SetState(4756)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case SnowflakeParserRECLUSTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4758)
			p.Match(SnowflakeParserRECLUSTER)
		}
		p.SetState(4762)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserMAX_SIZE {
			{
				p.SetState(4759)
				p.Match(SnowflakeParserMAX_SIZE)
			}
			{
				p.SetState(4760)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(4761)
				p.Num()
			}

		}
		p.SetState(4766)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserWHERE {
			{
				p.SetState(4764)
				p.Match(SnowflakeParserWHERE)
			}
			{
				p.SetState(4765)
				p.expr(0)
			}

		}


	case SnowflakeParserRESUME, SnowflakeParserSUSPEND:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4768)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserRESUME || _la == SnowflakeParserSUSPEND) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4769)
			p.Match(SnowflakeParserRECLUSTER)
		}


	case SnowflakeParserDROP:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4770)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(4771)
			p.Match(SnowflakeParserCLUSTERING)
		}
		{
			p.SetState(4772)
			p.Match(SnowflakeParserKEY)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ITable_column_actionContext is an interface to support dynamic dispatch.
type ITable_column_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_column_actionContext differentiates from other interfaces.
	IsTable_column_actionContext()
}

type Table_column_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_column_actionContext() *Table_column_actionContext {
	var p = new(Table_column_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_table_column_action
	return p
}

func (*Table_column_actionContext) IsTable_column_actionContext() {}

func NewTable_column_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_column_actionContext {
	var p = new(Table_column_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_table_column_action

	return p
}

func (s *Table_column_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_column_actionContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Table_column_actionContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Table_column_actionContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Table_column_actionContext) Data_type() IData_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Table_column_actionContext) AllCOLUMN() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOLUMN)
}

func (s *Table_column_actionContext) COLUMN(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLUMN, i)
}

func (s *Table_column_actionContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserDEFAULT)
}

func (s *Table_column_actionContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT, i)
}

func (s *Table_column_actionContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Table_column_actionContext) Inline_constraint() IInline_constraintContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInline_constraintContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInline_constraintContext)
}

func (s *Table_column_actionContext) MASKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, 0)
}

func (s *Table_column_actionContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Table_column_actionContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Table_column_actionContext) AUTOINCREMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTOINCREMENT, 0)
}

func (s *Table_column_actionContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIDENTITY, 0)
}

func (s *Table_column_actionContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Table_column_actionContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Table_column_actionContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Table_column_actionContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Table_column_actionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Table_column_actionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Table_column_actionContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Table_column_actionContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Table_column_actionContext) START() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTART, 0)
}

func (s *Table_column_actionContext) INCREMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINCREMENT, 0)
}

func (s *Table_column_actionContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Table_column_actionContext) USING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSING, 0)
}

func (s *Table_column_actionContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Table_column_actionContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Table_column_actionContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Table_column_actionContext) Alter_modify() IAlter_modifyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_modifyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_modifyContext)
}

func (s *Table_column_actionContext) AllDROP() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserDROP)
}

func (s *Table_column_actionContext) DROP(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, i)
}

func (s *Table_column_actionContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserSET)
}

func (s *Table_column_actionContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, i)
}

func (s *Table_column_actionContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Table_column_actionContext) DOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, 0)
}

func (s *Table_column_actionContext) NEXTVAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNEXTVAL, 0)
}

func (s *Table_column_actionContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Table_column_actionContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Table_column_actionContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Table_column_actionContext) NOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, 0)
}

func (s *Table_column_actionContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, 0)
}

func (s *Table_column_actionContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Table_column_actionContext) DATA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA, 0)
}

func (s *Table_column_actionContext) FORCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORCE, 0)
}

func (s *Table_column_actionContext) AllColumn_set_tags() []IColumn_set_tagsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_set_tagsContext); ok {
			len++
		}
	}

	tst := make([]IColumn_set_tagsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_set_tagsContext); ok {
			tst[i] = t.(IColumn_set_tagsContext)
			i++
		}
	}

	return tst
}

func (s *Table_column_actionContext) Column_set_tags(i int) IColumn_set_tagsContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_set_tagsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_set_tagsContext)
}

func (s *Table_column_actionContext) AllColumn_unset_tags() []IColumn_unset_tagsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_unset_tagsContext); ok {
			len++
		}
	}

	tst := make([]IColumn_unset_tagsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_unset_tagsContext); ok {
			tst[i] = t.(IColumn_unset_tagsContext)
			i++
		}
	}

	return tst
}

func (s *Table_column_actionContext) Column_unset_tags(i int) IColumn_unset_tagsContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_unset_tagsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_unset_tagsContext)
}

func (s *Table_column_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_column_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_column_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTable_column_action(s)
	}
}

func (s *Table_column_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTable_column_action(s)
	}
}

func (s *Table_column_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTable_column_action(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Table_column_action() (localctx ITable_column_actionContext) {
	this := p
	_ = this

	localctx = NewTable_column_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, SnowflakeParserRULE_table_column_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4938)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 521, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4775)
			p.Match(SnowflakeParserADD)
		}
		p.SetState(4777)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(4776)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(4779)
			p.Column_name()
		}
		{
			p.SetState(4780)
			p.Data_type()
		}
		p.SetState(4797)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserDEFAULT:
			{
				p.SetState(4781)
				p.Match(SnowflakeParserDEFAULT)
			}
			{
				p.SetState(4782)
				p.expr(0)
			}


		case SnowflakeParserAUTOINCREMENT, SnowflakeParserIDENTITY:
			{
				p.SetState(4783)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SnowflakeParserAUTOINCREMENT || _la == SnowflakeParserIDENTITY) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(4795)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SnowflakeParserLR_BRACKET:
				{
					p.SetState(4784)
					p.Match(SnowflakeParserLR_BRACKET)
				}
				{
					p.SetState(4785)
					p.Num()
				}
				{
					p.SetState(4786)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(4787)
					p.Num()
				}
				{
					p.SetState(4788)
					p.Match(SnowflakeParserRR_BRACKET)
				}


			case SnowflakeParserSTART:
				{
					p.SetState(4790)
					p.Match(SnowflakeParserSTART)
				}
				{
					p.SetState(4791)
					p.Num()
				}
				{
					p.SetState(4792)
					p.Match(SnowflakeParserINCREMENT)
				}
				{
					p.SetState(4793)
					p.Num()
				}


			case SnowflakeParserEOF, SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCONSTRAINT, SnowflakeParserCOPY, SnowflakeParserCREATE, SnowflakeParserDELETE, SnowflakeParserDESC, SnowflakeParserDESCRIBE, SnowflakeParserDROP, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserFOREIGN, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserINSERT, SnowflakeParserLIST, SnowflakeParserMASKING, SnowflakeParserMERGE, SnowflakeParserNOT, SnowflakeParserPRIMARY, SnowflakeParserPUT, SnowflakeParserREFERENCES, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSELECT, SnowflakeParserSET, SnowflakeParserSHOW, SnowflakeParserTRUNCATE, SnowflakeParserUNDROP, SnowflakeParserUNIQUE, SnowflakeParserUNSET, SnowflakeParserUPDATE, SnowflakeParserUSE, SnowflakeParserWITH, SnowflakeParserSEMI:



			default:
			}


		case SnowflakeParserEOF, SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCONSTRAINT, SnowflakeParserCOPY, SnowflakeParserCREATE, SnowflakeParserDELETE, SnowflakeParserDESC, SnowflakeParserDESCRIBE, SnowflakeParserDROP, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserFOREIGN, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserINSERT, SnowflakeParserLIST, SnowflakeParserMASKING, SnowflakeParserMERGE, SnowflakeParserNOT, SnowflakeParserPRIMARY, SnowflakeParserPUT, SnowflakeParserREFERENCES, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSELECT, SnowflakeParserSET, SnowflakeParserSHOW, SnowflakeParserTRUNCATE, SnowflakeParserUNDROP, SnowflakeParserUNIQUE, SnowflakeParserUNSET, SnowflakeParserUPDATE, SnowflakeParserUSE, SnowflakeParserWITH, SnowflakeParserSEMI:



		default:
		}
		p.SetState(4800)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCONSTRAINT || _la == SnowflakeParserFOREIGN || _la == SnowflakeParserNOT || _la == SnowflakeParserPRIMARY || _la == SnowflakeParserREFERENCES || _la == SnowflakeParserUNIQUE {
			{
				p.SetState(4799)
				p.Inline_constraint()
			}

		}
		p.SetState(4817)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 503, p.GetParserRuleContext()) == 1 {
			p.SetState(4803)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserWITH {
				{
					p.SetState(4802)
					p.Match(SnowflakeParserWITH)
				}

			}
			{
				p.SetState(4805)
				p.Match(SnowflakeParserMASKING)
			}
			{
				p.SetState(4806)
				p.Match(SnowflakeParserPOLICY)
			}
			{
				p.SetState(4807)
				p.Id_()
			}
			p.SetState(4815)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserUSING {
				{
					p.SetState(4808)
					p.Match(SnowflakeParserUSING)
				}
				{
					p.SetState(4809)
					p.Match(SnowflakeParserLR_BRACKET)
				}
				{
					p.SetState(4810)
					p.Column_name()
				}
				{
					p.SetState(4811)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(4812)
					p.Column_list()
				}
				{
					p.SetState(4813)
					p.Match(SnowflakeParserRR_BRACKET)
				}

			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4819)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(4820)
			p.Match(SnowflakeParserCOLUMN)
		}
		{
			p.SetState(4821)
			p.Column_name()
		}
		{
			p.SetState(4822)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(4823)
			p.Column_name()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4825)
			p.Alter_modify()
		}
		p.SetState(4827)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserLR_BRACKET {
			{
				p.SetState(4826)
				p.Match(SnowflakeParserLR_BRACKET)
			}

		}
		p.SetState(4830)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(4829)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(4832)
			p.Column_name()
		}
		{
			p.SetState(4833)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(4834)
			p.Match(SnowflakeParserDEFAULT)
		}
		{
			p.SetState(4835)
			p.Match(SnowflakeParserCOMMA)
		}
		p.SetState(4837)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(4836)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(4839)
			p.Column_name()
		}
		{
			p.SetState(4840)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(4841)
			p.Match(SnowflakeParserDEFAULT)
		}
		{
			p.SetState(4842)
			p.Object_name()
		}
		{
			p.SetState(4843)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(4844)
			p.Match(SnowflakeParserNEXTVAL)
		}
		{
			p.SetState(4845)
			p.Match(SnowflakeParserCOMMA)
		}
		p.SetState(4847)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(4846)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(4849)
			p.Column_name()
		}
		p.SetState(4858)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserNOT, SnowflakeParserSET:
			p.SetState(4851)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserSET {
				{
					p.SetState(4850)
					p.Match(SnowflakeParserSET)
				}

			}
			{
				p.SetState(4853)
				p.Match(SnowflakeParserNOT)
			}
			{
				p.SetState(4854)
				p.Match(SnowflakeParserNULL_)
			}


		case SnowflakeParserDROP:
			{
				p.SetState(4855)
				p.Match(SnowflakeParserDROP)
			}
			{
				p.SetState(4856)
				p.Match(SnowflakeParserNOT)
			}
			{
				p.SetState(4857)
				p.Match(SnowflakeParserNULL_)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(4860)
			p.Match(SnowflakeParserCOMMA)
		}
		p.SetState(4862)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(4861)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(4864)
			p.Column_name()
		}
		p.SetState(4870)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSET || _la == SnowflakeParserTYPE {
			p.SetState(4867)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserSET {
				{
					p.SetState(4865)
					p.Match(SnowflakeParserSET)
				}
				{
					p.SetState(4866)
					p.Match(SnowflakeParserDATA)
				}

			}
			{
				p.SetState(4869)
				p.Match(SnowflakeParserTYPE)
			}

		}
		{
			p.SetState(4872)
			p.Data_type()
		}
		{
			p.SetState(4873)
			p.Match(SnowflakeParserCOMMA)
		}
		p.SetState(4875)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(4874)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(4877)
			p.Column_name()
		}
		{
			p.SetState(4878)
			p.Comment_clause()
		}
		{
			p.SetState(4879)
			p.Match(SnowflakeParserCOMMA)
		}
		p.SetState(4881)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(4880)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(4883)
			p.Column_name()
		}
		{
			p.SetState(4884)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(4885)
			p.Match(SnowflakeParserCOMMENT)
		}
		p.SetState(4887)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserRR_BRACKET {
			{
				p.SetState(4886)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4889)
			p.Alter_modify()
		}
		{
			p.SetState(4890)
			p.Match(SnowflakeParserCOLUMN)
		}
		{
			p.SetState(4891)
			p.Column_name()
		}
		{
			p.SetState(4892)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(4893)
			p.Match(SnowflakeParserMASKING)
		}
		{
			p.SetState(4894)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(4895)
			p.Id_()
		}
		p.SetState(4903)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserUSING {
			{
				p.SetState(4896)
				p.Match(SnowflakeParserUSING)
			}
			{
				p.SetState(4897)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(4898)
				p.Column_name()
			}
			{
				p.SetState(4899)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(4900)
				p.Column_list()
			}
			{
				p.SetState(4901)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(4906)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFORCE {
			{
				p.SetState(4905)
				p.Match(SnowflakeParserFORCE)
			}

		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4908)
			p.Alter_modify()
		}
		{
			p.SetState(4909)
			p.Match(SnowflakeParserCOLUMN)
		}
		{
			p.SetState(4910)
			p.Column_name()
		}
		{
			p.SetState(4911)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(4912)
			p.Match(SnowflakeParserMASKING)
		}
		{
			p.SetState(4913)
			p.Match(SnowflakeParserPOLICY)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4915)
			p.Alter_modify()
		}
		{
			p.SetState(4916)
			p.Column_set_tags()
		}
		p.SetState(4921)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(4917)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(4918)
				p.Column_set_tags()
			}


			p.SetState(4923)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4924)
			p.Alter_modify()
		}
		{
			p.SetState(4925)
			p.Column_unset_tags()
		}
		p.SetState(4930)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(4926)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(4927)
				p.Column_unset_tags()
			}


			p.SetState(4932)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4933)
			p.Match(SnowflakeParserDROP)
		}
		p.SetState(4935)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(4934)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(4937)
			p.Column_list()
		}

	}


	return localctx
}


// IInline_constraintContext is an interface to support dynamic dispatch.
type IInline_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInline_constraintContext differentiates from other interfaces.
	IsInline_constraintContext()
}

type Inline_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInline_constraintContext() *Inline_constraintContext {
	var p = new(Inline_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_inline_constraint
	return p
}

func (*Inline_constraintContext) IsInline_constraintContext() {}

func NewInline_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Inline_constraintContext {
	var p = new(Inline_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_inline_constraint

	return p
}

func (s *Inline_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Inline_constraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNIQUE, 0)
}

func (s *Inline_constraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIMARY, 0)
}

func (s *Inline_constraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserKEY, 0)
}

func (s *Inline_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, 0)
}

func (s *Inline_constraintContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, 0)
}

func (s *Inline_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCONSTRAINT, 0)
}

func (s *Inline_constraintContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Inline_constraintContext) Constraint_properties() IConstraint_propertiesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraint_propertiesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraint_propertiesContext)
}

func (s *Inline_constraintContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREFERENCES, 0)
}

func (s *Inline_constraintContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Inline_constraintContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFOREIGN, 0)
}

func (s *Inline_constraintContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Inline_constraintContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Inline_constraintContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Inline_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inline_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Inline_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterInline_constraint(s)
	}
}

func (s *Inline_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitInline_constraint(s)
	}
}

func (s *Inline_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitInline_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Inline_constraint() (localctx IInline_constraintContext) {
	this := p
	_ = this

	localctx = NewInline_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, SnowflakeParserRULE_inline_constraint)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4942)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserNOT {
		{
			p.SetState(4940)
			p.Match(SnowflakeParserNOT)
		}
		{
			p.SetState(4941)
			p.Match(SnowflakeParserNULL_)
		}

	}
	p.SetState(4946)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCONSTRAINT {
		{
			p.SetState(4944)
			p.Match(SnowflakeParserCONSTRAINT)
		}
		{
			p.SetState(4945)
			p.Id_()
		}

	}
	p.SetState(4963)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserUNIQUE:
		{
			p.SetState(4948)
			p.Match(SnowflakeParserUNIQUE)
		}


	case SnowflakeParserPRIMARY:
		{
			p.SetState(4949)
			p.Match(SnowflakeParserPRIMARY)
		}
		{
			p.SetState(4950)
			p.Match(SnowflakeParserKEY)
		}


	case SnowflakeParserFOREIGN, SnowflakeParserREFERENCES:
		p.SetState(4953)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFOREIGN {
			{
				p.SetState(4951)
				p.Match(SnowflakeParserFOREIGN)
			}
			{
				p.SetState(4952)
				p.Match(SnowflakeParserKEY)
			}

		}
		{
			p.SetState(4955)
			p.Match(SnowflakeParserREFERENCES)
		}
		{
			p.SetState(4956)
			p.Object_name()
		}
		p.SetState(4961)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserLR_BRACKET {
			{
				p.SetState(4957)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(4958)
				p.Column_name()
			}
			{
				p.SetState(4959)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}




	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(4966)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 527, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4965)
			p.Constraint_properties()
		}


	}



	return localctx
}


// IConstraint_propertiesContext is an interface to support dynamic dispatch.
type IConstraint_propertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraint_propertiesContext differentiates from other interfaces.
	IsConstraint_propertiesContext()
}

type Constraint_propertiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraint_propertiesContext() *Constraint_propertiesContext {
	var p = new(Constraint_propertiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_constraint_properties
	return p
}

func (*Constraint_propertiesContext) IsConstraint_propertiesContext() {}

func NewConstraint_propertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraint_propertiesContext {
	var p = new(Constraint_propertiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_constraint_properties

	return p
}

func (s *Constraint_propertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraint_propertiesContext) ENFORCED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENFORCED, 0)
}

func (s *Constraint_propertiesContext) NOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, 0)
}

func (s *Constraint_propertiesContext) DEFERRABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFERRABLE, 0)
}

func (s *Constraint_propertiesContext) INITIALLY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINITIALLY, 0)
}

func (s *Constraint_propertiesContext) DEFERRED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFERRED, 0)
}

func (s *Constraint_propertiesContext) IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIMMEDIATE, 0)
}

func (s *Constraint_propertiesContext) MATCH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATCH, 0)
}

func (s *Constraint_propertiesContext) FULL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFULL, 0)
}

func (s *Constraint_propertiesContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPARTIAL, 0)
}

func (s *Constraint_propertiesContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSIMPLE, 0)
}

func (s *Constraint_propertiesContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUPDATE, 0)
}

func (s *Constraint_propertiesContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCASCADE, 0)
}

func (s *Constraint_propertiesContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Constraint_propertiesContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, 0)
}

func (s *Constraint_propertiesContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT, 0)
}

func (s *Constraint_propertiesContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESTRICT, 0)
}

func (s *Constraint_propertiesContext) NO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNO, 0)
}

func (s *Constraint_propertiesContext) ACTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACTION, 0)
}

func (s *Constraint_propertiesContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDELETE, 0)
}

func (s *Constraint_propertiesContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE, 0)
}

func (s *Constraint_propertiesContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISABLE, 0)
}

func (s *Constraint_propertiesContext) VALIDATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVALIDATE, 0)
}

func (s *Constraint_propertiesContext) NOVALIDATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOVALIDATE, 0)
}

func (s *Constraint_propertiesContext) RELY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRELY, 0)
}

func (s *Constraint_propertiesContext) NORELY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNORELY, 0)
}

func (s *Constraint_propertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraint_propertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Constraint_propertiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterConstraint_properties(s)
	}
}

func (s *Constraint_propertiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitConstraint_properties(s)
	}
}

func (s *Constraint_propertiesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitConstraint_properties(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Constraint_properties() (localctx IConstraint_propertiesContext) {
	this := p
	_ = this

	localctx = NewConstraint_propertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, SnowflakeParserRULE_constraint_properties)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5008)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 532, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(4969)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNOT {
			{
				p.SetState(4968)
				p.Match(SnowflakeParserNOT)
			}

		}
		{
			p.SetState(4971)
			p.Match(SnowflakeParserENFORCED)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(4973)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNOT {
			{
				p.SetState(4972)
				p.Match(SnowflakeParserNOT)
			}

		}
		{
			p.SetState(4975)
			p.Match(SnowflakeParserDEFERRABLE)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4976)
			p.Match(SnowflakeParserINITIALLY)
		}
		{
			p.SetState(4977)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserDEFERRED || _la == SnowflakeParserIMMEDIATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4978)
			p.Match(SnowflakeParserMATCH)
		}
		{
			p.SetState(4979)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserFULL || _la == SnowflakeParserPARTIAL || _la == SnowflakeParserSIMPLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4980)
			p.Match(SnowflakeParserUPDATE)
		}
		p.SetState(4989)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 530, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4981)
				p.Match(SnowflakeParserCASCADE)
			}


		case 2:
			{
				p.SetState(4982)
				p.Match(SnowflakeParserSET)
			}
			{
				p.SetState(4983)
				p.Match(SnowflakeParserNULL_)
			}


		case 3:
			{
				p.SetState(4984)
				p.Match(SnowflakeParserSET)
			}
			{
				p.SetState(4985)
				p.Match(SnowflakeParserDEFAULT)
			}


		case 4:
			{
				p.SetState(4986)
				p.Match(SnowflakeParserRESTRICT)
			}


		case 5:
			{
				p.SetState(4987)
				p.Match(SnowflakeParserNO)
			}
			{
				p.SetState(4988)
				p.Match(SnowflakeParserACTION)
			}

		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4991)
			p.Match(SnowflakeParserDELETE)
		}
		p.SetState(5000)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 531, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4992)
				p.Match(SnowflakeParserCASCADE)
			}


		case 2:
			{
				p.SetState(4993)
				p.Match(SnowflakeParserSET)
			}
			{
				p.SetState(4994)
				p.Match(SnowflakeParserNULL_)
			}


		case 3:
			{
				p.SetState(4995)
				p.Match(SnowflakeParserSET)
			}
			{
				p.SetState(4996)
				p.Match(SnowflakeParserDEFAULT)
			}


		case 4:
			{
				p.SetState(4997)
				p.Match(SnowflakeParserRESTRICT)
			}


		case 5:
			{
				p.SetState(4998)
				p.Match(SnowflakeParserNO)
			}
			{
				p.SetState(4999)
				p.Match(SnowflakeParserACTION)
			}

		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5002)
			p.Match(SnowflakeParserENABLE)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5003)
			p.Match(SnowflakeParserDISABLE)
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5004)
			p.Match(SnowflakeParserVALIDATE)
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5005)
			p.Match(SnowflakeParserNOVALIDATE)
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5006)
			p.Match(SnowflakeParserRELY)
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5007)
			p.Match(SnowflakeParserNORELY)
		}

	}


	return localctx
}


// IExt_table_column_actionContext is an interface to support dynamic dispatch.
type IExt_table_column_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExt_table_column_actionContext differentiates from other interfaces.
	IsExt_table_column_actionContext()
}

type Ext_table_column_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExt_table_column_actionContext() *Ext_table_column_actionContext {
	var p = new(Ext_table_column_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_ext_table_column_action
	return p
}

func (*Ext_table_column_actionContext) IsExt_table_column_actionContext() {}

func NewExt_table_column_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ext_table_column_actionContext {
	var p = new(Ext_table_column_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_ext_table_column_action

	return p
}

func (s *Ext_table_column_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Ext_table_column_actionContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Ext_table_column_actionContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Ext_table_column_actionContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Ext_table_column_actionContext) Data_type() IData_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Ext_table_column_actionContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Ext_table_column_actionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Ext_table_column_actionContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Ext_table_column_actionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Ext_table_column_actionContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLUMN, 0)
}

func (s *Ext_table_column_actionContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Ext_table_column_actionContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Ext_table_column_actionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Ext_table_column_actionContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Ext_table_column_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ext_table_column_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Ext_table_column_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExt_table_column_action(s)
	}
}

func (s *Ext_table_column_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExt_table_column_action(s)
	}
}

func (s *Ext_table_column_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExt_table_column_action(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Ext_table_column_action() (localctx IExt_table_column_actionContext) {
	this := p
	_ = this

	localctx = NewExt_table_column_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, SnowflakeParserRULE_ext_table_column_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5032)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserADD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5010)
			p.Match(SnowflakeParserADD)
		}
		p.SetState(5012)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(5011)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(5014)
			p.Column_name()
		}
		{
			p.SetState(5015)
			p.Data_type()
		}
		{
			p.SetState(5016)
			p.Match(SnowflakeParserAS)
		}
		{
			p.SetState(5017)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(5018)
			p.expr(0)
		}
		{
			p.SetState(5019)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case SnowflakeParserRENAME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5021)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(5022)
			p.Match(SnowflakeParserCOLUMN)
		}
		{
			p.SetState(5023)
			p.Column_name()
		}
		{
			p.SetState(5024)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(5025)
			p.Column_name()
		}


	case SnowflakeParserDROP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5027)
			p.Match(SnowflakeParserDROP)
		}
		p.SetState(5029)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(5028)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(5031)
			p.Column_list()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IConstraint_actionContext is an interface to support dynamic dispatch.
type IConstraint_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraint_actionContext differentiates from other interfaces.
	IsConstraint_actionContext()
}

type Constraint_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraint_actionContext() *Constraint_actionContext {
	var p = new(Constraint_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_constraint_action
	return p
}

func (*Constraint_actionContext) IsConstraint_actionContext() {}

func NewConstraint_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraint_actionContext {
	var p = new(Constraint_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_constraint_action

	return p
}

func (s *Constraint_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraint_actionContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Constraint_actionContext) Outofline_constraint() IOutofline_constraintContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOutofline_constraintContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOutofline_constraintContext)
}

func (s *Constraint_actionContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Constraint_actionContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCONSTRAINT, 0)
}

func (s *Constraint_actionContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Constraint_actionContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Constraint_actionContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Constraint_actionContext) Alter_modify() IAlter_modifyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_modifyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_modifyContext)
}

func (s *Constraint_actionContext) Column_list_in_parentheses() IColumn_list_in_parenthesesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_list_in_parenthesesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_list_in_parenthesesContext)
}

func (s *Constraint_actionContext) VALIDATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVALIDATE, 0)
}

func (s *Constraint_actionContext) NOVALIDATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOVALIDATE, 0)
}

func (s *Constraint_actionContext) RELY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRELY, 0)
}

func (s *Constraint_actionContext) NORELY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNORELY, 0)
}

func (s *Constraint_actionContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIMARY, 0)
}

func (s *Constraint_actionContext) KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserKEY, 0)
}

func (s *Constraint_actionContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNIQUE, 0)
}

func (s *Constraint_actionContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFOREIGN, 0)
}

func (s *Constraint_actionContext) ENFORCED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENFORCED, 0)
}

func (s *Constraint_actionContext) NOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, 0)
}

func (s *Constraint_actionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Constraint_actionContext) Cascade_restrict() ICascade_restrictContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICascade_restrictContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Constraint_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraint_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Constraint_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterConstraint_action(s)
	}
}

func (s *Constraint_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitConstraint_action(s)
	}
}

func (s *Constraint_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitConstraint_action(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Constraint_action() (localctx IConstraint_actionContext) {
	this := p
	_ = this

	localctx = NewConstraint_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, SnowflakeParserRULE_constraint_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5076)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserADD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5034)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(5035)
			p.Outofline_constraint()
		}


	case SnowflakeParserRENAME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5036)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(5037)
			p.Match(SnowflakeParserCONSTRAINT)
		}
		{
			p.SetState(5038)
			p.Id_()
		}
		{
			p.SetState(5039)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(5040)
			p.Id_()
		}


	case SnowflakeParserALTER, SnowflakeParserMODIFY:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5042)
			p.Alter_modify()
		}
		p.SetState(5050)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserCONSTRAINT:
			{
				p.SetState(5043)
				p.Match(SnowflakeParserCONSTRAINT)
			}
			{
				p.SetState(5044)
				p.Id_()
			}


		case SnowflakeParserPRIMARY:
			{
				p.SetState(5045)
				p.Match(SnowflakeParserPRIMARY)
			}
			{
				p.SetState(5046)
				p.Match(SnowflakeParserKEY)
			}


		case SnowflakeParserUNIQUE:
			{
				p.SetState(5047)
				p.Match(SnowflakeParserUNIQUE)
			}


		case SnowflakeParserFOREIGN:
			{
				p.SetState(5048)
				p.Match(SnowflakeParserFOREIGN)
			}
			{
				p.SetState(5049)
				p.Match(SnowflakeParserKEY)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5052)
			p.Column_list_in_parentheses()
		}
		p.SetState(5057)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENFORCED || _la == SnowflakeParserNOT {
			p.SetState(5054)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserNOT {
				{
					p.SetState(5053)
					p.Match(SnowflakeParserNOT)
				}

			}
			{
				p.SetState(5056)
				p.Match(SnowflakeParserENFORCED)
			}

		}
		{
			p.SetState(5059)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserNOVALIDATE || _la == SnowflakeParserVALIDATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5060)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserNORELY || _la == SnowflakeParserRELY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SnowflakeParserDROP:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5062)
			p.Match(SnowflakeParserDROP)
		}
		p.SetState(5070)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserCONSTRAINT:
			{
				p.SetState(5063)
				p.Match(SnowflakeParserCONSTRAINT)
			}
			{
				p.SetState(5064)
				p.Id_()
			}


		case SnowflakeParserPRIMARY:
			{
				p.SetState(5065)
				p.Match(SnowflakeParserPRIMARY)
			}
			{
				p.SetState(5066)
				p.Match(SnowflakeParserKEY)
			}


		case SnowflakeParserUNIQUE:
			{
				p.SetState(5067)
				p.Match(SnowflakeParserUNIQUE)
			}


		case SnowflakeParserFOREIGN:
			{
				p.SetState(5068)
				p.Match(SnowflakeParserFOREIGN)
			}
			{
				p.SetState(5069)
				p.Match(SnowflakeParserKEY)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5072)
			p.Column_list_in_parentheses()
		}
		p.SetState(5074)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCASCADE || _la == SnowflakeParserRESTRICT {
			{
				p.SetState(5073)
				p.Cascade_restrict()
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IOutofline_constraintContext is an interface to support dynamic dispatch.
type IOutofline_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutofline_constraintContext differentiates from other interfaces.
	IsOutofline_constraintContext()
}

type Outofline_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutofline_constraintContext() *Outofline_constraintContext {
	var p = new(Outofline_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_outofline_constraint
	return p
}

func (*Outofline_constraintContext) IsOutofline_constraintContext() {}

func NewOutofline_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Outofline_constraintContext {
	var p = new(Outofline_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_outofline_constraint

	return p
}

func (s *Outofline_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Outofline_constraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNIQUE, 0)
}

func (s *Outofline_constraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIMARY, 0)
}

func (s *Outofline_constraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserKEY, 0)
}

func (s *Outofline_constraintContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREFERENCES, 0)
}

func (s *Outofline_constraintContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Outofline_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCONSTRAINT, 0)
}

func (s *Outofline_constraintContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Outofline_constraintContext) Constraint_properties() IConstraint_propertiesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraint_propertiesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraint_propertiesContext)
}

func (s *Outofline_constraintContext) AllColumn_list_in_parentheses() []IColumn_list_in_parenthesesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_list_in_parenthesesContext); ok {
			len++
		}
	}

	tst := make([]IColumn_list_in_parenthesesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_list_in_parenthesesContext); ok {
			tst[i] = t.(IColumn_list_in_parenthesesContext)
			i++
		}
	}

	return tst
}

func (s *Outofline_constraintContext) Column_list_in_parentheses(i int) IColumn_list_in_parenthesesContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_list_in_parenthesesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_list_in_parenthesesContext)
}

func (s *Outofline_constraintContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFOREIGN, 0)
}

func (s *Outofline_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Outofline_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Outofline_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterOutofline_constraint(s)
	}
}

func (s *Outofline_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitOutofline_constraint(s)
	}
}

func (s *Outofline_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitOutofline_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Outofline_constraint() (localctx IOutofline_constraintContext) {
	this := p
	_ = this

	localctx = NewOutofline_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, SnowflakeParserRULE_outofline_constraint)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5080)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCONSTRAINT {
		{
			p.SetState(5078)
			p.Match(SnowflakeParserCONSTRAINT)
		}
		{
			p.SetState(5079)
			p.Id_()
		}

	}
	p.SetState(5103)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserUNIQUE:
		{
			p.SetState(5082)
			p.Match(SnowflakeParserUNIQUE)
		}
		p.SetState(5084)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserLR_BRACKET {
			{
				p.SetState(5083)
				p.Column_list_in_parentheses()
			}

		}


	case SnowflakeParserPRIMARY:
		{
			p.SetState(5086)
			p.Match(SnowflakeParserPRIMARY)
		}
		{
			p.SetState(5087)
			p.Match(SnowflakeParserKEY)
		}
		p.SetState(5089)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserLR_BRACKET {
			{
				p.SetState(5088)
				p.Column_list_in_parentheses()
			}

		}


	case SnowflakeParserFOREIGN, SnowflakeParserREFERENCES, SnowflakeParserLR_BRACKET:
		p.SetState(5093)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFOREIGN {
			{
				p.SetState(5091)
				p.Match(SnowflakeParserFOREIGN)
			}
			{
				p.SetState(5092)
				p.Match(SnowflakeParserKEY)
			}

		}
		p.SetState(5096)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserLR_BRACKET {
			{
				p.SetState(5095)
				p.Column_list_in_parentheses()
			}

		}
		{
			p.SetState(5098)
			p.Match(SnowflakeParserREFERENCES)
		}
		{
			p.SetState(5099)
			p.Object_name()
		}
		p.SetState(5101)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserLR_BRACKET {
			{
				p.SetState(5100)
				p.Column_list_in_parentheses()
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(5106)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 549, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5105)
			p.Constraint_properties()
		}


	}



	return localctx
}


// ISearch_optimization_actionContext is an interface to support dynamic dispatch.
type ISearch_optimization_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_optimization_actionContext differentiates from other interfaces.
	IsSearch_optimization_actionContext()
}

type Search_optimization_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_optimization_actionContext() *Search_optimization_actionContext {
	var p = new(Search_optimization_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_search_optimization_action
	return p
}

func (*Search_optimization_actionContext) IsSearch_optimization_actionContext() {}

func NewSearch_optimization_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_optimization_actionContext {
	var p = new(Search_optimization_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_search_optimization_action

	return p
}

func (s *Search_optimization_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_optimization_actionContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Search_optimization_actionContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEARCH, 0)
}

func (s *Search_optimization_actionContext) OPTIMIZATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOPTIMIZATION, 0)
}

func (s *Search_optimization_actionContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Search_optimization_actionContext) AllSearch_method_with_target() []ISearch_method_with_targetContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISearch_method_with_targetContext); ok {
			len++
		}
	}

	tst := make([]ISearch_method_with_targetContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISearch_method_with_targetContext); ok {
			tst[i] = t.(ISearch_method_with_targetContext)
			i++
		}
	}

	return tst
}

func (s *Search_optimization_actionContext) Search_method_with_target(i int) ISearch_method_with_targetContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISearch_method_with_targetContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISearch_method_with_targetContext)
}

func (s *Search_optimization_actionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Search_optimization_actionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Search_optimization_actionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Search_optimization_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_optimization_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Search_optimization_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSearch_optimization_action(s)
	}
}

func (s *Search_optimization_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSearch_optimization_action(s)
	}
}

func (s *Search_optimization_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSearch_optimization_action(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Search_optimization_action() (localctx ISearch_optimization_actionContext) {
	this := p
	_ = this

	localctx = NewSearch_optimization_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, SnowflakeParserRULE_search_optimization_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5136)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserADD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5108)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(5109)
			p.Match(SnowflakeParserSEARCH)
		}
		{
			p.SetState(5110)
			p.Match(SnowflakeParserOPTIMIZATION)
		}
		p.SetState(5120)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserON {
			{
				p.SetState(5111)
				p.Match(SnowflakeParserON)
			}
			{
				p.SetState(5112)
				p.Search_method_with_target()
			}
			p.SetState(5117)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(5113)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(5114)
					p.Search_method_with_target()
				}


				p.SetState(5119)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}


	case SnowflakeParserDROP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5122)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(5123)
			p.Match(SnowflakeParserSEARCH)
		}
		{
			p.SetState(5124)
			p.Match(SnowflakeParserOPTIMIZATION)
		}
		p.SetState(5134)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserON {
			{
				p.SetState(5125)
				p.Match(SnowflakeParserON)
			}
			{
				p.SetState(5126)
				p.Search_method_with_target()
			}
			p.SetState(5131)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(5127)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(5128)
					p.Search_method_with_target()
				}


				p.SetState(5133)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISearch_method_with_targetContext is an interface to support dynamic dispatch.
type ISearch_method_with_targetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_method_with_targetContext differentiates from other interfaces.
	IsSearch_method_with_targetContext()
}

type Search_method_with_targetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_method_with_targetContext() *Search_method_with_targetContext {
	var p = new(Search_method_with_targetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_search_method_with_target
	return p
}

func (*Search_method_with_targetContext) IsSearch_method_with_targetContext() {}

func NewSearch_method_with_targetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_method_with_targetContext {
	var p = new(Search_method_with_targetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_search_method_with_target

	return p
}

func (s *Search_method_with_targetContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_method_with_targetContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Search_method_with_targetContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Search_method_with_targetContext) EQUALITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQUALITY, 0)
}

func (s *Search_method_with_targetContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUBSTRING, 0)
}

func (s *Search_method_with_targetContext) GEO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGEO, 0)
}

func (s *Search_method_with_targetContext) STAR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAR, 0)
}

func (s *Search_method_with_targetContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Search_method_with_targetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_method_with_targetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Search_method_with_targetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSearch_method_with_target(s)
	}
}

func (s *Search_method_with_targetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSearch_method_with_target(s)
	}
}

func (s *Search_method_with_targetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSearch_method_with_target(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Search_method_with_target() (localctx ISearch_method_with_targetContext) {
	this := p
	_ = this

	localctx = NewSearch_method_with_targetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, SnowflakeParserRULE_search_method_with_target)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5138)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserEQUALITY || _la == SnowflakeParserGEO || _la == SnowflakeParserSUBSTRING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5139)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(5142)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserSTAR:
		{
			p.SetState(5140)
			p.Match(SnowflakeParserSTAR)
		}


	case SnowflakeParserCASE, SnowflakeParserCAST, SnowflakeParserDEFAULT, SnowflakeParserDENSE_RANK, SnowflakeParserFALSE, SnowflakeParserINT, SnowflakeParserNTILE, SnowflakeParserNULL_, SnowflakeParserOVER, SnowflakeParserRANK, SnowflakeParserROW_NUMBER, SnowflakeParserSTAGE, SnowflakeParserTRUE, SnowflakeParserBIGINT, SnowflakeParserLISTAGG, SnowflakeParserDOUBLE_QUOTE_ID, SnowflakeParserDOUBLE_QUOTE_BLANK, SnowflakeParserID, SnowflakeParserSTRING, SnowflakeParserDECIMAL, SnowflakeParserFLOAT, SnowflakeParserREAL, SnowflakeParserDOT, SnowflakeParserLR_BRACKET, SnowflakeParserLSB, SnowflakeParserLCB, SnowflakeParserPLUS, SnowflakeParserMINUS:
		{
			p.SetState(5141)
			p.expr(0)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(5144)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IAlter_table_alter_columnContext is an interface to support dynamic dispatch.
type IAlter_table_alter_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_table_alter_columnContext differentiates from other interfaces.
	IsAlter_table_alter_columnContext()
}

type Alter_table_alter_columnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_table_alter_columnContext() *Alter_table_alter_columnContext {
	var p = new(Alter_table_alter_columnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_table_alter_column
	return p
}

func (*Alter_table_alter_columnContext) IsAlter_table_alter_columnContext() {}

func NewAlter_table_alter_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_alter_columnContext {
	var p = new(Alter_table_alter_columnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_table_alter_column

	return p
}

func (s *Alter_table_alter_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_alter_columnContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_table_alter_columnContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Alter_table_alter_columnContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Alter_table_alter_columnContext) Alter_modify() IAlter_modifyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_modifyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_modifyContext)
}

func (s *Alter_table_alter_columnContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Alter_table_alter_columnContext) Alter_column_decl_list() IAlter_column_decl_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_column_decl_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_column_decl_listContext)
}

func (s *Alter_table_alter_columnContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Alter_table_alter_columnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLUMN, 0)
}

func (s *Alter_table_alter_columnContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Alter_table_alter_columnContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Alter_table_alter_columnContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_table_alter_columnContext) MASKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, 0)
}

func (s *Alter_table_alter_columnContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Alter_table_alter_columnContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_table_alter_columnContext) USING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSING, 0)
}

func (s *Alter_table_alter_columnContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_table_alter_columnContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_table_alter_columnContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Alter_table_alter_columnContext) FORCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORCE, 0)
}

func (s *Alter_table_alter_columnContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_table_alter_columnContext) AllColumn_set_tags() []IColumn_set_tagsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_set_tagsContext); ok {
			len++
		}
	}

	tst := make([]IColumn_set_tagsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_set_tagsContext); ok {
			tst[i] = t.(IColumn_set_tagsContext)
			i++
		}
	}

	return tst
}

func (s *Alter_table_alter_columnContext) Column_set_tags(i int) IColumn_set_tagsContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_set_tagsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_set_tagsContext)
}

func (s *Alter_table_alter_columnContext) AllColumn_unset_tags() []IColumn_unset_tagsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_unset_tagsContext); ok {
			len++
		}
	}

	tst := make([]IColumn_unset_tagsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_unset_tagsContext); ok {
			tst[i] = t.(IColumn_unset_tagsContext)
			i++
		}
	}

	return tst
}

func (s *Alter_table_alter_columnContext) Column_unset_tags(i int) IColumn_unset_tagsContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_unset_tagsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_unset_tagsContext)
}

func (s *Alter_table_alter_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_alter_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_table_alter_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_table_alter_column(s)
	}
}

func (s *Alter_table_alter_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_table_alter_column(s)
	}
}

func (s *Alter_table_alter_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_table_alter_column(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_table_alter_column() (localctx IAlter_table_alter_columnContext) {
	this := p
	_ = this

	localctx = NewAlter_table_alter_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, SnowflakeParserRULE_alter_table_alter_column)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5213)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 561, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5146)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5147)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(5148)
			p.Object_name()
		}
		{
			p.SetState(5149)
			p.Alter_modify()
		}
		p.SetState(5155)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserLR_BRACKET:
			{
				p.SetState(5150)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(5151)
				p.Alter_column_decl_list()
			}
			{
				p.SetState(5152)
				p.Match(SnowflakeParserRR_BRACKET)
			}


		case SnowflakeParserCOLUMN, SnowflakeParserINT, SnowflakeParserSTAGE, SnowflakeParserBIGINT, SnowflakeParserDOUBLE_QUOTE_ID, SnowflakeParserDOUBLE_QUOTE_BLANK, SnowflakeParserID:
			{
				p.SetState(5154)
				p.Alter_column_decl_list()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5157)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5158)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(5159)
			p.Object_name()
		}
		{
			p.SetState(5160)
			p.Alter_modify()
		}
		{
			p.SetState(5161)
			p.Match(SnowflakeParserCOLUMN)
		}
		{
			p.SetState(5162)
			p.Column_name()
		}
		{
			p.SetState(5163)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(5164)
			p.Match(SnowflakeParserMASKING)
		}
		{
			p.SetState(5165)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(5166)
			p.Id_()
		}
		p.SetState(5174)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserUSING {
			{
				p.SetState(5167)
				p.Match(SnowflakeParserUSING)
			}
			{
				p.SetState(5168)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(5169)
				p.Column_name()
			}
			{
				p.SetState(5170)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5171)
				p.Column_list()
			}
			{
				p.SetState(5172)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(5177)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFORCE {
			{
				p.SetState(5176)
				p.Match(SnowflakeParserFORCE)
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5179)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5180)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(5181)
			p.Object_name()
		}
		{
			p.SetState(5182)
			p.Alter_modify()
		}
		{
			p.SetState(5183)
			p.Match(SnowflakeParserCOLUMN)
		}
		{
			p.SetState(5184)
			p.Column_name()
		}
		{
			p.SetState(5185)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(5186)
			p.Match(SnowflakeParserMASKING)
		}
		{
			p.SetState(5187)
			p.Match(SnowflakeParserPOLICY)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5189)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5190)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(5191)
			p.Object_name()
		}
		{
			p.SetState(5192)
			p.Alter_modify()
		}
		{
			p.SetState(5193)
			p.Column_set_tags()
		}
		p.SetState(5198)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(5194)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5195)
				p.Column_set_tags()
			}


			p.SetState(5200)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5201)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5202)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(5203)
			p.Object_name()
		}
		{
			p.SetState(5204)
			p.Alter_modify()
		}
		{
			p.SetState(5205)
			p.Column_unset_tags()
		}
		p.SetState(5210)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(5206)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5207)
				p.Column_unset_tags()
			}


			p.SetState(5212)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}


	return localctx
}


// IAlter_column_decl_listContext is an interface to support dynamic dispatch.
type IAlter_column_decl_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_column_decl_listContext differentiates from other interfaces.
	IsAlter_column_decl_listContext()
}

type Alter_column_decl_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_column_decl_listContext() *Alter_column_decl_listContext {
	var p = new(Alter_column_decl_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_column_decl_list
	return p
}

func (*Alter_column_decl_listContext) IsAlter_column_decl_listContext() {}

func NewAlter_column_decl_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_column_decl_listContext {
	var p = new(Alter_column_decl_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_column_decl_list

	return p
}

func (s *Alter_column_decl_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_column_decl_listContext) AllAlter_column_decl() []IAlter_column_declContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlter_column_declContext); ok {
			len++
		}
	}

	tst := make([]IAlter_column_declContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlter_column_declContext); ok {
			tst[i] = t.(IAlter_column_declContext)
			i++
		}
	}

	return tst
}

func (s *Alter_column_decl_listContext) Alter_column_decl(i int) IAlter_column_declContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_column_declContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_column_declContext)
}

func (s *Alter_column_decl_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_column_decl_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_column_decl_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_column_decl_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_column_decl_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_column_decl_list(s)
	}
}

func (s *Alter_column_decl_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_column_decl_list(s)
	}
}

func (s *Alter_column_decl_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_column_decl_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_column_decl_list() (localctx IAlter_column_decl_listContext) {
	this := p
	_ = this

	localctx = NewAlter_column_decl_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, SnowflakeParserRULE_alter_column_decl_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5215)
		p.Alter_column_decl()
	}
	p.SetState(5220)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(5216)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(5217)
			p.Alter_column_decl()
		}


		p.SetState(5222)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IAlter_column_declContext is an interface to support dynamic dispatch.
type IAlter_column_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_column_declContext differentiates from other interfaces.
	IsAlter_column_declContext()
}

type Alter_column_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_column_declContext() *Alter_column_declContext {
	var p = new(Alter_column_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_column_decl
	return p
}

func (*Alter_column_declContext) IsAlter_column_declContext() {}

func NewAlter_column_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_column_declContext {
	var p = new(Alter_column_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_column_decl

	return p
}

func (s *Alter_column_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_column_declContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Alter_column_declContext) Alter_column_opts() IAlter_column_optsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_column_optsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_column_optsContext)
}

func (s *Alter_column_declContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLUMN, 0)
}

func (s *Alter_column_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_column_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_column_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_column_decl(s)
	}
}

func (s *Alter_column_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_column_decl(s)
	}
}

func (s *Alter_column_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_column_decl(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_column_decl() (localctx IAlter_column_declContext) {
	this := p
	_ = this

	localctx = NewAlter_column_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, SnowflakeParserRULE_alter_column_decl)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5224)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOLUMN {
		{
			p.SetState(5223)
			p.Match(SnowflakeParserCOLUMN)
		}

	}
	{
		p.SetState(5226)
		p.Column_name()
	}
	{
		p.SetState(5227)
		p.Alter_column_opts()
	}



	return localctx
}


// IAlter_column_optsContext is an interface to support dynamic dispatch.
type IAlter_column_optsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_column_optsContext differentiates from other interfaces.
	IsAlter_column_optsContext()
}

type Alter_column_optsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_column_optsContext() *Alter_column_optsContext {
	var p = new(Alter_column_optsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_column_opts
	return p
}

func (*Alter_column_optsContext) IsAlter_column_optsContext() {}

func NewAlter_column_optsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_column_optsContext {
	var p = new(Alter_column_optsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_column_opts

	return p
}

func (s *Alter_column_optsContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_column_optsContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Alter_column_optsContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT, 0)
}

func (s *Alter_column_optsContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_column_optsContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Alter_column_optsContext) DOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, 0)
}

func (s *Alter_column_optsContext) NEXTVAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNEXTVAL, 0)
}

func (s *Alter_column_optsContext) NOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, 0)
}

func (s *Alter_column_optsContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, 0)
}

func (s *Alter_column_optsContext) Data_type() IData_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Alter_column_optsContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Alter_column_optsContext) DATA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA, 0)
}

func (s *Alter_column_optsContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_column_optsContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_column_optsContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_column_optsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_column_optsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_column_optsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_column_opts(s)
	}
}

func (s *Alter_column_optsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_column_opts(s)
	}
}

func (s *Alter_column_optsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_column_opts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_column_opts() (localctx IAlter_column_optsContext) {
	this := p
	_ = this

	localctx = NewAlter_column_optsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, SnowflakeParserRULE_alter_column_opts)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5258)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 568, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5229)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(5230)
			p.Match(SnowflakeParserDEFAULT)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5231)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(5232)
			p.Match(SnowflakeParserDEFAULT)
		}
		{
			p.SetState(5233)
			p.Object_name()
		}
		{
			p.SetState(5234)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(5235)
			p.Match(SnowflakeParserNEXTVAL)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(5245)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserNOT, SnowflakeParserSET:
			p.SetState(5238)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserSET {
				{
					p.SetState(5237)
					p.Match(SnowflakeParserSET)
				}

			}
			{
				p.SetState(5240)
				p.Match(SnowflakeParserNOT)
			}
			{
				p.SetState(5241)
				p.Match(SnowflakeParserNULL_)
			}


		case SnowflakeParserDROP:
			{
				p.SetState(5242)
				p.Match(SnowflakeParserDROP)
			}
			{
				p.SetState(5243)
				p.Match(SnowflakeParserNOT)
			}
			{
				p.SetState(5244)
				p.Match(SnowflakeParserNULL_)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(5252)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSET || _la == SnowflakeParserTYPE {
			p.SetState(5249)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserSET {
				{
					p.SetState(5247)
					p.Match(SnowflakeParserSET)
				}
				{
					p.SetState(5248)
					p.Match(SnowflakeParserDATA)
				}

			}
			{
				p.SetState(5251)
				p.Match(SnowflakeParserTYPE)
			}

		}
		{
			p.SetState(5254)
			p.Data_type()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5255)
			p.Comment_clause()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5256)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(5257)
			p.Match(SnowflakeParserCOMMENT)
		}

	}


	return localctx
}


// IColumn_set_tagsContext is an interface to support dynamic dispatch.
type IColumn_set_tagsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_set_tagsContext differentiates from other interfaces.
	IsColumn_set_tagsContext()
}

type Column_set_tagsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_set_tagsContext() *Column_set_tagsContext {
	var p = new(Column_set_tagsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_column_set_tags
	return p
}

func (*Column_set_tagsContext) IsColumn_set_tagsContext() {}

func NewColumn_set_tagsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_set_tagsContext {
	var p = new(Column_set_tagsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_column_set_tags

	return p
}

func (s *Column_set_tagsContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_set_tagsContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Column_set_tagsContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Column_set_tagsContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLUMN, 0)
}

func (s *Column_set_tagsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_set_tagsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_set_tagsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterColumn_set_tags(s)
	}
}

func (s *Column_set_tagsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitColumn_set_tags(s)
	}
}

func (s *Column_set_tagsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitColumn_set_tags(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Column_set_tags() (localctx IColumn_set_tagsContext) {
	this := p
	_ = this

	localctx = NewColumn_set_tagsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, SnowflakeParserRULE_column_set_tags)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5261)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOLUMN {
		{
			p.SetState(5260)
			p.Match(SnowflakeParserCOLUMN)
		}

	}
	{
		p.SetState(5263)
		p.Column_name()
	}
	{
		p.SetState(5264)
		p.Set_tags()
	}



	return localctx
}


// IColumn_unset_tagsContext is an interface to support dynamic dispatch.
type IColumn_unset_tagsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_unset_tagsContext differentiates from other interfaces.
	IsColumn_unset_tagsContext()
}

type Column_unset_tagsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_unset_tagsContext() *Column_unset_tagsContext {
	var p = new(Column_unset_tagsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_column_unset_tags
	return p
}

func (*Column_unset_tagsContext) IsColumn_unset_tagsContext() {}

func NewColumn_unset_tagsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_unset_tagsContext {
	var p = new(Column_unset_tagsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_column_unset_tags

	return p
}

func (s *Column_unset_tagsContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_unset_tagsContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLUMN, 0)
}

func (s *Column_unset_tagsContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Column_unset_tagsContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Column_unset_tagsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_unset_tagsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_unset_tagsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterColumn_unset_tags(s)
	}
}

func (s *Column_unset_tagsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitColumn_unset_tags(s)
	}
}

func (s *Column_unset_tagsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitColumn_unset_tags(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Column_unset_tags() (localctx IColumn_unset_tagsContext) {
	this := p
	_ = this

	localctx = NewColumn_unset_tagsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, SnowflakeParserRULE_column_unset_tags)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5266)
		p.Match(SnowflakeParserCOLUMN)
	}
	{
		p.SetState(5267)
		p.Column_name()
	}
	{
		p.SetState(5268)
		p.Unset_tags()
	}



	return localctx
}


// IAlter_tagContext is an interface to support dynamic dispatch.
type IAlter_tagContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_tagContext differentiates from other interfaces.
	IsAlter_tagContext()
}

type Alter_tagContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_tagContext() *Alter_tagContext {
	var p = new(Alter_tagContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_tag
	return p
}

func (*Alter_tagContext) IsAlter_tagContext() {}

func NewAlter_tagContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_tagContext {
	var p = new(Alter_tagContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_tag

	return p
}

func (s *Alter_tagContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_tagContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_tagContext) TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTAG, 0)
}

func (s *Alter_tagContext) Alter_tag_opts() IAlter_tag_optsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_tag_optsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_tag_optsContext)
}

func (s *Alter_tagContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_tagContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_tagContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_tag(s)
	}
}

func (s *Alter_tagContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_tag(s)
	}
}

func (s *Alter_tagContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_tag(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_tag() (localctx IAlter_tagContext) {
	this := p
	_ = this

	localctx = NewAlter_tagContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, SnowflakeParserRULE_alter_tag)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5270)
		p.Match(SnowflakeParserALTER)
	}
	{
		p.SetState(5271)
		p.Match(SnowflakeParserTAG)
	}
	{
		p.SetState(5272)
		p.Alter_tag_opts()
	}



	return localctx
}


// IAlter_taskContext is an interface to support dynamic dispatch.
type IAlter_taskContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_taskContext differentiates from other interfaces.
	IsAlter_taskContext()
}

type Alter_taskContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_taskContext() *Alter_taskContext {
	var p = new(Alter_taskContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_task
	return p
}

func (*Alter_taskContext) IsAlter_taskContext() {}

func NewAlter_taskContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_taskContext {
	var p = new(Alter_taskContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_task

	return p
}

func (s *Alter_taskContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_taskContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_taskContext) TASK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTASK, 0)
}

func (s *Alter_taskContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_taskContext) RESUME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESUME, 0)
}

func (s *Alter_taskContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND, 0)
}

func (s *Alter_taskContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_taskContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREMOVE, 0)
}

func (s *Alter_taskContext) AFTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAFTER, 0)
}

func (s *Alter_taskContext) String_list() IString_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_listContext)
}

func (s *Alter_taskContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Alter_taskContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_taskContext) WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE, 0)
}

func (s *Alter_taskContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_taskContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_taskContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Alter_taskContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Alter_taskContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEDULE, 0)
}

func (s *Alter_taskContext) ALLOW_OVERLAPPING_EXECUTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOW_OVERLAPPING_EXECUTION, 0)
}

func (s *Alter_taskContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Alter_taskContext) USER_TASK_TIMEOUT_MS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER_TASK_TIMEOUT_MS, 0)
}

func (s *Alter_taskContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Alter_taskContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Alter_taskContext) SUSPEND_TASK_AFTER_NUM_FAILURES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND_TASK_AFTER_NUM_FAILURES, 0)
}

func (s *Alter_taskContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_taskContext) Session_parameter_init_list() ISession_parameter_init_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISession_parameter_init_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISession_parameter_init_listContext)
}

func (s *Alter_taskContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_taskContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_taskContext) Session_parameter_list() ISession_parameter_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISession_parameter_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISession_parameter_listContext)
}

func (s *Alter_taskContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_taskContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_taskContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMODIFY, 0)
}

func (s *Alter_taskContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Alter_taskContext) Sql() ISqlContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISqlContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISqlContext)
}

func (s *Alter_taskContext) WHEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWHEN, 0)
}

func (s *Alter_taskContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Alter_taskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_taskContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_taskContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_task(s)
	}
}

func (s *Alter_taskContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_task(s)
	}
}

func (s *Alter_taskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_task(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_task() (localctx IAlter_taskContext) {
	this := p
	_ = this

	localctx = NewAlter_taskContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, SnowflakeParserRULE_alter_task)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5397)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 592, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5274)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5275)
			p.Match(SnowflakeParserTASK)
		}
		p.SetState(5277)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5276)
				p.If_exists()
			}

		}
		{
			p.SetState(5279)
			p.Id_()
		}
		{
			p.SetState(5280)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserRESUME || _la == SnowflakeParserSUSPEND) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5282)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5283)
			p.Match(SnowflakeParserTASK)
		}
		p.SetState(5285)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5284)
				p.If_exists()
			}

		}
		{
			p.SetState(5287)
			p.Id_()
		}
		{
			p.SetState(5288)
			p.Match(SnowflakeParserREMOVE)
		}
		{
			p.SetState(5289)
			p.Match(SnowflakeParserAFTER)
		}
		{
			p.SetState(5290)
			p.String_list()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5292)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(5293)
			p.Match(SnowflakeParserAFTER)
		}
		{
			p.SetState(5294)
			p.String_list()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5295)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5296)
			p.Match(SnowflakeParserTASK)
		}
		p.SetState(5298)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5297)
				p.If_exists()
			}

		}
		{
			p.SetState(5300)
			p.Id_()
		}
		{
			p.SetState(5301)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(5305)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserWAREHOUSE {
			{
				p.SetState(5302)
				p.Match(SnowflakeParserWAREHOUSE)
			}
			{
				p.SetState(5303)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(5304)
				p.String_()
			}

		}
		p.SetState(5310)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSCHEDULE {
			{
				p.SetState(5307)
				p.Match(SnowflakeParserSCHEDULE)
			}
			{
				p.SetState(5308)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(5309)
				p.String_()
			}

		}
		p.SetState(5315)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserALLOW_OVERLAPPING_EXECUTION {
			{
				p.SetState(5312)
				p.Match(SnowflakeParserALLOW_OVERLAPPING_EXECUTION)
			}
			{
				p.SetState(5313)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(5314)
				p.True_false()
			}

		}
		p.SetState(5320)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 576, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5317)
				p.Match(SnowflakeParserUSER_TASK_TIMEOUT_MS)
			}
			{
				p.SetState(5318)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(5319)
				p.Num()
			}


		}
		p.SetState(5325)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 577, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5322)
				p.Match(SnowflakeParserSUSPEND_TASK_AFTER_NUM_FAILURES)
			}
			{
				p.SetState(5323)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(5324)
				p.Num()
			}


		}
		p.SetState(5328)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 578, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5327)
				p.Comment_clause()
			}


		}
		p.SetState(5331)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (int64((_la - 4)) & ^0x3f) == 0 && ((int64(1) << (_la - 4)) & -4611686018426208255) != 0 || (int64((_la - 95)) & ^0x3f) == 0 && ((int64(1) << (_la - 95)) & 281337537757187) != 0 || (int64((_la - 199)) & ^0x3f) == 0 && ((int64(1) << (_la - 199)) & 1157988054187638833) != 0 || (int64((_la - 265)) & ^0x3f) == 0 && ((int64(1) << (_la - 265)) & 131075) != 0 || (int64((_la - 329)) & ^0x3f) == 0 && ((int64(1) << (_la - 329)) & 6629300850512625667) != 0 || (int64((_la - 393)) & ^0x3f) == 0 && ((int64(1) << (_la - 393)) & 108086392130633729) != 0 || (int64((_la - 457)) & ^0x3f) == 0 && ((int64(1) << (_la - 457)) & 2101249) != 0 || (int64((_la - 571)) & ^0x3f) == 0 && ((int64(1) << (_la - 571)) & 1407374889844801) != 0 || (int64((_la - 666)) & ^0x3f) == 0 && ((int64(1) << (_la - 666)) & 1152921779484753923) != 0 || (int64((_la - 761)) & ^0x3f) == 0 && ((int64(1) << (_la - 761)) & 422221055002625) != 0 || (int64((_la - 833)) & ^0x3f) == 0 && ((int64(1) << (_la - 833)) & -4580538228402026495) != 0 || (int64((_la - 915)) & ^0x3f) == 0 && ((int64(1) << (_la - 915)) & 6917529238102867969) != 0 || _la == SnowflakeParserDEFAULT_DDL_COLLATION {
			{
				p.SetState(5330)
				p.Session_parameter_init_list()
			}

		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5333)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5334)
			p.Match(SnowflakeParserTASK)
		}
		p.SetState(5336)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5335)
				p.If_exists()
			}

		}
		{
			p.SetState(5338)
			p.Id_()
		}
		{
			p.SetState(5339)
			p.Match(SnowflakeParserUNSET)
		}
		p.SetState(5341)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserWAREHOUSE {
			{
				p.SetState(5340)
				p.Match(SnowflakeParserWAREHOUSE)
			}

		}
		p.SetState(5344)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSCHEDULE {
			{
				p.SetState(5343)
				p.Match(SnowflakeParserSCHEDULE)
			}

		}
		p.SetState(5347)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserALLOW_OVERLAPPING_EXECUTION {
			{
				p.SetState(5346)
				p.Match(SnowflakeParserALLOW_OVERLAPPING_EXECUTION)
			}

		}
		p.SetState(5350)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 584, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5349)
				p.Match(SnowflakeParserUSER_TASK_TIMEOUT_MS)
			}


		}
		p.SetState(5353)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 585, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5352)
				p.Match(SnowflakeParserSUSPEND_TASK_AFTER_NUM_FAILURES)
			}


		}
		p.SetState(5356)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 586, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5355)
				p.Match(SnowflakeParserCOMMENT)
			}


		}
		p.SetState(5359)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (int64((_la - 4)) & ^0x3f) == 0 && ((int64(1) << (_la - 4)) & -4611686018426208255) != 0 || (int64((_la - 95)) & ^0x3f) == 0 && ((int64(1) << (_la - 95)) & 281337537757187) != 0 || (int64((_la - 199)) & ^0x3f) == 0 && ((int64(1) << (_la - 199)) & 1157988054187638833) != 0 || (int64((_la - 265)) & ^0x3f) == 0 && ((int64(1) << (_la - 265)) & 131075) != 0 || (int64((_la - 329)) & ^0x3f) == 0 && ((int64(1) << (_la - 329)) & 6629300850512625667) != 0 || (int64((_la - 393)) & ^0x3f) == 0 && ((int64(1) << (_la - 393)) & 108086392130633729) != 0 || (int64((_la - 457)) & ^0x3f) == 0 && ((int64(1) << (_la - 457)) & 2101249) != 0 || (int64((_la - 571)) & ^0x3f) == 0 && ((int64(1) << (_la - 571)) & 1407374889844801) != 0 || (int64((_la - 666)) & ^0x3f) == 0 && ((int64(1) << (_la - 666)) & 1152921779484753923) != 0 || (int64((_la - 761)) & ^0x3f) == 0 && ((int64(1) << (_la - 761)) & 422221055002625) != 0 || (int64((_la - 833)) & ^0x3f) == 0 && ((int64(1) << (_la - 833)) & -4580538228402026495) != 0 || (int64((_la - 915)) & ^0x3f) == 0 && ((int64(1) << (_la - 915)) & 6917529238102867969) != 0 || _la == SnowflakeParserDEFAULT_DDL_COLLATION {
			{
				p.SetState(5358)
				p.Session_parameter_list()
			}

		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5361)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5362)
			p.Match(SnowflakeParserTASK)
		}
		p.SetState(5364)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5363)
				p.If_exists()
			}

		}
		{
			p.SetState(5366)
			p.Id_()
		}
		{
			p.SetState(5367)
			p.Set_tags()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5369)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5370)
			p.Match(SnowflakeParserTASK)
		}
		p.SetState(5372)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5371)
				p.If_exists()
			}

		}
		{
			p.SetState(5374)
			p.Id_()
		}
		{
			p.SetState(5375)
			p.Unset_tags()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5377)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5378)
			p.Match(SnowflakeParserTASK)
		}
		p.SetState(5380)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5379)
				p.If_exists()
			}

		}
		{
			p.SetState(5382)
			p.Id_()
		}
		{
			p.SetState(5383)
			p.Match(SnowflakeParserMODIFY)
		}
		{
			p.SetState(5384)
			p.Match(SnowflakeParserAS)
		}
		{
			p.SetState(5385)
			p.Sql()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5387)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5388)
			p.Match(SnowflakeParserTASK)
		}
		p.SetState(5390)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5389)
				p.If_exists()
			}

		}
		{
			p.SetState(5392)
			p.Id_()
		}
		{
			p.SetState(5393)
			p.Match(SnowflakeParserMODIFY)
		}
		{
			p.SetState(5394)
			p.Match(SnowflakeParserWHEN)
		}
		{
			p.SetState(5395)
			p.expr(0)
		}

	}


	return localctx
}


// IAlter_userContext is an interface to support dynamic dispatch.
type IAlter_userContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_userContext differentiates from other interfaces.
	IsAlter_userContext()
}

type Alter_userContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_userContext() *Alter_userContext {
	var p = new(Alter_userContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_user
	return p
}

func (*Alter_userContext) IsAlter_userContext() {}

func NewAlter_userContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_userContext {
	var p = new(Alter_userContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_user

	return p
}

func (s *Alter_userContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_userContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_userContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Alter_userContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_userContext) Alter_user_opts() IAlter_user_optsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_user_optsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_user_optsContext)
}

func (s *Alter_userContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_userContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_userContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_userContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_user(s)
	}
}

func (s *Alter_userContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_user(s)
	}
}

func (s *Alter_userContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_user(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_user() (localctx IAlter_userContext) {
	this := p
	_ = this

	localctx = NewAlter_userContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, SnowflakeParserRULE_alter_user)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5399)
		p.Match(SnowflakeParserALTER)
	}
	{
		p.SetState(5400)
		p.Match(SnowflakeParserUSER)
	}
	p.SetState(5402)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(5401)
			p.If_exists()
		}

	}
	{
		p.SetState(5404)
		p.Id_()
	}
	{
		p.SetState(5405)
		p.Alter_user_opts()
	}



	return localctx
}


// IAlter_viewContext is an interface to support dynamic dispatch.
type IAlter_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_viewContext differentiates from other interfaces.
	IsAlter_viewContext()
}

type Alter_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_viewContext() *Alter_viewContext {
	var p = new(Alter_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_view
	return p
}

func (*Alter_viewContext) IsAlter_viewContext() {}

func NewAlter_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_viewContext {
	var p = new(Alter_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_view

	return p
}

func (s *Alter_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_viewContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Alter_viewContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_viewContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_viewContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_viewContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_viewContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_viewContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_viewContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_viewContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_viewContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_viewContext) SECURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURE, 0)
}

func (s *Alter_viewContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_viewContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_viewContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Alter_viewContext) AllROW() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserROW)
}

func (s *Alter_viewContext) ROW(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, i)
}

func (s *Alter_viewContext) AllACCESS() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserACCESS)
}

func (s *Alter_viewContext) ACCESS(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, i)
}

func (s *Alter_viewContext) AllPOLICY() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserPOLICY)
}

func (s *Alter_viewContext) POLICY(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, i)
}

func (s *Alter_viewContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Alter_viewContext) Column_list_in_parentheses() IColumn_list_in_parenthesesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_list_in_parenthesesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_list_in_parenthesesContext)
}

func (s *Alter_viewContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Alter_viewContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, 0)
}

func (s *Alter_viewContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *Alter_viewContext) POLICIES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICIES, 0)
}

func (s *Alter_viewContext) Alter_modify() IAlter_modifyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_modifyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_modifyContext)
}

func (s *Alter_viewContext) MASKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, 0)
}

func (s *Alter_viewContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLUMN, 0)
}

func (s *Alter_viewContext) USING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSING, 0)
}

func (s *Alter_viewContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Alter_viewContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Alter_viewContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Alter_viewContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Alter_viewContext) FORCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORCE, 0)
}

func (s *Alter_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_view(s)
	}
}

func (s *Alter_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_view(s)
	}
}

func (s *Alter_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_view(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_view() (localctx IAlter_viewContext) {
	this := p
	_ = this

	localctx = NewAlter_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, SnowflakeParserRULE_alter_view)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5575)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 608, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5407)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5408)
			p.Match(SnowflakeParserVIEW)
		}
		p.SetState(5410)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5409)
				p.If_exists()
			}

		}
		{
			p.SetState(5412)
			p.Id_()
		}
		{
			p.SetState(5413)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(5414)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(5415)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5417)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5418)
			p.Match(SnowflakeParserVIEW)
		}
		p.SetState(5420)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5419)
				p.If_exists()
			}

		}
		{
			p.SetState(5422)
			p.Id_()
		}
		{
			p.SetState(5423)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(5424)
			p.Comment_clause()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5426)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5427)
			p.Match(SnowflakeParserVIEW)
		}
		p.SetState(5429)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5428)
				p.If_exists()
			}

		}
		{
			p.SetState(5431)
			p.Id_()
		}
		{
			p.SetState(5432)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(5433)
			p.Match(SnowflakeParserCOMMENT)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5435)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5436)
			p.Match(SnowflakeParserVIEW)
		}
		{
			p.SetState(5437)
			p.Id_()
		}
		{
			p.SetState(5438)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(5439)
			p.Match(SnowflakeParserSECURE)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5441)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5442)
			p.Match(SnowflakeParserVIEW)
		}
		{
			p.SetState(5443)
			p.Id_()
		}
		{
			p.SetState(5444)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(5445)
			p.Match(SnowflakeParserSECURE)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5447)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5448)
			p.Match(SnowflakeParserVIEW)
		}
		p.SetState(5450)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5449)
				p.If_exists()
			}

		}
		{
			p.SetState(5452)
			p.Id_()
		}
		{
			p.SetState(5453)
			p.Set_tags()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5455)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5456)
			p.Match(SnowflakeParserVIEW)
		}
		p.SetState(5458)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5457)
				p.If_exists()
			}

		}
		{
			p.SetState(5460)
			p.Id_()
		}
		{
			p.SetState(5461)
			p.Unset_tags()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5463)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5464)
			p.Match(SnowflakeParserVIEW)
		}
		p.SetState(5466)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5465)
				p.If_exists()
			}

		}
		{
			p.SetState(5468)
			p.Id_()
		}
		{
			p.SetState(5469)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(5470)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(5471)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(5472)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(5473)
			p.Id_()
		}
		{
			p.SetState(5474)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(5475)
			p.Column_list_in_parentheses()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5477)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5478)
			p.Match(SnowflakeParserVIEW)
		}
		p.SetState(5480)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5479)
				p.If_exists()
			}

		}
		{
			p.SetState(5482)
			p.Id_()
		}
		{
			p.SetState(5483)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(5484)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(5485)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(5486)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(5487)
			p.Id_()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5489)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5490)
			p.Match(SnowflakeParserVIEW)
		}
		p.SetState(5492)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5491)
				p.If_exists()
			}

		}
		{
			p.SetState(5494)
			p.Id_()
		}
		{
			p.SetState(5495)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(5496)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(5497)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(5498)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(5499)
			p.Id_()
		}
		{
			p.SetState(5500)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(5501)
			p.Column_list_in_parentheses()
		}
		{
			p.SetState(5502)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(5503)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(5504)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(5505)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(5506)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(5507)
			p.Id_()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5509)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5510)
			p.Match(SnowflakeParserVIEW)
		}
		p.SetState(5512)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5511)
				p.If_exists()
			}

		}
		{
			p.SetState(5514)
			p.Id_()
		}
		{
			p.SetState(5515)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(5516)
			p.Match(SnowflakeParserALL)
		}
		{
			p.SetState(5517)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(5518)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(5519)
			p.Match(SnowflakeParserPOLICIES)
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5521)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5522)
			p.Match(SnowflakeParserVIEW)
		}
		{
			p.SetState(5523)
			p.Id_()
		}
		{
			p.SetState(5524)
			p.Alter_modify()
		}
		p.SetState(5526)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(5525)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(5528)
			p.Id_()
		}
		{
			p.SetState(5529)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(5530)
			p.Match(SnowflakeParserMASKING)
		}
		{
			p.SetState(5531)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(5532)
			p.Id_()
		}
		p.SetState(5540)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserUSING {
			{
				p.SetState(5533)
				p.Match(SnowflakeParserUSING)
			}
			{
				p.SetState(5534)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(5535)
				p.Column_name()
			}
			{
				p.SetState(5536)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5537)
				p.Column_list()
			}
			{
				p.SetState(5538)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(5543)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFORCE {
			{
				p.SetState(5542)
				p.Match(SnowflakeParserFORCE)
			}

		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5545)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5546)
			p.Match(SnowflakeParserVIEW)
		}
		{
			p.SetState(5547)
			p.Id_()
		}
		{
			p.SetState(5548)
			p.Alter_modify()
		}
		p.SetState(5550)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(5549)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(5552)
			p.Id_()
		}
		{
			p.SetState(5553)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(5554)
			p.Match(SnowflakeParserMASKING)
		}
		{
			p.SetState(5555)
			p.Match(SnowflakeParserPOLICY)
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(5557)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5558)
			p.Match(SnowflakeParserVIEW)
		}
		{
			p.SetState(5559)
			p.Id_()
		}
		{
			p.SetState(5560)
			p.Alter_modify()
		}
		p.SetState(5562)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOLUMN {
			{
				p.SetState(5561)
				p.Match(SnowflakeParserCOLUMN)
			}

		}
		{
			p.SetState(5564)
			p.Id_()
		}
		{
			p.SetState(5565)
			p.Set_tags()
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(5567)
			p.Match(SnowflakeParserALTER)
		}
		{
			p.SetState(5568)
			p.Match(SnowflakeParserVIEW)
		}
		{
			p.SetState(5569)
			p.Id_()
		}
		{
			p.SetState(5570)
			p.Alter_modify()
		}
		{
			p.SetState(5571)
			p.Match(SnowflakeParserCOLUMN)
		}
		{
			p.SetState(5572)
			p.Id_()
		}
		{
			p.SetState(5573)
			p.Unset_tags()
		}

	}


	return localctx
}


// IAlter_modifyContext is an interface to support dynamic dispatch.
type IAlter_modifyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_modifyContext differentiates from other interfaces.
	IsAlter_modifyContext()
}

type Alter_modifyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_modifyContext() *Alter_modifyContext {
	var p = new(Alter_modifyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_modify
	return p
}

func (*Alter_modifyContext) IsAlter_modifyContext() {}

func NewAlter_modifyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_modifyContext {
	var p = new(Alter_modifyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_modify

	return p
}

func (s *Alter_modifyContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_modifyContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_modifyContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMODIFY, 0)
}

func (s *Alter_modifyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_modifyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_modifyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_modify(s)
	}
}

func (s *Alter_modifyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_modify(s)
	}
}

func (s *Alter_modifyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_modify(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_modify() (localctx IAlter_modifyContext) {
	this := p
	_ = this

	localctx = NewAlter_modifyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, SnowflakeParserRULE_alter_modify)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5577)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserALTER || _la == SnowflakeParserMODIFY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IAlter_warehouseContext is an interface to support dynamic dispatch.
type IAlter_warehouseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_warehouseContext differentiates from other interfaces.
	IsAlter_warehouseContext()
}

type Alter_warehouseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_warehouseContext() *Alter_warehouseContext {
	var p = new(Alter_warehouseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_warehouse
	return p
}

func (*Alter_warehouseContext) IsAlter_warehouseContext() {}

func NewAlter_warehouseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_warehouseContext {
	var p = new(Alter_warehouseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_warehouse

	return p
}

func (s *Alter_warehouseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_warehouseContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALTER, 0)
}

func (s *Alter_warehouseContext) WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE, 0)
}

func (s *Alter_warehouseContext) Alter_warehouse_opts() IAlter_warehouse_optsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_warehouse_optsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_warehouse_optsContext)
}

func (s *Alter_warehouseContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_warehouseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_warehouseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_warehouseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_warehouse(s)
	}
}

func (s *Alter_warehouseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_warehouse(s)
	}
}

func (s *Alter_warehouseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_warehouse(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_warehouse() (localctx IAlter_warehouseContext) {
	this := p
	_ = this

	localctx = NewAlter_warehouseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, SnowflakeParserRULE_alter_warehouse)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5579)
		p.Match(SnowflakeParserALTER)
	}
	{
		p.SetState(5580)
		p.Match(SnowflakeParserWAREHOUSE)
	}
	p.SetState(5582)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(5581)
			p.If_exists()
		}

	}
	{
		p.SetState(5584)
		p.Alter_warehouse_opts()
	}



	return localctx
}


// IAlter_connection_optsContext is an interface to support dynamic dispatch.
type IAlter_connection_optsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_connection_optsContext differentiates from other interfaces.
	IsAlter_connection_optsContext()
}

type Alter_connection_optsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_connection_optsContext() *Alter_connection_optsContext {
	var p = new(Alter_connection_optsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_connection_opts
	return p
}

func (*Alter_connection_optsContext) IsAlter_connection_optsContext() {}

func NewAlter_connection_optsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_connection_optsContext {
	var p = new(Alter_connection_optsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_connection_opts

	return p
}

func (s *Alter_connection_optsContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_connection_optsContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_connection_optsContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_connection_optsContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE, 0)
}

func (s *Alter_connection_optsContext) FAILOVER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFAILOVER, 0)
}

func (s *Alter_connection_optsContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_connection_optsContext) ACCOUNTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNTS, 0)
}

func (s *Alter_connection_optsContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserDOT)
}

func (s *Alter_connection_optsContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, i)
}

func (s *Alter_connection_optsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_connection_optsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_connection_optsContext) Ignore_edition_check() IIgnore_edition_checkContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIgnore_edition_checkContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIgnore_edition_checkContext)
}

func (s *Alter_connection_optsContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISABLE, 0)
}

func (s *Alter_connection_optsContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIMARY, 0)
}

func (s *Alter_connection_optsContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_connection_optsContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_connection_optsContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_connection_optsContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_connection_optsContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_connection_optsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_connection_optsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_connection_optsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_connection_opts(s)
	}
}

func (s *Alter_connection_optsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_connection_opts(s)
	}
}

func (s *Alter_connection_optsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_connection_opts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_connection_opts() (localctx IAlter_connection_optsContext) {
	this := p
	_ = this

	localctx = NewAlter_connection_optsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, SnowflakeParserRULE_alter_connection_opts)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5639)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 615, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5586)
			p.Id_()
		}
		{
			p.SetState(5587)
			p.Match(SnowflakeParserENABLE)
		}
		{
			p.SetState(5588)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(5589)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(5590)
			p.Match(SnowflakeParserACCOUNTS)
		}
		{
			p.SetState(5591)
			p.Id_()
		}
		{
			p.SetState(5592)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(5593)
			p.Id_()
		}
		p.SetState(5601)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(5594)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5595)
				p.Id_()
			}
			{
				p.SetState(5596)
				p.Match(SnowflakeParserDOT)
			}
			{
				p.SetState(5597)
				p.Id_()
			}


			p.SetState(5603)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(5605)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIGNORE {
			{
				p.SetState(5604)
				p.Ignore_edition_check()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5607)
			p.Id_()
		}
		{
			p.SetState(5608)
			p.Match(SnowflakeParserDISABLE)
		}
		{
			p.SetState(5609)
			p.Match(SnowflakeParserFAILOVER)
		}
		p.SetState(5620)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTO {
			{
				p.SetState(5610)
				p.Match(SnowflakeParserTO)
			}
			{
				p.SetState(5611)
				p.Match(SnowflakeParserACCOUNTS)
			}
			{
				p.SetState(5612)
				p.Id_()
			}
			{
				p.SetState(5613)
				p.Match(SnowflakeParserDOT)
			}
			{
				p.SetState(5614)
				p.Id_()
			}

			{
				p.SetState(5615)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5616)
				p.Id_()
			}
			{
				p.SetState(5617)
				p.Match(SnowflakeParserDOT)
			}
			{
				p.SetState(5618)
				p.Id_()
			}


		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5622)
			p.Id_()
		}
		{
			p.SetState(5623)
			p.Match(SnowflakeParserPRIMARY)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(5626)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5625)
				p.If_exists()
			}

		}
		{
			p.SetState(5628)
			p.Id_()
		}
		{
			p.SetState(5629)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(5630)
			p.Comment_clause()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(5633)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5632)
				p.If_exists()
			}

		}
		{
			p.SetState(5635)
			p.Id_()
		}
		{
			p.SetState(5636)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(5637)
			p.Match(SnowflakeParserCOMMENT)
		}

	}


	return localctx
}


// IAlter_user_optsContext is an interface to support dynamic dispatch.
type IAlter_user_optsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_user_optsContext differentiates from other interfaces.
	IsAlter_user_optsContext()
}

type Alter_user_optsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_user_optsContext() *Alter_user_optsContext {
	var p = new(Alter_user_optsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_user_opts
	return p
}

func (*Alter_user_optsContext) IsAlter_user_optsContext() {}

func NewAlter_user_optsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_user_optsContext {
	var p = new(Alter_user_optsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_user_opts

	return p
}

func (s *Alter_user_optsContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_user_optsContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_user_optsContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_user_optsContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_user_optsContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_user_optsContext) RESET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESET, 0)
}

func (s *Alter_user_optsContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPASSWORD, 0)
}

func (s *Alter_user_optsContext) ABORT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserABORT, 0)
}

func (s *Alter_user_optsContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *Alter_user_optsContext) QUERIES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserQUERIES, 0)
}

func (s *Alter_user_optsContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Alter_user_optsContext) DELEGATED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDELEGATED, 0)
}

func (s *Alter_user_optsContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTHORIZATION, 0)
}

func (s *Alter_user_optsContext) OF() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOF, 0)
}

func (s *Alter_user_optsContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, 0)
}

func (s *Alter_user_optsContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Alter_user_optsContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Alter_user_optsContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREMOVE, 0)
}

func (s *Alter_user_optsContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *Alter_user_optsContext) AUTHORIZATIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTHORIZATIONS, 0)
}

func (s *Alter_user_optsContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_user_optsContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_user_optsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_user_optsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_user_optsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_user_opts(s)
	}
}

func (s *Alter_user_optsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_user_opts(s)
	}
}

func (s *Alter_user_optsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_user_opts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_user_opts() (localctx IAlter_user_optsContext) {
	this := p
	_ = this

	localctx = NewAlter_user_optsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, SnowflakeParserRULE_alter_user_opts)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5675)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserRENAME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5641)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(5642)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(5643)
			p.Id_()
		}


	case SnowflakeParserRESET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5644)
			p.Match(SnowflakeParserRESET)
		}
		{
			p.SetState(5645)
			p.Match(SnowflakeParserPASSWORD)
		}


	case SnowflakeParserABORT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5646)
			p.Match(SnowflakeParserABORT)
		}
		{
			p.SetState(5647)
			p.Match(SnowflakeParserALL)
		}
		{
			p.SetState(5648)
			p.Match(SnowflakeParserQUERIES)
		}


	case SnowflakeParserADD:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5649)
			p.Match(SnowflakeParserADD)
		}
		{
			p.SetState(5650)
			p.Match(SnowflakeParserDELEGATED)
		}
		{
			p.SetState(5651)
			p.Match(SnowflakeParserAUTHORIZATION)
		}
		{
			p.SetState(5652)
			p.Match(SnowflakeParserOF)
		}
		{
			p.SetState(5653)
			p.Match(SnowflakeParserROLE)
		}
		{
			p.SetState(5654)
			p.Id_()
		}
		{
			p.SetState(5655)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(5656)
			p.Match(SnowflakeParserSECURITY)
		}
		{
			p.SetState(5657)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(5658)
			p.Id_()
		}


	case SnowflakeParserREMOVE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5660)
			p.Match(SnowflakeParserREMOVE)
		}
		{
			p.SetState(5661)
			p.Match(SnowflakeParserDELEGATED)
		}
		p.SetState(5667)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserAUTHORIZATION:
			{
				p.SetState(5662)
				p.Match(SnowflakeParserAUTHORIZATION)
			}
			{
				p.SetState(5663)
				p.Match(SnowflakeParserOF)
			}
			{
				p.SetState(5664)
				p.Match(SnowflakeParserROLE)
			}
			{
				p.SetState(5665)
				p.Id_()
			}


		case SnowflakeParserAUTHORIZATIONS:
			{
				p.SetState(5666)
				p.Match(SnowflakeParserAUTHORIZATIONS)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5669)
			p.Match(SnowflakeParserFROM)
		}
		{
			p.SetState(5670)
			p.Match(SnowflakeParserSECURITY)
		}
		{
			p.SetState(5671)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(5672)
			p.Id_()
		}


	case SnowflakeParserSET:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5673)
			p.Set_tags()
		}


	case SnowflakeParserUNSET:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5674)
			p.Unset_tags()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAlter_tag_optsContext is an interface to support dynamic dispatch.
type IAlter_tag_optsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_tag_optsContext differentiates from other interfaces.
	IsAlter_tag_optsContext()
}

type Alter_tag_optsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_tag_optsContext() *Alter_tag_optsContext {
	var p = new(Alter_tag_optsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_tag_opts
	return p
}

func (*Alter_tag_optsContext) IsAlter_tag_optsContext() {}

func NewAlter_tag_optsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_tag_optsContext {
	var p = new(Alter_tag_optsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_tag_opts

	return p
}

func (s *Alter_tag_optsContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_tag_optsContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_tag_optsContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_tag_optsContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_tag_optsContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_tag_optsContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_tag_optsContext) ALLOWED_VALUES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_VALUES, 0)
}

func (s *Alter_tag_optsContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Alter_tag_optsContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Alter_tag_optsContext) ADD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADD, 0)
}

func (s *Alter_tag_optsContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Alter_tag_optsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_tag_optsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_tag_optsContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_tag_optsContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_tag_optsContext) AllMASKING() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserMASKING)
}

func (s *Alter_tag_optsContext) MASKING(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, i)
}

func (s *Alter_tag_optsContext) AllPOLICY() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserPOLICY)
}

func (s *Alter_tag_optsContext) POLICY(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, i)
}

func (s *Alter_tag_optsContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_tag_optsContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_tag_optsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_tag_optsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_tag_optsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_tag_opts(s)
	}
}

func (s *Alter_tag_optsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_tag_opts(s)
	}
}

func (s *Alter_tag_optsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_tag_opts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_tag_opts() (localctx IAlter_tag_optsContext) {
	this := p
	_ = this

	localctx = NewAlter_tag_optsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, SnowflakeParserRULE_alter_tag_opts)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5745)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 625, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5678)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5677)
				p.If_exists()
			}

		}
		{
			p.SetState(5680)
			p.Id_()
		}
		{
			p.SetState(5681)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(5682)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(5683)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5686)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5685)
				p.If_exists()
			}

		}
		{
			p.SetState(5688)
			p.Id_()
		}
		{
			p.SetState(5689)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserADD || _la == SnowflakeParserDROP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5690)
			p.Match(SnowflakeParserALLOWED_VALUES)
		}
		{
			p.SetState(5691)
			p.String_()
		}
		p.SetState(5696)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(5692)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5693)
				p.String_()
			}


			p.SetState(5698)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5699)
			p.Id_()
		}
		{
			p.SetState(5700)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(5701)
			p.Match(SnowflakeParserALLOWED_VALUES)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5703)
			p.Id_()
		}
		{
			p.SetState(5704)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(5705)
			p.Match(SnowflakeParserMASKING)
		}
		{
			p.SetState(5706)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(5707)
			p.Id_()
		}
		p.SetState(5714)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(5708)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5709)
				p.Match(SnowflakeParserMASKING)
			}
			{
				p.SetState(5710)
				p.Match(SnowflakeParserPOLICY)
			}
			{
				p.SetState(5711)
				p.Id_()
			}


			p.SetState(5716)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5717)
			p.Id_()
		}
		{
			p.SetState(5718)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(5719)
			p.Match(SnowflakeParserMASKING)
		}
		{
			p.SetState(5720)
			p.Match(SnowflakeParserPOLICY)
		}
		{
			p.SetState(5721)
			p.Id_()
		}
		p.SetState(5728)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(5722)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5723)
				p.Match(SnowflakeParserMASKING)
			}
			{
				p.SetState(5724)
				p.Match(SnowflakeParserPOLICY)
			}
			{
				p.SetState(5725)
				p.Id_()
			}


			p.SetState(5730)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(5732)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5731)
				p.If_exists()
			}

		}
		{
			p.SetState(5734)
			p.Id_()
		}
		{
			p.SetState(5735)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(5736)
			p.Comment_clause()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(5739)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5738)
				p.If_exists()
			}

		}
		{
			p.SetState(5741)
			p.Id_()
		}
		{
			p.SetState(5742)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(5743)
			p.Match(SnowflakeParserCOMMENT)
		}

	}


	return localctx
}


// IAlter_network_policy_optsContext is an interface to support dynamic dispatch.
type IAlter_network_policy_optsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_network_policy_optsContext differentiates from other interfaces.
	IsAlter_network_policy_optsContext()
}

type Alter_network_policy_optsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_network_policy_optsContext() *Alter_network_policy_optsContext {
	var p = new(Alter_network_policy_optsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_network_policy_opts
	return p
}

func (*Alter_network_policy_optsContext) IsAlter_network_policy_optsContext() {}

func NewAlter_network_policy_optsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_network_policy_optsContext {
	var p = new(Alter_network_policy_optsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_network_policy_opts

	return p
}

func (s *Alter_network_policy_optsContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_network_policy_optsContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_network_policy_optsContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_network_policy_optsContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_network_policy_optsContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_network_policy_optsContext) ALLOWED_IP_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_IP_LIST, 0)
}

func (s *Alter_network_policy_optsContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Alter_network_policy_optsContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Alter_network_policy_optsContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Alter_network_policy_optsContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Alter_network_policy_optsContext) AllString_list() []IString_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IString_listContext); ok {
			len++
		}
	}

	tst := make([]IString_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IString_listContext); ok {
			tst[i] = t.(IString_listContext)
			i++
		}
	}

	return tst
}

func (s *Alter_network_policy_optsContext) String_list(i int) IString_listContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_listContext)
}

func (s *Alter_network_policy_optsContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Alter_network_policy_optsContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Alter_network_policy_optsContext) BLOCKED_IP_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBLOCKED_IP_LIST, 0)
}

func (s *Alter_network_policy_optsContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Alter_network_policy_optsContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_network_policy_optsContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Alter_network_policy_optsContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_network_policy_optsContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_network_policy_optsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_network_policy_optsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_network_policy_optsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_network_policy_opts(s)
	}
}

func (s *Alter_network_policy_optsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_network_policy_opts(s)
	}
}

func (s *Alter_network_policy_optsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_network_policy_opts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_network_policy_opts() (localctx IAlter_network_policy_optsContext) {
	this := p
	_ = this

	localctx = NewAlter_network_policy_optsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, SnowflakeParserRULE_alter_network_policy_opts)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5783)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 631, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5748)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5747)
				p.If_exists()
			}

		}
		{
			p.SetState(5750)
			p.Id_()
		}
		{
			p.SetState(5751)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(5758)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserALLOWED_IP_LIST {
			{
				p.SetState(5752)
				p.Match(SnowflakeParserALLOWED_IP_LIST)
			}
			{
				p.SetState(5753)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(5754)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(5755)
				p.String_list()
			}
			{
				p.SetState(5756)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(5766)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserBLOCKED_IP_LIST {
			{
				p.SetState(5760)
				p.Match(SnowflakeParserBLOCKED_IP_LIST)
			}
			{
				p.SetState(5761)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(5762)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(5763)
				p.String_list()
			}
			{
				p.SetState(5764)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(5769)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 629, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5768)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5772)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5771)
				p.If_exists()
			}

		}
		{
			p.SetState(5774)
			p.Id_()
		}
		{
			p.SetState(5775)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(5776)
			p.Match(SnowflakeParserCOMMENT)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5778)
			p.Id_()
		}
		{
			p.SetState(5779)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(5780)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(5781)
			p.Id_()
		}

	}


	return localctx
}


// IAlter_warehouse_optsContext is an interface to support dynamic dispatch.
type IAlter_warehouse_optsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_warehouse_optsContext differentiates from other interfaces.
	IsAlter_warehouse_optsContext()
}

type Alter_warehouse_optsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_warehouse_optsContext() *Alter_warehouse_optsContext {
	var p = new(Alter_warehouse_optsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_warehouse_opts
	return p
}

func (*Alter_warehouse_optsContext) IsAlter_warehouse_optsContext() {}

func NewAlter_warehouse_optsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_warehouse_optsContext {
	var p = new(Alter_warehouse_optsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_warehouse_opts

	return p
}

func (s *Alter_warehouse_optsContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_warehouse_optsContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND, 0)
}

func (s *Alter_warehouse_optsContext) RESUME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESUME, 0)
}

func (s *Alter_warehouse_optsContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_warehouse_optsContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_warehouse_optsContext) If_suspended() IIf_suspendedContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_suspendedContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_suspendedContext)
}

func (s *Alter_warehouse_optsContext) ABORT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserABORT, 0)
}

func (s *Alter_warehouse_optsContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *Alter_warehouse_optsContext) QUERIES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserQUERIES, 0)
}

func (s *Alter_warehouse_optsContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_warehouse_optsContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_warehouse_optsContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_warehouse_optsContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_warehouse_optsContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_warehouse_optsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Alter_warehouse_optsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Alter_warehouse_optsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_warehouse_optsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_warehouse_optsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_warehouse_opts(s)
	}
}

func (s *Alter_warehouse_optsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_warehouse_opts(s)
	}
}

func (s *Alter_warehouse_optsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_warehouse_opts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_warehouse_opts() (localctx IAlter_warehouse_optsContext) {
	this := p
	_ = this

	localctx = NewAlter_warehouse_optsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, SnowflakeParserRULE_alter_warehouse_opts)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5822)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 637, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5786)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(5785)
				p.Id_()
			}

		}
		p.SetState(5793)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSUSPEND:
			{
				p.SetState(5788)
				p.Match(SnowflakeParserSUSPEND)
			}


		case SnowflakeParserRESUME:
			{
				p.SetState(5789)
				p.Match(SnowflakeParserRESUME)
			}
			p.SetState(5791)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserIF {
				{
					p.SetState(5790)
					p.If_suspended()
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5796)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(5795)
				p.Id_()
			}

		}
		{
			p.SetState(5798)
			p.Match(SnowflakeParserABORT)
		}
		{
			p.SetState(5799)
			p.Match(SnowflakeParserALL)
		}
		{
			p.SetState(5800)
			p.Match(SnowflakeParserQUERIES)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5801)
			p.Id_()
		}
		{
			p.SetState(5802)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(5803)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(5804)
			p.Id_()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5806)
			p.Id_()
		}
		{
			p.SetState(5807)
			p.Set_tags()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5809)
			p.Id_()
		}
		{
			p.SetState(5810)
			p.Unset_tags()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5812)
			p.Id_()
		}
		{
			p.SetState(5813)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(5814)
			p.Id_()
		}
		p.SetState(5819)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(5815)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5816)
				p.Id_()
			}


			p.SetState(5821)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}


	return localctx
}


// IAlter_account_optsContext is an interface to support dynamic dispatch.
type IAlter_account_optsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_account_optsContext differentiates from other interfaces.
	IsAlter_account_optsContext()
}

type Alter_account_optsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_account_optsContext() *Alter_account_optsContext {
	var p = new(Alter_account_optsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alter_account_opts
	return p
}

func (*Alter_account_optsContext) IsAlter_account_optsContext() {}

func NewAlter_account_optsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_account_optsContext {
	var p = new(Alter_account_optsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alter_account_opts

	return p
}

func (s *Alter_account_optsContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_account_optsContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Alter_account_optsContext) Account_params() IAccount_paramsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccount_paramsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccount_paramsContext)
}

func (s *Alter_account_optsContext) Object_params() IObject_paramsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_paramsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_paramsContext)
}

func (s *Alter_account_optsContext) Session_params() ISession_paramsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISession_paramsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISession_paramsContext)
}

func (s *Alter_account_optsContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Alter_account_optsContext) AllParam_name() []IParam_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IParam_nameContext); ok {
			len++
		}
	}

	tst := make([]IParam_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IParam_nameContext); ok {
			tst[i] = t.(IParam_nameContext)
			i++
		}
	}

	return tst
}

func (s *Alter_account_optsContext) Param_name(i int) IParam_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParam_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParam_nameContext)
}

func (s *Alter_account_optsContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, 0)
}

func (s *Alter_account_optsContext) RESOURCE_MONITOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESOURCE_MONITOR, 0)
}

func (s *Alter_account_optsContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Alter_account_optsContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Alter_account_optsContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_account_optsContext) Set_tags() ISet_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_tagsContext)
}

func (s *Alter_account_optsContext) Unset_tags() IUnset_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnset_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnset_tagsContext)
}

func (s *Alter_account_optsContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRENAME, 0)
}

func (s *Alter_account_optsContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Alter_account_optsContext) SAVE_OLD_URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAVE_OLD_URL, 0)
}

func (s *Alter_account_optsContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Alter_account_optsContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Alter_account_optsContext) OLD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOLD, 0)
}

func (s *Alter_account_optsContext) URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserURL, 0)
}

func (s *Alter_account_optsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_account_optsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_account_optsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlter_account_opts(s)
	}
}

func (s *Alter_account_optsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlter_account_opts(s)
	}
}

func (s *Alter_account_optsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlter_account_opts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alter_account_opts() (localctx IAlter_account_optsContext) {
	this := p
	_ = this

	localctx = NewAlter_account_optsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, SnowflakeParserRULE_alter_account_opts)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5860)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 643, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5824)
			p.Match(SnowflakeParserSET)
		}
		p.SetState(5826)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 638, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5825)
				p.Account_params()
			}


		}
		p.SetState(5829)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 639, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5828)
				p.Object_params()
			}


		}
		p.SetState(5832)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserABORT_DETACHED_QUERY || (int64((_la - 66)) & ^0x3f) == 0 && ((int64(1) << (_la - 66)) & 1610612737) != 0 || (int64((_la - 203)) & ^0x3f) == 0 && ((int64(1) << (_la - 203)) & -4611686018427387901) != 0 || _la == SnowflakeParserJSON_INDENT || _la == SnowflakeParserLOCK_TIMEOUT || _la == SnowflakeParserQUERY_TAG || _la == SnowflakeParserROWS_PER_RESULTSET || (int64((_la - 772)) & ^0x3f) == 0 && ((int64(1) << (_la - 772)) & 2305843146652647425) != 0 || (int64((_la - 871)) & ^0x3f) == 0 && ((int64(1) << (_la - 871)) & 17592219712163) != 0 || (int64((_la - 938)) & ^0x3f) == 0 && ((int64(1) << (_la - 938)) & 824633721345) != 0 {
			{
				p.SetState(5831)
				p.Session_params()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5834)
			p.Match(SnowflakeParserUNSET)
		}
		{
			p.SetState(5835)
			p.Param_name()
		}
		p.SetState(5838)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOMMA {
			{
				p.SetState(5836)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5837)
				p.Param_name()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5840)
			p.Match(SnowflakeParserSET)
		}
		{
			p.SetState(5841)
			p.Match(SnowflakeParserRESOURCE_MONITOR)
		}
		{
			p.SetState(5842)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(5843)
			p.Id_()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5844)
			p.Set_tags()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5845)
			p.Unset_tags()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5846)
			p.Id_()
		}
		{
			p.SetState(5847)
			p.Match(SnowflakeParserRENAME)
		}
		{
			p.SetState(5848)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(5849)
			p.Id_()
		}
		p.SetState(5853)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAVE_OLD_URL {
			{
				p.SetState(5850)
				p.Match(SnowflakeParserSAVE_OLD_URL)
			}
			{
				p.SetState(5851)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(5852)
				p.True_false()
			}

		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5855)
			p.Id_()
		}
		{
			p.SetState(5856)
			p.Match(SnowflakeParserDROP)
		}
		{
			p.SetState(5857)
			p.Match(SnowflakeParserOLD)
		}
		{
			p.SetState(5858)
			p.Match(SnowflakeParserURL)
		}

	}


	return localctx
}


// ISet_tagsContext is an interface to support dynamic dispatch.
type ISet_tagsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_tagsContext differentiates from other interfaces.
	IsSet_tagsContext()
}

type Set_tagsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_tagsContext() *Set_tagsContext {
	var p = new(Set_tagsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_set_tags
	return p
}

func (*Set_tagsContext) IsSet_tagsContext() {}

func NewSet_tagsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_tagsContext {
	var p = new(Set_tagsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_set_tags

	return p
}

func (s *Set_tagsContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_tagsContext) SET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSET, 0)
}

func (s *Set_tagsContext) Tag_decl_list() ITag_decl_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITag_decl_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITag_decl_listContext)
}

func (s *Set_tagsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_tagsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Set_tagsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSet_tags(s)
	}
}

func (s *Set_tagsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSet_tags(s)
	}
}

func (s *Set_tagsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSet_tags(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Set_tags() (localctx ISet_tagsContext) {
	this := p
	_ = this

	localctx = NewSet_tagsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, SnowflakeParserRULE_set_tags)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5862)
		p.Match(SnowflakeParserSET)
	}
	{
		p.SetState(5863)
		p.Tag_decl_list()
	}



	return localctx
}


// ITag_decl_listContext is an interface to support dynamic dispatch.
type ITag_decl_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTag_decl_listContext differentiates from other interfaces.
	IsTag_decl_listContext()
}

type Tag_decl_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTag_decl_listContext() *Tag_decl_listContext {
	var p = new(Tag_decl_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_tag_decl_list
	return p
}

func (*Tag_decl_listContext) IsTag_decl_listContext() {}

func NewTag_decl_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tag_decl_listContext {
	var p = new(Tag_decl_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_tag_decl_list

	return p
}

func (s *Tag_decl_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Tag_decl_listContext) TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTAG, 0)
}

func (s *Tag_decl_listContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Tag_decl_listContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Tag_decl_listContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Tag_decl_listContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Tag_decl_listContext) AllTag_value() []ITag_valueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITag_valueContext); ok {
			len++
		}
	}

	tst := make([]ITag_valueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITag_valueContext); ok {
			tst[i] = t.(ITag_valueContext)
			i++
		}
	}

	return tst
}

func (s *Tag_decl_listContext) Tag_value(i int) ITag_valueContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITag_valueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITag_valueContext)
}

func (s *Tag_decl_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Tag_decl_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Tag_decl_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tag_decl_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Tag_decl_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTag_decl_list(s)
	}
}

func (s *Tag_decl_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTag_decl_list(s)
	}
}

func (s *Tag_decl_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTag_decl_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Tag_decl_list() (localctx ITag_decl_listContext) {
	this := p
	_ = this

	localctx = NewTag_decl_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, SnowflakeParserRULE_tag_decl_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5865)
		p.Match(SnowflakeParserTAG)
	}
	{
		p.SetState(5866)
		p.Id_()
	}
	{
		p.SetState(5867)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(5868)
		p.Tag_value()
	}
	p.SetState(5876)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 644, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5869)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5870)
				p.Id_()
			}
			{
				p.SetState(5871)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(5872)
				p.Tag_value()
			}


		}
		p.SetState(5878)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 644, p.GetParserRuleContext())
	}



	return localctx
}


// IUnset_tagsContext is an interface to support dynamic dispatch.
type IUnset_tagsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnset_tagsContext differentiates from other interfaces.
	IsUnset_tagsContext()
}

type Unset_tagsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnset_tagsContext() *Unset_tagsContext {
	var p = new(Unset_tagsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_unset_tags
	return p
}

func (*Unset_tagsContext) IsUnset_tagsContext() {}

func NewUnset_tagsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unset_tagsContext {
	var p = new(Unset_tagsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_unset_tags

	return p
}

func (s *Unset_tagsContext) GetParser() antlr.Parser { return s.parser }

func (s *Unset_tagsContext) UNSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSET, 0)
}

func (s *Unset_tagsContext) TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTAG, 0)
}

func (s *Unset_tagsContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Unset_tagsContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Unset_tagsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Unset_tagsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Unset_tagsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unset_tagsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Unset_tagsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUnset_tags(s)
	}
}

func (s *Unset_tagsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUnset_tags(s)
	}
}

func (s *Unset_tagsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUnset_tags(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Unset_tags() (localctx IUnset_tagsContext) {
	this := p
	_ = this

	localctx = NewUnset_tagsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, SnowflakeParserRULE_unset_tags)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5879)
		p.Match(SnowflakeParserUNSET)
	}
	{
		p.SetState(5880)
		p.Match(SnowflakeParserTAG)
	}
	{
		p.SetState(5881)
		p.Id_()
	}
	p.SetState(5886)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 645, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5882)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(5883)
				p.Id_()
			}


		}
		p.SetState(5888)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 645, p.GetParserRuleContext())
	}



	return localctx
}


// ICreate_commandContext is an interface to support dynamic dispatch.
type ICreate_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_commandContext differentiates from other interfaces.
	IsCreate_commandContext()
}

type Create_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_commandContext() *Create_commandContext {
	var p = new(Create_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_command
	return p
}

func (*Create_commandContext) IsCreate_commandContext() {}

func NewCreate_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_commandContext {
	var p = new(Create_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_command

	return p
}

func (s *Create_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_commandContext) Create_account() ICreate_accountContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_accountContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_accountContext)
}

func (s *Create_commandContext) Create_api_integration() ICreate_api_integrationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_api_integrationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_api_integrationContext)
}

func (s *Create_commandContext) Create_object_clone() ICreate_object_cloneContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_object_cloneContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_object_cloneContext)
}

func (s *Create_commandContext) Create_connection() ICreate_connectionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_connectionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_connectionContext)
}

func (s *Create_commandContext) Create_database() ICreate_databaseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_databaseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_databaseContext)
}

func (s *Create_commandContext) Create_external_function() ICreate_external_functionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_external_functionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_external_functionContext)
}

func (s *Create_commandContext) Create_external_table() ICreate_external_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_external_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_external_tableContext)
}

func (s *Create_commandContext) Create_failover_group() ICreate_failover_groupContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_failover_groupContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_failover_groupContext)
}

func (s *Create_commandContext) Create_file_format() ICreate_file_formatContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_file_formatContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_file_formatContext)
}

func (s *Create_commandContext) Create_function() ICreate_functionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_functionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_functionContext)
}

func (s *Create_commandContext) Create_managed_account() ICreate_managed_accountContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_managed_accountContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_managed_accountContext)
}

func (s *Create_commandContext) Create_masking_policy() ICreate_masking_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_masking_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_masking_policyContext)
}

func (s *Create_commandContext) Create_materialized_view() ICreate_materialized_viewContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_materialized_viewContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_materialized_viewContext)
}

func (s *Create_commandContext) Create_network_policy() ICreate_network_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_network_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_network_policyContext)
}

func (s *Create_commandContext) Create_notification_integration() ICreate_notification_integrationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_notification_integrationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_notification_integrationContext)
}

func (s *Create_commandContext) Create_pipe() ICreate_pipeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_pipeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_pipeContext)
}

func (s *Create_commandContext) Create_procedure() ICreate_procedureContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_procedureContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_procedureContext)
}

func (s *Create_commandContext) Create_replication_group() ICreate_replication_groupContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_replication_groupContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_replication_groupContext)
}

func (s *Create_commandContext) Create_resource_monitor() ICreate_resource_monitorContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_resource_monitorContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_resource_monitorContext)
}

func (s *Create_commandContext) Create_role() ICreate_roleContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_roleContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_roleContext)
}

func (s *Create_commandContext) Create_row_access_policy() ICreate_row_access_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_row_access_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_row_access_policyContext)
}

func (s *Create_commandContext) Create_schema() ICreate_schemaContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_schemaContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_schemaContext)
}

func (s *Create_commandContext) Create_security_integration_external_oauth() ICreate_security_integration_external_oauthContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_security_integration_external_oauthContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_security_integration_external_oauthContext)
}

func (s *Create_commandContext) Create_security_integration_snowflake_oauth() ICreate_security_integration_snowflake_oauthContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_security_integration_snowflake_oauthContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_security_integration_snowflake_oauthContext)
}

func (s *Create_commandContext) Create_security_integration_saml2() ICreate_security_integration_saml2Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_security_integration_saml2Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_security_integration_saml2Context)
}

func (s *Create_commandContext) Create_security_integration_scim() ICreate_security_integration_scimContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_security_integration_scimContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_security_integration_scimContext)
}

func (s *Create_commandContext) Create_sequence() ICreate_sequenceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_sequenceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_sequenceContext)
}

func (s *Create_commandContext) Create_session_policy() ICreate_session_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_session_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_session_policyContext)
}

func (s *Create_commandContext) Create_share() ICreate_shareContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_shareContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_shareContext)
}

func (s *Create_commandContext) Create_stage() ICreate_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_stageContext)
}

func (s *Create_commandContext) Create_storage_integration() ICreate_storage_integrationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_storage_integrationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_storage_integrationContext)
}

func (s *Create_commandContext) Create_stream() ICreate_streamContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_streamContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_streamContext)
}

func (s *Create_commandContext) Create_table() ICreate_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_tableContext)
}

func (s *Create_commandContext) Create_tag() ICreate_tagContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_tagContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_tagContext)
}

func (s *Create_commandContext) Create_task() ICreate_taskContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_taskContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_taskContext)
}

func (s *Create_commandContext) Create_user() ICreate_userContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_userContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_userContext)
}

func (s *Create_commandContext) Create_view() ICreate_viewContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_viewContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_viewContext)
}

func (s *Create_commandContext) Create_warehouse() ICreate_warehouseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_warehouseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_warehouseContext)
}

func (s *Create_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_command(s)
	}
}

func (s *Create_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_command(s)
	}
}

func (s *Create_commandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_command(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_command() (localctx ICreate_commandContext) {
	this := p
	_ = this

	localctx = NewCreate_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, SnowflakeParserRULE_create_command)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5927)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 646, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5889)
			p.Create_account()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5890)
			p.Create_api_integration()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5891)
			p.Create_object_clone()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5892)
			p.Create_connection()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5893)
			p.Create_database()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5894)
			p.Create_external_function()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5895)
			p.Create_external_table()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5896)
			p.Create_failover_group()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5897)
			p.Create_file_format()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5898)
			p.Create_function()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5899)
			p.Create_managed_account()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5900)
			p.Create_masking_policy()
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5901)
			p.Create_materialized_view()
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(5902)
			p.Create_network_policy()
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(5903)
			p.Create_notification_integration()
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(5904)
			p.Create_pipe()
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(5905)
			p.Create_procedure()
		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(5906)
			p.Create_replication_group()
		}


	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(5907)
			p.Create_resource_monitor()
		}


	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(5908)
			p.Create_role()
		}


	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(5909)
			p.Create_row_access_policy()
		}


	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(5910)
			p.Create_schema()
		}


	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(5911)
			p.Create_security_integration_external_oauth()
		}


	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(5912)
			p.Create_security_integration_snowflake_oauth()
		}


	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(5913)
			p.Create_security_integration_saml2()
		}


	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(5914)
			p.Create_security_integration_scim()
		}


	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(5915)
			p.Create_sequence()
		}


	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(5916)
			p.Create_session_policy()
		}


	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(5917)
			p.Create_share()
		}


	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(5918)
			p.Create_stage()
		}


	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(5919)
			p.Create_storage_integration()
		}


	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(5920)
			p.Create_stream()
		}


	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(5921)
			p.Create_table()
		}


	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(5922)
			p.Create_tag()
		}


	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(5923)
			p.Create_task()
		}


	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(5924)
			p.Create_user()
		}


	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(5925)
			p.Create_view()
		}


	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(5926)
			p.Create_warehouse()
		}

	}


	return localctx
}


// ICreate_accountContext is an interface to support dynamic dispatch.
type ICreate_accountContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_accountContext differentiates from other interfaces.
	IsCreate_accountContext()
}

type Create_accountContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_accountContext() *Create_accountContext {
	var p = new(Create_accountContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_account
	return p
}

func (*Create_accountContext) IsCreate_accountContext() {}

func NewCreate_accountContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_accountContext {
	var p = new(Create_accountContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_account

	return p
}

func (s *Create_accountContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_accountContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_accountContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Create_accountContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Create_accountContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_accountContext) ADMIN_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADMIN_NAME, 0)
}

func (s *Create_accountContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_accountContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_accountContext) ADMIN_PASSWORD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADMIN_PASSWORD, 0)
}

func (s *Create_accountContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Create_accountContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_accountContext) EMAIL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEMAIL, 0)
}

func (s *Create_accountContext) EDITION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEDITION, 0)
}

func (s *Create_accountContext) STANDARD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTANDARD, 0)
}

func (s *Create_accountContext) ENTERPRISE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENTERPRISE, 0)
}

func (s *Create_accountContext) BUSINESS_CRITICAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBUSINESS_CRITICAL, 0)
}

func (s *Create_accountContext) FIRST_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFIRST_NAME, 0)
}

func (s *Create_accountContext) LAST_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLAST_NAME, 0)
}

func (s *Create_accountContext) MUST_CHANGE_PASSWORD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMUST_CHANGE_PASSWORD, 0)
}

func (s *Create_accountContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Create_accountContext) REGION_GROUP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREGION_GROUP, 0)
}

func (s *Create_accountContext) Region_group_id() IRegion_group_idContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRegion_group_idContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRegion_group_idContext)
}

func (s *Create_accountContext) REGION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREGION, 0)
}

func (s *Create_accountContext) Snowflake_region_id() ISnowflake_region_idContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISnowflake_region_idContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISnowflake_region_idContext)
}

func (s *Create_accountContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_accountContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_accountContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_accountContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_account(s)
	}
}

func (s *Create_accountContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_account(s)
	}
}

func (s *Create_accountContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_account(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_account() (localctx ICreate_accountContext) {
	this := p
	_ = this

	localctx = NewCreate_accountContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, SnowflakeParserRULE_create_account)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5929)
		p.Match(SnowflakeParserCREATE)
	}
	{
		p.SetState(5930)
		p.Match(SnowflakeParserACCOUNT)
	}
	{
		p.SetState(5931)
		p.Id_()
	}
	{
		p.SetState(5932)
		p.Match(SnowflakeParserADMIN_NAME)
	}
	{
		p.SetState(5933)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(5934)
		p.Id_()
	}
	{
		p.SetState(5935)
		p.Match(SnowflakeParserADMIN_PASSWORD)
	}
	{
		p.SetState(5936)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(5937)
		p.String_()
	}
	p.SetState(5941)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserFIRST_NAME {
		{
			p.SetState(5938)
			p.Match(SnowflakeParserFIRST_NAME)
		}
		{
			p.SetState(5939)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(5940)
			p.Id_()
		}

	}
	p.SetState(5946)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLAST_NAME {
		{
			p.SetState(5943)
			p.Match(SnowflakeParserLAST_NAME)
		}
		{
			p.SetState(5944)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(5945)
			p.Id_()
		}

	}
	{
		p.SetState(5948)
		p.Match(SnowflakeParserEMAIL)
	}
	{
		p.SetState(5949)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(5950)
		p.String_()
	}
	p.SetState(5954)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserMUST_CHANGE_PASSWORD {
		{
			p.SetState(5951)
			p.Match(SnowflakeParserMUST_CHANGE_PASSWORD)
		}
		{
			p.SetState(5952)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(5953)
			p.True_false()
		}

	}
	{
		p.SetState(5956)
		p.Match(SnowflakeParserEDITION)
	}
	{
		p.SetState(5957)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(5958)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserBUSINESS_CRITICAL || _la == SnowflakeParserENTERPRISE || _la == SnowflakeParserSTANDARD) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(5962)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserREGION_GROUP {
		{
			p.SetState(5959)
			p.Match(SnowflakeParserREGION_GROUP)
		}
		{
			p.SetState(5960)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(5961)
			p.Region_group_id()
		}

	}
	p.SetState(5967)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserREGION {
		{
			p.SetState(5964)
			p.Match(SnowflakeParserREGION)
		}
		{
			p.SetState(5965)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(5966)
			p.Snowflake_region_id()
		}

	}
	p.SetState(5970)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 652, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5969)
			p.Comment_clause()
		}


	}



	return localctx
}


// ICreate_api_integrationContext is an interface to support dynamic dispatch.
type ICreate_api_integrationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_api_integrationContext differentiates from other interfaces.
	IsCreate_api_integrationContext()
}

type Create_api_integrationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_api_integrationContext() *Create_api_integrationContext {
	var p = new(Create_api_integrationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_api_integration
	return p
}

func (*Create_api_integrationContext) IsCreate_api_integrationContext() {}

func NewCreate_api_integrationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_api_integrationContext {
	var p = new(Create_api_integrationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_api_integration

	return p
}

func (s *Create_api_integrationContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_api_integrationContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_api_integrationContext) API() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI, 0)
}

func (s *Create_api_integrationContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Create_api_integrationContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Create_api_integrationContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_api_integrationContext) API_PROVIDER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_PROVIDER, 0)
}

func (s *Create_api_integrationContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_api_integrationContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_api_integrationContext) API_AWS_ROLE_ARN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_AWS_ROLE_ARN, 0)
}

func (s *Create_api_integrationContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Create_api_integrationContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_api_integrationContext) API_ALLOWED_PREFIXES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_ALLOWED_PREFIXES, 0)
}

func (s *Create_api_integrationContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Create_api_integrationContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Create_api_integrationContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Create_api_integrationContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Create_api_integrationContext) ENABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLED, 0)
}

func (s *Create_api_integrationContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Create_api_integrationContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_api_integrationContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_api_integrationContext) API_KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_KEY, 0)
}

func (s *Create_api_integrationContext) API_BLOCKED_PREFIXES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_BLOCKED_PREFIXES, 0)
}

func (s *Create_api_integrationContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_api_integrationContext) AZURE_TENANT_ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_TENANT_ID, 0)
}

func (s *Create_api_integrationContext) AZURE_AD_APPLICATION_ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_AD_APPLICATION_ID, 0)
}

func (s *Create_api_integrationContext) GOOGLE_AUDIENCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGOOGLE_AUDIENCE, 0)
}

func (s *Create_api_integrationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_api_integrationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_api_integrationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_api_integration(s)
	}
}

func (s *Create_api_integrationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_api_integration(s)
	}
}

func (s *Create_api_integrationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_api_integration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_api_integration() (localctx ICreate_api_integrationContext) {
	this := p
	_ = this

	localctx = NewCreate_api_integrationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, SnowflakeParserRULE_create_api_integration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6086)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 665, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5972)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(5974)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(5973)
				p.Or_replace()
			}

		}
		{
			p.SetState(5976)
			p.Match(SnowflakeParserAPI)
		}
		{
			p.SetState(5977)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(5979)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(5978)
				p.If_not_exists()
			}

		}
		{
			p.SetState(5981)
			p.Id_()
		}
		{
			p.SetState(5982)
			p.Match(SnowflakeParserAPI_PROVIDER)
		}
		{
			p.SetState(5983)
			p.Match(SnowflakeParserEQ)
		}

		{
			p.SetState(5984)
			p.Id_()
		}

		{
			p.SetState(5985)
			p.Match(SnowflakeParserAPI_AWS_ROLE_ARN)
		}
		{
			p.SetState(5986)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(5987)
			p.String_()
		}
		p.SetState(5991)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI_KEY {
			{
				p.SetState(5988)
				p.Match(SnowflakeParserAPI_KEY)
			}
			{
				p.SetState(5989)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(5990)
				p.String_()
			}

		}
		{
			p.SetState(5993)
			p.Match(SnowflakeParserAPI_ALLOWED_PREFIXES)
		}
		{
			p.SetState(5994)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(5995)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(5996)
			p.String_()
		}
		{
			p.SetState(5997)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		p.SetState(6004)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI_BLOCKED_PREFIXES {
			{
				p.SetState(5998)
				p.Match(SnowflakeParserAPI_BLOCKED_PREFIXES)
			}
			{
				p.SetState(5999)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6000)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(6001)
				p.String_()
			}
			{
				p.SetState(6002)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		{
			p.SetState(6006)
			p.Match(SnowflakeParserENABLED)
		}
		{
			p.SetState(6007)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6008)
			p.True_false()
		}
		p.SetState(6010)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 657, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6009)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6012)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(6014)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(6013)
				p.Or_replace()
			}

		}
		{
			p.SetState(6016)
			p.Match(SnowflakeParserAPI)
		}
		{
			p.SetState(6017)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(6019)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(6018)
				p.If_not_exists()
			}

		}
		{
			p.SetState(6021)
			p.Id_()
		}
		{
			p.SetState(6022)
			p.Match(SnowflakeParserAPI_PROVIDER)
		}
		{
			p.SetState(6023)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6024)
			p.Id_()
		}
		{
			p.SetState(6025)
			p.Match(SnowflakeParserAZURE_TENANT_ID)
		}
		{
			p.SetState(6026)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6027)
			p.String_()
		}
		{
			p.SetState(6028)
			p.Match(SnowflakeParserAZURE_AD_APPLICATION_ID)
		}
		{
			p.SetState(6029)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6030)
			p.String_()
		}
		p.SetState(6034)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI_KEY {
			{
				p.SetState(6031)
				p.Match(SnowflakeParserAPI_KEY)
			}
			{
				p.SetState(6032)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6033)
				p.String_()
			}

		}
		{
			p.SetState(6036)
			p.Match(SnowflakeParserAPI_ALLOWED_PREFIXES)
		}
		{
			p.SetState(6037)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6038)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(6039)
			p.String_()
		}
		{
			p.SetState(6040)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		p.SetState(6047)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI_BLOCKED_PREFIXES {
			{
				p.SetState(6041)
				p.Match(SnowflakeParserAPI_BLOCKED_PREFIXES)
			}
			{
				p.SetState(6042)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6043)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(6044)
				p.String_()
			}
			{
				p.SetState(6045)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		{
			p.SetState(6049)
			p.Match(SnowflakeParserENABLED)
		}
		{
			p.SetState(6050)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6051)
			p.True_false()
		}
		p.SetState(6053)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 662, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6052)
				p.Comment_clause()
			}


		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6055)
			p.Match(SnowflakeParserCREATE)
		}
		{
			p.SetState(6056)
			p.Or_replace()
		}
		{
			p.SetState(6057)
			p.Match(SnowflakeParserAPI)
		}
		{
			p.SetState(6058)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(6059)
			p.If_not_exists()
		}
		{
			p.SetState(6060)
			p.Id_()
		}
		{
			p.SetState(6061)
			p.Match(SnowflakeParserAPI_PROVIDER)
		}
		{
			p.SetState(6062)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6063)
			p.Id_()
		}
		{
			p.SetState(6064)
			p.Match(SnowflakeParserGOOGLE_AUDIENCE)
		}
		{
			p.SetState(6065)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6066)
			p.String_()
		}
		{
			p.SetState(6067)
			p.Match(SnowflakeParserAPI_ALLOWED_PREFIXES)
		}
		{
			p.SetState(6068)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6069)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(6070)
			p.String_()
		}
		{
			p.SetState(6071)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		p.SetState(6078)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPI_BLOCKED_PREFIXES {
			{
				p.SetState(6072)
				p.Match(SnowflakeParserAPI_BLOCKED_PREFIXES)
			}
			{
				p.SetState(6073)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6074)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(6075)
				p.String_()
			}
			{
				p.SetState(6076)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		{
			p.SetState(6080)
			p.Match(SnowflakeParserENABLED)
		}
		{
			p.SetState(6081)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6082)
			p.True_false()
		}
		p.SetState(6084)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 664, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6083)
				p.Comment_clause()
			}


		}

	}


	return localctx
}


// ICreate_object_cloneContext is an interface to support dynamic dispatch.
type ICreate_object_cloneContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_object_cloneContext differentiates from other interfaces.
	IsCreate_object_cloneContext()
}

type Create_object_cloneContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_object_cloneContext() *Create_object_cloneContext {
	var p = new(Create_object_cloneContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_object_clone
	return p
}

func (*Create_object_cloneContext) IsCreate_object_cloneContext() {}

func NewCreate_object_cloneContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_object_cloneContext {
	var p = new(Create_object_cloneContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_object_clone

	return p
}

func (s *Create_object_cloneContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_object_cloneContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_object_cloneContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Create_object_cloneContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_object_cloneContext) CLONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLONE, 0)
}

func (s *Create_object_cloneContext) AllObject_name() []IObject_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObject_nameContext); ok {
			len++
		}
	}

	tst := make([]IObject_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObject_nameContext); ok {
			tst[i] = t.(IObject_nameContext)
			i++
		}
	}

	return tst
}

func (s *Create_object_cloneContext) Object_name(i int) IObject_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_object_cloneContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Create_object_cloneContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Create_object_cloneContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Create_object_cloneContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_object_cloneContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_object_cloneContext) At_before1() IAt_before1Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAt_before1Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAt_before1Context)
}

func (s *Create_object_cloneContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Create_object_cloneContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Create_object_cloneContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP, 0)
}

func (s *Create_object_cloneContext) ASSOC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserASSOC, 0)
}

func (s *Create_object_cloneContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_object_cloneContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOFFSET, 0)
}

func (s *Create_object_cloneContext) STATEMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTATEMENT, 0)
}

func (s *Create_object_cloneContext) STAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE, 0)
}

func (s *Create_object_cloneContext) FILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE, 0)
}

func (s *Create_object_cloneContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORMAT, 0)
}

func (s *Create_object_cloneContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEQUENCE, 0)
}

func (s *Create_object_cloneContext) STREAM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTREAM, 0)
}

func (s *Create_object_cloneContext) TASK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTASK, 0)
}

func (s *Create_object_cloneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_object_cloneContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_object_cloneContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_object_clone(s)
	}
}

func (s *Create_object_cloneContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_object_clone(s)
	}
}

func (s *Create_object_cloneContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_object_clone(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_object_clone() (localctx ICreate_object_cloneContext) {
	this := p
	_ = this

	localctx = NewCreate_object_cloneContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, SnowflakeParserRULE_create_object_clone)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6135)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 673, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6088)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(6090)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(6089)
				p.Or_replace()
			}

		}
		{
			p.SetState(6092)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserDATABASE || _la == SnowflakeParserSCHEMA || _la == SnowflakeParserTABLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(6094)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(6093)
				p.If_not_exists()
			}

		}
		{
			p.SetState(6096)
			p.Id_()
		}
		{
			p.SetState(6097)
			p.Match(SnowflakeParserCLONE)
		}
		{
			p.SetState(6098)
			p.Object_name()
		}
		p.SetState(6114)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserBEFORE || _la == SnowflakeParserAT {
			{
				p.SetState(6099)
				p.At_before1()
			}
			{
				p.SetState(6100)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			p.SetState(6110)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SnowflakeParserTIMESTAMP:
				{
					p.SetState(6101)
					p.Match(SnowflakeParserTIMESTAMP)
				}
				{
					p.SetState(6102)
					p.Match(SnowflakeParserASSOC)
				}
				{
					p.SetState(6103)
					p.String_()
				}


			case SnowflakeParserOFFSET:
				{
					p.SetState(6104)
					p.Match(SnowflakeParserOFFSET)
				}
				{
					p.SetState(6105)
					p.Match(SnowflakeParserASSOC)
				}
				{
					p.SetState(6106)
					p.String_()
				}


			case SnowflakeParserSTATEMENT:
				{
					p.SetState(6107)
					p.Match(SnowflakeParserSTATEMENT)
				}
				{
					p.SetState(6108)
					p.Match(SnowflakeParserASSOC)
				}
				{
					p.SetState(6109)
					p.Id_()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(6112)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6116)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(6118)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(6117)
				p.Or_replace()
			}

		}
		p.SetState(6126)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSTAGE:
			{
				p.SetState(6120)
				p.Match(SnowflakeParserSTAGE)
			}


		case SnowflakeParserFILE:
			{
				p.SetState(6121)
				p.Match(SnowflakeParserFILE)
			}
			{
				p.SetState(6122)
				p.Match(SnowflakeParserFORMAT)
			}


		case SnowflakeParserSEQUENCE:
			{
				p.SetState(6123)
				p.Match(SnowflakeParserSEQUENCE)
			}


		case SnowflakeParserSTREAM:
			{
				p.SetState(6124)
				p.Match(SnowflakeParserSTREAM)
			}


		case SnowflakeParserTASK:
			{
				p.SetState(6125)
				p.Match(SnowflakeParserTASK)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(6129)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(6128)
				p.If_not_exists()
			}

		}
		{
			p.SetState(6131)
			p.Object_name()
		}
		{
			p.SetState(6132)
			p.Match(SnowflakeParserCLONE)
		}
		{
			p.SetState(6133)
			p.Object_name()
		}

	}


	return localctx
}


// ICreate_connectionContext is an interface to support dynamic dispatch.
type ICreate_connectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_connectionContext differentiates from other interfaces.
	IsCreate_connectionContext()
}

type Create_connectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_connectionContext() *Create_connectionContext {
	var p = new(Create_connectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_connection
	return p
}

func (*Create_connectionContext) IsCreate_connectionContext() {}

func NewCreate_connectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_connectionContext {
	var p = new(Create_connectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_connection

	return p
}

func (s *Create_connectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_connectionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_connectionContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCONNECTION, 0)
}

func (s *Create_connectionContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Create_connectionContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_connectionContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_connectionContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Create_connectionContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICA, 0)
}

func (s *Create_connectionContext) OF() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOF, 0)
}

func (s *Create_connectionContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserDOT)
}

func (s *Create_connectionContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, i)
}

func (s *Create_connectionContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Create_connectionContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Create_connectionContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_connectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_connectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_connectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_connection(s)
	}
}

func (s *Create_connectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_connection(s)
	}
}

func (s *Create_connectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_connection(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_connection() (localctx ICreate_connectionContext) {
	this := p
	_ = this

	localctx = NewCreate_connectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, SnowflakeParserRULE_create_connection)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6137)
		p.Match(SnowflakeParserCREATE)
	}
	{
		p.SetState(6138)
		p.Match(SnowflakeParserCONNECTION)
	}
	p.SetState(6140)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(6139)
			p.If_not_exists()
		}

	}
	{
		p.SetState(6142)
		p.Id_()
	}
	p.SetState(6161)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserEOF, SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCOPY, SnowflakeParserCREATE, SnowflakeParserDELETE, SnowflakeParserDESC, SnowflakeParserDESCRIBE, SnowflakeParserDROP, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserINSERT, SnowflakeParserLIST, SnowflakeParserMERGE, SnowflakeParserPUT, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSELECT, SnowflakeParserSET, SnowflakeParserSHOW, SnowflakeParserTRUNCATE, SnowflakeParserUNDROP, SnowflakeParserUNSET, SnowflakeParserUPDATE, SnowflakeParserUSE, SnowflakeParserWITH, SnowflakeParserSEMI:
		p.SetState(6146)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 675, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6143)
				p.Match(SnowflakeParserCOMMENT)
			}
			{
				p.SetState(6144)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6145)
				p.String_()
			}


		}


	case SnowflakeParserAS:
		{
			p.SetState(6148)
			p.Match(SnowflakeParserAS)
		}
		{
			p.SetState(6149)
			p.Match(SnowflakeParserREPLICA)
		}
		{
			p.SetState(6150)
			p.Match(SnowflakeParserOF)
		}
		{
			p.SetState(6151)
			p.Id_()
		}
		{
			p.SetState(6152)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(6153)
			p.Id_()
		}
		{
			p.SetState(6154)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(6155)
			p.Id_()
		}
		p.SetState(6159)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 676, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6156)
				p.Match(SnowflakeParserCOMMENT)
			}
			{
				p.SetState(6157)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6158)
				p.String_()
			}


		}




	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// ICreate_databaseContext is an interface to support dynamic dispatch.
type ICreate_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_databaseContext differentiates from other interfaces.
	IsCreate_databaseContext()
}

type Create_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_databaseContext() *Create_databaseContext {
	var p = new(Create_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_database
	return p
}

func (*Create_databaseContext) IsCreate_databaseContext() {}

func NewCreate_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_databaseContext {
	var p = new(Create_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_database

	return p
}

func (s *Create_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_databaseContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Create_databaseContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_databaseContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_databaseContext) TRANSIENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRANSIENT, 0)
}

func (s *Create_databaseContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_databaseContext) Clone_at_before() IClone_at_beforeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClone_at_beforeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClone_at_beforeContext)
}

func (s *Create_databaseContext) DATA_RETENTION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS, 0)
}

func (s *Create_databaseContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_databaseContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_databaseContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Create_databaseContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Create_databaseContext) MAX_DATA_EXTENSION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS, 0)
}

func (s *Create_databaseContext) Default_ddl_collation() IDefault_ddl_collationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_ddl_collationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_ddl_collationContext)
}

func (s *Create_databaseContext) With_tags() IWith_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_tagsContext)
}

func (s *Create_databaseContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_database(s)
	}
}

func (s *Create_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_database(s)
	}
}

func (s *Create_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_database(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_database() (localctx ICreate_databaseContext) {
	this := p
	_ = this

	localctx = NewCreate_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, SnowflakeParserRULE_create_database)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6163)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(6165)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(6164)
			p.Or_replace()
		}

	}
	p.SetState(6168)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTRANSIENT {
		{
			p.SetState(6167)
			p.Match(SnowflakeParserTRANSIENT)
		}

	}
	{
		p.SetState(6170)
		p.Match(SnowflakeParserDATABASE)
	}
	p.SetState(6172)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(6171)
			p.If_not_exists()
		}

	}
	{
		p.SetState(6174)
		p.Id_()
	}
	p.SetState(6176)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCLONE {
		{
			p.SetState(6175)
			p.Clone_at_before()
		}

	}
	p.SetState(6181)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserDATA_RETENTION_TIME_IN_DAYS {
		{
			p.SetState(6178)
			p.Match(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS)
		}
		{
			p.SetState(6179)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6180)
			p.Num()
		}

	}
	p.SetState(6186)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS {
		{
			p.SetState(6183)
			p.Match(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS)
		}
		{
			p.SetState(6184)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6185)
			p.Num()
		}

	}
	p.SetState(6189)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserDEFAULT_DDL_COLLATION_ {
		{
			p.SetState(6188)
			p.Default_ddl_collation()
		}

	}
	p.SetState(6192)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 685, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6191)
			p.With_tags()
		}


	}
	p.SetState(6195)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 686, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6194)
			p.Comment_clause()
		}


	}



	return localctx
}


// IClone_at_beforeContext is an interface to support dynamic dispatch.
type IClone_at_beforeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClone_at_beforeContext differentiates from other interfaces.
	IsClone_at_beforeContext()
}

type Clone_at_beforeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClone_at_beforeContext() *Clone_at_beforeContext {
	var p = new(Clone_at_beforeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_clone_at_before
	return p
}

func (*Clone_at_beforeContext) IsClone_at_beforeContext() {}

func NewClone_at_beforeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clone_at_beforeContext {
	var p = new(Clone_at_beforeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_clone_at_before

	return p
}

func (s *Clone_at_beforeContext) GetParser() antlr.Parser { return s.parser }

func (s *Clone_at_beforeContext) CLONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLONE, 0)
}

func (s *Clone_at_beforeContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Clone_at_beforeContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Clone_at_beforeContext) At_before1() IAt_before1Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAt_before1Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAt_before1Context)
}

func (s *Clone_at_beforeContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Clone_at_beforeContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Clone_at_beforeContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP, 0)
}

func (s *Clone_at_beforeContext) ASSOC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserASSOC, 0)
}

func (s *Clone_at_beforeContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Clone_at_beforeContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOFFSET, 0)
}

func (s *Clone_at_beforeContext) STATEMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTATEMENT, 0)
}

func (s *Clone_at_beforeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clone_at_beforeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Clone_at_beforeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterClone_at_before(s)
	}
}

func (s *Clone_at_beforeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitClone_at_before(s)
	}
}

func (s *Clone_at_beforeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitClone_at_before(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Clone_at_before() (localctx IClone_at_beforeContext) {
	this := p
	_ = this

	localctx = NewClone_at_beforeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, SnowflakeParserRULE_clone_at_before)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6197)
		p.Match(SnowflakeParserCLONE)
	}
	{
		p.SetState(6198)
		p.Id_()
	}
	p.SetState(6214)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserBEFORE || _la == SnowflakeParserAT {
		{
			p.SetState(6199)
			p.At_before1()
		}
		{
			p.SetState(6200)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(6210)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserTIMESTAMP:
			{
				p.SetState(6201)
				p.Match(SnowflakeParserTIMESTAMP)
			}
			{
				p.SetState(6202)
				p.Match(SnowflakeParserASSOC)
			}
			{
				p.SetState(6203)
				p.String_()
			}


		case SnowflakeParserOFFSET:
			{
				p.SetState(6204)
				p.Match(SnowflakeParserOFFSET)
			}
			{
				p.SetState(6205)
				p.Match(SnowflakeParserASSOC)
			}
			{
				p.SetState(6206)
				p.String_()
			}


		case SnowflakeParserSTATEMENT:
			{
				p.SetState(6207)
				p.Match(SnowflakeParserSTATEMENT)
			}
			{
				p.SetState(6208)
				p.Match(SnowflakeParserASSOC)
			}
			{
				p.SetState(6209)
				p.Id_()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(6212)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}



	return localctx
}


// IAt_before1Context is an interface to support dynamic dispatch.
type IAt_before1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAt_before1Context differentiates from other interfaces.
	IsAt_before1Context()
}

type At_before1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAt_before1Context() *At_before1Context {
	var p = new(At_before1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_at_before1
	return p
}

func (*At_before1Context) IsAt_before1Context() {}

func NewAt_before1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *At_before1Context {
	var p = new(At_before1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_at_before1

	return p
}

func (s *At_before1Context) GetParser() antlr.Parser { return s.parser }

func (s *At_before1Context) AT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAT, 0)
}

func (s *At_before1Context) BEFORE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBEFORE, 0)
}

func (s *At_before1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *At_before1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *At_before1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAt_before1(s)
	}
}

func (s *At_before1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAt_before1(s)
	}
}

func (s *At_before1Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAt_before1(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) At_before1() (localctx IAt_before1Context) {
	this := p
	_ = this

	localctx = NewAt_before1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, SnowflakeParserRULE_at_before1)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6216)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserBEFORE || _la == SnowflakeParserAT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IHeader_declContext is an interface to support dynamic dispatch.
type IHeader_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHeader_declContext differentiates from other interfaces.
	IsHeader_declContext()
}

type Header_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHeader_declContext() *Header_declContext {
	var p = new(Header_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_header_decl
	return p
}

func (*Header_declContext) IsHeader_declContext() {}

func NewHeader_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Header_declContext {
	var p = new(Header_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_header_decl

	return p
}

func (s *Header_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Header_declContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Header_declContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Header_declContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Header_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Header_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Header_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterHeader_decl(s)
	}
}

func (s *Header_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitHeader_decl(s)
	}
}

func (s *Header_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitHeader_decl(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Header_decl() (localctx IHeader_declContext) {
	this := p
	_ = this

	localctx = NewHeader_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, SnowflakeParserRULE_header_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6218)
		p.String_()
	}
	{
		p.SetState(6219)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(6220)
		p.String_()
	}



	return localctx
}


// ICompression_typeContext is an interface to support dynamic dispatch.
type ICompression_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompression_typeContext differentiates from other interfaces.
	IsCompression_typeContext()
}

type Compression_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompression_typeContext() *Compression_typeContext {
	var p = new(Compression_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_compression_type
	return p
}

func (*Compression_typeContext) IsCompression_typeContext() {}

func NewCompression_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compression_typeContext {
	var p = new(Compression_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_compression_type

	return p
}

func (s *Compression_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Compression_typeContext) NONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNONE, 0)
}

func (s *Compression_typeContext) GZIP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGZIP, 0)
}

func (s *Compression_typeContext) DEFLATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFLATE, 0)
}

func (s *Compression_typeContext) AUTO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTO, 0)
}

func (s *Compression_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compression_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Compression_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCompression_type(s)
	}
}

func (s *Compression_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCompression_type(s)
	}
}

func (s *Compression_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCompression_type(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Compression_type() (localctx ICompression_typeContext) {
	this := p
	_ = this

	localctx = NewCompression_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, SnowflakeParserRULE_compression_type)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6222)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserAUTO || _la == SnowflakeParserDEFLATE || _la == SnowflakeParserGZIP || _la == SnowflakeParserNONE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ICompressionContext is an interface to support dynamic dispatch.
type ICompressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompressionContext differentiates from other interfaces.
	IsCompressionContext()
}

type CompressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompressionContext() *CompressionContext {
	var p = new(CompressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_compression
	return p
}

func (*CompressionContext) IsCompressionContext() {}

func NewCompressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompressionContext {
	var p = new(CompressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_compression

	return p
}

func (s *CompressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CompressionContext) COMPRESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMPRESSION, 0)
}

func (s *CompressionContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *CompressionContext) Compression_type() ICompression_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompression_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompression_typeContext)
}

func (s *CompressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CompressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCompression(s)
	}
}

func (s *CompressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCompression(s)
	}
}

func (s *CompressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCompression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Compression() (localctx ICompressionContext) {
	this := p
	_ = this

	localctx = NewCompressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, SnowflakeParserRULE_compression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6224)
		p.Match(SnowflakeParserCOMPRESSION)
	}
	{
		p.SetState(6225)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(6226)
		p.Compression_type()
	}



	return localctx
}


// ICreate_external_functionContext is an interface to support dynamic dispatch.
type ICreate_external_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_external_functionContext differentiates from other interfaces.
	IsCreate_external_functionContext()
}

type Create_external_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_external_functionContext() *Create_external_functionContext {
	var p = new(Create_external_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_external_function
	return p
}

func (*Create_external_functionContext) IsCreate_external_functionContext() {}

func NewCreate_external_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_external_functionContext {
	var p = new(Create_external_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_external_function

	return p
}

func (s *Create_external_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_external_functionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_external_functionContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL, 0)
}

func (s *Create_external_functionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUNCTION, 0)
}

func (s *Create_external_functionContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_external_functionContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Create_external_functionContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Create_external_functionContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Create_external_functionContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Create_external_functionContext) AllRETURNS() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRETURNS)
}

func (s *Create_external_functionContext) RETURNS(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRETURNS, i)
}

func (s *Create_external_functionContext) Data_type() IData_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_external_functionContext) API_INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI_INTEGRATION, 0)
}

func (s *Create_external_functionContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_external_functionContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_external_functionContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Create_external_functionContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_external_functionContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Create_external_functionContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_external_functionContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_external_functionContext) SECURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURE, 0)
}

func (s *Create_external_functionContext) AllArg_name() []IArg_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArg_nameContext); ok {
			len++
		}
	}

	tst := make([]IArg_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArg_nameContext); ok {
			tst[i] = t.(IArg_nameContext)
			i++
		}
	}

	return tst
}

func (s *Create_external_functionContext) Arg_name(i int) IArg_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_nameContext)
}

func (s *Create_external_functionContext) AllArg_data_type() []IArg_data_typeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArg_data_typeContext); ok {
			len++
		}
	}

	tst := make([]IArg_data_typeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArg_data_typeContext); ok {
			tst[i] = t.(IArg_data_typeContext)
			i++
		}
	}

	return tst
}

func (s *Create_external_functionContext) Arg_data_type(i int) IArg_data_typeContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_data_typeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_data_typeContext)
}

func (s *Create_external_functionContext) AllNULL_() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserNULL_)
}

func (s *Create_external_functionContext) NULL_(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, i)
}

func (s *Create_external_functionContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_external_functionContext) HEADERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserHEADERS, 0)
}

func (s *Create_external_functionContext) AllHeader_decl() []IHeader_declContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IHeader_declContext); ok {
			len++
		}
	}

	tst := make([]IHeader_declContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IHeader_declContext); ok {
			tst[i] = t.(IHeader_declContext)
			i++
		}
	}

	return tst
}

func (s *Create_external_functionContext) Header_decl(i int) IHeader_declContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHeader_declContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHeader_declContext)
}

func (s *Create_external_functionContext) CONTEXT_HEADERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCONTEXT_HEADERS, 0)
}

func (s *Create_external_functionContext) MAX_BATCH_ROWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_BATCH_ROWS, 0)
}

func (s *Create_external_functionContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Create_external_functionContext) Compression() ICompressionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompressionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompressionContext)
}

func (s *Create_external_functionContext) REQUEST_TRANSLATOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREQUEST_TRANSLATOR, 0)
}

func (s *Create_external_functionContext) RESPONSE_TRANSLATOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESPONSE_TRANSLATOR, 0)
}

func (s *Create_external_functionContext) VOLATILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVOLATILE, 0)
}

func (s *Create_external_functionContext) IMMUTABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIMMUTABLE, 0)
}

func (s *Create_external_functionContext) CALLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCALLED, 0)
}

func (s *Create_external_functionContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Create_external_functionContext) INPUT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINPUT, 0)
}

func (s *Create_external_functionContext) STRICT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRICT, 0)
}

func (s *Create_external_functionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Create_external_functionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Create_external_functionContext) NOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, 0)
}

func (s *Create_external_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_external_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_external_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_external_function(s)
	}
}

func (s *Create_external_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_external_function(s)
	}
}

func (s *Create_external_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_external_function(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_external_function() (localctx ICreate_external_functionContext) {
	this := p
	_ = this

	localctx = NewCreate_external_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, SnowflakeParserRULE_create_external_function)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6228)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(6230)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(6229)
			p.Or_replace()
		}

	}
	p.SetState(6233)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSECURE {
		{
			p.SetState(6232)
			p.Match(SnowflakeParserSECURE)
		}

	}
	{
		p.SetState(6235)
		p.Match(SnowflakeParserEXTERNAL)
	}
	{
		p.SetState(6236)
		p.Match(SnowflakeParserFUNCTION)
	}
	{
		p.SetState(6237)
		p.Object_name()
	}
	{
		p.SetState(6238)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(6250)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
		{
			p.SetState(6239)
			p.Arg_name()
		}
		{
			p.SetState(6240)
			p.Arg_data_type()
		}
		p.SetState(6247)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(6241)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(6242)
				p.Arg_name()
			}
			{
				p.SetState(6243)
				p.Arg_data_type()
			}


			p.SetState(6249)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(6252)
		p.Match(SnowflakeParserRR_BRACKET)
	}
	{
		p.SetState(6253)
		p.Match(SnowflakeParserRETURNS)
	}
	{
		p.SetState(6254)
		p.Data_type()
	}
	p.SetState(6259)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserNOT || _la == SnowflakeParserNULL_ {
		p.SetState(6256)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNOT {
			{
				p.SetState(6255)
				p.Match(SnowflakeParserNOT)
			}

		}
		{
			p.SetState(6258)
			p.Match(SnowflakeParserNULL_)
		}

	}
	p.SetState(6273)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserCALLED:
		{
			p.SetState(6261)
			p.Match(SnowflakeParserCALLED)
		}
		{
			p.SetState(6262)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(6263)
			p.Match(SnowflakeParserNULL_)
		}
		{
			p.SetState(6264)
			p.Match(SnowflakeParserINPUT)
		}



	case SnowflakeParserRETURNS, SnowflakeParserSTRICT:
		p.SetState(6271)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserRETURNS:
			{
				p.SetState(6265)
				p.Match(SnowflakeParserRETURNS)
			}
			{
				p.SetState(6266)
				p.Match(SnowflakeParserNULL_)
			}
			{
				p.SetState(6267)
				p.Match(SnowflakeParserON)
			}
			{
				p.SetState(6268)
				p.Match(SnowflakeParserNULL_)
			}
			{
				p.SetState(6269)
				p.Match(SnowflakeParserINPUT)
			}



		case SnowflakeParserSTRICT:
			{
				p.SetState(6270)
				p.Match(SnowflakeParserSTRICT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SnowflakeParserAPI_INTEGRATION, SnowflakeParserCOMMENT, SnowflakeParserIMMUTABLE, SnowflakeParserVOLATILE:



	default:
	}
	p.SetState(6276)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIMMUTABLE || _la == SnowflakeParserVOLATILE {
		{
			p.SetState(6275)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserIMMUTABLE || _la == SnowflakeParserVOLATILE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(6279)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOMMENT {
		{
			p.SetState(6278)
			p.Comment_clause()
		}

	}
	{
		p.SetState(6281)
		p.Match(SnowflakeParserAPI_INTEGRATION)
	}
	{
		p.SetState(6282)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(6283)
		p.Id_()
	}
	p.SetState(6297)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserHEADERS {
		{
			p.SetState(6284)
			p.Match(SnowflakeParserHEADERS)
		}
		{
			p.SetState(6285)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6286)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(6287)
			p.Header_decl()
		}
		p.SetState(6292)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(6288)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(6289)
				p.Header_decl()
			}


			p.SetState(6294)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6295)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	p.SetState(6312)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCONTEXT_HEADERS {
		{
			p.SetState(6299)
			p.Match(SnowflakeParserCONTEXT_HEADERS)
		}
		{
			p.SetState(6300)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6301)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(6302)
			p.Id_()
		}
		p.SetState(6307)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(6303)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(6304)
				p.Id_()
			}


			p.SetState(6309)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6310)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	p.SetState(6317)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserMAX_BATCH_ROWS {
		{
			p.SetState(6314)
			p.Match(SnowflakeParserMAX_BATCH_ROWS)
		}
		{
			p.SetState(6315)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6316)
			p.Num()
		}

	}
	p.SetState(6320)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOMPRESSION {
		{
			p.SetState(6319)
			p.Compression()
		}

	}
	p.SetState(6325)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserREQUEST_TRANSLATOR {
		{
			p.SetState(6322)
			p.Match(SnowflakeParserREQUEST_TRANSLATOR)
		}
		{
			p.SetState(6323)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6324)
			p.Id_()
		}

	}
	p.SetState(6330)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserRESPONSE_TRANSLATOR {
		{
			p.SetState(6327)
			p.Match(SnowflakeParserRESPONSE_TRANSLATOR)
		}
		{
			p.SetState(6328)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6329)
			p.Id_()
		}

	}
	{
		p.SetState(6332)
		p.Match(SnowflakeParserAS)
	}
	{
		p.SetState(6333)
		p.String_()
	}



	return localctx
}


// ICreate_external_tableContext is an interface to support dynamic dispatch.
type ICreate_external_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_external_tableContext differentiates from other interfaces.
	IsCreate_external_tableContext()
}

type Create_external_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_external_tableContext() *Create_external_tableContext {
	var p = new(Create_external_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_external_table
	return p
}

func (*Create_external_tableContext) IsCreate_external_tableContext() {}

func NewCreate_external_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_external_tableContext {
	var p = new(Create_external_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_external_table

	return p
}

func (s *Create_external_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_external_tableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_external_tableContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL, 0)
}

func (s *Create_external_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Create_external_tableContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_external_tableContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Create_external_tableContext) External_table_column_decl_list() IExternal_table_column_decl_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternal_table_column_decl_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternal_table_column_decl_listContext)
}

func (s *Create_external_tableContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Create_external_tableContext) LOCATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLOCATION, 0)
}

func (s *Create_external_tableContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_external_tableContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_external_tableContext) External_stage() IExternal_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternal_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternal_stageContext)
}

func (s *Create_external_tableContext) File_format() IFile_formatContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFile_formatContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFile_formatContext)
}

func (s *Create_external_tableContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_external_tableContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_external_tableContext) Cloud_provider_params3() ICloud_provider_params3Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloud_provider_params3Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloud_provider_params3Context)
}

func (s *Create_external_tableContext) Partition_by() IPartition_byContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_byContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_byContext)
}

func (s *Create_external_tableContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Create_external_tableContext) REFRESH_ON_CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREFRESH_ON_CREATE, 0)
}

func (s *Create_external_tableContext) AllTrue_false() []ITrue_falseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITrue_falseContext); ok {
			len++
		}
	}

	tst := make([]ITrue_falseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITrue_falseContext); ok {
			tst[i] = t.(ITrue_falseContext)
			i++
		}
	}

	return tst
}

func (s *Create_external_tableContext) True_false(i int) ITrue_falseContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Create_external_tableContext) AUTO_REFRESH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTO_REFRESH, 0)
}

func (s *Create_external_tableContext) Pattern() IPatternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *Create_external_tableContext) AWS_SNS_TOPIC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAWS_SNS_TOPIC, 0)
}

func (s *Create_external_tableContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_external_tableContext) Copy_grants() ICopy_grantsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_grantsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_grantsContext)
}

func (s *Create_external_tableContext) With_row_access_policy() IWith_row_access_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_row_access_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_row_access_policyContext)
}

func (s *Create_external_tableContext) With_tags() IWith_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_tagsContext)
}

func (s *Create_external_tableContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_external_tableContext) PARTITION_TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPARTITION_TYPE, 0)
}

func (s *Create_external_tableContext) USER_SPECIFIED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER_SPECIFIED, 0)
}

func (s *Create_external_tableContext) TABLE_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE_FORMAT, 0)
}

func (s *Create_external_tableContext) DELTA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDELTA, 0)
}

func (s *Create_external_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_external_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_external_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_external_table(s)
	}
}

func (s *Create_external_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_external_table(s)
	}
}

func (s *Create_external_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_external_table(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_external_table() (localctx ICreate_external_tableContext) {
	this := p
	_ = this

	localctx = NewCreate_external_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, SnowflakeParserRULE_create_external_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6478)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 739, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6335)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(6337)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(6336)
				p.Or_replace()
			}

		}
		{
			p.SetState(6339)
			p.Match(SnowflakeParserEXTERNAL)
		}
		{
			p.SetState(6340)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(6342)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(6341)
				p.If_not_exists()
			}

		}
		{
			p.SetState(6344)
			p.Object_name()
		}
		{
			p.SetState(6345)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(6346)
			p.External_table_column_decl_list()
		}
		{
			p.SetState(6347)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		p.SetState(6349)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINTEGRATION {
			{
				p.SetState(6348)
				p.Cloud_provider_params3()
			}

		}
		p.SetState(6352)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserPARTITION {
			{
				p.SetState(6351)
				p.Partition_by()
			}

		}
		p.SetState(6355)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserWITH {
			{
				p.SetState(6354)
				p.Match(SnowflakeParserWITH)
			}

		}
		{
			p.SetState(6357)
			p.Match(SnowflakeParserLOCATION)
		}
		{
			p.SetState(6358)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6359)
			p.External_stage()
		}
		p.SetState(6363)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserREFRESH_ON_CREATE {
			{
				p.SetState(6360)
				p.Match(SnowflakeParserREFRESH_ON_CREATE)
			}
			{
				p.SetState(6361)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6362)
				p.True_false()
			}

		}
		p.SetState(6368)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAUTO_REFRESH {
			{
				p.SetState(6365)
				p.Match(SnowflakeParserAUTO_REFRESH)
			}
			{
				p.SetState(6366)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6367)
				p.True_false()
			}

		}
		p.SetState(6371)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserPATTERN {
			{
				p.SetState(6370)
				p.Pattern()
			}

		}
		{
			p.SetState(6373)
			p.File_format()
		}
		p.SetState(6377)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAWS_SNS_TOPIC {
			{
				p.SetState(6374)
				p.Match(SnowflakeParserAWS_SNS_TOPIC)
			}
			{
				p.SetState(6375)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6376)
				p.String_()
			}

		}
		p.SetState(6380)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 716, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6379)
				p.Copy_grants()
			}


		}
		p.SetState(6383)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 717, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6382)
				p.With_row_access_policy()
			}


		}
		p.SetState(6386)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 718, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6385)
				p.With_tags()
			}


		}
		p.SetState(6389)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 719, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6388)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6391)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(6393)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(6392)
				p.Or_replace()
			}

		}
		{
			p.SetState(6395)
			p.Match(SnowflakeParserEXTERNAL)
		}
		{
			p.SetState(6396)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(6398)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(6397)
				p.If_not_exists()
			}

		}
		{
			p.SetState(6400)
			p.Object_name()
		}
		{
			p.SetState(6401)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(6402)
			p.External_table_column_decl_list()
		}
		{
			p.SetState(6403)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		p.SetState(6405)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINTEGRATION {
			{
				p.SetState(6404)
				p.Cloud_provider_params3()
			}

		}
		p.SetState(6408)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserPARTITION {
			{
				p.SetState(6407)
				p.Partition_by()
			}

		}
		p.SetState(6411)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserWITH {
			{
				p.SetState(6410)
				p.Match(SnowflakeParserWITH)
			}

		}
		{
			p.SetState(6413)
			p.Match(SnowflakeParserLOCATION)
		}
		{
			p.SetState(6414)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6415)
			p.External_stage()
		}
		{
			p.SetState(6416)
			p.Match(SnowflakeParserPARTITION_TYPE)
		}
		{
			p.SetState(6417)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6418)
			p.Match(SnowflakeParserUSER_SPECIFIED)
		}
		{
			p.SetState(6419)
			p.File_format()
		}
		p.SetState(6421)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 725, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6420)
				p.Copy_grants()
			}


		}
		p.SetState(6424)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 726, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6423)
				p.With_row_access_policy()
			}


		}
		p.SetState(6427)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 727, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6426)
				p.With_tags()
			}


		}
		p.SetState(6430)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 728, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6429)
				p.Comment_clause()
			}


		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6432)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(6434)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(6433)
				p.Or_replace()
			}

		}
		{
			p.SetState(6436)
			p.Match(SnowflakeParserEXTERNAL)
		}
		{
			p.SetState(6437)
			p.Match(SnowflakeParserTABLE)
		}
		p.SetState(6439)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(6438)
				p.If_not_exists()
			}

		}
		{
			p.SetState(6441)
			p.Object_name()
		}
		{
			p.SetState(6442)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(6443)
			p.External_table_column_decl_list()
		}
		{
			p.SetState(6444)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		p.SetState(6446)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINTEGRATION {
			{
				p.SetState(6445)
				p.Cloud_provider_params3()
			}

		}
		p.SetState(6449)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserPARTITION {
			{
				p.SetState(6448)
				p.Partition_by()
			}

		}
		p.SetState(6452)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserWITH {
			{
				p.SetState(6451)
				p.Match(SnowflakeParserWITH)
			}

		}
		{
			p.SetState(6454)
			p.Match(SnowflakeParserLOCATION)
		}
		{
			p.SetState(6455)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6456)
			p.External_stage()
		}
		{
			p.SetState(6457)
			p.Match(SnowflakeParserPARTITION_TYPE)
		}
		{
			p.SetState(6458)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6459)
			p.Match(SnowflakeParserUSER_SPECIFIED)
		}
		{
			p.SetState(6460)
			p.File_format()
		}
		p.SetState(6464)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTABLE_FORMAT {
			{
				p.SetState(6461)
				p.Match(SnowflakeParserTABLE_FORMAT)
			}
			{
				p.SetState(6462)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6463)
				p.Match(SnowflakeParserDELTA)
			}

		}
		p.SetState(6467)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 735, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6466)
				p.Copy_grants()
			}


		}
		p.SetState(6470)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 736, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6469)
				p.With_row_access_policy()
			}


		}
		p.SetState(6473)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 737, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6472)
				p.With_tags()
			}


		}
		p.SetState(6476)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 738, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6475)
				p.Comment_clause()
			}


		}

	}


	return localctx
}


// IExternal_table_column_declContext is an interface to support dynamic dispatch.
type IExternal_table_column_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExternal_table_column_declContext differentiates from other interfaces.
	IsExternal_table_column_declContext()
}

type External_table_column_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternal_table_column_declContext() *External_table_column_declContext {
	var p = new(External_table_column_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_external_table_column_decl
	return p
}

func (*External_table_column_declContext) IsExternal_table_column_declContext() {}

func NewExternal_table_column_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *External_table_column_declContext {
	var p = new(External_table_column_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_external_table_column_decl

	return p
}

func (s *External_table_column_declContext) GetParser() antlr.Parser { return s.parser }

func (s *External_table_column_declContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *External_table_column_declContext) Data_type() IData_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *External_table_column_declContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *External_table_column_declContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *External_table_column_declContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *External_table_column_declContext) Inline_constraint() IInline_constraintContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInline_constraintContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInline_constraintContext)
}

func (s *External_table_column_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *External_table_column_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *External_table_column_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExternal_table_column_decl(s)
	}
}

func (s *External_table_column_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExternal_table_column_decl(s)
	}
}

func (s *External_table_column_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExternal_table_column_decl(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) External_table_column_decl() (localctx IExternal_table_column_declContext) {
	this := p
	_ = this

	localctx = NewExternal_table_column_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, SnowflakeParserRULE_external_table_column_decl)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6480)
		p.Column_name()
	}
	{
		p.SetState(6481)
		p.Data_type()
	}
	{
		p.SetState(6482)
		p.Match(SnowflakeParserAS)
	}
	p.SetState(6485)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 740, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6483)
			p.expr(0)
		}


	case 2:
		{
			p.SetState(6484)
			p.Id_()
		}

	}
	p.SetState(6488)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCONSTRAINT || _la == SnowflakeParserFOREIGN || _la == SnowflakeParserNOT || _la == SnowflakeParserPRIMARY || _la == SnowflakeParserREFERENCES || _la == SnowflakeParserUNIQUE {
		{
			p.SetState(6487)
			p.Inline_constraint()
		}

	}



	return localctx
}


// IExternal_table_column_decl_listContext is an interface to support dynamic dispatch.
type IExternal_table_column_decl_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExternal_table_column_decl_listContext differentiates from other interfaces.
	IsExternal_table_column_decl_listContext()
}

type External_table_column_decl_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternal_table_column_decl_listContext() *External_table_column_decl_listContext {
	var p = new(External_table_column_decl_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_external_table_column_decl_list
	return p
}

func (*External_table_column_decl_listContext) IsExternal_table_column_decl_listContext() {}

func NewExternal_table_column_decl_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *External_table_column_decl_listContext {
	var p = new(External_table_column_decl_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_external_table_column_decl_list

	return p
}

func (s *External_table_column_decl_listContext) GetParser() antlr.Parser { return s.parser }

func (s *External_table_column_decl_listContext) AllExternal_table_column_decl() []IExternal_table_column_declContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExternal_table_column_declContext); ok {
			len++
		}
	}

	tst := make([]IExternal_table_column_declContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExternal_table_column_declContext); ok {
			tst[i] = t.(IExternal_table_column_declContext)
			i++
		}
	}

	return tst
}

func (s *External_table_column_decl_listContext) External_table_column_decl(i int) IExternal_table_column_declContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternal_table_column_declContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternal_table_column_declContext)
}

func (s *External_table_column_decl_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *External_table_column_decl_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *External_table_column_decl_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *External_table_column_decl_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *External_table_column_decl_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExternal_table_column_decl_list(s)
	}
}

func (s *External_table_column_decl_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExternal_table_column_decl_list(s)
	}
}

func (s *External_table_column_decl_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExternal_table_column_decl_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) External_table_column_decl_list() (localctx IExternal_table_column_decl_listContext) {
	this := p
	_ = this

	localctx = NewExternal_table_column_decl_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, SnowflakeParserRULE_external_table_column_decl_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6490)
		p.External_table_column_decl()
	}
	p.SetState(6495)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(6491)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(6492)
			p.External_table_column_decl()
		}


		p.SetState(6497)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IFull_acctContext is an interface to support dynamic dispatch.
type IFull_acctContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFull_acctContext differentiates from other interfaces.
	IsFull_acctContext()
}

type Full_acctContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFull_acctContext() *Full_acctContext {
	var p = new(Full_acctContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_full_acct
	return p
}

func (*Full_acctContext) IsFull_acctContext() {}

func NewFull_acctContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_acctContext {
	var p = new(Full_acctContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_full_acct

	return p
}

func (s *Full_acctContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_acctContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Full_acctContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Full_acctContext) DOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, 0)
}

func (s *Full_acctContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_acctContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Full_acctContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFull_acct(s)
	}
}

func (s *Full_acctContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFull_acct(s)
	}
}

func (s *Full_acctContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFull_acct(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Full_acct() (localctx IFull_acctContext) {
	this := p
	_ = this

	localctx = NewFull_acctContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, SnowflakeParserRULE_full_acct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6498)
		p.Id_()
	}
	{
		p.SetState(6499)
		p.Match(SnowflakeParserDOT)
	}
	{
		p.SetState(6500)
		p.Id_()
	}



	return localctx
}


// IIntegration_type_nameContext is an interface to support dynamic dispatch.
type IIntegration_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntegration_type_nameContext differentiates from other interfaces.
	IsIntegration_type_nameContext()
}

type Integration_type_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegration_type_nameContext() *Integration_type_nameContext {
	var p = new(Integration_type_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_integration_type_name
	return p
}

func (*Integration_type_nameContext) IsIntegration_type_nameContext() {}

func NewIntegration_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Integration_type_nameContext {
	var p = new(Integration_type_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_integration_type_name

	return p
}

func (s *Integration_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Integration_type_nameContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Integration_type_nameContext) INTEGRATIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATIONS, 0)
}

func (s *Integration_type_nameContext) API() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI, 0)
}

func (s *Integration_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Integration_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Integration_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterIntegration_type_name(s)
	}
}

func (s *Integration_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitIntegration_type_name(s)
	}
}

func (s *Integration_type_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitIntegration_type_name(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Integration_type_name() (localctx IIntegration_type_nameContext) {
	this := p
	_ = this

	localctx = NewIntegration_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, SnowflakeParserRULE_integration_type_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6506)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserSECURITY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6502)
			p.Match(SnowflakeParserSECURITY)
		}
		{
			p.SetState(6503)
			p.Match(SnowflakeParserINTEGRATIONS)
		}


	case SnowflakeParserAPI:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6504)
			p.Match(SnowflakeParserAPI)
		}
		{
			p.SetState(6505)
			p.Match(SnowflakeParserINTEGRATIONS)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICreate_failover_groupContext is an interface to support dynamic dispatch.
type ICreate_failover_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_failover_groupContext differentiates from other interfaces.
	IsCreate_failover_groupContext()
}

type Create_failover_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_failover_groupContext() *Create_failover_groupContext {
	var p = new(Create_failover_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_failover_group
	return p
}

func (*Create_failover_groupContext) IsCreate_failover_groupContext() {}

func NewCreate_failover_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_failover_groupContext {
	var p = new(Create_failover_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_failover_group

	return p
}

func (s *Create_failover_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_failover_groupContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_failover_groupContext) FAILOVER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFAILOVER, 0)
}

func (s *Create_failover_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUP, 0)
}

func (s *Create_failover_groupContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Create_failover_groupContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_failover_groupContext) OBJECT_TYPES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOBJECT_TYPES, 0)
}

func (s *Create_failover_groupContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_failover_groupContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_failover_groupContext) AllObject_type() []IObject_typeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObject_typeContext); ok {
			len++
		}
	}

	tst := make([]IObject_typeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObject_typeContext); ok {
			tst[i] = t.(IObject_typeContext)
			i++
		}
	}

	return tst
}

func (s *Create_failover_groupContext) Object_type(i int) IObject_typeContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_typeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_typeContext)
}

func (s *Create_failover_groupContext) ALLOWED_ACCOUNTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_ACCOUNTS, 0)
}

func (s *Create_failover_groupContext) AllFull_acct() []IFull_acctContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFull_acctContext); ok {
			len++
		}
	}

	tst := make([]IFull_acctContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFull_acctContext); ok {
			tst[i] = t.(IFull_acctContext)
			i++
		}
	}

	return tst
}

func (s *Create_failover_groupContext) Full_acct(i int) IFull_acctContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFull_acctContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFull_acctContext)
}

func (s *Create_failover_groupContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_failover_groupContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Create_failover_groupContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Create_failover_groupContext) ALLOWED_DATABASES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_DATABASES, 0)
}

func (s *Create_failover_groupContext) ALLOWED_SHARES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_SHARES, 0)
}

func (s *Create_failover_groupContext) ALLOWED_INTEGRATION_TYPES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_INTEGRATION_TYPES, 0)
}

func (s *Create_failover_groupContext) AllIntegration_type_name() []IIntegration_type_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegration_type_nameContext); ok {
			len++
		}
	}

	tst := make([]IIntegration_type_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegration_type_nameContext); ok {
			tst[i] = t.(IIntegration_type_nameContext)
			i++
		}
	}

	return tst
}

func (s *Create_failover_groupContext) Integration_type_name(i int) IIntegration_type_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegration_type_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegration_type_nameContext)
}

func (s *Create_failover_groupContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIGNORE, 0)
}

func (s *Create_failover_groupContext) EDITION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEDITION, 0)
}

func (s *Create_failover_groupContext) CHECK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCHECK, 0)
}

func (s *Create_failover_groupContext) REPLICATION_SCHEDULE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION_SCHEDULE, 0)
}

func (s *Create_failover_groupContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_failover_groupContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Create_failover_groupContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICA, 0)
}

func (s *Create_failover_groupContext) OF() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOF, 0)
}

func (s *Create_failover_groupContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserDOT)
}

func (s *Create_failover_groupContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, i)
}

func (s *Create_failover_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_failover_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_failover_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_failover_group(s)
	}
}

func (s *Create_failover_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_failover_group(s)
	}
}

func (s *Create_failover_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_failover_group(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_failover_group() (localctx ICreate_failover_groupContext) {
	this := p
	_ = this

	localctx = NewCreate_failover_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, SnowflakeParserRULE_create_failover_group)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6597)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 756, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6508)
			p.Match(SnowflakeParserCREATE)
		}
		{
			p.SetState(6509)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(6510)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(6512)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(6511)
				p.If_not_exists()
			}

		}
		{
			p.SetState(6514)
			p.Id_()
		}
		{
			p.SetState(6515)
			p.Match(SnowflakeParserOBJECT_TYPES)
		}
		{
			p.SetState(6516)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6517)
			p.Object_type()
		}
		p.SetState(6522)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(6518)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(6519)
				p.Object_type()
			}


			p.SetState(6524)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(6535)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserALLOWED_DATABASES {
			{
				p.SetState(6525)
				p.Match(SnowflakeParserALLOWED_DATABASES)
			}
			{
				p.SetState(6526)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6527)
				p.Id_()
			}
			p.SetState(6532)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(6528)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(6529)
					p.Id_()
				}


				p.SetState(6534)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(6547)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserALLOWED_SHARES {
			{
				p.SetState(6537)
				p.Match(SnowflakeParserALLOWED_SHARES)
			}
			{
				p.SetState(6538)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6539)
				p.Id_()
			}
			p.SetState(6544)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(6540)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(6541)
					p.Id_()
				}


				p.SetState(6546)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(6559)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserALLOWED_INTEGRATION_TYPES {
			{
				p.SetState(6549)
				p.Match(SnowflakeParserALLOWED_INTEGRATION_TYPES)
			}
			{
				p.SetState(6550)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6551)
				p.Integration_type_name()
			}
			p.SetState(6556)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(6552)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(6553)
					p.Integration_type_name()
				}


				p.SetState(6558)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(6561)
			p.Match(SnowflakeParserALLOWED_ACCOUNTS)
		}
		{
			p.SetState(6562)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6563)
			p.Full_acct()
		}
		p.SetState(6568)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(6564)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(6565)
				p.Full_acct()
			}


			p.SetState(6570)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(6574)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIGNORE {
			{
				p.SetState(6571)
				p.Match(SnowflakeParserIGNORE)
			}
			{
				p.SetState(6572)
				p.Match(SnowflakeParserEDITION)
			}
			{
				p.SetState(6573)
				p.Match(SnowflakeParserCHECK)
			}

		}
		p.SetState(6579)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserREPLICATION_SCHEDULE {
			{
				p.SetState(6576)
				p.Match(SnowflakeParserREPLICATION_SCHEDULE)
			}
			{
				p.SetState(6577)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(6578)
				p.String_()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6581)
			p.Match(SnowflakeParserCREATE)
		}
		{
			p.SetState(6582)
			p.Match(SnowflakeParserFAILOVER)
		}
		{
			p.SetState(6583)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(6585)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(6584)
				p.If_not_exists()
			}

		}
		{
			p.SetState(6587)
			p.Id_()
		}
		{
			p.SetState(6588)
			p.Match(SnowflakeParserAS)
		}
		{
			p.SetState(6589)
			p.Match(SnowflakeParserREPLICA)
		}
		{
			p.SetState(6590)
			p.Match(SnowflakeParserOF)
		}
		{
			p.SetState(6591)
			p.Id_()
		}
		{
			p.SetState(6592)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(6593)
			p.Id_()
		}
		{
			p.SetState(6594)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(6595)
			p.Id_()
		}

	}


	return localctx
}


// ICreate_file_formatContext is an interface to support dynamic dispatch.
type ICreate_file_formatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_file_formatContext differentiates from other interfaces.
	IsCreate_file_formatContext()
}

type Create_file_formatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_file_formatContext() *Create_file_formatContext {
	var p = new(Create_file_formatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_file_format
	return p
}

func (*Create_file_formatContext) IsCreate_file_formatContext() {}

func NewCreate_file_formatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_file_formatContext {
	var p = new(Create_file_formatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_file_format

	return p
}

func (s *Create_file_formatContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_file_formatContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_file_formatContext) FILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE, 0)
}

func (s *Create_file_formatContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORMAT, 0)
}

func (s *Create_file_formatContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_file_formatContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Create_file_formatContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Create_file_formatContext) CSV() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCSV, 0)
}

func (s *Create_file_formatContext) JSON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserJSON, 0)
}

func (s *Create_file_formatContext) AVRO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAVRO, 0)
}

func (s *Create_file_formatContext) ORC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserORC, 0)
}

func (s *Create_file_formatContext) PARQUET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPARQUET, 0)
}

func (s *Create_file_formatContext) XML() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserXML, 0)
}

func (s *Create_file_formatContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_file_formatContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_file_formatContext) Format_type_options() IFormat_type_optionsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormat_type_optionsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormat_type_optionsContext)
}

func (s *Create_file_formatContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_file_formatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_file_formatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_file_formatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_file_format(s)
	}
}

func (s *Create_file_formatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_file_format(s)
	}
}

func (s *Create_file_formatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_file_format(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_file_format() (localctx ICreate_file_formatContext) {
	this := p
	_ = this

	localctx = NewCreate_file_formatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, SnowflakeParserRULE_create_file_format)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6599)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(6601)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(6600)
			p.Or_replace()
		}

	}
	{
		p.SetState(6603)
		p.Match(SnowflakeParserFILE)
	}
	{
		p.SetState(6604)
		p.Match(SnowflakeParserFORMAT)
	}
	p.SetState(6606)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(6605)
			p.If_not_exists()
		}

	}
	{
		p.SetState(6608)
		p.Object_name()
	}
	{
		p.SetState(6609)
		p.Match(SnowflakeParserTYPE)
	}
	{
		p.SetState(6610)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(6611)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserAVRO || _la == SnowflakeParserCSV || _la == SnowflakeParserJSON || _la == SnowflakeParserORC || _la == SnowflakeParserPARQUET || _la == SnowflakeParserXML) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(6613)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserALLOW_DUPLICATE || (int64((_la - 92)) & ^0x3f) == 0 && ((int64(1) << (_la - 92)) & 9221) != 0 || (int64((_la - 159)) & ^0x3f) == 0 && ((int64(1) << (_la - 159)) & 4611694814520410113) != 0 || (int64((_la - 231)) & ^0x3f) == 0 && ((int64(1) << (_la - 231)) & 214752837635) != 0 || (int64((_la - 301)) & ^0x3f) == 0 && ((int64(1) << (_la - 301)) & 144117387099111435) != 0 || _la == SnowflakeParserLZO || _la == SnowflakeParserNONE || _la == SnowflakeParserNULL_IF || (int64((_la - 591)) & ^0x3f) == 0 && ((int64(1) << (_la - 591)) & 1125917086711809) != 0 || _la == SnowflakeParserREPLACE_INVALID_CHARACTERS || (int64((_la - 777)) & ^0x3f) == 0 && ((int64(1) << (_la - 777)) & 4035225266123964627) != 0 || (int64((_la - 870)) & ^0x3f) == 0 && ((int64(1) << (_la - 870)) & 34359738497) != 0 || _la == SnowflakeParserUTF8 || _la == SnowflakeParserZSTD {
		{
			p.SetState(6612)
			p.Format_type_options()
		}

	}
	p.SetState(6616)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 760, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6615)
			p.Comment_clause()
		}


	}



	return localctx
}


// IArg_declContext is an interface to support dynamic dispatch.
type IArg_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArg_declContext differentiates from other interfaces.
	IsArg_declContext()
}

type Arg_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArg_declContext() *Arg_declContext {
	var p = new(Arg_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_arg_decl
	return p
}

func (*Arg_declContext) IsArg_declContext() {}

func NewArg_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Arg_declContext {
	var p = new(Arg_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_arg_decl

	return p
}

func (s *Arg_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Arg_declContext) Arg_name() IArg_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_nameContext)
}

func (s *Arg_declContext) Arg_data_type() IArg_data_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_data_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_data_typeContext)
}

func (s *Arg_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arg_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Arg_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterArg_decl(s)
	}
}

func (s *Arg_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitArg_decl(s)
	}
}

func (s *Arg_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitArg_decl(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Arg_decl() (localctx IArg_declContext) {
	this := p
	_ = this

	localctx = NewArg_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, SnowflakeParserRULE_arg_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6618)
		p.Arg_name()
	}
	{
		p.SetState(6619)
		p.Arg_data_type()
	}



	return localctx
}


// ICol_declContext is an interface to support dynamic dispatch.
type ICol_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCol_declContext differentiates from other interfaces.
	IsCol_declContext()
}

type Col_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCol_declContext() *Col_declContext {
	var p = new(Col_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_col_decl
	return p
}

func (*Col_declContext) IsCol_declContext() {}

func NewCol_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Col_declContext {
	var p = new(Col_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_col_decl

	return p
}

func (s *Col_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Col_declContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Col_declContext) Data_type() IData_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Col_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Col_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Col_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCol_decl(s)
	}
}

func (s *Col_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCol_decl(s)
	}
}

func (s *Col_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCol_decl(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Col_decl() (localctx ICol_declContext) {
	this := p
	_ = this

	localctx = NewCol_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, SnowflakeParserRULE_col_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6621)
		p.Column_name()
	}
	{
		p.SetState(6622)
		p.Data_type()
	}



	return localctx
}


// IFunction_definitionContext is an interface to support dynamic dispatch.
type IFunction_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_definitionContext differentiates from other interfaces.
	IsFunction_definitionContext()
}

type Function_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_definitionContext() *Function_definitionContext {
	var p = new(Function_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_function_definition
	return p
}

func (*Function_definitionContext) IsFunction_definitionContext() {}

func NewFunction_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_definitionContext {
	var p = new(Function_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_function_definition

	return p
}

func (s *Function_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_definitionContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Function_definitionContext) DBL_DOLLAR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDBL_DOLLAR, 0)
}

func (s *Function_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFunction_definition(s)
	}
}

func (s *Function_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFunction_definition(s)
	}
}

func (s *Function_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFunction_definition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Function_definition() (localctx IFunction_definitionContext) {
	this := p
	_ = this

	localctx = NewFunction_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, SnowflakeParserRULE_function_definition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6626)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserSTRING:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6624)
			p.String_()
		}


	case SnowflakeParserDBL_DOLLAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6625)
			p.Match(SnowflakeParserDBL_DOLLAR)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICreate_functionContext is an interface to support dynamic dispatch.
type ICreate_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_functionContext differentiates from other interfaces.
	IsCreate_functionContext()
}

type Create_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_functionContext() *Create_functionContext {
	var p = new(Create_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_function
	return p
}

func (*Create_functionContext) IsCreate_functionContext() {}

func NewCreate_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_functionContext {
	var p = new(Create_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_function

	return p
}

func (s *Create_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_functionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_functionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUNCTION, 0)
}

func (s *Create_functionContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_functionContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Create_functionContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Create_functionContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Create_functionContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Create_functionContext) AllRETURNS() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRETURNS)
}

func (s *Create_functionContext) RETURNS(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRETURNS, i)
}

func (s *Create_functionContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Create_functionContext) Function_definition() IFunction_definitionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_definitionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_definitionContext)
}

func (s *Create_functionContext) Data_type() IData_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_functionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Create_functionContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_functionContext) SECURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURE, 0)
}

func (s *Create_functionContext) AllArg_decl() []IArg_declContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArg_declContext); ok {
			len++
		}
	}

	tst := make([]IArg_declContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArg_declContext); ok {
			tst[i] = t.(IArg_declContext)
			i++
		}
	}

	return tst
}

func (s *Create_functionContext) Arg_decl(i int) IArg_declContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_declContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_declContext)
}

func (s *Create_functionContext) AllNULL_() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserNULL_)
}

func (s *Create_functionContext) NULL_(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, i)
}

func (s *Create_functionContext) CALLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCALLED, 0)
}

func (s *Create_functionContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Create_functionContext) INPUT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINPUT, 0)
}

func (s *Create_functionContext) STRICT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRICT, 0)
}

func (s *Create_functionContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_functionContext) VOLATILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVOLATILE, 0)
}

func (s *Create_functionContext) IMMUTABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIMMUTABLE, 0)
}

func (s *Create_functionContext) AllCol_decl() []ICol_declContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICol_declContext); ok {
			len++
		}
	}

	tst := make([]ICol_declContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICol_declContext); ok {
			tst[i] = t.(ICol_declContext)
			i++
		}
	}

	return tst
}

func (s *Create_functionContext) Col_decl(i int) ICol_declContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICol_declContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICol_declContext)
}

func (s *Create_functionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Create_functionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Create_functionContext) NOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, 0)
}

func (s *Create_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_function(s)
	}
}

func (s *Create_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_function(s)
	}
}

func (s *Create_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_function(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_function() (localctx ICreate_functionContext) {
	this := p
	_ = this

	localctx = NewCreate_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, SnowflakeParserRULE_create_function)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6628)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(6630)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(6629)
			p.Or_replace()
		}

	}
	p.SetState(6633)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSECURE {
		{
			p.SetState(6632)
			p.Match(SnowflakeParserSECURE)
		}

	}
	{
		p.SetState(6635)
		p.Match(SnowflakeParserFUNCTION)
	}
	{
		p.SetState(6636)
		p.Object_name()
	}
	{
		p.SetState(6637)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(6646)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
		{
			p.SetState(6638)
			p.Arg_decl()
		}
		p.SetState(6643)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(6639)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(6640)
				p.Arg_decl()
			}


			p.SetState(6645)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(6648)
		p.Match(SnowflakeParserRR_BRACKET)
	}
	{
		p.SetState(6649)
		p.Match(SnowflakeParserRETURNS)
	}
	p.SetState(6664)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserCHAR, SnowflakeParserCHARACTER, SnowflakeParserDOUBLE, SnowflakeParserINT, SnowflakeParserNUMBER, SnowflakeParserOBJECT, SnowflakeParserTIME, SnowflakeParserTIMESTAMP, SnowflakeParserTIMESTAMP_LTZ, SnowflakeParserTIMESTAMP_NTZ, SnowflakeParserTIMESTAMP_TZ, SnowflakeParserARRAY, SnowflakeParserBIGINT, SnowflakeParserBINARY, SnowflakeParserBOOLEAN, SnowflakeParserBYTEINT, SnowflakeParserDATE, SnowflakeParserDATETIME, SnowflakeParserDECIMAL_, SnowflakeParserFLOAT4, SnowflakeParserFLOAT8, SnowflakeParserFLOAT_, SnowflakeParserGEOGRAPHY, SnowflakeParserGEOMETRY, SnowflakeParserINTEGER, SnowflakeParserNUMERIC, SnowflakeParserREAL_, SnowflakeParserSMALLINT, SnowflakeParserSTRING_, SnowflakeParserTEXT, SnowflakeParserTINYINT, SnowflakeParserVARBINARY, SnowflakeParserVARCHAR, SnowflakeParserVARIANT:
		{
			p.SetState(6650)
			p.Data_type()
		}


	case SnowflakeParserTABLE:
		{
			p.SetState(6651)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(6652)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(6661)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(6653)
				p.Col_decl()
			}
			p.SetState(6658)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(6654)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(6655)
					p.Col_decl()
				}


				p.SetState(6660)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(6663)
			p.Match(SnowflakeParserRR_BRACKET)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(6670)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserNOT || _la == SnowflakeParserNULL_ {
		p.SetState(6667)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNOT {
			{
				p.SetState(6666)
				p.Match(SnowflakeParserNOT)
			}

		}
		{
			p.SetState(6669)
			p.Match(SnowflakeParserNULL_)
		}

	}
	p.SetState(6682)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserCALLED:
		{
			p.SetState(6672)
			p.Match(SnowflakeParserCALLED)
		}
		{
			p.SetState(6673)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(6674)
			p.Match(SnowflakeParserNULL_)
		}
		{
			p.SetState(6675)
			p.Match(SnowflakeParserINPUT)
		}


	case SnowflakeParserRETURNS:
		{
			p.SetState(6676)
			p.Match(SnowflakeParserRETURNS)
		}
		{
			p.SetState(6677)
			p.Match(SnowflakeParserNULL_)
		}
		{
			p.SetState(6678)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(6679)
			p.Match(SnowflakeParserNULL_)
		}
		{
			p.SetState(6680)
			p.Match(SnowflakeParserINPUT)
		}


	case SnowflakeParserSTRICT:
		{
			p.SetState(6681)
			p.Match(SnowflakeParserSTRICT)
		}


	case SnowflakeParserAS, SnowflakeParserCOMMENT, SnowflakeParserIMMUTABLE, SnowflakeParserVOLATILE:



	default:
	}
	p.SetState(6685)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIMMUTABLE || _la == SnowflakeParserVOLATILE {
		{
			p.SetState(6684)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserIMMUTABLE || _la == SnowflakeParserVOLATILE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(6688)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOMMENT {
		{
			p.SetState(6687)
			p.Comment_clause()
		}

	}
	{
		p.SetState(6690)
		p.Match(SnowflakeParserAS)
	}
	{
		p.SetState(6691)
		p.Function_definition()
	}



	return localctx
}


// ICreate_managed_accountContext is an interface to support dynamic dispatch.
type ICreate_managed_accountContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_managed_accountContext differentiates from other interfaces.
	IsCreate_managed_accountContext()
}

type Create_managed_accountContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_managed_accountContext() *Create_managed_accountContext {
	var p = new(Create_managed_accountContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_managed_account
	return p
}

func (*Create_managed_accountContext) IsCreate_managed_accountContext() {}

func NewCreate_managed_accountContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_managed_accountContext {
	var p = new(Create_managed_accountContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_managed_account

	return p
}

func (s *Create_managed_accountContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_managed_accountContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_managed_accountContext) MANAGED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMANAGED, 0)
}

func (s *Create_managed_accountContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Create_managed_accountContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Create_managed_accountContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_managed_accountContext) ADMIN_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADMIN_NAME, 0)
}

func (s *Create_managed_accountContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_managed_accountContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_managed_accountContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Create_managed_accountContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Create_managed_accountContext) ADMIN_PASSWORD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserADMIN_PASSWORD, 0)
}

func (s *Create_managed_accountContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Create_managed_accountContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_managed_accountContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Create_managed_accountContext) READER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREADER, 0)
}

func (s *Create_managed_accountContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Create_managed_accountContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_managed_accountContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_managed_accountContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_managed_account(s)
	}
}

func (s *Create_managed_accountContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_managed_account(s)
	}
}

func (s *Create_managed_accountContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_managed_account(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_managed_account() (localctx ICreate_managed_accountContext) {
	this := p
	_ = this

	localctx = NewCreate_managed_accountContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, SnowflakeParserRULE_create_managed_account)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6693)
		p.Match(SnowflakeParserCREATE)
	}
	{
		p.SetState(6694)
		p.Match(SnowflakeParserMANAGED)
	}
	{
		p.SetState(6695)
		p.Match(SnowflakeParserACCOUNT)
	}
	{
		p.SetState(6696)
		p.Id_()
	}
	{
		p.SetState(6697)
		p.Match(SnowflakeParserADMIN_NAME)
	}
	{
		p.SetState(6698)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(6699)
		p.Id_()
	}
	{
		p.SetState(6700)
		p.Match(SnowflakeParserCOMMA)
	}
	{
		p.SetState(6701)
		p.Match(SnowflakeParserADMIN_PASSWORD)
	}
	{
		p.SetState(6702)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(6703)
		p.String_()
	}
	{
		p.SetState(6704)
		p.Match(SnowflakeParserCOMMA)
	}
	{
		p.SetState(6705)
		p.Match(SnowflakeParserTYPE)
	}
	{
		p.SetState(6706)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(6707)
		p.Match(SnowflakeParserREADER)
	}
	p.SetState(6712)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOMMA {
		{
			p.SetState(6708)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(6709)
			p.Match(SnowflakeParserCOMMENT)
		}
		{
			p.SetState(6710)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6711)
			p.String_()
		}

	}



	return localctx
}


// ICreate_masking_policyContext is an interface to support dynamic dispatch.
type ICreate_masking_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_masking_policyContext differentiates from other interfaces.
	IsCreate_masking_policyContext()
}

type Create_masking_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_masking_policyContext() *Create_masking_policyContext {
	var p = new(Create_masking_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_masking_policy
	return p
}

func (*Create_masking_policyContext) IsCreate_masking_policyContext() {}

func NewCreate_masking_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_masking_policyContext {
	var p = new(Create_masking_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_masking_policy

	return p
}

func (s *Create_masking_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_masking_policyContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_masking_policyContext) MASKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, 0)
}

func (s *Create_masking_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Create_masking_policyContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_masking_policyContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Create_masking_policyContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Create_masking_policyContext) AllArg_name() []IArg_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArg_nameContext); ok {
			len++
		}
	}

	tst := make([]IArg_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArg_nameContext); ok {
			tst[i] = t.(IArg_nameContext)
			i++
		}
	}

	return tst
}

func (s *Create_masking_policyContext) Arg_name(i int) IArg_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_nameContext)
}

func (s *Create_masking_policyContext) AllArg_data_type() []IArg_data_typeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArg_data_typeContext); ok {
			len++
		}
	}

	tst := make([]IArg_data_typeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArg_data_typeContext); ok {
			tst[i] = t.(IArg_data_typeContext)
			i++
		}
	}

	return tst
}

func (s *Create_masking_policyContext) Arg_data_type(i int) IArg_data_typeContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_data_typeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_data_typeContext)
}

func (s *Create_masking_policyContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Create_masking_policyContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRETURNS, 0)
}

func (s *Create_masking_policyContext) ARROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserARROW, 0)
}

func (s *Create_masking_policyContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_masking_policyContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_masking_policyContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_masking_policyContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, 0)
}

func (s *Create_masking_policyContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_masking_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_masking_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_masking_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_masking_policy(s)
	}
}

func (s *Create_masking_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_masking_policy(s)
	}
}

func (s *Create_masking_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_masking_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_masking_policy() (localctx ICreate_masking_policyContext) {
	this := p
	_ = this

	localctx = NewCreate_masking_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, SnowflakeParserRULE_create_masking_policy)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6714)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(6716)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(6715)
			p.Or_replace()
		}

	}
	{
		p.SetState(6718)
		p.Match(SnowflakeParserMASKING)
	}
	{
		p.SetState(6719)
		p.Match(SnowflakeParserPOLICY)
	}
	p.SetState(6721)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(6720)
			p.If_not_exists()
		}

	}
	{
		p.SetState(6723)
		p.Object_name()
	}
	{
		p.SetState(6724)
		p.Match(SnowflakeParserAS)
	}
	{
		p.SetState(6725)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(6726)
		p.Arg_name()
	}
	{
		p.SetState(6727)
		p.Arg_data_type()
	}
	p.SetState(6732)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOMMA {
		{
			p.SetState(6728)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(6729)
			p.Arg_name()
		}
		{
			p.SetState(6730)
			p.Arg_data_type()
		}

	}
	{
		p.SetState(6734)
		p.Match(SnowflakeParserRR_BRACKET)
	}
	{
		p.SetState(6735)
		p.Match(SnowflakeParserRETURNS)
	}
	{
		p.SetState(6736)
		p.Arg_data_type()
	}
	{
		p.SetState(6737)
		p.Match(SnowflakeParserARROW)
	}
	{
		p.SetState(6738)
		p.expr(0)
	}
	p.SetState(6740)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 778, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6739)
			p.Comment_clause()
		}


	}



	return localctx
}


// ITag_declContext is an interface to support dynamic dispatch.
type ITag_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTag_declContext differentiates from other interfaces.
	IsTag_declContext()
}

type Tag_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTag_declContext() *Tag_declContext {
	var p = new(Tag_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_tag_decl
	return p
}

func (*Tag_declContext) IsTag_declContext() {}

func NewTag_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tag_declContext {
	var p = new(Tag_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_tag_decl

	return p
}

func (s *Tag_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Tag_declContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Tag_declContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Tag_declContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Tag_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tag_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Tag_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTag_decl(s)
	}
}

func (s *Tag_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTag_decl(s)
	}
}

func (s *Tag_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTag_decl(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Tag_decl() (localctx ITag_declContext) {
	this := p
	_ = this

	localctx = NewTag_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, SnowflakeParserRULE_tag_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6742)
		p.Id_()
	}
	{
		p.SetState(6743)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(6744)
		p.String_()
	}



	return localctx
}


// IColumn_list_in_parenthesesContext is an interface to support dynamic dispatch.
type IColumn_list_in_parenthesesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_list_in_parenthesesContext differentiates from other interfaces.
	IsColumn_list_in_parenthesesContext()
}

type Column_list_in_parenthesesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_list_in_parenthesesContext() *Column_list_in_parenthesesContext {
	var p = new(Column_list_in_parenthesesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_column_list_in_parentheses
	return p
}

func (*Column_list_in_parenthesesContext) IsColumn_list_in_parenthesesContext() {}

func NewColumn_list_in_parenthesesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_list_in_parenthesesContext {
	var p = new(Column_list_in_parenthesesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_column_list_in_parentheses

	return p
}

func (s *Column_list_in_parenthesesContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_list_in_parenthesesContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Column_list_in_parenthesesContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Column_list_in_parenthesesContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Column_list_in_parenthesesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_list_in_parenthesesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_list_in_parenthesesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterColumn_list_in_parentheses(s)
	}
}

func (s *Column_list_in_parenthesesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitColumn_list_in_parentheses(s)
	}
}

func (s *Column_list_in_parenthesesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitColumn_list_in_parentheses(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Column_list_in_parentheses() (localctx IColumn_list_in_parenthesesContext) {
	this := p
	_ = this

	localctx = NewColumn_list_in_parenthesesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, SnowflakeParserRULE_column_list_in_parentheses)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6746)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(6747)
		p.Column_list()
	}
	{
		p.SetState(6748)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// ICreate_materialized_viewContext is an interface to support dynamic dispatch.
type ICreate_materialized_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_materialized_viewContext differentiates from other interfaces.
	IsCreate_materialized_viewContext()
}

type Create_materialized_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_materialized_viewContext() *Create_materialized_viewContext {
	var p = new(Create_materialized_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_materialized_view
	return p
}

func (*Create_materialized_viewContext) IsCreate_materialized_viewContext() {}

func NewCreate_materialized_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_materialized_viewContext {
	var p = new(Create_materialized_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_materialized_view

	return p
}

func (s *Create_materialized_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_materialized_viewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_materialized_viewContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATERIALIZED, 0)
}

func (s *Create_materialized_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Create_materialized_viewContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_materialized_viewContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Create_materialized_viewContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Create_materialized_viewContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_materialized_viewContext) SECURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURE, 0)
}

func (s *Create_materialized_viewContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_materialized_viewContext) Copy_grants() ICopy_grantsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_grantsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_grantsContext)
}

func (s *Create_materialized_viewContext) Column_list_in_parentheses() IColumn_list_in_parenthesesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_list_in_parenthesesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_list_in_parenthesesContext)
}

func (s *Create_materialized_viewContext) With_row_access_policy() IWith_row_access_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_row_access_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_row_access_policyContext)
}

func (s *Create_materialized_viewContext) With_tags() IWith_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_tagsContext)
}

func (s *Create_materialized_viewContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_materialized_viewContext) Cluster_by() ICluster_byContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICluster_byContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICluster_byContext)
}

func (s *Create_materialized_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_materialized_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_materialized_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_materialized_view(s)
	}
}

func (s *Create_materialized_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_materialized_view(s)
	}
}

func (s *Create_materialized_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_materialized_view(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_materialized_view() (localctx ICreate_materialized_viewContext) {
	this := p
	_ = this

	localctx = NewCreate_materialized_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, SnowflakeParserRULE_create_materialized_view)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6750)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(6752)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(6751)
			p.Or_replace()
		}

	}
	p.SetState(6755)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSECURE {
		{
			p.SetState(6754)
			p.Match(SnowflakeParserSECURE)
		}

	}
	{
		p.SetState(6757)
		p.Match(SnowflakeParserMATERIALIZED)
	}
	{
		p.SetState(6758)
		p.Match(SnowflakeParserVIEW)
	}
	p.SetState(6760)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(6759)
			p.If_not_exists()
		}

	}
	{
		p.SetState(6762)
		p.Object_name()
	}
	p.SetState(6764)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOPY {
		{
			p.SetState(6763)
			p.Copy_grants()
		}

	}
	p.SetState(6767)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLR_BRACKET {
		{
			p.SetState(6766)
			p.Column_list_in_parentheses()
		}

	}
	p.SetState(6770)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 784, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6769)
			p.With_row_access_policy()
		}


	}
	p.SetState(6773)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTAG || _la == SnowflakeParserWITH {
		{
			p.SetState(6772)
			p.With_tags()
		}

	}
	p.SetState(6776)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOMMENT {
		{
			p.SetState(6775)
			p.Comment_clause()
		}

	}
	p.SetState(6779)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCLUSTER {
		{
			p.SetState(6778)
			p.Cluster_by()
		}

	}
	{
		p.SetState(6781)
		p.Match(SnowflakeParserAS)
	}
	{
		p.SetState(6782)
		p.Select_statement()
	}



	return localctx
}


// ICreate_network_policyContext is an interface to support dynamic dispatch.
type ICreate_network_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_network_policyContext differentiates from other interfaces.
	IsCreate_network_policyContext()
}

type Create_network_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_network_policyContext() *Create_network_policyContext {
	var p = new(Create_network_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_network_policy
	return p
}

func (*Create_network_policyContext) IsCreate_network_policyContext() {}

func NewCreate_network_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_network_policyContext {
	var p = new(Create_network_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_network_policy

	return p
}

func (s *Create_network_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_network_policyContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_network_policyContext) NETWORK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK, 0)
}

func (s *Create_network_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Create_network_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_network_policyContext) ALLOWED_IP_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_IP_LIST, 0)
}

func (s *Create_network_policyContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_network_policyContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_network_policyContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Create_network_policyContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Create_network_policyContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Create_network_policyContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Create_network_policyContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_network_policyContext) AllString_list() []IString_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IString_listContext); ok {
			len++
		}
	}

	tst := make([]IString_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IString_listContext); ok {
			tst[i] = t.(IString_listContext)
			i++
		}
	}

	return tst
}

func (s *Create_network_policyContext) String_list(i int) IString_listContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_listContext)
}

func (s *Create_network_policyContext) BLOCKED_IP_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBLOCKED_IP_LIST, 0)
}

func (s *Create_network_policyContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_network_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_network_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_network_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_network_policy(s)
	}
}

func (s *Create_network_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_network_policy(s)
	}
}

func (s *Create_network_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_network_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_network_policy() (localctx ICreate_network_policyContext) {
	this := p
	_ = this

	localctx = NewCreate_network_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, SnowflakeParserRULE_create_network_policy)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6784)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(6786)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(6785)
			p.Or_replace()
		}

	}
	{
		p.SetState(6788)
		p.Match(SnowflakeParserNETWORK)
	}
	{
		p.SetState(6789)
		p.Match(SnowflakeParserPOLICY)
	}
	{
		p.SetState(6790)
		p.Id_()
	}
	{
		p.SetState(6791)
		p.Match(SnowflakeParserALLOWED_IP_LIST)
	}
	{
		p.SetState(6792)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(6793)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(6795)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSTRING {
		{
			p.SetState(6794)
			p.String_list()
		}

	}
	{
		p.SetState(6797)
		p.Match(SnowflakeParserRR_BRACKET)
	}
	p.SetState(6805)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserBLOCKED_IP_LIST {
		{
			p.SetState(6798)
			p.Match(SnowflakeParserBLOCKED_IP_LIST)
		}
		{
			p.SetState(6799)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6800)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(6802)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTRING {
			{
				p.SetState(6801)
				p.String_list()
			}

		}
		{
			p.SetState(6804)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	p.SetState(6808)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 792, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6807)
			p.Comment_clause()
		}


	}



	return localctx
}


// ICloud_provider_params_autoContext is an interface to support dynamic dispatch.
type ICloud_provider_params_autoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCloud_provider_params_autoContext differentiates from other interfaces.
	IsCloud_provider_params_autoContext()
}

type Cloud_provider_params_autoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCloud_provider_params_autoContext() *Cloud_provider_params_autoContext {
	var p = new(Cloud_provider_params_autoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_cloud_provider_params_auto
	return p
}

func (*Cloud_provider_params_autoContext) IsCloud_provider_params_autoContext() {}

func NewCloud_provider_params_autoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cloud_provider_params_autoContext {
	var p = new(Cloud_provider_params_autoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_cloud_provider_params_auto

	return p
}

func (s *Cloud_provider_params_autoContext) GetParser() antlr.Parser { return s.parser }

func (s *Cloud_provider_params_autoContext) NOTIFICATION_PROVIDER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOTIFICATION_PROVIDER, 0)
}

func (s *Cloud_provider_params_autoContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Cloud_provider_params_autoContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Cloud_provider_params_autoContext) GCP_PUBSUB() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGCP_PUBSUB, 0)
}

func (s *Cloud_provider_params_autoContext) GCP_PUBSUB_SUBSCRIPTION_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGCP_PUBSUB_SUBSCRIPTION_NAME, 0)
}

func (s *Cloud_provider_params_autoContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Cloud_provider_params_autoContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Cloud_provider_params_autoContext) AZURE_EVENT_GRID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_EVENT_GRID, 0)
}

func (s *Cloud_provider_params_autoContext) AZURE_STORAGE_QUEUE_PRIMARY_URI() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_STORAGE_QUEUE_PRIMARY_URI, 0)
}

func (s *Cloud_provider_params_autoContext) AZURE_TENANT_ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_TENANT_ID, 0)
}

func (s *Cloud_provider_params_autoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cloud_provider_params_autoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Cloud_provider_params_autoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCloud_provider_params_auto(s)
	}
}

func (s *Cloud_provider_params_autoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCloud_provider_params_auto(s)
	}
}

func (s *Cloud_provider_params_autoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCloud_provider_params_auto(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Cloud_provider_params_auto() (localctx ICloud_provider_params_autoContext) {
	this := p
	_ = this

	localctx = NewCloud_provider_params_autoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, SnowflakeParserRULE_cloud_provider_params_auto)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6826)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 793, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6810)
			p.Match(SnowflakeParserNOTIFICATION_PROVIDER)
		}
		{
			p.SetState(6811)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6812)
			p.Match(SnowflakeParserGCP_PUBSUB)
		}
		{
			p.SetState(6813)
			p.Match(SnowflakeParserGCP_PUBSUB_SUBSCRIPTION_NAME)
		}
		{
			p.SetState(6814)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6815)
			p.String_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6816)
			p.Match(SnowflakeParserNOTIFICATION_PROVIDER)
		}
		{
			p.SetState(6817)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6818)
			p.Match(SnowflakeParserAZURE_EVENT_GRID)
		}
		{
			p.SetState(6819)
			p.Match(SnowflakeParserAZURE_STORAGE_QUEUE_PRIMARY_URI)
		}
		{
			p.SetState(6820)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6821)
			p.String_()
		}
		{
			p.SetState(6822)
			p.Match(SnowflakeParserAZURE_TENANT_ID)
		}
		{
			p.SetState(6823)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6824)
			p.String_()
		}

	}


	return localctx
}


// ICloud_provider_params_pushContext is an interface to support dynamic dispatch.
type ICloud_provider_params_pushContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCloud_provider_params_pushContext differentiates from other interfaces.
	IsCloud_provider_params_pushContext()
}

type Cloud_provider_params_pushContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCloud_provider_params_pushContext() *Cloud_provider_params_pushContext {
	var p = new(Cloud_provider_params_pushContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_cloud_provider_params_push
	return p
}

func (*Cloud_provider_params_pushContext) IsCloud_provider_params_pushContext() {}

func NewCloud_provider_params_pushContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cloud_provider_params_pushContext {
	var p = new(Cloud_provider_params_pushContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_cloud_provider_params_push

	return p
}

func (s *Cloud_provider_params_pushContext) GetParser() antlr.Parser { return s.parser }

func (s *Cloud_provider_params_pushContext) NOTIFICATION_PROVIDER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOTIFICATION_PROVIDER, 0)
}

func (s *Cloud_provider_params_pushContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Cloud_provider_params_pushContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Cloud_provider_params_pushContext) AWS_SNS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAWS_SNS, 0)
}

func (s *Cloud_provider_params_pushContext) AWS_SNS_TOPIC_ARN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAWS_SNS_TOPIC_ARN, 0)
}

func (s *Cloud_provider_params_pushContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Cloud_provider_params_pushContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Cloud_provider_params_pushContext) AWS_SNS_ROLE_ARN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAWS_SNS_ROLE_ARN, 0)
}

func (s *Cloud_provider_params_pushContext) GCP_PUBSUB() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGCP_PUBSUB, 0)
}

func (s *Cloud_provider_params_pushContext) GCP_PUBSUB_TOPIC_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGCP_PUBSUB_TOPIC_NAME, 0)
}

func (s *Cloud_provider_params_pushContext) AZURE_EVENT_GRID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_EVENT_GRID, 0)
}

func (s *Cloud_provider_params_pushContext) AZURE_EVENT_GRID_TOPIC_ENDPOINT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_EVENT_GRID_TOPIC_ENDPOINT, 0)
}

func (s *Cloud_provider_params_pushContext) AZURE_TENANT_ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_TENANT_ID, 0)
}

func (s *Cloud_provider_params_pushContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cloud_provider_params_pushContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Cloud_provider_params_pushContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCloud_provider_params_push(s)
	}
}

func (s *Cloud_provider_params_pushContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCloud_provider_params_push(s)
	}
}

func (s *Cloud_provider_params_pushContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCloud_provider_params_push(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Cloud_provider_params_push() (localctx ICloud_provider_params_pushContext) {
	this := p
	_ = this

	localctx = NewCloud_provider_params_pushContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, SnowflakeParserRULE_cloud_provider_params_push)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6854)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 794, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6828)
			p.Match(SnowflakeParserNOTIFICATION_PROVIDER)
		}
		{
			p.SetState(6829)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6830)
			p.Match(SnowflakeParserAWS_SNS)
		}
		{
			p.SetState(6831)
			p.Match(SnowflakeParserAWS_SNS_TOPIC_ARN)
		}
		{
			p.SetState(6832)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6833)
			p.String_()
		}
		{
			p.SetState(6834)
			p.Match(SnowflakeParserAWS_SNS_ROLE_ARN)
		}
		{
			p.SetState(6835)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6836)
			p.String_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6838)
			p.Match(SnowflakeParserNOTIFICATION_PROVIDER)
		}
		{
			p.SetState(6839)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6840)
			p.Match(SnowflakeParserGCP_PUBSUB)
		}
		{
			p.SetState(6841)
			p.Match(SnowflakeParserGCP_PUBSUB_TOPIC_NAME)
		}
		{
			p.SetState(6842)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6843)
			p.String_()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6844)
			p.Match(SnowflakeParserNOTIFICATION_PROVIDER)
		}
		{
			p.SetState(6845)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6846)
			p.Match(SnowflakeParserAZURE_EVENT_GRID)
		}
		{
			p.SetState(6847)
			p.Match(SnowflakeParserAZURE_EVENT_GRID_TOPIC_ENDPOINT)
		}
		{
			p.SetState(6848)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6849)
			p.String_()
		}
		{
			p.SetState(6850)
			p.Match(SnowflakeParserAZURE_TENANT_ID)
		}
		{
			p.SetState(6851)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6852)
			p.String_()
		}

	}


	return localctx
}


// ICreate_notification_integrationContext is an interface to support dynamic dispatch.
type ICreate_notification_integrationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_notification_integrationContext differentiates from other interfaces.
	IsCreate_notification_integrationContext()
}

type Create_notification_integrationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_notification_integrationContext() *Create_notification_integrationContext {
	var p = new(Create_notification_integrationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_notification_integration
	return p
}

func (*Create_notification_integrationContext) IsCreate_notification_integrationContext() {}

func NewCreate_notification_integrationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_notification_integrationContext {
	var p = new(Create_notification_integrationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_notification_integration

	return p
}

func (s *Create_notification_integrationContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_notification_integrationContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_notification_integrationContext) NOTIFICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOTIFICATION, 0)
}

func (s *Create_notification_integrationContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Create_notification_integrationContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_notification_integrationContext) ENABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLED, 0)
}

func (s *Create_notification_integrationContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_notification_integrationContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_notification_integrationContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Create_notification_integrationContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Create_notification_integrationContext) QUEUE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserQUEUE, 0)
}

func (s *Create_notification_integrationContext) Cloud_provider_params_auto() ICloud_provider_params_autoContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloud_provider_params_autoContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloud_provider_params_autoContext)
}

func (s *Create_notification_integrationContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_notification_integrationContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_notification_integrationContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_notification_integrationContext) DIRECTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDIRECTION, 0)
}

func (s *Create_notification_integrationContext) OUTBOUND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOUTBOUND, 0)
}

func (s *Create_notification_integrationContext) Cloud_provider_params_push() ICloud_provider_params_pushContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloud_provider_params_pushContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloud_provider_params_pushContext)
}

func (s *Create_notification_integrationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_notification_integrationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_notification_integrationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_notification_integration(s)
	}
}

func (s *Create_notification_integrationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_notification_integration(s)
	}
}

func (s *Create_notification_integrationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_notification_integration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_notification_integration() (localctx ICreate_notification_integrationContext) {
	this := p
	_ = this

	localctx = NewCreate_notification_integrationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, SnowflakeParserRULE_create_notification_integration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6899)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 801, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6856)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(6858)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(6857)
				p.Or_replace()
			}

		}
		{
			p.SetState(6860)
			p.Match(SnowflakeParserNOTIFICATION)
		}
		{
			p.SetState(6861)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(6863)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(6862)
				p.If_not_exists()
			}

		}
		{
			p.SetState(6865)
			p.Id_()
		}
		{
			p.SetState(6866)
			p.Match(SnowflakeParserENABLED)
		}
		{
			p.SetState(6867)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6868)
			p.True_false()
		}
		{
			p.SetState(6869)
			p.Match(SnowflakeParserTYPE)
		}
		{
			p.SetState(6870)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6871)
			p.Match(SnowflakeParserQUEUE)
		}
		{
			p.SetState(6872)
			p.Cloud_provider_params_auto()
		}
		p.SetState(6874)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 797, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6873)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6876)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(6878)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(6877)
				p.Or_replace()
			}

		}
		{
			p.SetState(6880)
			p.Match(SnowflakeParserNOTIFICATION)
		}
		{
			p.SetState(6881)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(6883)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(6882)
				p.If_not_exists()
			}

		}
		{
			p.SetState(6885)
			p.Id_()
		}
		{
			p.SetState(6886)
			p.Match(SnowflakeParserENABLED)
		}
		{
			p.SetState(6887)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6888)
			p.True_false()
		}
		{
			p.SetState(6889)
			p.Match(SnowflakeParserDIRECTION)
		}
		{
			p.SetState(6890)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6891)
			p.Match(SnowflakeParserOUTBOUND)
		}
		{
			p.SetState(6892)
			p.Match(SnowflakeParserTYPE)
		}
		{
			p.SetState(6893)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6894)
			p.Match(SnowflakeParserQUEUE)
		}
		{
			p.SetState(6895)
			p.Cloud_provider_params_push()
		}
		p.SetState(6897)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 800, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6896)
				p.Comment_clause()
			}


		}

	}


	return localctx
}


// ICreate_pipeContext is an interface to support dynamic dispatch.
type ICreate_pipeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_pipeContext differentiates from other interfaces.
	IsCreate_pipeContext()
}

type Create_pipeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_pipeContext() *Create_pipeContext {
	var p = new(Create_pipeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_pipe
	return p
}

func (*Create_pipeContext) IsCreate_pipeContext() {}

func NewCreate_pipeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_pipeContext {
	var p = new(Create_pipeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_pipe

	return p
}

func (s *Create_pipeContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_pipeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_pipeContext) PIPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPIPE, 0)
}

func (s *Create_pipeContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_pipeContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Create_pipeContext) Copy_into_table() ICopy_into_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_into_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_into_tableContext)
}

func (s *Create_pipeContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_pipeContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_pipeContext) AUTO_INGEST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTO_INGEST, 0)
}

func (s *Create_pipeContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_pipeContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_pipeContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Create_pipeContext) ERROR_INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserERROR_INTEGRATION, 0)
}

func (s *Create_pipeContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_pipeContext) AWS_SNS_TOPIC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAWS_SNS_TOPIC, 0)
}

func (s *Create_pipeContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Create_pipeContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_pipeContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Create_pipeContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_pipeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_pipeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_pipeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_pipe(s)
	}
}

func (s *Create_pipeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_pipe(s)
	}
}

func (s *Create_pipeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_pipe(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_pipe() (localctx ICreate_pipeContext) {
	this := p
	_ = this

	localctx = NewCreate_pipeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, SnowflakeParserRULE_create_pipe)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6901)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(6903)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(6902)
			p.Or_replace()
		}

	}
	{
		p.SetState(6905)
		p.Match(SnowflakeParserPIPE)
	}
	p.SetState(6907)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(6906)
			p.If_not_exists()
		}

	}
	{
		p.SetState(6909)
		p.Object_name()
	}
	p.SetState(6913)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAUTO_INGEST {
		{
			p.SetState(6910)
			p.Match(SnowflakeParserAUTO_INGEST)
		}
		{
			p.SetState(6911)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6912)
			p.True_false()
		}

	}
	p.SetState(6918)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserERROR_INTEGRATION {
		{
			p.SetState(6915)
			p.Match(SnowflakeParserERROR_INTEGRATION)
		}
		{
			p.SetState(6916)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6917)
			p.Id_()
		}

	}
	p.SetState(6923)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAWS_SNS_TOPIC {
		{
			p.SetState(6920)
			p.Match(SnowflakeParserAWS_SNS_TOPIC)
		}
		{
			p.SetState(6921)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6922)
			p.String_()
		}

	}
	p.SetState(6928)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserINTEGRATION {
		{
			p.SetState(6925)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(6926)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(6927)
			p.String_()
		}

	}
	p.SetState(6931)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOMMENT {
		{
			p.SetState(6930)
			p.Comment_clause()
		}

	}
	{
		p.SetState(6933)
		p.Match(SnowflakeParserAS)
	}
	{
		p.SetState(6934)
		p.Copy_into_table()
	}



	return localctx
}


// ICaller_ownerContext is an interface to support dynamic dispatch.
type ICaller_ownerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaller_ownerContext differentiates from other interfaces.
	IsCaller_ownerContext()
}

type Caller_ownerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaller_ownerContext() *Caller_ownerContext {
	var p = new(Caller_ownerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_caller_owner
	return p
}

func (*Caller_ownerContext) IsCaller_ownerContext() {}

func NewCaller_ownerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Caller_ownerContext {
	var p = new(Caller_ownerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_caller_owner

	return p
}

func (s *Caller_ownerContext) GetParser() antlr.Parser { return s.parser }

func (s *Caller_ownerContext) CALLER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCALLER, 0)
}

func (s *Caller_ownerContext) OWNER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOWNER, 0)
}

func (s *Caller_ownerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Caller_ownerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Caller_ownerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCaller_owner(s)
	}
}

func (s *Caller_ownerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCaller_owner(s)
	}
}

func (s *Caller_ownerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCaller_owner(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Caller_owner() (localctx ICaller_ownerContext) {
	this := p
	_ = this

	localctx = NewCaller_ownerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, SnowflakeParserRULE_caller_owner)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6936)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserCALLER || _la == SnowflakeParserOWNER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IExecuta_asContext is an interface to support dynamic dispatch.
type IExecuta_asContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecuta_asContext differentiates from other interfaces.
	IsExecuta_asContext()
}

type Executa_asContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecuta_asContext() *Executa_asContext {
	var p = new(Executa_asContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_executa_as
	return p
}

func (*Executa_asContext) IsExecuta_asContext() {}

func NewExecuta_asContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Executa_asContext {
	var p = new(Executa_asContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_executa_as

	return p
}

func (s *Executa_asContext) GetParser() antlr.Parser { return s.parser }

func (s *Executa_asContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXECUTE, 0)
}

func (s *Executa_asContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Executa_asContext) Caller_owner() ICaller_ownerContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICaller_ownerContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICaller_ownerContext)
}

func (s *Executa_asContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Executa_asContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Executa_asContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExecuta_as(s)
	}
}

func (s *Executa_asContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExecuta_as(s)
	}
}

func (s *Executa_asContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExecuta_as(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Executa_as() (localctx IExecuta_asContext) {
	this := p
	_ = this

	localctx = NewExecuta_asContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, SnowflakeParserRULE_executa_as)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6938)
		p.Match(SnowflakeParserEXECUTE)
	}
	{
		p.SetState(6939)
		p.Match(SnowflakeParserAS)
	}
	{
		p.SetState(6940)
		p.Caller_owner()
	}



	return localctx
}


// IProcedure_definitionContext is an interface to support dynamic dispatch.
type IProcedure_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedure_definitionContext differentiates from other interfaces.
	IsProcedure_definitionContext()
}

type Procedure_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_definitionContext() *Procedure_definitionContext {
	var p = new(Procedure_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_procedure_definition
	return p
}

func (*Procedure_definitionContext) IsProcedure_definitionContext() {}

func NewProcedure_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_definitionContext {
	var p = new(Procedure_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_procedure_definition

	return p
}

func (s *Procedure_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_definitionContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Procedure_definitionContext) DBL_DOLLAR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDBL_DOLLAR, 0)
}

func (s *Procedure_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Procedure_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterProcedure_definition(s)
	}
}

func (s *Procedure_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitProcedure_definition(s)
	}
}

func (s *Procedure_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitProcedure_definition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Procedure_definition() (localctx IProcedure_definitionContext) {
	this := p
	_ = this

	localctx = NewProcedure_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, SnowflakeParserRULE_procedure_definition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6944)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserSTRING:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6942)
			p.String_()
		}


	case SnowflakeParserDBL_DOLLAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6943)
			p.Match(SnowflakeParserDBL_DOLLAR)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICreate_procedureContext is an interface to support dynamic dispatch.
type ICreate_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_procedureContext differentiates from other interfaces.
	IsCreate_procedureContext()
}

type Create_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_procedureContext() *Create_procedureContext {
	var p = new(Create_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_procedure
	return p
}

func (*Create_procedureContext) IsCreate_procedureContext() {}

func NewCreate_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_procedureContext {
	var p = new(Create_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_procedure

	return p
}

func (s *Create_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_procedureContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPROCEDURE, 0)
}

func (s *Create_procedureContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_procedureContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Create_procedureContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Create_procedureContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Create_procedureContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Create_procedureContext) AllRETURNS() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRETURNS)
}

func (s *Create_procedureContext) RETURNS(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRETURNS, i)
}

func (s *Create_procedureContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLANGUAGE, 0)
}

func (s *Create_procedureContext) SQL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSQL, 0)
}

func (s *Create_procedureContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Create_procedureContext) Procedure_definition() IProcedure_definitionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_definitionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_definitionContext)
}

func (s *Create_procedureContext) Data_type() IData_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_procedureContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Create_procedureContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_procedureContext) AllArg_decl() []IArg_declContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArg_declContext); ok {
			len++
		}
	}

	tst := make([]IArg_declContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArg_declContext); ok {
			tst[i] = t.(IArg_declContext)
			i++
		}
	}

	return tst
}

func (s *Create_procedureContext) Arg_decl(i int) IArg_declContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_declContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_declContext)
}

func (s *Create_procedureContext) NOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, 0)
}

func (s *Create_procedureContext) AllNULL_() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserNULL_)
}

func (s *Create_procedureContext) NULL_(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, i)
}

func (s *Create_procedureContext) CALLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCALLED, 0)
}

func (s *Create_procedureContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Create_procedureContext) INPUT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINPUT, 0)
}

func (s *Create_procedureContext) STRICT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRICT, 0)
}

func (s *Create_procedureContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_procedureContext) Executa_as() IExecuta_asContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExecuta_asContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExecuta_asContext)
}

func (s *Create_procedureContext) VOLATILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVOLATILE, 0)
}

func (s *Create_procedureContext) IMMUTABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIMMUTABLE, 0)
}

func (s *Create_procedureContext) AllCol_decl() []ICol_declContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICol_declContext); ok {
			len++
		}
	}

	tst := make([]ICol_declContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICol_declContext); ok {
			tst[i] = t.(ICol_declContext)
			i++
		}
	}

	return tst
}

func (s *Create_procedureContext) Col_decl(i int) ICol_declContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICol_declContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICol_declContext)
}

func (s *Create_procedureContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Create_procedureContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Create_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_procedure(s)
	}
}

func (s *Create_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_procedure(s)
	}
}

func (s *Create_procedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_procedure(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_procedure() (localctx ICreate_procedureContext) {
	this := p
	_ = this

	localctx = NewCreate_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, SnowflakeParserRULE_create_procedure)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6946)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(6948)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(6947)
			p.Or_replace()
		}

	}
	{
		p.SetState(6950)
		p.Match(SnowflakeParserPROCEDURE)
	}
	{
		p.SetState(6951)
		p.Object_name()
	}
	{
		p.SetState(6952)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(6961)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
		{
			p.SetState(6953)
			p.Arg_decl()
		}
		p.SetState(6958)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(6954)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(6955)
				p.Arg_decl()
			}


			p.SetState(6960)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(6963)
		p.Match(SnowflakeParserRR_BRACKET)
	}
	{
		p.SetState(6964)
		p.Match(SnowflakeParserRETURNS)
	}
	p.SetState(6979)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserCHAR, SnowflakeParserCHARACTER, SnowflakeParserDOUBLE, SnowflakeParserINT, SnowflakeParserNUMBER, SnowflakeParserOBJECT, SnowflakeParserTIME, SnowflakeParserTIMESTAMP, SnowflakeParserTIMESTAMP_LTZ, SnowflakeParserTIMESTAMP_NTZ, SnowflakeParserTIMESTAMP_TZ, SnowflakeParserARRAY, SnowflakeParserBIGINT, SnowflakeParserBINARY, SnowflakeParserBOOLEAN, SnowflakeParserBYTEINT, SnowflakeParserDATE, SnowflakeParserDATETIME, SnowflakeParserDECIMAL_, SnowflakeParserFLOAT4, SnowflakeParserFLOAT8, SnowflakeParserFLOAT_, SnowflakeParserGEOGRAPHY, SnowflakeParserGEOMETRY, SnowflakeParserINTEGER, SnowflakeParserNUMERIC, SnowflakeParserREAL_, SnowflakeParserSMALLINT, SnowflakeParserSTRING_, SnowflakeParserTEXT, SnowflakeParserTINYINT, SnowflakeParserVARBINARY, SnowflakeParserVARCHAR, SnowflakeParserVARIANT:
		{
			p.SetState(6965)
			p.Data_type()
		}


	case SnowflakeParserTABLE:
		{
			p.SetState(6966)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(6967)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(6976)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(6968)
				p.Col_decl()
			}
			p.SetState(6973)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(6969)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(6970)
					p.Col_decl()
				}


				p.SetState(6975)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(6978)
			p.Match(SnowflakeParserRR_BRACKET)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(6983)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserNOT {
		{
			p.SetState(6981)
			p.Match(SnowflakeParserNOT)
		}
		{
			p.SetState(6982)
			p.Match(SnowflakeParserNULL_)
		}

	}
	{
		p.SetState(6985)
		p.Match(SnowflakeParserLANGUAGE)
	}
	{
		p.SetState(6986)
		p.Match(SnowflakeParserSQL)
	}
	p.SetState(6997)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserCALLED:
		{
			p.SetState(6987)
			p.Match(SnowflakeParserCALLED)
		}
		{
			p.SetState(6988)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(6989)
			p.Match(SnowflakeParserNULL_)
		}
		{
			p.SetState(6990)
			p.Match(SnowflakeParserINPUT)
		}


	case SnowflakeParserRETURNS:
		{
			p.SetState(6991)
			p.Match(SnowflakeParserRETURNS)
		}
		{
			p.SetState(6992)
			p.Match(SnowflakeParserNULL_)
		}
		{
			p.SetState(6993)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(6994)
			p.Match(SnowflakeParserNULL_)
		}
		{
			p.SetState(6995)
			p.Match(SnowflakeParserINPUT)
		}


	case SnowflakeParserSTRICT:
		{
			p.SetState(6996)
			p.Match(SnowflakeParserSTRICT)
		}


	case SnowflakeParserAS, SnowflakeParserCOMMENT, SnowflakeParserEXECUTE, SnowflakeParserIMMUTABLE, SnowflakeParserVOLATILE:



	default:
	}
	p.SetState(7000)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIMMUTABLE || _la == SnowflakeParserVOLATILE {
		{
			p.SetState(6999)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserIMMUTABLE || _la == SnowflakeParserVOLATILE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(7003)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOMMENT {
		{
			p.SetState(7002)
			p.Comment_clause()
		}

	}
	p.SetState(7006)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEXECUTE {
		{
			p.SetState(7005)
			p.Executa_as()
		}

	}
	{
		p.SetState(7008)
		p.Match(SnowflakeParserAS)
	}
	{
		p.SetState(7009)
		p.Procedure_definition()
	}



	return localctx
}


// ICreate_replication_groupContext is an interface to support dynamic dispatch.
type ICreate_replication_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_replication_groupContext differentiates from other interfaces.
	IsCreate_replication_groupContext()
}

type Create_replication_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_replication_groupContext() *Create_replication_groupContext {
	var p = new(Create_replication_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_replication_group
	return p
}

func (*Create_replication_groupContext) IsCreate_replication_groupContext() {}

func NewCreate_replication_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_replication_groupContext {
	var p = new(Create_replication_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_replication_group

	return p
}

func (s *Create_replication_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_replication_groupContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_replication_groupContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION, 0)
}

func (s *Create_replication_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUP, 0)
}

func (s *Create_replication_groupContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Create_replication_groupContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_replication_groupContext) OBJECT_TYPES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOBJECT_TYPES, 0)
}

func (s *Create_replication_groupContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_replication_groupContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_replication_groupContext) AllObject_type() []IObject_typeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObject_typeContext); ok {
			len++
		}
	}

	tst := make([]IObject_typeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObject_typeContext); ok {
			tst[i] = t.(IObject_typeContext)
			i++
		}
	}

	return tst
}

func (s *Create_replication_groupContext) Object_type(i int) IObject_typeContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_typeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_typeContext)
}

func (s *Create_replication_groupContext) ALLOWED_ACCOUNTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_ACCOUNTS, 0)
}

func (s *Create_replication_groupContext) AllFull_acct() []IFull_acctContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFull_acctContext); ok {
			len++
		}
	}

	tst := make([]IFull_acctContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFull_acctContext); ok {
			tst[i] = t.(IFull_acctContext)
			i++
		}
	}

	return tst
}

func (s *Create_replication_groupContext) Full_acct(i int) IFull_acctContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFull_acctContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFull_acctContext)
}

func (s *Create_replication_groupContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_replication_groupContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Create_replication_groupContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Create_replication_groupContext) ALLOWED_DATABASES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_DATABASES, 0)
}

func (s *Create_replication_groupContext) ALLOWED_SHARES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_SHARES, 0)
}

func (s *Create_replication_groupContext) ALLOWED_INTEGRATION_TYPES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_INTEGRATION_TYPES, 0)
}

func (s *Create_replication_groupContext) AllIntegration_type_name() []IIntegration_type_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIntegration_type_nameContext); ok {
			len++
		}
	}

	tst := make([]IIntegration_type_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIntegration_type_nameContext); ok {
			tst[i] = t.(IIntegration_type_nameContext)
			i++
		}
	}

	return tst
}

func (s *Create_replication_groupContext) Integration_type_name(i int) IIntegration_type_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegration_type_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegration_type_nameContext)
}

func (s *Create_replication_groupContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIGNORE, 0)
}

func (s *Create_replication_groupContext) EDITION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEDITION, 0)
}

func (s *Create_replication_groupContext) CHECK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCHECK, 0)
}

func (s *Create_replication_groupContext) REPLICATION_SCHEDULE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION_SCHEDULE, 0)
}

func (s *Create_replication_groupContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_replication_groupContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Create_replication_groupContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICA, 0)
}

func (s *Create_replication_groupContext) OF() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOF, 0)
}

func (s *Create_replication_groupContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserDOT)
}

func (s *Create_replication_groupContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, i)
}

func (s *Create_replication_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_replication_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_replication_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_replication_group(s)
	}
}

func (s *Create_replication_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_replication_group(s)
	}
}

func (s *Create_replication_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_replication_group(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_replication_group() (localctx ICreate_replication_groupContext) {
	this := p
	_ = this

	localctx = NewCreate_replication_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, SnowflakeParserRULE_create_replication_group)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7100)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 833, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7011)
			p.Match(SnowflakeParserCREATE)
		}
		{
			p.SetState(7012)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(7013)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(7015)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(7014)
				p.If_not_exists()
			}

		}
		{
			p.SetState(7017)
			p.Id_()
		}
		{
			p.SetState(7018)
			p.Match(SnowflakeParserOBJECT_TYPES)
		}
		{
			p.SetState(7019)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7020)
			p.Object_type()
		}
		p.SetState(7025)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(7021)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(7022)
				p.Object_type()
			}


			p.SetState(7027)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(7038)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserALLOWED_DATABASES {
			{
				p.SetState(7028)
				p.Match(SnowflakeParserALLOWED_DATABASES)
			}
			{
				p.SetState(7029)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7030)
				p.Id_()
			}
			p.SetState(7035)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(7031)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(7032)
					p.Id_()
				}


				p.SetState(7037)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(7050)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserALLOWED_SHARES {
			{
				p.SetState(7040)
				p.Match(SnowflakeParserALLOWED_SHARES)
			}
			{
				p.SetState(7041)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7042)
				p.Id_()
			}
			p.SetState(7047)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(7043)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(7044)
					p.Id_()
				}


				p.SetState(7049)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(7062)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserALLOWED_INTEGRATION_TYPES {
			{
				p.SetState(7052)
				p.Match(SnowflakeParserALLOWED_INTEGRATION_TYPES)
			}
			{
				p.SetState(7053)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7054)
				p.Integration_type_name()
			}
			p.SetState(7059)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(7055)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(7056)
					p.Integration_type_name()
				}


				p.SetState(7061)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(7064)
			p.Match(SnowflakeParserALLOWED_ACCOUNTS)
		}
		{
			p.SetState(7065)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7066)
			p.Full_acct()
		}
		p.SetState(7071)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(7067)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(7068)
				p.Full_acct()
			}


			p.SetState(7073)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(7077)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIGNORE {
			{
				p.SetState(7074)
				p.Match(SnowflakeParserIGNORE)
			}
			{
				p.SetState(7075)
				p.Match(SnowflakeParserEDITION)
			}
			{
				p.SetState(7076)
				p.Match(SnowflakeParserCHECK)
			}

		}
		p.SetState(7082)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserREPLICATION_SCHEDULE {
			{
				p.SetState(7079)
				p.Match(SnowflakeParserREPLICATION_SCHEDULE)
			}
			{
				p.SetState(7080)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7081)
				p.String_()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7084)
			p.Match(SnowflakeParserCREATE)
		}
		{
			p.SetState(7085)
			p.Match(SnowflakeParserREPLICATION)
		}
		{
			p.SetState(7086)
			p.Match(SnowflakeParserGROUP)
		}
		p.SetState(7088)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(7087)
				p.If_not_exists()
			}

		}
		{
			p.SetState(7090)
			p.Id_()
		}
		{
			p.SetState(7091)
			p.Match(SnowflakeParserAS)
		}
		{
			p.SetState(7092)
			p.Match(SnowflakeParserREPLICA)
		}
		{
			p.SetState(7093)
			p.Match(SnowflakeParserOF)
		}
		{
			p.SetState(7094)
			p.Id_()
		}
		{
			p.SetState(7095)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(7096)
			p.Id_()
		}
		{
			p.SetState(7097)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(7098)
			p.Id_()
		}

	}


	return localctx
}


// ICreate_resource_monitorContext is an interface to support dynamic dispatch.
type ICreate_resource_monitorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_resource_monitorContext differentiates from other interfaces.
	IsCreate_resource_monitorContext()
}

type Create_resource_monitorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_resource_monitorContext() *Create_resource_monitorContext {
	var p = new(Create_resource_monitorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_resource_monitor
	return p
}

func (*Create_resource_monitorContext) IsCreate_resource_monitorContext() {}

func NewCreate_resource_monitorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_resource_monitorContext {
	var p = new(Create_resource_monitorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_resource_monitor

	return p
}

func (s *Create_resource_monitorContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_resource_monitorContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_resource_monitorContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESOURCE, 0)
}

func (s *Create_resource_monitorContext) MONITOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMONITOR, 0)
}

func (s *Create_resource_monitorContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_resource_monitorContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Create_resource_monitorContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_resource_monitorContext) Credit_quota() ICredit_quotaContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICredit_quotaContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICredit_quotaContext)
}

func (s *Create_resource_monitorContext) Frequency() IFrequencyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrequencyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrequencyContext)
}

func (s *Create_resource_monitorContext) START_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTART_TIMESTAMP, 0)
}

func (s *Create_resource_monitorContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_resource_monitorContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_resource_monitorContext) END_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEND_TIMESTAMP, 0)
}

func (s *Create_resource_monitorContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Create_resource_monitorContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_resource_monitorContext) Notify_users() INotify_usersContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INotify_usersContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INotify_usersContext)
}

func (s *Create_resource_monitorContext) TRIGGERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRIGGERS, 0)
}

func (s *Create_resource_monitorContext) IMMEDIATELY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIMMEDIATELY, 0)
}

func (s *Create_resource_monitorContext) AllTrigger_definition() []ITrigger_definitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITrigger_definitionContext); ok {
			len++
		}
	}

	tst := make([]ITrigger_definitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITrigger_definitionContext); ok {
			tst[i] = t.(ITrigger_definitionContext)
			i++
		}
	}

	return tst
}

func (s *Create_resource_monitorContext) Trigger_definition(i int) ITrigger_definitionContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrigger_definitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrigger_definitionContext)
}

func (s *Create_resource_monitorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_resource_monitorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_resource_monitorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_resource_monitor(s)
	}
}

func (s *Create_resource_monitorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_resource_monitor(s)
	}
}

func (s *Create_resource_monitorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_resource_monitor(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_resource_monitor() (localctx ICreate_resource_monitorContext) {
	this := p
	_ = this

	localctx = NewCreate_resource_monitorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, SnowflakeParserRULE_create_resource_monitor)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7102)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(7104)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(7103)
			p.Or_replace()
		}

	}
	{
		p.SetState(7106)
		p.Match(SnowflakeParserRESOURCE)
	}
	{
		p.SetState(7107)
		p.Match(SnowflakeParserMONITOR)
	}
	{
		p.SetState(7108)
		p.Id_()
	}
	{
		p.SetState(7109)
		p.Match(SnowflakeParserWITH)
	}
	p.SetState(7111)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCREDIT_QUOTA {
		{
			p.SetState(7110)
			p.Credit_quota()
		}

	}
	p.SetState(7114)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserFREQUENCY {
		{
			p.SetState(7113)
			p.Frequency()
		}

	}
	p.SetState(7122)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSTART_TIMESTAMP {
		{
			p.SetState(7116)
			p.Match(SnowflakeParserSTART_TIMESTAMP)
		}
		{
			p.SetState(7117)
			p.Match(SnowflakeParserEQ)
		}
		p.SetState(7120)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSTRING:
			{
				p.SetState(7118)
				p.String_()
			}


		case SnowflakeParserIMMEDIATELY:
			{
				p.SetState(7119)
				p.Match(SnowflakeParserIMMEDIATELY)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(7127)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEND_TIMESTAMP {
		{
			p.SetState(7124)
			p.Match(SnowflakeParserEND_TIMESTAMP)
		}
		{
			p.SetState(7125)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7126)
			p.String_()
		}

	}
	p.SetState(7130)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserNOTIFY_USERS {
		{
			p.SetState(7129)
			p.Notify_users()
		}

	}
	p.SetState(7138)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTRIGGERS {
		{
			p.SetState(7132)
			p.Match(SnowflakeParserTRIGGERS)
		}
		p.SetState(7134)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SnowflakeParserON {
			{
				p.SetState(7133)
				p.Trigger_definition()
			}


			p.SetState(7136)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}



	return localctx
}


// ICreate_roleContext is an interface to support dynamic dispatch.
type ICreate_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_roleContext differentiates from other interfaces.
	IsCreate_roleContext()
}

type Create_roleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_roleContext() *Create_roleContext {
	var p = new(Create_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_role
	return p
}

func (*Create_roleContext) IsCreate_roleContext() {}

func NewCreate_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_roleContext {
	var p = new(Create_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_role

	return p
}

func (s *Create_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_roleContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, 0)
}

func (s *Create_roleContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Create_roleContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_roleContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_roleContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_roleContext) TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTAG, 0)
}

func (s *Create_roleContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Create_roleContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_roleContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_roleContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserSTRING)
}

func (s *Create_roleContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRING, i)
}

func (s *Create_roleContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Create_roleContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Create_roleContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Create_roleContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Create_roleContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Create_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_role(s)
	}
}

func (s *Create_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_role(s)
	}
}

func (s *Create_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_role(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_role() (localctx ICreate_roleContext) {
	this := p
	_ = this

	localctx = NewCreate_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, SnowflakeParserRULE_create_role)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7140)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(7142)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(7141)
			p.Or_replace()
		}

	}
	{
		p.SetState(7144)
		p.Match(SnowflakeParserROLE)
	}
	p.SetState(7146)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(7145)
			p.If_not_exists()
		}

	}
	{
		p.SetState(7148)
		p.Id_()
	}
	p.SetState(7169)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 847, p.GetParserRuleContext()) == 1 {
		p.SetState(7150)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserWITH {
			{
				p.SetState(7149)
				p.Match(SnowflakeParserWITH)
			}

		}
		{
			p.SetState(7152)
			p.Match(SnowflakeParserTAG)
		}
		{
			p.SetState(7153)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(7154)
			p.Id_()
		}
		{
			p.SetState(7155)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7156)
			p.Match(SnowflakeParserSTRING)
		}
		p.SetState(7164)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(7157)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(7158)
				p.Id_()
			}
			{
				p.SetState(7159)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7160)
				p.Match(SnowflakeParserSTRING)
			}


			p.SetState(7166)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(7167)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	}
	p.SetState(7174)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 848, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7171)
			p.Match(SnowflakeParserCOMMENT)
		}
		{
			p.SetState(7172)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7173)
			p.Match(SnowflakeParserSTRING)
		}


	}



	return localctx
}


// ICreate_row_access_policyContext is an interface to support dynamic dispatch.
type ICreate_row_access_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_row_access_policyContext differentiates from other interfaces.
	IsCreate_row_access_policyContext()
}

type Create_row_access_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_row_access_policyContext() *Create_row_access_policyContext {
	var p = new(Create_row_access_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_row_access_policy
	return p
}

func (*Create_row_access_policyContext) IsCreate_row_access_policyContext() {}

func NewCreate_row_access_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_row_access_policyContext {
	var p = new(Create_row_access_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_row_access_policy

	return p
}

func (s *Create_row_access_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_row_access_policyContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_row_access_policyContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *Create_row_access_policyContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, 0)
}

func (s *Create_row_access_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Create_row_access_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_row_access_policyContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Create_row_access_policyContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Create_row_access_policyContext) AllArg_decl() []IArg_declContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArg_declContext); ok {
			len++
		}
	}

	tst := make([]IArg_declContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArg_declContext); ok {
			tst[i] = t.(IArg_declContext)
			i++
		}
	}

	return tst
}

func (s *Create_row_access_policyContext) Arg_decl(i int) IArg_declContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_declContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_declContext)
}

func (s *Create_row_access_policyContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Create_row_access_policyContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRETURNS, 0)
}

func (s *Create_row_access_policyContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBOOLEAN, 0)
}

func (s *Create_row_access_policyContext) ARROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserARROW, 0)
}

func (s *Create_row_access_policyContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_row_access_policyContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_row_access_policyContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_row_access_policyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Create_row_access_policyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Create_row_access_policyContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_row_access_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_row_access_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_row_access_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_row_access_policy(s)
	}
}

func (s *Create_row_access_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_row_access_policy(s)
	}
}

func (s *Create_row_access_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_row_access_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_row_access_policy() (localctx ICreate_row_access_policyContext) {
	this := p
	_ = this

	localctx = NewCreate_row_access_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, SnowflakeParserRULE_create_row_access_policy)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7176)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(7178)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(7177)
			p.Or_replace()
		}

	}
	{
		p.SetState(7180)
		p.Match(SnowflakeParserROW)
	}
	{
		p.SetState(7181)
		p.Match(SnowflakeParserACCESS)
	}
	{
		p.SetState(7182)
		p.Match(SnowflakeParserPOLICY)
	}
	p.SetState(7184)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(7183)
			p.If_not_exists()
		}

	}
	{
		p.SetState(7186)
		p.Id_()
	}
	{
		p.SetState(7187)
		p.Match(SnowflakeParserAS)
	}
	{
		p.SetState(7188)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(7189)
		p.Arg_decl()
	}
	p.SetState(7194)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(7190)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(7191)
			p.Arg_decl()
		}


		p.SetState(7196)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(7197)
		p.Match(SnowflakeParserRR_BRACKET)
	}
	{
		p.SetState(7198)
		p.Match(SnowflakeParserRETURNS)
	}
	{
		p.SetState(7199)
		p.Match(SnowflakeParserBOOLEAN)
	}
	{
		p.SetState(7200)
		p.Match(SnowflakeParserARROW)
	}
	{
		p.SetState(7201)
		p.expr(0)
	}
	p.SetState(7203)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 852, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7202)
			p.Comment_clause()
		}


	}



	return localctx
}


// ICreate_schemaContext is an interface to support dynamic dispatch.
type ICreate_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_schemaContext differentiates from other interfaces.
	IsCreate_schemaContext()
}

type Create_schemaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_schemaContext() *Create_schemaContext {
	var p = new(Create_schemaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_schema
	return p
}

func (*Create_schemaContext) IsCreate_schemaContext() {}

func NewCreate_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_schemaContext {
	var p = new(Create_schemaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_schema

	return p
}

func (s *Create_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_schemaContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_schemaContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Create_schemaContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Create_schemaContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_schemaContext) TRANSIENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRANSIENT, 0)
}

func (s *Create_schemaContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_schemaContext) Clone_at_before() IClone_at_beforeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClone_at_beforeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClone_at_beforeContext)
}

func (s *Create_schemaContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Create_schemaContext) MANAGED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMANAGED, 0)
}

func (s *Create_schemaContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, 0)
}

func (s *Create_schemaContext) DATA_RETENTION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS, 0)
}

func (s *Create_schemaContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_schemaContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_schemaContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Create_schemaContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Create_schemaContext) MAX_DATA_EXTENSION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS, 0)
}

func (s *Create_schemaContext) Default_ddl_collation() IDefault_ddl_collationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_ddl_collationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_ddl_collationContext)
}

func (s *Create_schemaContext) With_tags() IWith_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_tagsContext)
}

func (s *Create_schemaContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_schema(s)
	}
}

func (s *Create_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_schema(s)
	}
}

func (s *Create_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_schema(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_schema() (localctx ICreate_schemaContext) {
	this := p
	_ = this

	localctx = NewCreate_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, SnowflakeParserRULE_create_schema)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7205)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(7207)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(7206)
			p.Or_replace()
		}

	}
	p.SetState(7210)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTRANSIENT {
		{
			p.SetState(7209)
			p.Match(SnowflakeParserTRANSIENT)
		}

	}
	{
		p.SetState(7212)
		p.Match(SnowflakeParserSCHEMA)
	}
	p.SetState(7214)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(7213)
			p.If_not_exists()
		}

	}
	{
		p.SetState(7216)
		p.Schema_name()
	}
	p.SetState(7218)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCLONE {
		{
			p.SetState(7217)
			p.Clone_at_before()
		}

	}
	p.SetState(7223)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 857, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7220)
			p.Match(SnowflakeParserWITH)
		}
		{
			p.SetState(7221)
			p.Match(SnowflakeParserMANAGED)
		}
		{
			p.SetState(7222)
			p.Match(SnowflakeParserACCESS)
		}


	}
	p.SetState(7228)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserDATA_RETENTION_TIME_IN_DAYS {
		{
			p.SetState(7225)
			p.Match(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS)
		}
		{
			p.SetState(7226)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7227)
			p.Num()
		}

	}
	p.SetState(7233)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS {
		{
			p.SetState(7230)
			p.Match(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS)
		}
		{
			p.SetState(7231)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7232)
			p.Num()
		}

	}
	p.SetState(7236)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserDEFAULT_DDL_COLLATION_ {
		{
			p.SetState(7235)
			p.Default_ddl_collation()
		}

	}
	p.SetState(7239)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 861, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7238)
			p.With_tags()
		}


	}
	p.SetState(7242)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 862, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7241)
			p.Comment_clause()
		}


	}



	return localctx
}


// ICreate_security_integration_external_oauthContext is an interface to support dynamic dispatch.
type ICreate_security_integration_external_oauthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_security_integration_external_oauthContext differentiates from other interfaces.
	IsCreate_security_integration_external_oauthContext()
}

type Create_security_integration_external_oauthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_security_integration_external_oauthContext() *Create_security_integration_external_oauthContext {
	var p = new(Create_security_integration_external_oauthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_security_integration_external_oauth
	return p
}

func (*Create_security_integration_external_oauthContext) IsCreate_security_integration_external_oauthContext() {}

func NewCreate_security_integration_external_oauthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_security_integration_external_oauthContext {
	var p = new(Create_security_integration_external_oauthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_security_integration_external_oauth

	return p
}

func (s *Create_security_integration_external_oauthContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_security_integration_external_oauthContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_security_integration_external_oauthContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Create_security_integration_external_oauthContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Create_security_integration_external_oauthContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_security_integration_external_oauthContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Create_security_integration_external_oauthContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_security_integration_external_oauthContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH, 0)
}

func (s *Create_security_integration_external_oauthContext) ENABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLED, 0)
}

func (s *Create_security_integration_external_oauthContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH_TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_TYPE, 0)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH_ISSUER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_ISSUER, 0)
}

func (s *Create_security_integration_external_oauthContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Create_security_integration_external_oauthContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM, 0)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE, 0)
}

func (s *Create_security_integration_external_oauthContext) OKTA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOKTA, 0)
}

func (s *Create_security_integration_external_oauthContext) AZURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE, 0)
}

func (s *Create_security_integration_external_oauthContext) PING_FEDERATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPING_FEDERATE, 0)
}

func (s *Create_security_integration_external_oauthContext) CUSTOM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCUSTOM, 0)
}

func (s *Create_security_integration_external_oauthContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Create_security_integration_external_oauthContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Create_security_integration_external_oauthContext) AllString_list() []IString_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IString_listContext); ok {
			len++
		}
	}

	tst := make([]IString_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IString_listContext); ok {
			tst[i] = t.(IString_listContext)
			i++
		}
	}

	return tst
}

func (s *Create_security_integration_external_oauthContext) String_list(i int) IString_listContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_listContext)
}

func (s *Create_security_integration_external_oauthContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Create_security_integration_external_oauthContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Create_security_integration_external_oauthContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_security_integration_external_oauthContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_security_integration_external_oauthContext) AllEXTERNAL_OAUTH_JWS_KEYS_URL() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH_JWS_KEYS_URL(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL, i)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH_BLOCKED_ROLES_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_BLOCKED_ROLES_LIST, 0)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH_ALLOWED_ROLES_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_ALLOWED_ROLES_LIST, 0)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH_RSA_PUBLIC_KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY, 0)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY_2, 0)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH_AUDIENCE_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_AUDIENCE_LIST, 0)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH_ANY_ROLE_MODE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_ANY_ROLE_MODE, 0)
}

func (s *Create_security_integration_external_oauthContext) EXTERNAL_OAUTH_SCOPE_DELIMITER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_SCOPE_DELIMITER, 0)
}

func (s *Create_security_integration_external_oauthContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISABLE, 0)
}

func (s *Create_security_integration_external_oauthContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE, 0)
}

func (s *Create_security_integration_external_oauthContext) ENABLE_FOR_PRIVILEGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE_FOR_PRIVILEGE, 0)
}

func (s *Create_security_integration_external_oauthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_security_integration_external_oauthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_security_integration_external_oauthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_security_integration_external_oauth(s)
	}
}

func (s *Create_security_integration_external_oauthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_security_integration_external_oauth(s)
	}
}

func (s *Create_security_integration_external_oauthContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_security_integration_external_oauth(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_security_integration_external_oauth() (localctx ICreate_security_integration_external_oauthContext) {
	this := p
	_ = this

	localctx = NewCreate_security_integration_external_oauthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, SnowflakeParserRULE_create_security_integration_external_oauth)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7244)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(7246)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(7245)
			p.Or_replace()
		}

	}
	{
		p.SetState(7248)
		p.Match(SnowflakeParserSECURITY)
	}
	{
		p.SetState(7249)
		p.Match(SnowflakeParserINTEGRATION)
	}
	p.SetState(7251)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(7250)
			p.If_not_exists()
		}

	}
	{
		p.SetState(7253)
		p.Id_()
	}
	{
		p.SetState(7254)
		p.Match(SnowflakeParserTYPE)
	}
	{
		p.SetState(7255)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7256)
		p.Match(SnowflakeParserEXTERNAL_OAUTH)
	}
	{
		p.SetState(7257)
		p.Match(SnowflakeParserENABLED)
	}
	{
		p.SetState(7258)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7259)
		p.True_false()
	}
	{
		p.SetState(7260)
		p.Match(SnowflakeParserEXTERNAL_OAUTH_TYPE)
	}
	{
		p.SetState(7261)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7262)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserAZURE || _la == SnowflakeParserCUSTOM || _la == SnowflakeParserOKTA || _la == SnowflakeParserPING_FEDERATE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(7263)
		p.Match(SnowflakeParserEXTERNAL_OAUTH_ISSUER)
	}
	{
		p.SetState(7264)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7265)
		p.String_()
	}
	{
		p.SetState(7266)
		p.Match(SnowflakeParserEXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM)
	}
	{
		p.SetState(7267)
		p.Match(SnowflakeParserEQ)
	}
	p.SetState(7273)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserSTRING:
		{
			p.SetState(7268)
			p.String_()
		}


	case SnowflakeParserLR_BRACKET:
		{
			p.SetState(7269)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(7270)
			p.String_list()
		}
		{
			p.SetState(7271)
			p.Match(SnowflakeParserRR_BRACKET)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(7275)
		p.Match(SnowflakeParserEXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE)
	}
	{
		p.SetState(7276)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7277)
		p.String_()
	}
	p.SetState(7281)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 866, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7278)
			p.Match(SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL)
		}
		{
			p.SetState(7279)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7280)
			p.String_()
		}


	}
	p.SetState(7292)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL {
		{
			p.SetState(7283)
			p.Match(SnowflakeParserEXTERNAL_OAUTH_JWS_KEYS_URL)
		}
		{
			p.SetState(7284)
			p.Match(SnowflakeParserEQ)
		}
		p.SetState(7290)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSTRING:
			{
				p.SetState(7285)
				p.String_()
			}


		case SnowflakeParserLR_BRACKET:
			{
				p.SetState(7286)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(7287)
				p.String_list()
			}
			{
				p.SetState(7288)
				p.Match(SnowflakeParserRR_BRACKET)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(7300)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEXTERNAL_OAUTH_BLOCKED_ROLES_LIST {
		{
			p.SetState(7294)
			p.Match(SnowflakeParserEXTERNAL_OAUTH_BLOCKED_ROLES_LIST)
		}
		{
			p.SetState(7295)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7296)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(7297)
			p.String_list()
		}
		{
			p.SetState(7298)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	p.SetState(7308)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEXTERNAL_OAUTH_ALLOWED_ROLES_LIST {
		{
			p.SetState(7302)
			p.Match(SnowflakeParserEXTERNAL_OAUTH_ALLOWED_ROLES_LIST)
		}
		{
			p.SetState(7303)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7304)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(7305)
			p.String_list()
		}
		{
			p.SetState(7306)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	p.SetState(7313)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY {
		{
			p.SetState(7310)
			p.Match(SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY)
		}
		{
			p.SetState(7311)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7312)
			p.String_()
		}

	}
	p.SetState(7318)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY_2 {
		{
			p.SetState(7315)
			p.Match(SnowflakeParserEXTERNAL_OAUTH_RSA_PUBLIC_KEY_2)
		}
		{
			p.SetState(7316)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7317)
			p.String_()
		}

	}
	p.SetState(7326)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEXTERNAL_OAUTH_AUDIENCE_LIST {
		{
			p.SetState(7320)
			p.Match(SnowflakeParserEXTERNAL_OAUTH_AUDIENCE_LIST)
		}
		{
			p.SetState(7321)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7322)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(7323)
			p.String_()
		}
		{
			p.SetState(7324)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	p.SetState(7331)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEXTERNAL_OAUTH_ANY_ROLE_MODE {
		{
			p.SetState(7328)
			p.Match(SnowflakeParserEXTERNAL_OAUTH_ANY_ROLE_MODE)
		}
		{
			p.SetState(7329)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7330)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la - 230)) & ^0x3f) == 0 && ((int64(1) << (_la - 230)) & 196609) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(7336)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEXTERNAL_OAUTH_SCOPE_DELIMITER {
		{
			p.SetState(7333)
			p.Match(SnowflakeParserEXTERNAL_OAUTH_SCOPE_DELIMITER)
		}
		{
			p.SetState(7334)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7335)
			p.String_()
		}

	}



	return localctx
}


// IImplicit_noneContext is an interface to support dynamic dispatch.
type IImplicit_noneContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplicit_noneContext differentiates from other interfaces.
	IsImplicit_noneContext()
}

type Implicit_noneContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplicit_noneContext() *Implicit_noneContext {
	var p = new(Implicit_noneContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_implicit_none
	return p
}

func (*Implicit_noneContext) IsImplicit_noneContext() {}

func NewImplicit_noneContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Implicit_noneContext {
	var p = new(Implicit_noneContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_implicit_none

	return p
}

func (s *Implicit_noneContext) GetParser() antlr.Parser { return s.parser }

func (s *Implicit_noneContext) IMPLICIT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIMPLICIT, 0)
}

func (s *Implicit_noneContext) NONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNONE, 0)
}

func (s *Implicit_noneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Implicit_noneContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Implicit_noneContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterImplicit_none(s)
	}
}

func (s *Implicit_noneContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitImplicit_none(s)
	}
}

func (s *Implicit_noneContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitImplicit_none(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Implicit_none() (localctx IImplicit_noneContext) {
	this := p
	_ = this

	localctx = NewImplicit_noneContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, SnowflakeParserRULE_implicit_none)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7338)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserIMPLICIT || _la == SnowflakeParserNONE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ICreate_security_integration_snowflake_oauthContext is an interface to support dynamic dispatch.
type ICreate_security_integration_snowflake_oauthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_security_integration_snowflake_oauthContext differentiates from other interfaces.
	IsCreate_security_integration_snowflake_oauthContext()
}

type Create_security_integration_snowflake_oauthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_security_integration_snowflake_oauthContext() *Create_security_integration_snowflake_oauthContext {
	var p = new(Create_security_integration_snowflake_oauthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_security_integration_snowflake_oauth
	return p
}

func (*Create_security_integration_snowflake_oauthContext) IsCreate_security_integration_snowflake_oauthContext() {}

func NewCreate_security_integration_snowflake_oauthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_security_integration_snowflake_oauthContext {
	var p = new(Create_security_integration_snowflake_oauthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_security_integration_snowflake_oauth

	return p
}

func (s *Create_security_integration_snowflake_oauthContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_security_integration_snowflake_oauthContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_security_integration_snowflake_oauthContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_security_integration_snowflake_oauthContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_security_integration_snowflake_oauthContext) OAUTH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) OAUTH_CLIENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH_CLIENT, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) Partner_application() IPartner_applicationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartner_applicationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartner_applicationContext)
}

func (s *Create_security_integration_snowflake_oauthContext) OAUTH_REDIRECT_URI() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH_REDIRECT_URI, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Create_security_integration_snowflake_oauthContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_security_integration_snowflake_oauthContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_security_integration_snowflake_oauthContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_security_integration_snowflake_oauthContext) Enabled_true_false() IEnabled_true_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnabled_true_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnabled_true_falseContext)
}

func (s *Create_security_integration_snowflake_oauthContext) OAUTH_ISSUE_REFRESH_TOKENS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH_ISSUE_REFRESH_TOKENS, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) AllTrue_false() []ITrue_falseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITrue_falseContext); ok {
			len++
		}
	}

	tst := make([]ITrue_falseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITrue_falseContext); ok {
			tst[i] = t.(ITrue_falseContext)
			i++
		}
	}

	return tst
}

func (s *Create_security_integration_snowflake_oauthContext) True_false(i int) ITrue_falseContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Create_security_integration_snowflake_oauthContext) OAUTH_REFRESH_TOKEN_VALIDITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH_REFRESH_TOKEN_VALIDITY, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Create_security_integration_snowflake_oauthContext) OAUTH_USE_SECONDARY_ROLES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH_USE_SECONDARY_ROLES, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) Implicit_none() IImplicit_noneContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImplicit_noneContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImplicit_noneContext)
}

func (s *Create_security_integration_snowflake_oauthContext) BLOCKED_ROLES_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBLOCKED_ROLES_LIST, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Create_security_integration_snowflake_oauthContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Create_security_integration_snowflake_oauthContext) AllString_list() []IString_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IString_listContext); ok {
			len++
		}
	}

	tst := make([]IString_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IString_listContext); ok {
			tst[i] = t.(IString_listContext)
			i++
		}
	}

	return tst
}

func (s *Create_security_integration_snowflake_oauthContext) String_list(i int) IString_listContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_listContext)
}

func (s *Create_security_integration_snowflake_oauthContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Create_security_integration_snowflake_oauthContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Create_security_integration_snowflake_oauthContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_security_integration_snowflake_oauthContext) CUSTOM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCUSTOM, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) OAUTH_ALLOW_NON_TLS_REDIRECT_URI() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH_ALLOW_NON_TLS_REDIRECT_URI, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) OAUTH_ENFORCE_PKCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH_ENFORCE_PKCE, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) PRE_AUTHORIZED_ROLES_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRE_AUTHORIZED_ROLES_LIST, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) Network_policy() INetwork_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INetwork_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INetwork_policyContext)
}

func (s *Create_security_integration_snowflake_oauthContext) OAUTH_CLIENT_RSA_PUBLIC_KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) OAUTH_CLIENT_RSA_PUBLIC_KEY_2() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY_2, 0)
}

func (s *Create_security_integration_snowflake_oauthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_security_integration_snowflake_oauthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_security_integration_snowflake_oauthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_security_integration_snowflake_oauth(s)
	}
}

func (s *Create_security_integration_snowflake_oauthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_security_integration_snowflake_oauth(s)
	}
}

func (s *Create_security_integration_snowflake_oauthContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_security_integration_snowflake_oauth(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_security_integration_snowflake_oauth() (localctx ICreate_security_integration_snowflake_oauthContext) {
	this := p
	_ = this

	localctx = NewCreate_security_integration_snowflake_oauthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, SnowflakeParserRULE_create_security_integration_snowflake_oauth)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7467)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 898, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7340)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(7342)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(7341)
				p.Or_replace()
			}

		}
		{
			p.SetState(7344)
			p.Match(SnowflakeParserSECURITY)
		}
		{
			p.SetState(7345)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(7347)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(7346)
				p.If_not_exists()
			}

		}
		{
			p.SetState(7349)
			p.Id_()
		}
		{
			p.SetState(7350)
			p.Match(SnowflakeParserTYPE)
		}
		{
			p.SetState(7351)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7352)
			p.Match(SnowflakeParserOAUTH)
		}
		{
			p.SetState(7353)
			p.Match(SnowflakeParserOAUTH_CLIENT)
		}
		{
			p.SetState(7354)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7355)
			p.Partner_application()
		}
		{
			p.SetState(7356)
			p.Match(SnowflakeParserOAUTH_REDIRECT_URI)
		}
		{
			p.SetState(7357)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7358)
			p.String_()
		}
		p.SetState(7360)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENABLED {
			{
				p.SetState(7359)
				p.Enabled_true_false()
			}

		}
		p.SetState(7365)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOAUTH_ISSUE_REFRESH_TOKENS {
			{
				p.SetState(7362)
				p.Match(SnowflakeParserOAUTH_ISSUE_REFRESH_TOKENS)
			}
			{
				p.SetState(7363)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7364)
				p.True_false()
			}

		}
		p.SetState(7370)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOAUTH_REFRESH_TOKEN_VALIDITY {
			{
				p.SetState(7367)
				p.Match(SnowflakeParserOAUTH_REFRESH_TOKEN_VALIDITY)
			}
			{
				p.SetState(7368)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7369)
				p.Num()
			}

		}
		p.SetState(7375)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOAUTH_USE_SECONDARY_ROLES {
			{
				p.SetState(7372)
				p.Match(SnowflakeParserOAUTH_USE_SECONDARY_ROLES)
			}
			{
				p.SetState(7373)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7374)
				p.Implicit_none()
			}

		}
		p.SetState(7383)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserBLOCKED_ROLES_LIST {
			{
				p.SetState(7377)
				p.Match(SnowflakeParserBLOCKED_ROLES_LIST)
			}
			{
				p.SetState(7378)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7379)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(7380)
				p.String_list()
			}
			{
				p.SetState(7381)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(7386)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 883, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7385)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7388)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(7390)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(7389)
				p.Or_replace()
			}

		}
		{
			p.SetState(7392)
			p.Match(SnowflakeParserSECURITY)
		}
		{
			p.SetState(7393)
			p.Match(SnowflakeParserINTEGRATION)
		}
		p.SetState(7395)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(7394)
				p.If_not_exists()
			}

		}
		{
			p.SetState(7397)
			p.Id_()
		}
		{
			p.SetState(7398)
			p.Match(SnowflakeParserTYPE)
		}
		{
			p.SetState(7399)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7400)
			p.Match(SnowflakeParserOAUTH)
		}
		{
			p.SetState(7401)
			p.Match(SnowflakeParserOAUTH_CLIENT)
		}
		{
			p.SetState(7402)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7403)
			p.Match(SnowflakeParserCUSTOM)
		}
		{
			p.SetState(7404)
			p.Match(SnowflakeParserOAUTH_REDIRECT_URI)
		}
		{
			p.SetState(7405)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7406)
			p.String_()
		}
		p.SetState(7408)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENABLED {
			{
				p.SetState(7407)
				p.Enabled_true_false()
			}

		}
		p.SetState(7413)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOAUTH_ALLOW_NON_TLS_REDIRECT_URI {
			{
				p.SetState(7410)
				p.Match(SnowflakeParserOAUTH_ALLOW_NON_TLS_REDIRECT_URI)
			}
			{
				p.SetState(7411)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7412)
				p.True_false()
			}

		}
		p.SetState(7418)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOAUTH_ENFORCE_PKCE {
			{
				p.SetState(7415)
				p.Match(SnowflakeParserOAUTH_ENFORCE_PKCE)
			}
			{
				p.SetState(7416)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7417)
				p.True_false()
			}

		}
		p.SetState(7423)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOAUTH_USE_SECONDARY_ROLES {
			{
				p.SetState(7420)
				p.Match(SnowflakeParserOAUTH_USE_SECONDARY_ROLES)
			}
			{
				p.SetState(7421)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7422)
				p.Implicit_none()
			}

		}
		p.SetState(7431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserPRE_AUTHORIZED_ROLES_LIST {
			{
				p.SetState(7425)
				p.Match(SnowflakeParserPRE_AUTHORIZED_ROLES_LIST)
			}
			{
				p.SetState(7426)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7427)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(7428)
				p.String_list()
			}
			{
				p.SetState(7429)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(7439)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserBLOCKED_ROLES_LIST {
			{
				p.SetState(7433)
				p.Match(SnowflakeParserBLOCKED_ROLES_LIST)
			}
			{
				p.SetState(7434)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7435)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(7436)
				p.String_list()
			}
			{
				p.SetState(7437)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(7444)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOAUTH_ISSUE_REFRESH_TOKENS {
			{
				p.SetState(7441)
				p.Match(SnowflakeParserOAUTH_ISSUE_REFRESH_TOKENS)
			}
			{
				p.SetState(7442)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7443)
				p.True_false()
			}

		}
		p.SetState(7449)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOAUTH_REFRESH_TOKEN_VALIDITY {
			{
				p.SetState(7446)
				p.Match(SnowflakeParserOAUTH_REFRESH_TOKEN_VALIDITY)
			}
			{
				p.SetState(7447)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7448)
				p.Num()
			}

		}
		p.SetState(7452)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNETWORK_POLICY {
			{
				p.SetState(7451)
				p.Network_policy()
			}

		}
		p.SetState(7457)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY {
			{
				p.SetState(7454)
				p.Match(SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY)
			}
			{
				p.SetState(7455)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7456)
				p.String_()
			}

		}
		p.SetState(7462)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY_2 {
			{
				p.SetState(7459)
				p.Match(SnowflakeParserOAUTH_CLIENT_RSA_PUBLIC_KEY_2)
			}
			{
				p.SetState(7460)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7461)
				p.String_()
			}

		}
		p.SetState(7465)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 897, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7464)
				p.Comment_clause()
			}


		}

	}


	return localctx
}


// ICreate_security_integration_saml2Context is an interface to support dynamic dispatch.
type ICreate_security_integration_saml2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_security_integration_saml2Context differentiates from other interfaces.
	IsCreate_security_integration_saml2Context()
}

type Create_security_integration_saml2Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_security_integration_saml2Context() *Create_security_integration_saml2Context {
	var p = new(Create_security_integration_saml2Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_security_integration_saml2
	return p
}

func (*Create_security_integration_saml2Context) IsCreate_security_integration_saml2Context() {}

func NewCreate_security_integration_saml2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_security_integration_saml2Context {
	var p = new(Create_security_integration_saml2Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_security_integration_saml2

	return p
}

func (s *Create_security_integration_saml2Context) GetParser() antlr.Parser { return s.parser }

func (s *Create_security_integration_saml2Context) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_security_integration_saml2Context) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Create_security_integration_saml2Context) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Create_security_integration_saml2Context) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Create_security_integration_saml2Context) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_security_integration_saml2Context) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_security_integration_saml2Context) SAML2() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2, 0)
}

func (s *Create_security_integration_saml2Context) Enabled_true_false() IEnabled_true_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnabled_true_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnabled_true_falseContext)
}

func (s *Create_security_integration_saml2Context) SAML2_ISSUER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_ISSUER, 0)
}

func (s *Create_security_integration_saml2Context) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Create_security_integration_saml2Context) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_security_integration_saml2Context) SAML2_SSO_URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_SSO_URL, 0)
}

func (s *Create_security_integration_saml2Context) SAML2_PROVIDER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_PROVIDER, 0)
}

func (s *Create_security_integration_saml2Context) SAML2_X509_CERT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_X509_CERT, 0)
}

func (s *Create_security_integration_saml2Context) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_security_integration_saml2Context) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_security_integration_saml2Context) SAML2_SP_INITIATED_LOGIN_PAGE_LABEL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_SP_INITIATED_LOGIN_PAGE_LABEL, 0)
}

func (s *Create_security_integration_saml2Context) SAML2_ENABLE_SP_INITIATED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_ENABLE_SP_INITIATED, 0)
}

func (s *Create_security_integration_saml2Context) AllTrue_false() []ITrue_falseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITrue_falseContext); ok {
			len++
		}
	}

	tst := make([]ITrue_falseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITrue_falseContext); ok {
			tst[i] = t.(ITrue_falseContext)
			i++
		}
	}

	return tst
}

func (s *Create_security_integration_saml2Context) True_false(i int) ITrue_falseContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Create_security_integration_saml2Context) SAML2_SNOWFLAKE_X509_CERT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_SNOWFLAKE_X509_CERT, 0)
}

func (s *Create_security_integration_saml2Context) SAML2_SIGN_REQUEST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_SIGN_REQUEST, 0)
}

func (s *Create_security_integration_saml2Context) SAML2_REQUESTED_NAMEID_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_REQUESTED_NAMEID_FORMAT, 0)
}

func (s *Create_security_integration_saml2Context) SAML2_POST_LOGOUT_REDIRECT_URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_POST_LOGOUT_REDIRECT_URL, 0)
}

func (s *Create_security_integration_saml2Context) SAML2_FORCE_AUTHN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_FORCE_AUTHN, 0)
}

func (s *Create_security_integration_saml2Context) SAML2_SNOWFLAKE_ISSUER_URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_SNOWFLAKE_ISSUER_URL, 0)
}

func (s *Create_security_integration_saml2Context) SAML2_SNOWFLAKE_ACS_URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML2_SNOWFLAKE_ACS_URL, 0)
}

func (s *Create_security_integration_saml2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_security_integration_saml2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_security_integration_saml2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_security_integration_saml2(s)
	}
}

func (s *Create_security_integration_saml2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_security_integration_saml2(s)
	}
}

func (s *Create_security_integration_saml2Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_security_integration_saml2(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_security_integration_saml2() (localctx ICreate_security_integration_saml2Context) {
	this := p
	_ = this

	localctx = NewCreate_security_integration_saml2Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, SnowflakeParserRULE_create_security_integration_saml2)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7469)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(7471)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(7470)
			p.Or_replace()
		}

	}
	{
		p.SetState(7473)
		p.Match(SnowflakeParserSECURITY)
	}
	{
		p.SetState(7474)
		p.Match(SnowflakeParserINTEGRATION)
	}
	p.SetState(7476)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(7475)
			p.If_not_exists()
		}

	}
	{
		p.SetState(7478)
		p.Match(SnowflakeParserTYPE)
	}
	{
		p.SetState(7479)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7480)
		p.Match(SnowflakeParserSAML2)
	}
	{
		p.SetState(7481)
		p.Enabled_true_false()
	}
	{
		p.SetState(7482)
		p.Match(SnowflakeParserSAML2_ISSUER)
	}
	{
		p.SetState(7483)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7484)
		p.String_()
	}
	{
		p.SetState(7485)
		p.Match(SnowflakeParserSAML2_SSO_URL)
	}
	{
		p.SetState(7486)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7487)
		p.String_()
	}
	{
		p.SetState(7488)
		p.Match(SnowflakeParserSAML2_PROVIDER)
	}
	{
		p.SetState(7489)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7490)
		p.String_()
	}
	{
		p.SetState(7491)
		p.Match(SnowflakeParserSAML2_X509_CERT)
	}
	{
		p.SetState(7492)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7493)
		p.String_()
	}
	p.SetState(7497)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSAML2_SP_INITIATED_LOGIN_PAGE_LABEL {
		{
			p.SetState(7494)
			p.Match(SnowflakeParserSAML2_SP_INITIATED_LOGIN_PAGE_LABEL)
		}
		{
			p.SetState(7495)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7496)
			p.String_()
		}

	}
	p.SetState(7502)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSAML2_ENABLE_SP_INITIATED {
		{
			p.SetState(7499)
			p.Match(SnowflakeParserSAML2_ENABLE_SP_INITIATED)
		}
		{
			p.SetState(7500)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7501)
			p.True_false()
		}

	}
	p.SetState(7507)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSAML2_SNOWFLAKE_X509_CERT {
		{
			p.SetState(7504)
			p.Match(SnowflakeParserSAML2_SNOWFLAKE_X509_CERT)
		}
		{
			p.SetState(7505)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7506)
			p.String_()
		}

	}
	p.SetState(7512)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSAML2_SIGN_REQUEST {
		{
			p.SetState(7509)
			p.Match(SnowflakeParserSAML2_SIGN_REQUEST)
		}
		{
			p.SetState(7510)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7511)
			p.True_false()
		}

	}
	p.SetState(7517)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSAML2_REQUESTED_NAMEID_FORMAT {
		{
			p.SetState(7514)
			p.Match(SnowflakeParserSAML2_REQUESTED_NAMEID_FORMAT)
		}
		{
			p.SetState(7515)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7516)
			p.String_()
		}

	}
	p.SetState(7522)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSAML2_POST_LOGOUT_REDIRECT_URL {
		{
			p.SetState(7519)
			p.Match(SnowflakeParserSAML2_POST_LOGOUT_REDIRECT_URL)
		}
		{
			p.SetState(7520)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7521)
			p.String_()
		}

	}
	p.SetState(7527)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSAML2_FORCE_AUTHN {
		{
			p.SetState(7524)
			p.Match(SnowflakeParserSAML2_FORCE_AUTHN)
		}
		{
			p.SetState(7525)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7526)
			p.True_false()
		}

	}
	p.SetState(7532)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSAML2_SNOWFLAKE_ISSUER_URL {
		{
			p.SetState(7529)
			p.Match(SnowflakeParserSAML2_SNOWFLAKE_ISSUER_URL)
		}
		{
			p.SetState(7530)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7531)
			p.String_()
		}

	}
	p.SetState(7537)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSAML2_SNOWFLAKE_ACS_URL {
		{
			p.SetState(7534)
			p.Match(SnowflakeParserSAML2_SNOWFLAKE_ACS_URL)
		}
		{
			p.SetState(7535)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7536)
			p.String_()
		}

	}



	return localctx
}


// ICreate_security_integration_scimContext is an interface to support dynamic dispatch.
type ICreate_security_integration_scimContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_security_integration_scimContext differentiates from other interfaces.
	IsCreate_security_integration_scimContext()
}

type Create_security_integration_scimContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_security_integration_scimContext() *Create_security_integration_scimContext {
	var p = new(Create_security_integration_scimContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_security_integration_scim
	return p
}

func (*Create_security_integration_scimContext) IsCreate_security_integration_scimContext() {}

func NewCreate_security_integration_scimContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_security_integration_scimContext {
	var p = new(Create_security_integration_scimContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_security_integration_scim

	return p
}

func (s *Create_security_integration_scimContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_security_integration_scimContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_security_integration_scimContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Create_security_integration_scimContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Create_security_integration_scimContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_security_integration_scimContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Create_security_integration_scimContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_security_integration_scimContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_security_integration_scimContext) SCIM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCIM, 0)
}

func (s *Create_security_integration_scimContext) SCIM_CLIENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCIM_CLIENT, 0)
}

func (s *Create_security_integration_scimContext) RUN_AS_ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRUN_AS_ROLE, 0)
}

func (s *Create_security_integration_scimContext) OKTA_Q() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOKTA_Q, 0)
}

func (s *Create_security_integration_scimContext) AZURE_Q() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_Q, 0)
}

func (s *Create_security_integration_scimContext) GENERIC_Q() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGENERIC_Q, 0)
}

func (s *Create_security_integration_scimContext) OKTA_PROVISIONER_Q() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOKTA_PROVISIONER_Q, 0)
}

func (s *Create_security_integration_scimContext) AAD_PROVISIONER_Q() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAAD_PROVISIONER_Q, 0)
}

func (s *Create_security_integration_scimContext) GENERIC_SCIM_PROVISIONER_Q() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGENERIC_SCIM_PROVISIONER_Q, 0)
}

func (s *Create_security_integration_scimContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_security_integration_scimContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_security_integration_scimContext) Network_policy() INetwork_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INetwork_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INetwork_policyContext)
}

func (s *Create_security_integration_scimContext) SYNC_PASSWORD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSYNC_PASSWORD, 0)
}

func (s *Create_security_integration_scimContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Create_security_integration_scimContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_security_integration_scimContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_security_integration_scimContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_security_integration_scimContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_security_integration_scim(s)
	}
}

func (s *Create_security_integration_scimContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_security_integration_scim(s)
	}
}

func (s *Create_security_integration_scimContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_security_integration_scim(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_security_integration_scim() (localctx ICreate_security_integration_scimContext) {
	this := p
	_ = this

	localctx = NewCreate_security_integration_scimContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, SnowflakeParserRULE_create_security_integration_scim)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7539)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(7541)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(7540)
			p.Or_replace()
		}

	}
	{
		p.SetState(7543)
		p.Match(SnowflakeParserSECURITY)
	}
	{
		p.SetState(7544)
		p.Match(SnowflakeParserINTEGRATION)
	}
	p.SetState(7546)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(7545)
			p.If_not_exists()
		}

	}
	{
		p.SetState(7548)
		p.Id_()
	}
	{
		p.SetState(7549)
		p.Match(SnowflakeParserTYPE)
	}
	{
		p.SetState(7550)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7551)
		p.Match(SnowflakeParserSCIM)
	}
	{
		p.SetState(7552)
		p.Match(SnowflakeParserSCIM_CLIENT)
	}
	{
		p.SetState(7553)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7554)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserAZURE_Q || _la == SnowflakeParserGENERIC_Q || _la == SnowflakeParserOKTA_Q) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(7555)
		p.Match(SnowflakeParserRUN_AS_ROLE)
	}
	{
		p.SetState(7556)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7557)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserAAD_PROVISIONER_Q || _la == SnowflakeParserGENERIC_SCIM_PROVISIONER_Q || _la == SnowflakeParserOKTA_PROVISIONER_Q) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(7559)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserNETWORK_POLICY {
		{
			p.SetState(7558)
			p.Network_policy()
		}

	}
	p.SetState(7564)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSYNC_PASSWORD {
		{
			p.SetState(7561)
			p.Match(SnowflakeParserSYNC_PASSWORD)
		}
		{
			p.SetState(7562)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7563)
			p.True_false()
		}

	}
	p.SetState(7567)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 914, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7566)
			p.Comment_clause()
		}


	}



	return localctx
}


// INetwork_policyContext is an interface to support dynamic dispatch.
type INetwork_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNetwork_policyContext differentiates from other interfaces.
	IsNetwork_policyContext()
}

type Network_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNetwork_policyContext() *Network_policyContext {
	var p = new(Network_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_network_policy
	return p
}

func (*Network_policyContext) IsNetwork_policyContext() {}

func NewNetwork_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Network_policyContext {
	var p = new(Network_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_network_policy

	return p
}

func (s *Network_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Network_policyContext) NETWORK_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK_POLICY, 0)
}

func (s *Network_policyContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Network_policyContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Network_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Network_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Network_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterNetwork_policy(s)
	}
}

func (s *Network_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitNetwork_policy(s)
	}
}

func (s *Network_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitNetwork_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Network_policy() (localctx INetwork_policyContext) {
	this := p
	_ = this

	localctx = NewNetwork_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, SnowflakeParserRULE_network_policy)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7569)
		p.Match(SnowflakeParserNETWORK_POLICY)
	}
	{
		p.SetState(7570)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7571)
		p.String_()
	}



	return localctx
}


// IPartner_applicationContext is an interface to support dynamic dispatch.
type IPartner_applicationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartner_applicationContext differentiates from other interfaces.
	IsPartner_applicationContext()
}

type Partner_applicationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartner_applicationContext() *Partner_applicationContext {
	var p = new(Partner_applicationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_partner_application
	return p
}

func (*Partner_applicationContext) IsPartner_applicationContext() {}

func NewPartner_applicationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partner_applicationContext {
	var p = new(Partner_applicationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_partner_application

	return p
}

func (s *Partner_applicationContext) GetParser() antlr.Parser { return s.parser }

func (s *Partner_applicationContext) TABLEAU_DESKTOP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLEAU_DESKTOP, 0)
}

func (s *Partner_applicationContext) TABLEAU_SERVER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLEAU_SERVER, 0)
}

func (s *Partner_applicationContext) LOOKER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLOOKER, 0)
}

func (s *Partner_applicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partner_applicationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Partner_applicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterPartner_application(s)
	}
}

func (s *Partner_applicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitPartner_application(s)
	}
}

func (s *Partner_applicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitPartner_application(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Partner_application() (localctx IPartner_applicationContext) {
	this := p
	_ = this

	localctx = NewPartner_applicationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, SnowflakeParserRULE_partner_application)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7573)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserLOOKER || _la == SnowflakeParserTABLEAU_DESKTOP || _la == SnowflakeParserTABLEAU_SERVER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IStart_withContext is an interface to support dynamic dispatch.
type IStart_withContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStart_withContext differentiates from other interfaces.
	IsStart_withContext()
}

type Start_withContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStart_withContext() *Start_withContext {
	var p = new(Start_withContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_start_with
	return p
}

func (*Start_withContext) IsStart_withContext() {}

func NewStart_withContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Start_withContext {
	var p = new(Start_withContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_start_with

	return p
}

func (s *Start_withContext) GetParser() antlr.Parser { return s.parser }

func (s *Start_withContext) START() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTART, 0)
}

func (s *Start_withContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Start_withContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Start_withContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Start_withContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Start_withContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Start_withContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterStart_with(s)
	}
}

func (s *Start_withContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitStart_with(s)
	}
}

func (s *Start_withContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitStart_with(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Start_with() (localctx IStart_withContext) {
	this := p
	_ = this

	localctx = NewStart_withContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, SnowflakeParserRULE_start_with)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7575)
		p.Match(SnowflakeParserSTART)
	}
	p.SetState(7577)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserWITH {
		{
			p.SetState(7576)
			p.Match(SnowflakeParserWITH)
		}

	}
	p.SetState(7580)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEQ {
		{
			p.SetState(7579)
			p.Match(SnowflakeParserEQ)
		}

	}
	{
		p.SetState(7582)
		p.Num()
	}



	return localctx
}


// IIncrement_byContext is an interface to support dynamic dispatch.
type IIncrement_byContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIncrement_byContext differentiates from other interfaces.
	IsIncrement_byContext()
}

type Increment_byContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncrement_byContext() *Increment_byContext {
	var p = new(Increment_byContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_increment_by
	return p
}

func (*Increment_byContext) IsIncrement_byContext() {}

func NewIncrement_byContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Increment_byContext {
	var p = new(Increment_byContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_increment_by

	return p
}

func (s *Increment_byContext) GetParser() antlr.Parser { return s.parser }

func (s *Increment_byContext) INCREMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINCREMENT, 0)
}

func (s *Increment_byContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Increment_byContext) BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBY, 0)
}

func (s *Increment_byContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Increment_byContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Increment_byContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Increment_byContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterIncrement_by(s)
	}
}

func (s *Increment_byContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitIncrement_by(s)
	}
}

func (s *Increment_byContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitIncrement_by(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Increment_by() (localctx IIncrement_byContext) {
	this := p
	_ = this

	localctx = NewIncrement_byContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, SnowflakeParserRULE_increment_by)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7584)
		p.Match(SnowflakeParserINCREMENT)
	}
	p.SetState(7586)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserBY {
		{
			p.SetState(7585)
			p.Match(SnowflakeParserBY)
		}

	}
	p.SetState(7589)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEQ {
		{
			p.SetState(7588)
			p.Match(SnowflakeParserEQ)
		}

	}
	{
		p.SetState(7591)
		p.Num()
	}



	return localctx
}


// ICreate_sequenceContext is an interface to support dynamic dispatch.
type ICreate_sequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_sequenceContext differentiates from other interfaces.
	IsCreate_sequenceContext()
}

type Create_sequenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_sequenceContext() *Create_sequenceContext {
	var p = new(Create_sequenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_sequence
	return p
}

func (*Create_sequenceContext) IsCreate_sequenceContext() {}

func NewCreate_sequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_sequenceContext {
	var p = new(Create_sequenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_sequence

	return p
}

func (s *Create_sequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_sequenceContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_sequenceContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEQUENCE, 0)
}

func (s *Create_sequenceContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_sequenceContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_sequenceContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_sequenceContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Create_sequenceContext) Start_with() IStart_withContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStart_withContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStart_withContext)
}

func (s *Create_sequenceContext) Increment_by() IIncrement_byContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIncrement_byContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIncrement_byContext)
}

func (s *Create_sequenceContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_sequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_sequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_sequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_sequence(s)
	}
}

func (s *Create_sequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_sequence(s)
	}
}

func (s *Create_sequenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_sequence(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_sequence() (localctx ICreate_sequenceContext) {
	this := p
	_ = this

	localctx = NewCreate_sequenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, SnowflakeParserRULE_create_sequence)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7593)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(7595)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(7594)
			p.Or_replace()
		}

	}
	{
		p.SetState(7597)
		p.Match(SnowflakeParserSEQUENCE)
	}
	p.SetState(7599)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(7598)
			p.If_not_exists()
		}

	}
	{
		p.SetState(7601)
		p.Object_name()
	}
	p.SetState(7603)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 921, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7602)
			p.Match(SnowflakeParserWITH)
		}


	}
	p.SetState(7606)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSTART {
		{
			p.SetState(7605)
			p.Start_with()
		}

	}
	p.SetState(7609)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserINCREMENT {
		{
			p.SetState(7608)
			p.Increment_by()
		}

	}
	p.SetState(7612)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 924, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7611)
			p.Comment_clause()
		}


	}



	return localctx
}


// ICreate_session_policyContext is an interface to support dynamic dispatch.
type ICreate_session_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_session_policyContext differentiates from other interfaces.
	IsCreate_session_policyContext()
}

type Create_session_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_session_policyContext() *Create_session_policyContext {
	var p = new(Create_session_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_session_policy
	return p
}

func (*Create_session_policyContext) IsCreate_session_policyContext() {}

func NewCreate_session_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_session_policyContext {
	var p = new(Create_session_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_session_policy

	return p
}

func (s *Create_session_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_session_policyContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_session_policyContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION, 0)
}

func (s *Create_session_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Create_session_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_session_policyContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_session_policyContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Create_session_policyContext) SESSION_IDLE_TIMEOUT_MINS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION_IDLE_TIMEOUT_MINS, 0)
}

func (s *Create_session_policyContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_session_policyContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_session_policyContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Create_session_policyContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Create_session_policyContext) SESSION_UI_IDLE_TIMEOUT_MINS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION_UI_IDLE_TIMEOUT_MINS, 0)
}

func (s *Create_session_policyContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_session_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_session_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_session_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_session_policy(s)
	}
}

func (s *Create_session_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_session_policy(s)
	}
}

func (s *Create_session_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_session_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_session_policy() (localctx ICreate_session_policyContext) {
	this := p
	_ = this

	localctx = NewCreate_session_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, SnowflakeParserRULE_create_session_policy)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7614)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(7616)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(7615)
			p.Or_replace()
		}

	}
	{
		p.SetState(7618)
		p.Match(SnowflakeParserSESSION)
	}
	{
		p.SetState(7619)
		p.Match(SnowflakeParserPOLICY)
	}
	p.SetState(7621)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(7620)
			p.If_exists()
		}

	}
	{
		p.SetState(7623)
		p.Id_()
	}
	p.SetState(7627)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSESSION_IDLE_TIMEOUT_MINS {
		{
			p.SetState(7624)
			p.Match(SnowflakeParserSESSION_IDLE_TIMEOUT_MINS)
		}
		{
			p.SetState(7625)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7626)
			p.Num()
		}

	}
	p.SetState(7632)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSESSION_UI_IDLE_TIMEOUT_MINS {
		{
			p.SetState(7629)
			p.Match(SnowflakeParserSESSION_UI_IDLE_TIMEOUT_MINS)
		}
		{
			p.SetState(7630)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7631)
			p.Num()
		}

	}
	p.SetState(7635)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 929, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7634)
			p.Comment_clause()
		}


	}



	return localctx
}


// ICreate_shareContext is an interface to support dynamic dispatch.
type ICreate_shareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_shareContext differentiates from other interfaces.
	IsCreate_shareContext()
}

type Create_shareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_shareContext() *Create_shareContext {
	var p = new(Create_shareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_share
	return p
}

func (*Create_shareContext) IsCreate_shareContext() {}

func NewCreate_shareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_shareContext {
	var p = new(Create_shareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_share

	return p
}

func (s *Create_shareContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_shareContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_shareContext) SHARE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARE, 0)
}

func (s *Create_shareContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_shareContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_shareContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_shareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_shareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_shareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_share(s)
	}
}

func (s *Create_shareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_share(s)
	}
}

func (s *Create_shareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_share(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_share() (localctx ICreate_shareContext) {
	this := p
	_ = this

	localctx = NewCreate_shareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, SnowflakeParserRULE_create_share)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7637)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(7639)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(7638)
			p.Or_replace()
		}

	}
	{
		p.SetState(7641)
		p.Match(SnowflakeParserSHARE)
	}
	{
		p.SetState(7642)
		p.Id_()
	}
	p.SetState(7644)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 931, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7643)
			p.Comment_clause()
		}


	}



	return localctx
}


// ICharacterContext is an interface to support dynamic dispatch.
type ICharacterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharacterContext differentiates from other interfaces.
	IsCharacterContext()
}

type CharacterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharacterContext() *CharacterContext {
	var p = new(CharacterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_character
	return p
}

func (*CharacterContext) IsCharacterContext() {}

func NewCharacterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharacterContext {
	var p = new(CharacterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_character

	return p
}

func (s *CharacterContext) GetParser() antlr.Parser { return s.parser }

func (s *CharacterContext) CHAR_LITERAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCHAR_LITERAL, 0)
}

func (s *CharacterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharacterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CharacterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCharacter(s)
	}
}

func (s *CharacterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCharacter(s)
	}
}

func (s *CharacterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCharacter(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Character() (localctx ICharacterContext) {
	this := p
	_ = this

	localctx = NewCharacterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, SnowflakeParserRULE_character)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7646)
		p.Match(SnowflakeParserCHAR_LITERAL)
	}



	return localctx
}


// IFormat_type_optionsContext is an interface to support dynamic dispatch.
type IFormat_type_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormat_type_optionsContext differentiates from other interfaces.
	IsFormat_type_optionsContext()
}

type Format_type_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormat_type_optionsContext() *Format_type_optionsContext {
	var p = new(Format_type_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_format_type_options
	return p
}

func (*Format_type_optionsContext) IsFormat_type_optionsContext() {}

func NewFormat_type_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Format_type_optionsContext {
	var p = new(Format_type_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_format_type_options

	return p
}

func (s *Format_type_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Format_type_optionsContext) COMPRESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMPRESSION, 0)
}

func (s *Format_type_optionsContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Format_type_optionsContext) AUTO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTO, 0)
}

func (s *Format_type_optionsContext) GZIP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGZIP, 0)
}

func (s *Format_type_optionsContext) BZ2() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBZ2, 0)
}

func (s *Format_type_optionsContext) BROTLI() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBROTLI, 0)
}

func (s *Format_type_optionsContext) ZSTD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserZSTD, 0)
}

func (s *Format_type_optionsContext) DEFLATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFLATE, 0)
}

func (s *Format_type_optionsContext) RAW_DEFLATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRAW_DEFLATE, 0)
}

func (s *Format_type_optionsContext) NONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNONE, 0)
}

func (s *Format_type_optionsContext) RECORD_DELIMITER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRECORD_DELIMITER, 0)
}

func (s *Format_type_optionsContext) Character() ICharacterContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICharacterContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICharacterContext)
}

func (s *Format_type_optionsContext) FIELD_DELIMITER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFIELD_DELIMITER, 0)
}

func (s *Format_type_optionsContext) FILE_EXTENSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE_EXTENSION, 0)
}

func (s *Format_type_optionsContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Format_type_optionsContext) SKIP_HEADER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSKIP_HEADER, 0)
}

func (s *Format_type_optionsContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Format_type_optionsContext) SKIP_BLANK_LINES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSKIP_BLANK_LINES, 0)
}

func (s *Format_type_optionsContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Format_type_optionsContext) DATE_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATE_FORMAT, 0)
}

func (s *Format_type_optionsContext) TIME_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIME_FORMAT, 0)
}

func (s *Format_type_optionsContext) TIMESTAMP_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_FORMAT, 0)
}

func (s *Format_type_optionsContext) BINARY_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBINARY_FORMAT, 0)
}

func (s *Format_type_optionsContext) HEX() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserHEX, 0)
}

func (s *Format_type_optionsContext) BASE64() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBASE64, 0)
}

func (s *Format_type_optionsContext) UTF8() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUTF8, 0)
}

func (s *Format_type_optionsContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserESCAPE, 0)
}

func (s *Format_type_optionsContext) ESCAPE_UNENCLOSED_FIELD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserESCAPE_UNENCLOSED_FIELD, 0)
}

func (s *Format_type_optionsContext) TRIM_SPACE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRIM_SPACE, 0)
}

func (s *Format_type_optionsContext) FIELD_OPTIONALLY_ENCLOSED_BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFIELD_OPTIONALLY_ENCLOSED_BY, 0)
}

func (s *Format_type_optionsContext) NULL_IF() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_IF, 0)
}

func (s *Format_type_optionsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Format_type_optionsContext) String_list() IString_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_listContext)
}

func (s *Format_type_optionsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Format_type_optionsContext) ERROR_ON_COLUMN_COUNT_MISMATCH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserERROR_ON_COLUMN_COUNT_MISMATCH, 0)
}

func (s *Format_type_optionsContext) REPLACE_INVALID_CHARACTERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLACE_INVALID_CHARACTERS, 0)
}

func (s *Format_type_optionsContext) EMPTY_FIELD_AS_NULL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEMPTY_FIELD_AS_NULL, 0)
}

func (s *Format_type_optionsContext) SKIP_BYTE_ORDER_MARK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSKIP_BYTE_ORDER_MARK, 0)
}

func (s *Format_type_optionsContext) ENCODING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENCODING, 0)
}

func (s *Format_type_optionsContext) ENABLE_OCTAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE_OCTAL, 0)
}

func (s *Format_type_optionsContext) ALLOW_DUPLICATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOW_DUPLICATE, 0)
}

func (s *Format_type_optionsContext) STRIP_OUTER_ARRAY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRIP_OUTER_ARRAY, 0)
}

func (s *Format_type_optionsContext) STRIP_NULL_VALUES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRIP_NULL_VALUES, 0)
}

func (s *Format_type_optionsContext) IGNORE_UTF8_ERRORS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIGNORE_UTF8_ERRORS, 0)
}

func (s *Format_type_optionsContext) LZO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLZO, 0)
}

func (s *Format_type_optionsContext) SNAPPY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSNAPPY, 0)
}

func (s *Format_type_optionsContext) SNAPPY_COMPRESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSNAPPY_COMPRESSION, 0)
}

func (s *Format_type_optionsContext) BINARY_AS_TEXT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBINARY_AS_TEXT, 0)
}

func (s *Format_type_optionsContext) PRESERVE_SPACE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRESERVE_SPACE, 0)
}

func (s *Format_type_optionsContext) STRIP_OUTER_ELEMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRIP_OUTER_ELEMENT, 0)
}

func (s *Format_type_optionsContext) DISABLE_SNOWFLAKE_DATA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISABLE_SNOWFLAKE_DATA, 0)
}

func (s *Format_type_optionsContext) DISABLE_AUTO_CONVERT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISABLE_AUTO_CONVERT, 0)
}

func (s *Format_type_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Format_type_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Format_type_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFormat_type_options(s)
	}
}

func (s *Format_type_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFormat_type_options(s)
	}
}

func (s *Format_type_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFormat_type_options(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Format_type_options() (localctx IFormat_type_optionsContext) {
	this := p
	_ = this

	localctx = NewFormat_type_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, SnowflakeParserRULE_format_type_options)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7785)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 940, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7648)
			p.Match(SnowflakeParserCOMPRESSION)
		}
		{
			p.SetState(7649)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7650)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la - 59)) & ^0x3f) == 0 && ((int64(1) << (_la - 59)) & 79164837199873) != 0 || _la == SnowflakeParserDEFLATE || _la == SnowflakeParserGZIP || _la == SnowflakeParserNONE || _la == SnowflakeParserRAW_DEFLATE || _la == SnowflakeParserZSTD) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7651)
			p.Match(SnowflakeParserRECORD_DELIMITER)
		}
		{
			p.SetState(7652)
			p.Match(SnowflakeParserEQ)
		}
		p.SetState(7655)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserCHAR_LITERAL:
			{
				p.SetState(7653)
				p.Character()
			}


		case SnowflakeParserNONE:
			{
				p.SetState(7654)
				p.Match(SnowflakeParserNONE)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7657)
			p.Match(SnowflakeParserFIELD_DELIMITER)
		}
		{
			p.SetState(7658)
			p.Match(SnowflakeParserEQ)
		}
		p.SetState(7661)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserCHAR_LITERAL:
			{
				p.SetState(7659)
				p.Character()
			}


		case SnowflakeParserNONE:
			{
				p.SetState(7660)
				p.Match(SnowflakeParserNONE)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7663)
			p.Match(SnowflakeParserFILE_EXTENSION)
		}
		{
			p.SetState(7664)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7665)
			p.String_()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7666)
			p.Match(SnowflakeParserSKIP_HEADER)
		}
		{
			p.SetState(7667)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7668)
			p.Num()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7669)
			p.Match(SnowflakeParserSKIP_BLANK_LINES)
		}
		{
			p.SetState(7670)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7671)
			p.True_false()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(7672)
			p.Match(SnowflakeParserDATE_FORMAT)
		}
		{
			p.SetState(7673)
			p.Match(SnowflakeParserEQ)
		}
		p.SetState(7676)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSTRING:
			{
				p.SetState(7674)
				p.String_()
			}


		case SnowflakeParserAUTO:
			{
				p.SetState(7675)
				p.Match(SnowflakeParserAUTO)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(7678)
			p.Match(SnowflakeParserTIME_FORMAT)
		}
		{
			p.SetState(7679)
			p.Match(SnowflakeParserEQ)
		}
		p.SetState(7682)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSTRING:
			{
				p.SetState(7680)
				p.String_()
			}


		case SnowflakeParserAUTO:
			{
				p.SetState(7681)
				p.Match(SnowflakeParserAUTO)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(7684)
			p.Match(SnowflakeParserTIMESTAMP_FORMAT)
		}
		{
			p.SetState(7685)
			p.Match(SnowflakeParserEQ)
		}
		p.SetState(7688)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSTRING:
			{
				p.SetState(7686)
				p.String_()
			}


		case SnowflakeParserAUTO:
			{
				p.SetState(7687)
				p.Match(SnowflakeParserAUTO)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(7690)
			p.Match(SnowflakeParserBINARY_FORMAT)
		}
		{
			p.SetState(7691)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7692)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserBASE64 || _la == SnowflakeParserHEX || _la == SnowflakeParserUTF8) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(7693)
			p.Match(SnowflakeParserESCAPE)
		}
		{
			p.SetState(7694)
			p.Match(SnowflakeParserEQ)
		}
		p.SetState(7697)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserCHAR_LITERAL:
			{
				p.SetState(7695)
				p.Character()
			}


		case SnowflakeParserNONE:
			{
				p.SetState(7696)
				p.Match(SnowflakeParserNONE)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(7699)
			p.Match(SnowflakeParserESCAPE_UNENCLOSED_FIELD)
		}
		{
			p.SetState(7700)
			p.Match(SnowflakeParserEQ)
		}
		p.SetState(7703)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserCHAR_LITERAL:
			{
				p.SetState(7701)
				p.Character()
			}


		case SnowflakeParserNONE:
			{
				p.SetState(7702)
				p.Match(SnowflakeParserNONE)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(7705)
			p.Match(SnowflakeParserTRIM_SPACE)
		}
		{
			p.SetState(7706)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7707)
			p.True_false()
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(7708)
			p.Match(SnowflakeParserFIELD_OPTIONALLY_ENCLOSED_BY)
		}
		{
			p.SetState(7709)
			p.Match(SnowflakeParserEQ)
		}
		p.SetState(7712)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserCHAR_LITERAL:
			{
				p.SetState(7710)
				p.Character()
			}


		case SnowflakeParserNONE:
			{
				p.SetState(7711)
				p.Match(SnowflakeParserNONE)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(7714)
			p.Match(SnowflakeParserNULL_IF)
		}
		{
			p.SetState(7715)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7716)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(7717)
			p.String_list()
		}
		{
			p.SetState(7718)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(7720)
			p.Match(SnowflakeParserERROR_ON_COLUMN_COUNT_MISMATCH)
		}
		{
			p.SetState(7721)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7722)
			p.True_false()
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(7723)
			p.Match(SnowflakeParserREPLACE_INVALID_CHARACTERS)
		}
		{
			p.SetState(7724)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7725)
			p.True_false()
		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(7726)
			p.Match(SnowflakeParserEMPTY_FIELD_AS_NULL)
		}
		{
			p.SetState(7727)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7728)
			p.True_false()
		}


	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(7729)
			p.Match(SnowflakeParserSKIP_BYTE_ORDER_MARK)
		}
		{
			p.SetState(7730)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7731)
			p.True_false()
		}


	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(7732)
			p.Match(SnowflakeParserENCODING)
		}
		{
			p.SetState(7733)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7734)
			p.String_()
		}


	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(7735)
			p.Match(SnowflakeParserUTF8)
		}


	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(7736)
			p.Match(SnowflakeParserENABLE_OCTAL)
		}
		{
			p.SetState(7737)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7738)
			p.True_false()
		}


	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(7739)
			p.Match(SnowflakeParserALLOW_DUPLICATE)
		}
		{
			p.SetState(7740)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7741)
			p.True_false()
		}


	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(7742)
			p.Match(SnowflakeParserSTRIP_OUTER_ARRAY)
		}
		{
			p.SetState(7743)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7744)
			p.True_false()
		}


	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(7745)
			p.Match(SnowflakeParserSTRIP_NULL_VALUES)
		}
		{
			p.SetState(7746)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7747)
			p.True_false()
		}


	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(7748)
			p.Match(SnowflakeParserIGNORE_UTF8_ERRORS)
		}
		{
			p.SetState(7749)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7750)
			p.True_false()
		}


	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(7751)
			p.Match(SnowflakeParserCOMPRESSION)
		}
		{
			p.SetState(7752)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7753)
			p.Match(SnowflakeParserAUTO)
		}


	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(7754)
			p.Match(SnowflakeParserLZO)
		}


	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(7755)
			p.Match(SnowflakeParserSNAPPY)
		}


	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(7756)
			p.Match(SnowflakeParserNONE)
		}


	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(7757)
			p.Match(SnowflakeParserSNAPPY_COMPRESSION)
		}
		{
			p.SetState(7758)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7759)
			p.True_false()
		}


	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(7760)
			p.Match(SnowflakeParserBINARY_AS_TEXT)
		}
		{
			p.SetState(7761)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7762)
			p.True_false()
		}


	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(7763)
			p.Match(SnowflakeParserCOMPRESSION)
		}
		{
			p.SetState(7764)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7765)
			p.Match(SnowflakeParserAUTO)
		}


	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(7766)
			p.Match(SnowflakeParserGZIP)
		}


	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(7767)
			p.Match(SnowflakeParserBZ2)
		}


	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(7768)
			p.Match(SnowflakeParserBROTLI)
		}


	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(7769)
			p.Match(SnowflakeParserZSTD)
		}


	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(7770)
			p.Match(SnowflakeParserDEFLATE)
		}


	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(7771)
			p.Match(SnowflakeParserRAW_DEFLATE)
		}


	case 40:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(7772)
			p.Match(SnowflakeParserNONE)
		}


	case 41:
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(7773)
			p.Match(SnowflakeParserPRESERVE_SPACE)
		}
		{
			p.SetState(7774)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7775)
			p.True_false()
		}


	case 42:
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(7776)
			p.Match(SnowflakeParserSTRIP_OUTER_ELEMENT)
		}
		{
			p.SetState(7777)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7778)
			p.True_false()
		}


	case 43:
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(7779)
			p.Match(SnowflakeParserDISABLE_SNOWFLAKE_DATA)
		}
		{
			p.SetState(7780)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7781)
			p.True_false()
		}


	case 44:
		p.EnterOuterAlt(localctx, 44)
		{
			p.SetState(7782)
			p.Match(SnowflakeParserDISABLE_AUTO_CONVERT)
		}
		{
			p.SetState(7783)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7784)
			p.True_false()
		}

	}


	return localctx
}


// ICopy_optionsContext is an interface to support dynamic dispatch.
type ICopy_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCopy_optionsContext differentiates from other interfaces.
	IsCopy_optionsContext()
}

type Copy_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCopy_optionsContext() *Copy_optionsContext {
	var p = new(Copy_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_copy_options
	return p
}

func (*Copy_optionsContext) IsCopy_optionsContext() {}

func NewCopy_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_optionsContext {
	var p = new(Copy_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_copy_options

	return p
}

func (s *Copy_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_optionsContext) ON_ERROR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON_ERROR, 0)
}

func (s *Copy_optionsContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Copy_optionsContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCONTINUE, 0)
}

func (s *Copy_optionsContext) SKIP_FILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSKIP_FILE, 0)
}

func (s *Copy_optionsContext) SKIP_FILE_N() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSKIP_FILE_N, 0)
}

func (s *Copy_optionsContext) ABORT_STATEMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserABORT_STATEMENT, 0)
}

func (s *Copy_optionsContext) SIZE_LIMIT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSIZE_LIMIT, 0)
}

func (s *Copy_optionsContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Copy_optionsContext) PURGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPURGE, 0)
}

func (s *Copy_optionsContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Copy_optionsContext) RETURN_FAILED_ONLY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRETURN_FAILED_ONLY, 0)
}

func (s *Copy_optionsContext) MATCH_BY_COLUMN_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATCH_BY_COLUMN_NAME, 0)
}

func (s *Copy_optionsContext) CASE_SENSITIVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCASE_SENSITIVE, 0)
}

func (s *Copy_optionsContext) CASE_INSENSITIVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCASE_INSENSITIVE, 0)
}

func (s *Copy_optionsContext) NONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNONE, 0)
}

func (s *Copy_optionsContext) ENFORCE_LENGTH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENFORCE_LENGTH, 0)
}

func (s *Copy_optionsContext) TRUNCATECOLUMNS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRUNCATECOLUMNS, 0)
}

func (s *Copy_optionsContext) FORCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORCE, 0)
}

func (s *Copy_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Copy_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCopy_options(s)
	}
}

func (s *Copy_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCopy_options(s)
	}
}

func (s *Copy_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCopy_options(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Copy_options() (localctx ICopy_optionsContext) {
	this := p
	_ = this

	localctx = NewCopy_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, SnowflakeParserRULE_copy_options)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7819)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserON_ERROR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7787)
			p.Match(SnowflakeParserON_ERROR)
		}
		{
			p.SetState(7788)
			p.Match(SnowflakeParserEQ)
		}
		p.SetState(7794)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 941, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(7789)
				p.Match(SnowflakeParserCONTINUE)
			}


		case 2:
			{
				p.SetState(7790)
				p.Match(SnowflakeParserSKIP_FILE)
			}


		case 3:
			{
				p.SetState(7791)
				p.Match(SnowflakeParserSKIP_FILE_N)
			}


		case 4:
			{
				p.SetState(7792)
				p.Match(SnowflakeParserSKIP_FILE_N)
			}
			{
				p.SetState(7793)
				p.Match(SnowflakeParserABORT_STATEMENT)
			}

		}


	case SnowflakeParserSIZE_LIMIT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7796)
			p.Match(SnowflakeParserSIZE_LIMIT)
		}
		{
			p.SetState(7797)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7798)
			p.Num()
		}


	case SnowflakeParserPURGE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7799)
			p.Match(SnowflakeParserPURGE)
		}
		{
			p.SetState(7800)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7801)
			p.True_false()
		}


	case SnowflakeParserRETURN_FAILED_ONLY:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7802)
			p.Match(SnowflakeParserRETURN_FAILED_ONLY)
		}
		{
			p.SetState(7803)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7804)
			p.True_false()
		}


	case SnowflakeParserMATCH_BY_COLUMN_NAME:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7805)
			p.Match(SnowflakeParserMATCH_BY_COLUMN_NAME)
		}
		{
			p.SetState(7806)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7807)
			p.Match(SnowflakeParserCASE_SENSITIVE)
		}


	case SnowflakeParserCASE_INSENSITIVE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7808)
			p.Match(SnowflakeParserCASE_INSENSITIVE)
		}


	case SnowflakeParserNONE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(7809)
			p.Match(SnowflakeParserNONE)
		}


	case SnowflakeParserENFORCE_LENGTH:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(7810)
			p.Match(SnowflakeParserENFORCE_LENGTH)
		}
		{
			p.SetState(7811)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7812)
			p.True_false()
		}


	case SnowflakeParserTRUNCATECOLUMNS:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(7813)
			p.Match(SnowflakeParserTRUNCATECOLUMNS)
		}
		{
			p.SetState(7814)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7815)
			p.True_false()
		}


	case SnowflakeParserFORCE:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(7816)
			p.Match(SnowflakeParserFORCE)
		}
		{
			p.SetState(7817)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7818)
			p.True_false()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IInternal_stage_paramsContext is an interface to support dynamic dispatch.
type IInternal_stage_paramsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInternal_stage_paramsContext differentiates from other interfaces.
	IsInternal_stage_paramsContext()
}

type Internal_stage_paramsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInternal_stage_paramsContext() *Internal_stage_paramsContext {
	var p = new(Internal_stage_paramsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_internal_stage_params
	return p
}

func (*Internal_stage_paramsContext) IsInternal_stage_paramsContext() {}

func NewInternal_stage_paramsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Internal_stage_paramsContext {
	var p = new(Internal_stage_paramsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_internal_stage_params

	return p
}

func (s *Internal_stage_paramsContext) GetParser() antlr.Parser { return s.parser }

func (s *Internal_stage_paramsContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENCRYPTION, 0)
}

func (s *Internal_stage_paramsContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Internal_stage_paramsContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Internal_stage_paramsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Internal_stage_paramsContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Internal_stage_paramsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Internal_stage_paramsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Internal_stage_paramsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Internal_stage_paramsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterInternal_stage_params(s)
	}
}

func (s *Internal_stage_paramsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitInternal_stage_params(s)
	}
}

func (s *Internal_stage_paramsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitInternal_stage_params(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Internal_stage_params() (localctx IInternal_stage_paramsContext) {
	this := p
	_ = this

	localctx = NewInternal_stage_paramsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, SnowflakeParserRULE_internal_stage_params)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7829)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserENCRYPTION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7821)
			p.Match(SnowflakeParserENCRYPTION)
		}
		{
			p.SetState(7822)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7823)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(7824)
			p.Match(SnowflakeParserTYPE)
		}
		{
			p.SetState(7825)
			p.Match(SnowflakeParserEQ)
		}


	case SnowflakeParserTYPE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7826)
			p.Match(SnowflakeParserTYPE)
		}
		{
			p.SetState(7827)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7828)
			p.Match(SnowflakeParserRR_BRACKET)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IStage_typeContext is an interface to support dynamic dispatch.
type IStage_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStage_typeContext differentiates from other interfaces.
	IsStage_typeContext()
}

type Stage_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStage_typeContext() *Stage_typeContext {
	var p = new(Stage_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_stage_type
	return p
}

func (*Stage_typeContext) IsStage_typeContext() {}

func NewStage_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stage_typeContext {
	var p = new(Stage_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_stage_type

	return p
}

func (s *Stage_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Stage_typeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Stage_typeContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Stage_typeContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Stage_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stage_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Stage_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterStage_type(s)
	}
}

func (s *Stage_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitStage_type(s)
	}
}

func (s *Stage_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitStage_type(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Stage_type() (localctx IStage_typeContext) {
	this := p
	_ = this

	localctx = NewStage_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, SnowflakeParserRULE_stage_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7831)
		p.Match(SnowflakeParserTYPE)
	}
	{
		p.SetState(7832)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7833)
		p.String_()
	}



	return localctx
}


// IStage_master_keyContext is an interface to support dynamic dispatch.
type IStage_master_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStage_master_keyContext differentiates from other interfaces.
	IsStage_master_keyContext()
}

type Stage_master_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStage_master_keyContext() *Stage_master_keyContext {
	var p = new(Stage_master_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_stage_master_key
	return p
}

func (*Stage_master_keyContext) IsStage_master_keyContext() {}

func NewStage_master_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stage_master_keyContext {
	var p = new(Stage_master_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_stage_master_key

	return p
}

func (s *Stage_master_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Stage_master_keyContext) MASTER_KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASTER_KEY, 0)
}

func (s *Stage_master_keyContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Stage_master_keyContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Stage_master_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stage_master_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Stage_master_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterStage_master_key(s)
	}
}

func (s *Stage_master_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitStage_master_key(s)
	}
}

func (s *Stage_master_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitStage_master_key(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Stage_master_key() (localctx IStage_master_keyContext) {
	this := p
	_ = this

	localctx = NewStage_master_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, SnowflakeParserRULE_stage_master_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7835)
		p.Match(SnowflakeParserMASTER_KEY)
	}
	{
		p.SetState(7836)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7837)
		p.String_()
	}



	return localctx
}


// IStage_kms_keyContext is an interface to support dynamic dispatch.
type IStage_kms_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStage_kms_keyContext differentiates from other interfaces.
	IsStage_kms_keyContext()
}

type Stage_kms_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStage_kms_keyContext() *Stage_kms_keyContext {
	var p = new(Stage_kms_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_stage_kms_key
	return p
}

func (*Stage_kms_keyContext) IsStage_kms_keyContext() {}

func NewStage_kms_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stage_kms_keyContext {
	var p = new(Stage_kms_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_stage_kms_key

	return p
}

func (s *Stage_kms_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Stage_kms_keyContext) KMS_KEY_ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserKMS_KEY_ID, 0)
}

func (s *Stage_kms_keyContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Stage_kms_keyContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Stage_kms_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stage_kms_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Stage_kms_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterStage_kms_key(s)
	}
}

func (s *Stage_kms_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitStage_kms_key(s)
	}
}

func (s *Stage_kms_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitStage_kms_key(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Stage_kms_key() (localctx IStage_kms_keyContext) {
	this := p
	_ = this

	localctx = NewStage_kms_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, SnowflakeParserRULE_stage_kms_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7839)
		p.Match(SnowflakeParserKMS_KEY_ID)
	}
	{
		p.SetState(7840)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7841)
		p.String_()
	}



	return localctx
}


// IStage_encryption_opts_awsContext is an interface to support dynamic dispatch.
type IStage_encryption_opts_awsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStage_encryption_opts_awsContext differentiates from other interfaces.
	IsStage_encryption_opts_awsContext()
}

type Stage_encryption_opts_awsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStage_encryption_opts_awsContext() *Stage_encryption_opts_awsContext {
	var p = new(Stage_encryption_opts_awsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_stage_encryption_opts_aws
	return p
}

func (*Stage_encryption_opts_awsContext) IsStage_encryption_opts_awsContext() {}

func NewStage_encryption_opts_awsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stage_encryption_opts_awsContext {
	var p = new(Stage_encryption_opts_awsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_stage_encryption_opts_aws

	return p
}

func (s *Stage_encryption_opts_awsContext) GetParser() antlr.Parser { return s.parser }

func (s *Stage_encryption_opts_awsContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENCRYPTION, 0)
}

func (s *Stage_encryption_opts_awsContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Stage_encryption_opts_awsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Stage_encryption_opts_awsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Stage_encryption_opts_awsContext) Stage_master_key() IStage_master_keyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStage_master_keyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStage_master_keyContext)
}

func (s *Stage_encryption_opts_awsContext) Stage_type() IStage_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStage_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStage_typeContext)
}

func (s *Stage_encryption_opts_awsContext) Stage_kms_key() IStage_kms_keyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStage_kms_keyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStage_kms_keyContext)
}

func (s *Stage_encryption_opts_awsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stage_encryption_opts_awsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Stage_encryption_opts_awsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterStage_encryption_opts_aws(s)
	}
}

func (s *Stage_encryption_opts_awsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitStage_encryption_opts_aws(s)
	}
}

func (s *Stage_encryption_opts_awsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitStage_encryption_opts_aws(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Stage_encryption_opts_aws() (localctx IStage_encryption_opts_awsContext) {
	this := p
	_ = this

	localctx = NewStage_encryption_opts_awsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, SnowflakeParserRULE_stage_encryption_opts_aws)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7843)
		p.Match(SnowflakeParserENCRYPTION)
	}
	{
		p.SetState(7844)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7845)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(7862)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 949, p.GetParserRuleContext()) {
	case 1:
		p.SetState(7847)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTYPE {
			{
				p.SetState(7846)
				p.Stage_type()
			}

		}
		{
			p.SetState(7849)
			p.Stage_master_key()
		}


	case 2:
		p.SetState(7851)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTYPE {
			{
				p.SetState(7850)
				p.Stage_type()
			}

		}


	case 3:
		p.SetState(7857)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTYPE {
			{
				p.SetState(7853)
				p.Stage_type()
			}
			p.SetState(7855)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserKMS_KEY_ID {
				{
					p.SetState(7854)
					p.Stage_kms_key()
				}

			}

		}


	case 4:
		p.SetState(7860)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTYPE {
			{
				p.SetState(7859)
				p.Stage_type()
			}

		}

	}
	{
		p.SetState(7864)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IAws_tokenContext is an interface to support dynamic dispatch.
type IAws_tokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAws_tokenContext differentiates from other interfaces.
	IsAws_tokenContext()
}

type Aws_tokenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAws_tokenContext() *Aws_tokenContext {
	var p = new(Aws_tokenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_aws_token
	return p
}

func (*Aws_tokenContext) IsAws_tokenContext() {}

func NewAws_tokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aws_tokenContext {
	var p = new(Aws_tokenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_aws_token

	return p
}

func (s *Aws_tokenContext) GetParser() antlr.Parser { return s.parser }

func (s *Aws_tokenContext) AWS_TOKEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAWS_TOKEN, 0)
}

func (s *Aws_tokenContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Aws_tokenContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Aws_tokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aws_tokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Aws_tokenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAws_token(s)
	}
}

func (s *Aws_tokenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAws_token(s)
	}
}

func (s *Aws_tokenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAws_token(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Aws_token() (localctx IAws_tokenContext) {
	this := p
	_ = this

	localctx = NewAws_tokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, SnowflakeParserRULE_aws_token)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7866)
		p.Match(SnowflakeParserAWS_TOKEN)
	}
	{
		p.SetState(7867)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7868)
		p.String_()
	}



	return localctx
}


// IAws_key_idContext is an interface to support dynamic dispatch.
type IAws_key_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAws_key_idContext differentiates from other interfaces.
	IsAws_key_idContext()
}

type Aws_key_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAws_key_idContext() *Aws_key_idContext {
	var p = new(Aws_key_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_aws_key_id
	return p
}

func (*Aws_key_idContext) IsAws_key_idContext() {}

func NewAws_key_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aws_key_idContext {
	var p = new(Aws_key_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_aws_key_id

	return p
}

func (s *Aws_key_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Aws_key_idContext) AWS_KEY_ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAWS_KEY_ID, 0)
}

func (s *Aws_key_idContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Aws_key_idContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Aws_key_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aws_key_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Aws_key_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAws_key_id(s)
	}
}

func (s *Aws_key_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAws_key_id(s)
	}
}

func (s *Aws_key_idContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAws_key_id(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Aws_key_id() (localctx IAws_key_idContext) {
	this := p
	_ = this

	localctx = NewAws_key_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, SnowflakeParserRULE_aws_key_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7870)
		p.Match(SnowflakeParserAWS_KEY_ID)
	}
	{
		p.SetState(7871)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7872)
		p.String_()
	}



	return localctx
}


// IAws_secret_keyContext is an interface to support dynamic dispatch.
type IAws_secret_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAws_secret_keyContext differentiates from other interfaces.
	IsAws_secret_keyContext()
}

type Aws_secret_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAws_secret_keyContext() *Aws_secret_keyContext {
	var p = new(Aws_secret_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_aws_secret_key
	return p
}

func (*Aws_secret_keyContext) IsAws_secret_keyContext() {}

func NewAws_secret_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aws_secret_keyContext {
	var p = new(Aws_secret_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_aws_secret_key

	return p
}

func (s *Aws_secret_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Aws_secret_keyContext) AWS_SECRET_KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAWS_SECRET_KEY, 0)
}

func (s *Aws_secret_keyContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Aws_secret_keyContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Aws_secret_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aws_secret_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Aws_secret_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAws_secret_key(s)
	}
}

func (s *Aws_secret_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAws_secret_key(s)
	}
}

func (s *Aws_secret_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAws_secret_key(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Aws_secret_key() (localctx IAws_secret_keyContext) {
	this := p
	_ = this

	localctx = NewAws_secret_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, SnowflakeParserRULE_aws_secret_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7874)
		p.Match(SnowflakeParserAWS_SECRET_KEY)
	}
	{
		p.SetState(7875)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7876)
		p.String_()
	}



	return localctx
}


// IAws_roleContext is an interface to support dynamic dispatch.
type IAws_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAws_roleContext differentiates from other interfaces.
	IsAws_roleContext()
}

type Aws_roleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAws_roleContext() *Aws_roleContext {
	var p = new(Aws_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_aws_role
	return p
}

func (*Aws_roleContext) IsAws_roleContext() {}

func NewAws_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aws_roleContext {
	var p = new(Aws_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_aws_role

	return p
}

func (s *Aws_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Aws_roleContext) AWS_ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAWS_ROLE, 0)
}

func (s *Aws_roleContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Aws_roleContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Aws_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aws_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Aws_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAws_role(s)
	}
}

func (s *Aws_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAws_role(s)
	}
}

func (s *Aws_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAws_role(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Aws_role() (localctx IAws_roleContext) {
	this := p
	_ = this

	localctx = NewAws_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, SnowflakeParserRULE_aws_role)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7878)
		p.Match(SnowflakeParserAWS_ROLE)
	}
	{
		p.SetState(7879)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7880)
		p.String_()
	}



	return localctx
}


// IExternal_stage_paramsContext is an interface to support dynamic dispatch.
type IExternal_stage_paramsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExternal_stage_paramsContext differentiates from other interfaces.
	IsExternal_stage_paramsContext()
}

type External_stage_paramsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternal_stage_paramsContext() *External_stage_paramsContext {
	var p = new(External_stage_paramsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_external_stage_params
	return p
}

func (*External_stage_paramsContext) IsExternal_stage_paramsContext() {}

func NewExternal_stage_paramsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *External_stage_paramsContext {
	var p = new(External_stage_paramsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_external_stage_params

	return p
}

func (s *External_stage_paramsContext) GetParser() antlr.Parser { return s.parser }

func (s *External_stage_paramsContext) URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserURL, 0)
}

func (s *External_stage_paramsContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *External_stage_paramsContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *External_stage_paramsContext) String_list() IString_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_listContext)
}

func (s *External_stage_paramsContext) Stage_encryption_opts_aws() IStage_encryption_opts_awsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStage_encryption_opts_awsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStage_encryption_opts_awsContext)
}

func (s *External_stage_paramsContext) STORAGE_INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE_INTEGRATION, 0)
}

func (s *External_stage_paramsContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *External_stage_paramsContext) CREDENTIALS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREDENTIALS, 0)
}

func (s *External_stage_paramsContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *External_stage_paramsContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *External_stage_paramsContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *External_stage_paramsContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *External_stage_paramsContext) Aws_role() IAws_roleContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAws_roleContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAws_roleContext)
}

func (s *External_stage_paramsContext) Aws_key_id() IAws_key_idContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAws_key_idContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAws_key_idContext)
}

func (s *External_stage_paramsContext) Aws_secret_key() IAws_secret_keyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAws_secret_keyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAws_secret_keyContext)
}

func (s *External_stage_paramsContext) Aws_token() IAws_tokenContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAws_tokenContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAws_tokenContext)
}

func (s *External_stage_paramsContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *External_stage_paramsContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *External_stage_paramsContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENCRYPTION, 0)
}

func (s *External_stage_paramsContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *External_stage_paramsContext) KMS_KEY_ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserKMS_KEY_ID, 0)
}

func (s *External_stage_paramsContext) NONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNONE, 0)
}

func (s *External_stage_paramsContext) MASTER_KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASTER_KEY, 0)
}

func (s *External_stage_paramsContext) AZURE_SAS_TOKEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_SAS_TOKEN, 0)
}

func (s *External_stage_paramsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *External_stage_paramsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *External_stage_paramsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExternal_stage_params(s)
	}
}

func (s *External_stage_paramsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExternal_stage_params(s)
	}
}

func (s *External_stage_paramsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExternal_stage_params(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) External_stage_params() (localctx IExternal_stage_paramsContext) {
	this := p
	_ = this

	localctx = NewExternal_stage_paramsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, SnowflakeParserRULE_external_stage_params)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7971)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 966, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7882)
			p.Match(SnowflakeParserURL)
		}
		{
			p.SetState(7883)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7884)
			p.String_list()
		}
		p.SetState(7901)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSTORAGE_INTEGRATION:
			{
				p.SetState(7885)
				p.Match(SnowflakeParserSTORAGE_INTEGRATION)
			}
			{
				p.SetState(7886)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7887)
				p.Id_()
			}



		case SnowflakeParserCREDENTIALS:
			{
				p.SetState(7888)
				p.Match(SnowflakeParserCREDENTIALS)
			}
			{
				p.SetState(7889)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7890)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			p.SetState(7897)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SnowflakeParserAWS_KEY_ID:
				{
					p.SetState(7891)
					p.Aws_key_id()
				}
				{
					p.SetState(7892)
					p.Aws_secret_key()
				}
				p.SetState(7894)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SnowflakeParserAWS_TOKEN {
					{
						p.SetState(7893)
						p.Aws_token()
					}

				}



			case SnowflakeParserAWS_ROLE:
				{
					p.SetState(7896)
					p.Aws_role()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(7899)
				p.Match(SnowflakeParserRR_BRACKET)
			}



		case SnowflakeParserEOF, SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCOPY, SnowflakeParserCOPY_OPTIONS_, SnowflakeParserCREATE, SnowflakeParserDELETE, SnowflakeParserDESC, SnowflakeParserDESCRIBE, SnowflakeParserDIRECTORY, SnowflakeParserDROP, SnowflakeParserENCRYPTION, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserFILE_FORMAT, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserINSERT, SnowflakeParserLIST, SnowflakeParserMERGE, SnowflakeParserPUT, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSELECT, SnowflakeParserSET, SnowflakeParserSHOW, SnowflakeParserTAG, SnowflakeParserTRUNCATE, SnowflakeParserUNDROP, SnowflakeParserUNSET, SnowflakeParserUPDATE, SnowflakeParserUSE, SnowflakeParserWITH, SnowflakeParserSEMI:



		default:
		}
		p.SetState(7904)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENCRYPTION {
			{
				p.SetState(7903)
				p.Stage_encryption_opts_aws()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7906)
			p.Match(SnowflakeParserURL)
		}
		{
			p.SetState(7907)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7908)
			p.String_()
		}
		p.SetState(7912)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTORAGE_INTEGRATION {
			{
				p.SetState(7909)
				p.Match(SnowflakeParserSTORAGE_INTEGRATION)
			}
			{
				p.SetState(7910)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7911)
				p.Id_()
			}

		}
		p.SetState(7932)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENCRYPTION {
			{
				p.SetState(7914)
				p.Match(SnowflakeParserENCRYPTION)
			}
			{
				p.SetState(7915)
				p.Match(SnowflakeParserEQ)
			}
			p.SetState(7930)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 958, p.GetParserRuleContext()) {
			case 1:
				p.SetState(7918)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SnowflakeParserTYPE {
					{
						p.SetState(7916)
						p.Match(SnowflakeParserTYPE)
					}
					{
						p.SetState(7917)
						p.Match(SnowflakeParserEQ)
					}

				}
				p.SetState(7923)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SnowflakeParserKMS_KEY_ID {
					{
						p.SetState(7920)
						p.Match(SnowflakeParserKMS_KEY_ID)
					}
					{
						p.SetState(7921)
						p.Match(SnowflakeParserEQ)
					}
					{
						p.SetState(7922)
						p.String_()
					}

				}


			case 2:
				p.SetState(7928)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SnowflakeParserTYPE {
					{
						p.SetState(7925)
						p.Match(SnowflakeParserTYPE)
					}
					{
						p.SetState(7926)
						p.Match(SnowflakeParserEQ)
					}
					{
						p.SetState(7927)
						p.Match(SnowflakeParserNONE)
					}

				}

			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7934)
			p.Match(SnowflakeParserURL)
		}
		{
			p.SetState(7935)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7936)
			p.String_()
		}
		p.SetState(7949)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSTORAGE_INTEGRATION:
			{
				p.SetState(7937)
				p.Match(SnowflakeParserSTORAGE_INTEGRATION)
			}
			{
				p.SetState(7938)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7939)
				p.Id_()
			}



		case SnowflakeParserCREDENTIALS:
			{
				p.SetState(7940)
				p.Match(SnowflakeParserCREDENTIALS)
			}
			{
				p.SetState(7941)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7942)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			p.SetState(7946)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserAZURE_SAS_TOKEN {
				{
					p.SetState(7943)
					p.Match(SnowflakeParserAZURE_SAS_TOKEN)
				}
				{
					p.SetState(7944)
					p.Match(SnowflakeParserEQ)
				}
				{
					p.SetState(7945)
					p.String_()
				}

			}
			{
				p.SetState(7948)
				p.Match(SnowflakeParserRR_BRACKET)
			}



		case SnowflakeParserEOF, SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCOPY, SnowflakeParserCOPY_OPTIONS_, SnowflakeParserCREATE, SnowflakeParserDELETE, SnowflakeParserDESC, SnowflakeParserDESCRIBE, SnowflakeParserDIRECTORY, SnowflakeParserDROP, SnowflakeParserENCRYPTION, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserFILE_FORMAT, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserINSERT, SnowflakeParserLIST, SnowflakeParserMERGE, SnowflakeParserPUT, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSELECT, SnowflakeParserSET, SnowflakeParserSHOW, SnowflakeParserTAG, SnowflakeParserTRUNCATE, SnowflakeParserTYPE, SnowflakeParserUNDROP, SnowflakeParserUNSET, SnowflakeParserUPDATE, SnowflakeParserUSE, SnowflakeParserWITH, SnowflakeParserRR_BRACKET, SnowflakeParserSEMI:



		default:
		}
		p.SetState(7969)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserENCRYPTION:
			{
				p.SetState(7951)
				p.Match(SnowflakeParserENCRYPTION)
			}
			{
				p.SetState(7952)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(7953)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			p.SetState(7956)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserTYPE {
				{
					p.SetState(7954)
					p.Match(SnowflakeParserTYPE)
				}
				{
					p.SetState(7955)
					p.Match(SnowflakeParserEQ)
				}

			}
			p.SetState(7961)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserMASTER_KEY {
				{
					p.SetState(7958)
					p.Match(SnowflakeParserMASTER_KEY)
				}
				{
					p.SetState(7959)
					p.Match(SnowflakeParserEQ)
				}
				{
					p.SetState(7960)
					p.String_()
				}

			}


		case SnowflakeParserTYPE, SnowflakeParserRR_BRACKET:
			p.SetState(7966)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserTYPE {
				{
					p.SetState(7963)
					p.Match(SnowflakeParserTYPE)
				}
				{
					p.SetState(7964)
					p.Match(SnowflakeParserEQ)
				}
				{
					p.SetState(7965)
					p.Match(SnowflakeParserNONE)
				}

			}
			{
				p.SetState(7968)
				p.Match(SnowflakeParserRR_BRACKET)
			}


		case SnowflakeParserEOF, SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCOPY, SnowflakeParserCOPY_OPTIONS_, SnowflakeParserCREATE, SnowflakeParserDELETE, SnowflakeParserDESC, SnowflakeParserDESCRIBE, SnowflakeParserDIRECTORY, SnowflakeParserDROP, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserFILE_FORMAT, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserINSERT, SnowflakeParserLIST, SnowflakeParserMERGE, SnowflakeParserPUT, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSELECT, SnowflakeParserSET, SnowflakeParserSHOW, SnowflakeParserTAG, SnowflakeParserTRUNCATE, SnowflakeParserUNDROP, SnowflakeParserUNSET, SnowflakeParserUPDATE, SnowflakeParserUSE, SnowflakeParserWITH, SnowflakeParserSEMI:



		default:
		}

	}


	return localctx
}


// ITrue_falseContext is an interface to support dynamic dispatch.
type ITrue_falseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrue_falseContext differentiates from other interfaces.
	IsTrue_falseContext()
}

type True_falseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrue_falseContext() *True_falseContext {
	var p = new(True_falseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_true_false
	return p
}

func (*True_falseContext) IsTrue_falseContext() {}

func NewTrue_falseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *True_falseContext {
	var p = new(True_falseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_true_false

	return p
}

func (s *True_falseContext) GetParser() antlr.Parser { return s.parser }

func (s *True_falseContext) TRUE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRUE, 0)
}

func (s *True_falseContext) FALSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFALSE, 0)
}

func (s *True_falseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *True_falseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *True_falseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTrue_false(s)
	}
}

func (s *True_falseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTrue_false(s)
	}
}

func (s *True_falseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTrue_false(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) True_false() (localctx ITrue_falseContext) {
	this := p
	_ = this

	localctx = NewTrue_falseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, SnowflakeParserRULE_true_false)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7973)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserFALSE || _la == SnowflakeParserTRUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IEnableContext is an interface to support dynamic dispatch.
type IEnableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnableContext differentiates from other interfaces.
	IsEnableContext()
}

type EnableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnableContext() *EnableContext {
	var p = new(EnableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_enable
	return p
}

func (*EnableContext) IsEnableContext() {}

func NewEnableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnableContext {
	var p = new(EnableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_enable

	return p
}

func (s *EnableContext) GetParser() antlr.Parser { return s.parser }

func (s *EnableContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE, 0)
}

func (s *EnableContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *EnableContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *EnableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EnableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterEnable(s)
	}
}

func (s *EnableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitEnable(s)
	}
}

func (s *EnableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitEnable(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Enable() (localctx IEnableContext) {
	this := p
	_ = this

	localctx = NewEnableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, SnowflakeParserRULE_enable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7975)
		p.Match(SnowflakeParserENABLE)
	}
	{
		p.SetState(7976)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7977)
		p.True_false()
	}



	return localctx
}


// IRefresh_on_createContext is an interface to support dynamic dispatch.
type IRefresh_on_createContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRefresh_on_createContext differentiates from other interfaces.
	IsRefresh_on_createContext()
}

type Refresh_on_createContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRefresh_on_createContext() *Refresh_on_createContext {
	var p = new(Refresh_on_createContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_refresh_on_create
	return p
}

func (*Refresh_on_createContext) IsRefresh_on_createContext() {}

func NewRefresh_on_createContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Refresh_on_createContext {
	var p = new(Refresh_on_createContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_refresh_on_create

	return p
}

func (s *Refresh_on_createContext) GetParser() antlr.Parser { return s.parser }

func (s *Refresh_on_createContext) REFRESH_ON_CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREFRESH_ON_CREATE, 0)
}

func (s *Refresh_on_createContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Refresh_on_createContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Refresh_on_createContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Refresh_on_createContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Refresh_on_createContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterRefresh_on_create(s)
	}
}

func (s *Refresh_on_createContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitRefresh_on_create(s)
	}
}

func (s *Refresh_on_createContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitRefresh_on_create(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Refresh_on_create() (localctx IRefresh_on_createContext) {
	this := p
	_ = this

	localctx = NewRefresh_on_createContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, SnowflakeParserRULE_refresh_on_create)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7979)
		p.Match(SnowflakeParserREFRESH_ON_CREATE)
	}
	{
		p.SetState(7980)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7981)
		p.True_false()
	}



	return localctx
}


// IAuto_refreshContext is an interface to support dynamic dispatch.
type IAuto_refreshContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAuto_refreshContext differentiates from other interfaces.
	IsAuto_refreshContext()
}

type Auto_refreshContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAuto_refreshContext() *Auto_refreshContext {
	var p = new(Auto_refreshContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_auto_refresh
	return p
}

func (*Auto_refreshContext) IsAuto_refreshContext() {}

func NewAuto_refreshContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Auto_refreshContext {
	var p = new(Auto_refreshContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_auto_refresh

	return p
}

func (s *Auto_refreshContext) GetParser() antlr.Parser { return s.parser }

func (s *Auto_refreshContext) AUTO_REFRESH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTO_REFRESH, 0)
}

func (s *Auto_refreshContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Auto_refreshContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Auto_refreshContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Auto_refreshContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Auto_refreshContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAuto_refresh(s)
	}
}

func (s *Auto_refreshContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAuto_refresh(s)
	}
}

func (s *Auto_refreshContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAuto_refresh(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Auto_refresh() (localctx IAuto_refreshContext) {
	this := p
	_ = this

	localctx = NewAuto_refreshContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 436, SnowflakeParserRULE_auto_refresh)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7983)
		p.Match(SnowflakeParserAUTO_REFRESH)
	}
	{
		p.SetState(7984)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7985)
		p.True_false()
	}



	return localctx
}


// INotification_integrationContext is an interface to support dynamic dispatch.
type INotification_integrationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNotification_integrationContext differentiates from other interfaces.
	IsNotification_integrationContext()
}

type Notification_integrationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNotification_integrationContext() *Notification_integrationContext {
	var p = new(Notification_integrationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_notification_integration
	return p
}

func (*Notification_integrationContext) IsNotification_integrationContext() {}

func NewNotification_integrationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Notification_integrationContext {
	var p = new(Notification_integrationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_notification_integration

	return p
}

func (s *Notification_integrationContext) GetParser() antlr.Parser { return s.parser }

func (s *Notification_integrationContext) NOTIFICATION_INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOTIFICATION_INTEGRATION, 0)
}

func (s *Notification_integrationContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Notification_integrationContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Notification_integrationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Notification_integrationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Notification_integrationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterNotification_integration(s)
	}
}

func (s *Notification_integrationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitNotification_integration(s)
	}
}

func (s *Notification_integrationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitNotification_integration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Notification_integration() (localctx INotification_integrationContext) {
	this := p
	_ = this

	localctx = NewNotification_integrationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 438, SnowflakeParserRULE_notification_integration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7987)
		p.Match(SnowflakeParserNOTIFICATION_INTEGRATION)
	}
	{
		p.SetState(7988)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(7989)
		p.String_()
	}



	return localctx
}


// IDirectory_table_paramsContext is an interface to support dynamic dispatch.
type IDirectory_table_paramsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDirectory_table_paramsContext differentiates from other interfaces.
	IsDirectory_table_paramsContext()
}

type Directory_table_paramsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectory_table_paramsContext() *Directory_table_paramsContext {
	var p = new(Directory_table_paramsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_directory_table_params
	return p
}

func (*Directory_table_paramsContext) IsDirectory_table_paramsContext() {}

func NewDirectory_table_paramsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Directory_table_paramsContext {
	var p = new(Directory_table_paramsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_directory_table_params

	return p
}

func (s *Directory_table_paramsContext) GetParser() antlr.Parser { return s.parser }

func (s *Directory_table_paramsContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDIRECTORY, 0)
}

func (s *Directory_table_paramsContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Directory_table_paramsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Directory_table_paramsContext) Enable() IEnableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnableContext)
}

func (s *Directory_table_paramsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Directory_table_paramsContext) Refresh_on_create() IRefresh_on_createContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRefresh_on_createContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRefresh_on_createContext)
}

func (s *Directory_table_paramsContext) Auto_refresh() IAuto_refreshContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAuto_refreshContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAuto_refreshContext)
}

func (s *Directory_table_paramsContext) Notification_integration() INotification_integrationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INotification_integrationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INotification_integrationContext)
}

func (s *Directory_table_paramsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Directory_table_paramsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Directory_table_paramsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDirectory_table_params(s)
	}
}

func (s *Directory_table_paramsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDirectory_table_params(s)
	}
}

func (s *Directory_table_paramsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDirectory_table_params(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Directory_table_params() (localctx IDirectory_table_paramsContext) {
	this := p
	_ = this

	localctx = NewDirectory_table_paramsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 440, SnowflakeParserRULE_directory_table_params)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8042)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 976, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7991)
			p.Match(SnowflakeParserDIRECTORY)
		}
		{
			p.SetState(7992)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(7993)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(7994)
			p.Enable()
		}
		p.SetState(7996)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserREFRESH_ON_CREATE {
			{
				p.SetState(7995)
				p.Refresh_on_create()
			}

		}
		{
			p.SetState(7998)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8000)
			p.Match(SnowflakeParserDIRECTORY)
		}
		{
			p.SetState(8001)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8002)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(8003)
			p.Enable()
		}
		p.SetState(8005)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserREFRESH_ON_CREATE {
			{
				p.SetState(8004)
				p.Refresh_on_create()
			}

		}
		p.SetState(8008)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAUTO_REFRESH {
			{
				p.SetState(8007)
				p.Auto_refresh()
			}

		}
		{
			p.SetState(8010)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8012)
			p.Match(SnowflakeParserDIRECTORY)
		}
		{
			p.SetState(8013)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8014)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(8015)
			p.Enable()
		}
		p.SetState(8017)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAUTO_REFRESH {
			{
				p.SetState(8016)
				p.Auto_refresh()
			}

		}
		p.SetState(8020)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserREFRESH_ON_CREATE {
			{
				p.SetState(8019)
				p.Refresh_on_create()
			}

		}
		p.SetState(8023)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNOTIFICATION_INTEGRATION {
			{
				p.SetState(8022)
				p.Notification_integration()
			}

		}
		{
			p.SetState(8025)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8027)
			p.Match(SnowflakeParserDIRECTORY)
		}
		{
			p.SetState(8028)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8029)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(8030)
			p.Enable()
		}
		p.SetState(8032)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserREFRESH_ON_CREATE {
			{
				p.SetState(8031)
				p.Refresh_on_create()
			}

		}
		p.SetState(8035)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAUTO_REFRESH {
			{
				p.SetState(8034)
				p.Auto_refresh()
			}

		}
		p.SetState(8038)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserNOTIFICATION_INTEGRATION {
			{
				p.SetState(8037)
				p.Notification_integration()
			}

		}
		{
			p.SetState(8040)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}


	return localctx
}


// ICreate_stageContext is an interface to support dynamic dispatch.
type ICreate_stageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_stageContext differentiates from other interfaces.
	IsCreate_stageContext()
}

type Create_stageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_stageContext() *Create_stageContext {
	var p = new(Create_stageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_stage
	return p
}

func (*Create_stageContext) IsCreate_stageContext() {}

func NewCreate_stageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_stageContext {
	var p = new(Create_stageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_stage

	return p
}

func (s *Create_stageContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_stageContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_stageContext) STAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE, 0)
}

func (s *Create_stageContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_stageContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_stageContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTEMPORARY, 0)
}

func (s *Create_stageContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_stageContext) Internal_stage_params() IInternal_stage_paramsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInternal_stage_paramsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInternal_stage_paramsContext)
}

func (s *Create_stageContext) Directory_table_params() IDirectory_table_paramsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDirectory_table_paramsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDirectory_table_paramsContext)
}

func (s *Create_stageContext) FILE_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE_FORMAT, 0)
}

func (s *Create_stageContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_stageContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_stageContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Create_stageContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Create_stageContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Create_stageContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Create_stageContext) COPY_OPTIONS_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOPY_OPTIONS_, 0)
}

func (s *Create_stageContext) Copy_options() ICopy_optionsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_optionsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_optionsContext)
}

func (s *Create_stageContext) With_tags() IWith_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_tagsContext)
}

func (s *Create_stageContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_stageContext) FORMAT_NAME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORMAT_NAME, 0)
}

func (s *Create_stageContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_stageContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Create_stageContext) CSV() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCSV, 0)
}

func (s *Create_stageContext) JSON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserJSON, 0)
}

func (s *Create_stageContext) AVRO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAVRO, 0)
}

func (s *Create_stageContext) ORC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserORC, 0)
}

func (s *Create_stageContext) PARQUET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPARQUET, 0)
}

func (s *Create_stageContext) XML() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserXML, 0)
}

func (s *Create_stageContext) AllFormat_type_options() []IFormat_type_optionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFormat_type_optionsContext); ok {
			len++
		}
	}

	tst := make([]IFormat_type_optionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFormat_type_optionsContext); ok {
			tst[i] = t.(IFormat_type_optionsContext)
			i++
		}
	}

	return tst
}

func (s *Create_stageContext) Format_type_options(i int) IFormat_type_optionsContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFormat_type_optionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFormat_type_optionsContext)
}

func (s *Create_stageContext) External_stage_params() IExternal_stage_paramsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternal_stage_paramsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternal_stage_paramsContext)
}

func (s *Create_stageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_stageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_stageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_stage(s)
	}
}

func (s *Create_stageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_stage(s)
	}
}

func (s *Create_stageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_stage(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_stage() (localctx ICreate_stageContext) {
	this := p
	_ = this

	localctx = NewCreate_stageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, SnowflakeParserRULE_create_stage)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8146)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 998, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8044)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(8046)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(8045)
				p.Or_replace()
			}

		}
		p.SetState(8049)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTEMPORARY {
			{
				p.SetState(8048)
				p.Match(SnowflakeParserTEMPORARY)
			}

		}
		{
			p.SetState(8051)
			p.Match(SnowflakeParserSTAGE)
		}
		p.SetState(8053)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(8052)
				p.If_not_exists()
			}

		}
		{
			p.SetState(8055)
			p.Object_name()
		}
		p.SetState(8057)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserENCRYPTION || _la == SnowflakeParserTYPE {
			{
				p.SetState(8056)
				p.Internal_stage_params()
			}

		}
		p.SetState(8060)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserDIRECTORY {
			{
				p.SetState(8059)
				p.Directory_table_params()
			}

		}
		p.SetState(8080)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFILE_FORMAT {
			{
				p.SetState(8062)
				p.Match(SnowflakeParserFILE_FORMAT)
			}
			{
				p.SetState(8063)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(8064)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			p.SetState(8077)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SnowflakeParserFORMAT_NAME:
				{
					p.SetState(8065)
					p.Match(SnowflakeParserFORMAT_NAME)
				}
				{
					p.SetState(8066)
					p.Match(SnowflakeParserEQ)
				}
				{
					p.SetState(8067)
					p.String_()
				}


			case SnowflakeParserTYPE:
				{
					p.SetState(8068)
					p.Match(SnowflakeParserTYPE)
				}
				{
					p.SetState(8069)
					p.Match(SnowflakeParserEQ)
				}
				{
					p.SetState(8070)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SnowflakeParserAVRO || _la == SnowflakeParserCSV || _la == SnowflakeParserJSON || _la == SnowflakeParserORC || _la == SnowflakeParserPARQUET || _la == SnowflakeParserXML) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				p.SetState(8074)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				for _la == SnowflakeParserALLOW_DUPLICATE || (int64((_la - 92)) & ^0x3f) == 0 && ((int64(1) << (_la - 92)) & 9221) != 0 || (int64((_la - 159)) & ^0x3f) == 0 && ((int64(1) << (_la - 159)) & 4611694814520410113) != 0 || (int64((_la - 231)) & ^0x3f) == 0 && ((int64(1) << (_la - 231)) & 214752837635) != 0 || (int64((_la - 301)) & ^0x3f) == 0 && ((int64(1) << (_la - 301)) & 144117387099111435) != 0 || _la == SnowflakeParserLZO || _la == SnowflakeParserNONE || _la == SnowflakeParserNULL_IF || (int64((_la - 591)) & ^0x3f) == 0 && ((int64(1) << (_la - 591)) & 1125917086711809) != 0 || _la == SnowflakeParserREPLACE_INVALID_CHARACTERS || (int64((_la - 777)) & ^0x3f) == 0 && ((int64(1) << (_la - 777)) & 4035225266123964627) != 0 || (int64((_la - 870)) & ^0x3f) == 0 && ((int64(1) << (_la - 870)) & 34359738497) != 0 || _la == SnowflakeParserUTF8 || _la == SnowflakeParserZSTD {
					{
						p.SetState(8071)
						p.Format_type_options()
					}


					p.SetState(8076)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(8079)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(8088)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOPY_OPTIONS_ {
			{
				p.SetState(8082)
				p.Match(SnowflakeParserCOPY_OPTIONS_)
			}
			{
				p.SetState(8083)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(8084)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(8085)
				p.Copy_options()
			}
			{
				p.SetState(8086)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(8091)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 986, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8090)
				p.With_tags()
			}


		}
		p.SetState(8094)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 987, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8093)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8096)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(8098)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(8097)
				p.Or_replace()
			}

		}
		p.SetState(8101)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserTEMPORARY {
			{
				p.SetState(8100)
				p.Match(SnowflakeParserTEMPORARY)
			}

		}
		{
			p.SetState(8103)
			p.Match(SnowflakeParserSTAGE)
		}
		p.SetState(8105)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(8104)
				p.If_not_exists()
			}

		}
		{
			p.SetState(8107)
			p.Object_name()
		}
		{
			p.SetState(8108)
			p.External_stage_params()
		}
		p.SetState(8110)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserDIRECTORY {
			{
				p.SetState(8109)
				p.Directory_table_params()
			}

		}
		p.SetState(8130)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFILE_FORMAT {
			{
				p.SetState(8112)
				p.Match(SnowflakeParserFILE_FORMAT)
			}
			{
				p.SetState(8113)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(8114)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			p.SetState(8127)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SnowflakeParserFORMAT_NAME:
				{
					p.SetState(8115)
					p.Match(SnowflakeParserFORMAT_NAME)
				}
				{
					p.SetState(8116)
					p.Match(SnowflakeParserEQ)
				}
				{
					p.SetState(8117)
					p.String_()
				}


			case SnowflakeParserTYPE:
				{
					p.SetState(8118)
					p.Match(SnowflakeParserTYPE)
				}
				{
					p.SetState(8119)
					p.Match(SnowflakeParserEQ)
				}
				{
					p.SetState(8120)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SnowflakeParserAVRO || _la == SnowflakeParserCSV || _la == SnowflakeParserJSON || _la == SnowflakeParserORC || _la == SnowflakeParserPARQUET || _la == SnowflakeParserXML) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				p.SetState(8124)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				for _la == SnowflakeParserALLOW_DUPLICATE || (int64((_la - 92)) & ^0x3f) == 0 && ((int64(1) << (_la - 92)) & 9221) != 0 || (int64((_la - 159)) & ^0x3f) == 0 && ((int64(1) << (_la - 159)) & 4611694814520410113) != 0 || (int64((_la - 231)) & ^0x3f) == 0 && ((int64(1) << (_la - 231)) & 214752837635) != 0 || (int64((_la - 301)) & ^0x3f) == 0 && ((int64(1) << (_la - 301)) & 144117387099111435) != 0 || _la == SnowflakeParserLZO || _la == SnowflakeParserNONE || _la == SnowflakeParserNULL_IF || (int64((_la - 591)) & ^0x3f) == 0 && ((int64(1) << (_la - 591)) & 1125917086711809) != 0 || _la == SnowflakeParserREPLACE_INVALID_CHARACTERS || (int64((_la - 777)) & ^0x3f) == 0 && ((int64(1) << (_la - 777)) & 4035225266123964627) != 0 || (int64((_la - 870)) & ^0x3f) == 0 && ((int64(1) << (_la - 870)) & 34359738497) != 0 || _la == SnowflakeParserUTF8 || _la == SnowflakeParserZSTD {
					{
						p.SetState(8121)
						p.Format_type_options()
					}


					p.SetState(8126)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(8129)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(8138)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOPY_OPTIONS_ {
			{
				p.SetState(8132)
				p.Match(SnowflakeParserCOPY_OPTIONS_)
			}
			{
				p.SetState(8133)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(8134)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(8135)
				p.Copy_options()
			}
			{
				p.SetState(8136)
				p.Match(SnowflakeParserRR_BRACKET)
			}

		}
		p.SetState(8141)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 996, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8140)
				p.With_tags()
			}


		}
		p.SetState(8144)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 997, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8143)
				p.Comment_clause()
			}


		}

	}


	return localctx
}


// ICloud_provider_paramsContext is an interface to support dynamic dispatch.
type ICloud_provider_paramsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCloud_provider_paramsContext differentiates from other interfaces.
	IsCloud_provider_paramsContext()
}

type Cloud_provider_paramsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCloud_provider_paramsContext() *Cloud_provider_paramsContext {
	var p = new(Cloud_provider_paramsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_cloud_provider_params
	return p
}

func (*Cloud_provider_paramsContext) IsCloud_provider_paramsContext() {}

func NewCloud_provider_paramsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cloud_provider_paramsContext {
	var p = new(Cloud_provider_paramsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_cloud_provider_params

	return p
}

func (s *Cloud_provider_paramsContext) GetParser() antlr.Parser { return s.parser }

func (s *Cloud_provider_paramsContext) STORAGE_PROVIDER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE_PROVIDER, 0)
}

func (s *Cloud_provider_paramsContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Cloud_provider_paramsContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Cloud_provider_paramsContext) S3() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserS3, 0)
}

func (s *Cloud_provider_paramsContext) STORAGE_AWS_ROLE_ARN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE_AWS_ROLE_ARN, 0)
}

func (s *Cloud_provider_paramsContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Cloud_provider_paramsContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Cloud_provider_paramsContext) STORAGE_AWS_OBJECT_ACL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE_AWS_OBJECT_ACL, 0)
}

func (s *Cloud_provider_paramsContext) GCS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGCS, 0)
}

func (s *Cloud_provider_paramsContext) AZURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE, 0)
}

func (s *Cloud_provider_paramsContext) AZURE_TENANT_ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_TENANT_ID, 0)
}

func (s *Cloud_provider_paramsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cloud_provider_paramsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Cloud_provider_paramsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCloud_provider_params(s)
	}
}

func (s *Cloud_provider_paramsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCloud_provider_params(s)
	}
}

func (s *Cloud_provider_paramsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCloud_provider_params(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Cloud_provider_params() (localctx ICloud_provider_paramsContext) {
	this := p
	_ = this

	localctx = NewCloud_provider_paramsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, SnowflakeParserRULE_cloud_provider_params)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8168)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1000, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8148)
			p.Match(SnowflakeParserSTORAGE_PROVIDER)
		}
		{
			p.SetState(8149)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8150)
			p.Match(SnowflakeParserS3)
		}
		{
			p.SetState(8151)
			p.Match(SnowflakeParserSTORAGE_AWS_ROLE_ARN)
		}
		{
			p.SetState(8152)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8153)
			p.String_()
		}
		p.SetState(8157)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTORAGE_AWS_OBJECT_ACL {
			{
				p.SetState(8154)
				p.Match(SnowflakeParserSTORAGE_AWS_OBJECT_ACL)
			}
			{
				p.SetState(8155)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(8156)
				p.String_()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8159)
			p.Match(SnowflakeParserSTORAGE_PROVIDER)
		}
		{
			p.SetState(8160)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8161)
			p.Match(SnowflakeParserGCS)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8162)
			p.Match(SnowflakeParserSTORAGE_PROVIDER)
		}
		{
			p.SetState(8163)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8164)
			p.Match(SnowflakeParserAZURE)
		}
		{
			p.SetState(8165)
			p.Match(SnowflakeParserAZURE_TENANT_ID)
		}
		{
			p.SetState(8166)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8167)
			p.String_()
		}

	}


	return localctx
}


// ICloud_provider_params2Context is an interface to support dynamic dispatch.
type ICloud_provider_params2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCloud_provider_params2Context differentiates from other interfaces.
	IsCloud_provider_params2Context()
}

type Cloud_provider_params2Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCloud_provider_params2Context() *Cloud_provider_params2Context {
	var p = new(Cloud_provider_params2Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_cloud_provider_params2
	return p
}

func (*Cloud_provider_params2Context) IsCloud_provider_params2Context() {}

func NewCloud_provider_params2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cloud_provider_params2Context {
	var p = new(Cloud_provider_params2Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_cloud_provider_params2

	return p
}

func (s *Cloud_provider_params2Context) GetParser() antlr.Parser { return s.parser }

func (s *Cloud_provider_params2Context) STORAGE_AWS_ROLE_ARN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE_AWS_ROLE_ARN, 0)
}

func (s *Cloud_provider_params2Context) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Cloud_provider_params2Context) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Cloud_provider_params2Context) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Cloud_provider_params2Context) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Cloud_provider_params2Context) STORAGE_AWS_OBJECT_ACL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE_AWS_OBJECT_ACL, 0)
}

func (s *Cloud_provider_params2Context) AZURE_TENANT_ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAZURE_TENANT_ID, 0)
}

func (s *Cloud_provider_params2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cloud_provider_params2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Cloud_provider_params2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCloud_provider_params2(s)
	}
}

func (s *Cloud_provider_params2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCloud_provider_params2(s)
	}
}

func (s *Cloud_provider_params2Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCloud_provider_params2(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Cloud_provider_params2() (localctx ICloud_provider_params2Context) {
	this := p
	_ = this

	localctx = NewCloud_provider_params2Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, SnowflakeParserRULE_cloud_provider_params2)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8181)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserSTORAGE_AWS_ROLE_ARN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8170)
			p.Match(SnowflakeParserSTORAGE_AWS_ROLE_ARN)
		}
		{
			p.SetState(8171)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8172)
			p.String_()
		}
		p.SetState(8176)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSTORAGE_AWS_OBJECT_ACL {
			{
				p.SetState(8173)
				p.Match(SnowflakeParserSTORAGE_AWS_OBJECT_ACL)
			}
			{
				p.SetState(8174)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(8175)
				p.String_()
			}

		}


	case SnowflakeParserAZURE_TENANT_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8178)
			p.Match(SnowflakeParserAZURE_TENANT_ID)
		}
		{
			p.SetState(8179)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8180)
			p.String_()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICloud_provider_params3Context is an interface to support dynamic dispatch.
type ICloud_provider_params3Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCloud_provider_params3Context differentiates from other interfaces.
	IsCloud_provider_params3Context()
}

type Cloud_provider_params3Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCloud_provider_params3Context() *Cloud_provider_params3Context {
	var p = new(Cloud_provider_params3Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_cloud_provider_params3
	return p
}

func (*Cloud_provider_params3Context) IsCloud_provider_params3Context() {}

func NewCloud_provider_params3Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cloud_provider_params3Context {
	var p = new(Cloud_provider_params3Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_cloud_provider_params3

	return p
}

func (s *Cloud_provider_params3Context) GetParser() antlr.Parser { return s.parser }

func (s *Cloud_provider_params3Context) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Cloud_provider_params3Context) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Cloud_provider_params3Context) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Cloud_provider_params3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cloud_provider_params3Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Cloud_provider_params3Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCloud_provider_params3(s)
	}
}

func (s *Cloud_provider_params3Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCloud_provider_params3(s)
	}
}

func (s *Cloud_provider_params3Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCloud_provider_params3(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Cloud_provider_params3() (localctx ICloud_provider_params3Context) {
	this := p
	_ = this

	localctx = NewCloud_provider_params3Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, SnowflakeParserRULE_cloud_provider_params3)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8183)
		p.Match(SnowflakeParserINTEGRATION)
	}
	{
		p.SetState(8184)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(8185)
		p.String_()
	}



	return localctx
}


// ICreate_storage_integrationContext is an interface to support dynamic dispatch.
type ICreate_storage_integrationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_storage_integrationContext differentiates from other interfaces.
	IsCreate_storage_integrationContext()
}

type Create_storage_integrationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_storage_integrationContext() *Create_storage_integrationContext {
	var p = new(Create_storage_integrationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_storage_integration
	return p
}

func (*Create_storage_integrationContext) IsCreate_storage_integrationContext() {}

func NewCreate_storage_integrationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_storage_integrationContext {
	var p = new(Create_storage_integrationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_storage_integration

	return p
}

func (s *Create_storage_integrationContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_storage_integrationContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_storage_integrationContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE, 0)
}

func (s *Create_storage_integrationContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Create_storage_integrationContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_storage_integrationContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Create_storage_integrationContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_storage_integrationContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_storage_integrationContext) EXTERNAL_STAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_STAGE, 0)
}

func (s *Create_storage_integrationContext) Cloud_provider_params() ICloud_provider_paramsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICloud_provider_paramsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICloud_provider_paramsContext)
}

func (s *Create_storage_integrationContext) ENABLED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLED, 0)
}

func (s *Create_storage_integrationContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Create_storage_integrationContext) STORAGE_ALLOWED_LOCATIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE_ALLOWED_LOCATIONS, 0)
}

func (s *Create_storage_integrationContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Create_storage_integrationContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Create_storage_integrationContext) AllString_list() []IString_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IString_listContext); ok {
			len++
		}
	}

	tst := make([]IString_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IString_listContext); ok {
			tst[i] = t.(IString_listContext)
			i++
		}
	}

	return tst
}

func (s *Create_storage_integrationContext) String_list(i int) IString_listContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_listContext)
}

func (s *Create_storage_integrationContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Create_storage_integrationContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Create_storage_integrationContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_storage_integrationContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_storage_integrationContext) STORAGE_BLOCKED_LOCATIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE_BLOCKED_LOCATIONS, 0)
}

func (s *Create_storage_integrationContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_storage_integrationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_storage_integrationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_storage_integrationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_storage_integration(s)
	}
}

func (s *Create_storage_integrationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_storage_integration(s)
	}
}

func (s *Create_storage_integrationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_storage_integration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_storage_integration() (localctx ICreate_storage_integrationContext) {
	this := p
	_ = this

	localctx = NewCreate_storage_integrationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, SnowflakeParserRULE_create_storage_integration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8187)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(8189)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(8188)
			p.Or_replace()
		}

	}
	{
		p.SetState(8191)
		p.Match(SnowflakeParserSTORAGE)
	}
	{
		p.SetState(8192)
		p.Match(SnowflakeParserINTEGRATION)
	}
	p.SetState(8194)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8193)
			p.If_not_exists()
		}

	}
	{
		p.SetState(8196)
		p.Id_()
	}
	{
		p.SetState(8197)
		p.Match(SnowflakeParserTYPE)
	}
	{
		p.SetState(8198)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(8199)
		p.Match(SnowflakeParserEXTERNAL_STAGE)
	}
	{
		p.SetState(8200)
		p.Cloud_provider_params()
	}
	{
		p.SetState(8201)
		p.Match(SnowflakeParserENABLED)
	}
	{
		p.SetState(8202)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(8203)
		p.True_false()
	}
	{
		p.SetState(8204)
		p.Match(SnowflakeParserSTORAGE_ALLOWED_LOCATIONS)
	}
	{
		p.SetState(8205)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(8206)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(8207)
		p.String_list()
	}
	{
		p.SetState(8208)
		p.Match(SnowflakeParserRR_BRACKET)
	}
	p.SetState(8215)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSTORAGE_BLOCKED_LOCATIONS {
		{
			p.SetState(8209)
			p.Match(SnowflakeParserSTORAGE_BLOCKED_LOCATIONS)
		}
		{
			p.SetState(8210)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8211)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(8212)
			p.String_list()
		}
		{
			p.SetState(8213)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	p.SetState(8218)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1006, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8217)
			p.Comment_clause()
		}


	}



	return localctx
}


// ICopy_grantsContext is an interface to support dynamic dispatch.
type ICopy_grantsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCopy_grantsContext differentiates from other interfaces.
	IsCopy_grantsContext()
}

type Copy_grantsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCopy_grantsContext() *Copy_grantsContext {
	var p = new(Copy_grantsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_copy_grants
	return p
}

func (*Copy_grantsContext) IsCopy_grantsContext() {}

func NewCopy_grantsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_grantsContext {
	var p = new(Copy_grantsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_copy_grants

	return p
}

func (s *Copy_grantsContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_grantsContext) COPY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOPY, 0)
}

func (s *Copy_grantsContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGRANTS, 0)
}

func (s *Copy_grantsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_grantsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Copy_grantsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCopy_grants(s)
	}
}

func (s *Copy_grantsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCopy_grants(s)
	}
}

func (s *Copy_grantsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCopy_grants(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Copy_grants() (localctx ICopy_grantsContext) {
	this := p
	_ = this

	localctx = NewCopy_grantsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, SnowflakeParserRULE_copy_grants)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8220)
		p.Match(SnowflakeParserCOPY)
	}
	{
		p.SetState(8221)
		p.Match(SnowflakeParserGRANTS)
	}



	return localctx
}


// IAppend_onlyContext is an interface to support dynamic dispatch.
type IAppend_onlyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAppend_onlyContext differentiates from other interfaces.
	IsAppend_onlyContext()
}

type Append_onlyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAppend_onlyContext() *Append_onlyContext {
	var p = new(Append_onlyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_append_only
	return p
}

func (*Append_onlyContext) IsAppend_onlyContext() {}

func NewAppend_onlyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Append_onlyContext {
	var p = new(Append_onlyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_append_only

	return p
}

func (s *Append_onlyContext) GetParser() antlr.Parser { return s.parser }

func (s *Append_onlyContext) APPEND_ONLY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPPEND_ONLY, 0)
}

func (s *Append_onlyContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Append_onlyContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Append_onlyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Append_onlyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Append_onlyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAppend_only(s)
	}
}

func (s *Append_onlyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAppend_only(s)
	}
}

func (s *Append_onlyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAppend_only(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Append_only() (localctx IAppend_onlyContext) {
	this := p
	_ = this

	localctx = NewAppend_onlyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, SnowflakeParserRULE_append_only)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8223)
		p.Match(SnowflakeParserAPPEND_ONLY)
	}
	{
		p.SetState(8224)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(8225)
		p.True_false()
	}



	return localctx
}


// IInsert_onlyContext is an interface to support dynamic dispatch.
type IInsert_onlyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_onlyContext differentiates from other interfaces.
	IsInsert_onlyContext()
}

type Insert_onlyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_onlyContext() *Insert_onlyContext {
	var p = new(Insert_onlyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_insert_only
	return p
}

func (*Insert_onlyContext) IsInsert_onlyContext() {}

func NewInsert_onlyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_onlyContext {
	var p = new(Insert_onlyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_insert_only

	return p
}

func (s *Insert_onlyContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_onlyContext) INSERT_ONLY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINSERT_ONLY, 0)
}

func (s *Insert_onlyContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Insert_onlyContext) TRUE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRUE, 0)
}

func (s *Insert_onlyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_onlyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Insert_onlyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterInsert_only(s)
	}
}

func (s *Insert_onlyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitInsert_only(s)
	}
}

func (s *Insert_onlyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitInsert_only(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Insert_only() (localctx IInsert_onlyContext) {
	this := p
	_ = this

	localctx = NewInsert_onlyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, SnowflakeParserRULE_insert_only)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8227)
		p.Match(SnowflakeParserINSERT_ONLY)
	}
	{
		p.SetState(8228)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(8229)
		p.Match(SnowflakeParserTRUE)
	}



	return localctx
}


// IShow_initial_rowsContext is an interface to support dynamic dispatch.
type IShow_initial_rowsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_initial_rowsContext differentiates from other interfaces.
	IsShow_initial_rowsContext()
}

type Show_initial_rowsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_initial_rowsContext() *Show_initial_rowsContext {
	var p = new(Show_initial_rowsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_initial_rows
	return p
}

func (*Show_initial_rowsContext) IsShow_initial_rowsContext() {}

func NewShow_initial_rowsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_initial_rowsContext {
	var p = new(Show_initial_rowsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_initial_rows

	return p
}

func (s *Show_initial_rowsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_initial_rowsContext) SHOW_INITIAL_ROWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW_INITIAL_ROWS, 0)
}

func (s *Show_initial_rowsContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Show_initial_rowsContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Show_initial_rowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_initial_rowsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_initial_rowsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_initial_rows(s)
	}
}

func (s *Show_initial_rowsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_initial_rows(s)
	}
}

func (s *Show_initial_rowsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_initial_rows(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_initial_rows() (localctx IShow_initial_rowsContext) {
	this := p
	_ = this

	localctx = NewShow_initial_rowsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, SnowflakeParserRULE_show_initial_rows)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8231)
		p.Match(SnowflakeParserSHOW_INITIAL_ROWS)
	}
	{
		p.SetState(8232)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(8233)
		p.True_false()
	}



	return localctx
}


// IStream_timeContext is an interface to support dynamic dispatch.
type IStream_timeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStream_timeContext differentiates from other interfaces.
	IsStream_timeContext()
}

type Stream_timeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStream_timeContext() *Stream_timeContext {
	var p = new(Stream_timeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_stream_time
	return p
}

func (*Stream_timeContext) IsStream_timeContext() {}

func NewStream_timeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stream_timeContext {
	var p = new(Stream_timeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_stream_time

	return p
}

func (s *Stream_timeContext) GetParser() antlr.Parser { return s.parser }

func (s *Stream_timeContext) At_before1() IAt_before1Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAt_before1Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAt_before1Context)
}

func (s *Stream_timeContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Stream_timeContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Stream_timeContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP, 0)
}

func (s *Stream_timeContext) ASSOC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserASSOC, 0)
}

func (s *Stream_timeContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Stream_timeContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOFFSET, 0)
}

func (s *Stream_timeContext) STATEMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTATEMENT, 0)
}

func (s *Stream_timeContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Stream_timeContext) STREAM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTREAM, 0)
}

func (s *Stream_timeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stream_timeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Stream_timeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterStream_time(s)
	}
}

func (s *Stream_timeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitStream_time(s)
	}
}

func (s *Stream_timeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitStream_time(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Stream_time() (localctx IStream_timeContext) {
	this := p
	_ = this

	localctx = NewStream_timeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, SnowflakeParserRULE_stream_time)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8235)
		p.At_before1()
	}
	{
		p.SetState(8236)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(8249)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserTIMESTAMP:
		{
			p.SetState(8237)
			p.Match(SnowflakeParserTIMESTAMP)
		}
		{
			p.SetState(8238)
			p.Match(SnowflakeParserASSOC)
		}
		{
			p.SetState(8239)
			p.String_()
		}


	case SnowflakeParserOFFSET:
		{
			p.SetState(8240)
			p.Match(SnowflakeParserOFFSET)
		}
		{
			p.SetState(8241)
			p.Match(SnowflakeParserASSOC)
		}
		{
			p.SetState(8242)
			p.String_()
		}


	case SnowflakeParserSTATEMENT:
		{
			p.SetState(8243)
			p.Match(SnowflakeParserSTATEMENT)
		}
		{
			p.SetState(8244)
			p.Match(SnowflakeParserASSOC)
		}
		{
			p.SetState(8245)
			p.Id_()
		}


	case SnowflakeParserSTREAM:
		{
			p.SetState(8246)
			p.Match(SnowflakeParserSTREAM)
		}
		{
			p.SetState(8247)
			p.Match(SnowflakeParserASSOC)
		}
		{
			p.SetState(8248)
			p.String_()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(8251)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// ICreate_streamContext is an interface to support dynamic dispatch.
type ICreate_streamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_streamContext differentiates from other interfaces.
	IsCreate_streamContext()
}

type Create_streamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_streamContext() *Create_streamContext {
	var p = new(Create_streamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_stream
	return p
}

func (*Create_streamContext) IsCreate_streamContext() {}

func NewCreate_streamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_streamContext {
	var p = new(Create_streamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_stream

	return p
}

func (s *Create_streamContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_streamContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_streamContext) STREAM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTREAM, 0)
}

func (s *Create_streamContext) AllObject_name() []IObject_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObject_nameContext); ok {
			len++
		}
	}

	tst := make([]IObject_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObject_nameContext); ok {
			tst[i] = t.(IObject_nameContext)
			i++
		}
	}

	return tst
}

func (s *Create_streamContext) Object_name(i int) IObject_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_streamContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Create_streamContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Create_streamContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_streamContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_streamContext) Copy_grants() ICopy_grantsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_grantsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_grantsContext)
}

func (s *Create_streamContext) Stream_time() IStream_timeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStream_timeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStream_timeContext)
}

func (s *Create_streamContext) Append_only() IAppend_onlyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAppend_onlyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAppend_onlyContext)
}

func (s *Create_streamContext) Show_initial_rows() IShow_initial_rowsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_initial_rowsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_initial_rowsContext)
}

func (s *Create_streamContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_streamContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL, 0)
}

func (s *Create_streamContext) Insert_only() IInsert_onlyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_onlyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_onlyContext)
}

func (s *Create_streamContext) STAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE, 0)
}

func (s *Create_streamContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Create_streamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_streamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_streamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_stream(s)
	}
}

func (s *Create_streamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_stream(s)
	}
}

func (s *Create_streamContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_stream(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_stream() (localctx ICreate_streamContext) {
	this := p
	_ = this

	localctx = NewCreate_streamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, SnowflakeParserRULE_create_stream)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8344)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1029, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8253)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(8255)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(8254)
				p.Or_replace()
			}

		}
		{
			p.SetState(8257)
			p.Match(SnowflakeParserSTREAM)
		}
		p.SetState(8259)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(8258)
				p.If_not_exists()
			}

		}
		{
			p.SetState(8261)
			p.Object_name()
		}
		p.SetState(8263)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOPY {
			{
				p.SetState(8262)
				p.Copy_grants()
			}

		}
		{
			p.SetState(8265)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(8266)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(8267)
			p.Object_name()
		}
		p.SetState(8269)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserBEFORE || _la == SnowflakeParserAT {
			{
				p.SetState(8268)
				p.Stream_time()
			}

		}
		p.SetState(8272)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPPEND_ONLY {
			{
				p.SetState(8271)
				p.Append_only()
			}

		}
		p.SetState(8275)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSHOW_INITIAL_ROWS {
			{
				p.SetState(8274)
				p.Show_initial_rows()
			}

		}
		p.SetState(8278)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1014, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8277)
				p.Comment_clause()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8280)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(8282)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(8281)
				p.Or_replace()
			}

		}
		{
			p.SetState(8284)
			p.Match(SnowflakeParserSTREAM)
		}
		p.SetState(8286)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(8285)
				p.If_not_exists()
			}

		}
		{
			p.SetState(8288)
			p.Object_name()
		}
		p.SetState(8290)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOPY {
			{
				p.SetState(8289)
				p.Copy_grants()
			}

		}
		{
			p.SetState(8292)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(8293)
			p.Match(SnowflakeParserEXTERNAL)
		}
		{
			p.SetState(8294)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(8295)
			p.Object_name()
		}
		p.SetState(8297)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserBEFORE || _la == SnowflakeParserAT {
			{
				p.SetState(8296)
				p.Stream_time()
			}

		}
		p.SetState(8300)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINSERT_ONLY {
			{
				p.SetState(8299)
				p.Insert_only()
			}

		}
		p.SetState(8303)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1020, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8302)
				p.Comment_clause()
			}


		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8305)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(8307)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(8306)
				p.Or_replace()
			}

		}
		{
			p.SetState(8309)
			p.Match(SnowflakeParserSTREAM)
		}
		{
			p.SetState(8310)
			p.If_not_exists()
		}
		{
			p.SetState(8311)
			p.Object_name()
		}
		p.SetState(8313)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOPY {
			{
				p.SetState(8312)
				p.Copy_grants()
			}

		}
		{
			p.SetState(8315)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(8316)
			p.Match(SnowflakeParserSTAGE)
		}
		{
			p.SetState(8317)
			p.Object_name()
		}
		p.SetState(8319)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1023, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8318)
				p.Comment_clause()
			}


		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8321)
			p.Match(SnowflakeParserCREATE)
		}
		{
			p.SetState(8322)
			p.Or_replace()
		}
		{
			p.SetState(8323)
			p.Match(SnowflakeParserSTREAM)
		}
		{
			p.SetState(8324)
			p.If_not_exists()
		}
		{
			p.SetState(8325)
			p.Object_name()
		}
		p.SetState(8327)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOPY {
			{
				p.SetState(8326)
				p.Copy_grants()
			}

		}
		{
			p.SetState(8329)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(8330)
			p.Match(SnowflakeParserVIEW)
		}
		{
			p.SetState(8331)
			p.Object_name()
		}
		p.SetState(8333)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserBEFORE || _la == SnowflakeParserAT {
			{
				p.SetState(8332)
				p.Stream_time()
			}

		}
		p.SetState(8336)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAPPEND_ONLY {
			{
				p.SetState(8335)
				p.Append_only()
			}

		}
		p.SetState(8339)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSHOW_INITIAL_ROWS {
			{
				p.SetState(8338)
				p.Show_initial_rows()
			}

		}
		p.SetState(8342)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1028, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8341)
				p.Comment_clause()
			}


		}

	}


	return localctx
}


// ITemporaryContext is an interface to support dynamic dispatch.
type ITemporaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemporaryContext differentiates from other interfaces.
	IsTemporaryContext()
}

type TemporaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemporaryContext() *TemporaryContext {
	var p = new(TemporaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_temporary
	return p
}

func (*TemporaryContext) IsTemporaryContext() {}

func NewTemporaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemporaryContext {
	var p = new(TemporaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_temporary

	return p
}

func (s *TemporaryContext) GetParser() antlr.Parser { return s.parser }

func (s *TemporaryContext) TEMP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTEMP, 0)
}

func (s *TemporaryContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTEMPORARY, 0)
}

func (s *TemporaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemporaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TemporaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTemporary(s)
	}
}

func (s *TemporaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTemporary(s)
	}
}

func (s *TemporaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTemporary(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Temporary() (localctx ITemporaryContext) {
	this := p
	_ = this

	localctx = NewTemporaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, SnowflakeParserRULE_temporary)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8346)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserTEMP || _la == SnowflakeParserTEMPORARY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ITable_typeContext is an interface to support dynamic dispatch.
type ITable_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_typeContext differentiates from other interfaces.
	IsTable_typeContext()
}

type Table_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_typeContext() *Table_typeContext {
	var p = new(Table_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_table_type
	return p
}

func (*Table_typeContext) IsTable_typeContext() {}

func NewTable_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_typeContext {
	var p = new(Table_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_table_type

	return p
}

func (s *Table_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_typeContext) Temporary() ITemporaryContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemporaryContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemporaryContext)
}

func (s *Table_typeContext) VOLATILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVOLATILE, 0)
}

func (s *Table_typeContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLOCAL, 0)
}

func (s *Table_typeContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGLOBAL, 0)
}

func (s *Table_typeContext) TRANSIENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRANSIENT, 0)
}

func (s *Table_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTable_type(s)
	}
}

func (s *Table_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTable_type(s)
	}
}

func (s *Table_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTable_type(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Table_type() (localctx ITable_typeContext) {
	this := p
	_ = this

	localctx = NewTable_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, SnowflakeParserRULE_table_type)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8354)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserGLOBAL, SnowflakeParserLOCAL, SnowflakeParserVOLATILE:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(8351)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserGLOBAL, SnowflakeParserLOCAL:
			{
				p.SetState(8348)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SnowflakeParserGLOBAL || _la == SnowflakeParserLOCAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(8349)
				p.Temporary()
			}


		case SnowflakeParserVOLATILE:
			{
				p.SetState(8350)
				p.Match(SnowflakeParserVOLATILE)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SnowflakeParserTRANSIENT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8353)
			p.Match(SnowflakeParserTRANSIENT)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IWith_tagsContext is an interface to support dynamic dispatch.
type IWith_tagsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_tagsContext differentiates from other interfaces.
	IsWith_tagsContext()
}

type With_tagsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_tagsContext() *With_tagsContext {
	var p = new(With_tagsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_with_tags
	return p
}

func (*With_tagsContext) IsWith_tagsContext() {}

func NewWith_tagsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_tagsContext {
	var p = new(With_tagsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_with_tags

	return p
}

func (s *With_tagsContext) GetParser() antlr.Parser { return s.parser }

func (s *With_tagsContext) TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTAG, 0)
}

func (s *With_tagsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *With_tagsContext) AllTag_decl() []ITag_declContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITag_declContext); ok {
			len++
		}
	}

	tst := make([]ITag_declContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITag_declContext); ok {
			tst[i] = t.(ITag_declContext)
			i++
		}
	}

	return tst
}

func (s *With_tagsContext) Tag_decl(i int) ITag_declContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITag_declContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITag_declContext)
}

func (s *With_tagsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *With_tagsContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *With_tagsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *With_tagsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *With_tagsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_tagsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *With_tagsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterWith_tags(s)
	}
}

func (s *With_tagsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitWith_tags(s)
	}
}

func (s *With_tagsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitWith_tags(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) With_tags() (localctx IWith_tagsContext) {
	this := p
	_ = this

	localctx = NewWith_tagsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, SnowflakeParserRULE_with_tags)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8357)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserWITH {
		{
			p.SetState(8356)
			p.Match(SnowflakeParserWITH)
		}

	}
	{
		p.SetState(8359)
		p.Match(SnowflakeParserTAG)
	}
	{
		p.SetState(8360)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(8361)
		p.Tag_decl()
	}
	p.SetState(8366)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(8362)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(8363)
			p.Tag_decl()
		}


		p.SetState(8368)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(8369)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IWith_row_access_policyContext is an interface to support dynamic dispatch.
type IWith_row_access_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_row_access_policyContext differentiates from other interfaces.
	IsWith_row_access_policyContext()
}

type With_row_access_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_row_access_policyContext() *With_row_access_policyContext {
	var p = new(With_row_access_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_with_row_access_policy
	return p
}

func (*With_row_access_policyContext) IsWith_row_access_policyContext() {}

func NewWith_row_access_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_row_access_policyContext {
	var p = new(With_row_access_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_with_row_access_policy

	return p
}

func (s *With_row_access_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *With_row_access_policyContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *With_row_access_policyContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, 0)
}

func (s *With_row_access_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *With_row_access_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *With_row_access_policyContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *With_row_access_policyContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *With_row_access_policyContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *With_row_access_policyContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *With_row_access_policyContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *With_row_access_policyContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *With_row_access_policyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *With_row_access_policyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *With_row_access_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_row_access_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *With_row_access_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterWith_row_access_policy(s)
	}
}

func (s *With_row_access_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitWith_row_access_policy(s)
	}
}

func (s *With_row_access_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitWith_row_access_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) With_row_access_policy() (localctx IWith_row_access_policyContext) {
	this := p
	_ = this

	localctx = NewWith_row_access_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, SnowflakeParserRULE_with_row_access_policy)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8372)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserWITH {
		{
			p.SetState(8371)
			p.Match(SnowflakeParserWITH)
		}

	}
	{
		p.SetState(8374)
		p.Match(SnowflakeParserROW)
	}
	{
		p.SetState(8375)
		p.Match(SnowflakeParserACCESS)
	}
	{
		p.SetState(8376)
		p.Match(SnowflakeParserPOLICY)
	}
	{
		p.SetState(8377)
		p.Id_()
	}
	{
		p.SetState(8378)
		p.Match(SnowflakeParserON)
	}
	{
		p.SetState(8379)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(8380)
		p.Column_name()
	}
	p.SetState(8385)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(8381)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(8382)
			p.Column_name()
		}


		p.SetState(8387)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(8388)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// ICluster_byContext is an interface to support dynamic dispatch.
type ICluster_byContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCluster_byContext differentiates from other interfaces.
	IsCluster_byContext()
}

type Cluster_byContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCluster_byContext() *Cluster_byContext {
	var p = new(Cluster_byContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_cluster_by
	return p
}

func (*Cluster_byContext) IsCluster_byContext() {}

func NewCluster_byContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cluster_byContext {
	var p = new(Cluster_byContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_cluster_by

	return p
}

func (s *Cluster_byContext) GetParser() antlr.Parser { return s.parser }

func (s *Cluster_byContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLUSTER, 0)
}

func (s *Cluster_byContext) BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBY, 0)
}

func (s *Cluster_byContext) Expr_list_in_parentheses() IExpr_list_in_parenthesesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_list_in_parenthesesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_list_in_parenthesesContext)
}

func (s *Cluster_byContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cluster_byContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Cluster_byContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCluster_by(s)
	}
}

func (s *Cluster_byContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCluster_by(s)
	}
}

func (s *Cluster_byContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCluster_by(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Cluster_by() (localctx ICluster_byContext) {
	this := p
	_ = this

	localctx = NewCluster_byContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 472, SnowflakeParserRULE_cluster_by)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8390)
		p.Match(SnowflakeParserCLUSTER)
	}
	{
		p.SetState(8391)
		p.Match(SnowflakeParserBY)
	}
	{
		p.SetState(8392)
		p.Expr_list_in_parentheses()
	}



	return localctx
}


// IChange_trackingContext is an interface to support dynamic dispatch.
type IChange_trackingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChange_trackingContext differentiates from other interfaces.
	IsChange_trackingContext()
}

type Change_trackingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChange_trackingContext() *Change_trackingContext {
	var p = new(Change_trackingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_change_tracking
	return p
}

func (*Change_trackingContext) IsChange_trackingContext() {}

func NewChange_trackingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Change_trackingContext {
	var p = new(Change_trackingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_change_tracking

	return p
}

func (s *Change_trackingContext) GetParser() antlr.Parser { return s.parser }

func (s *Change_trackingContext) CHANGE_TRACKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCHANGE_TRACKING, 0)
}

func (s *Change_trackingContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Change_trackingContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Change_trackingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Change_trackingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Change_trackingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterChange_tracking(s)
	}
}

func (s *Change_trackingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitChange_tracking(s)
	}
}

func (s *Change_trackingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitChange_tracking(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Change_tracking() (localctx IChange_trackingContext) {
	this := p
	_ = this

	localctx = NewChange_trackingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 474, SnowflakeParserRULE_change_tracking)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8394)
		p.Match(SnowflakeParserCHANGE_TRACKING)
	}
	{
		p.SetState(8395)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(8396)
		p.True_false()
	}



	return localctx
}


// IWith_masking_policyContext is an interface to support dynamic dispatch.
type IWith_masking_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_masking_policyContext differentiates from other interfaces.
	IsWith_masking_policyContext()
}

type With_masking_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_masking_policyContext() *With_masking_policyContext {
	var p = new(With_masking_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_with_masking_policy
	return p
}

func (*With_masking_policyContext) IsWith_masking_policyContext() {}

func NewWith_masking_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_masking_policyContext {
	var p = new(With_masking_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_with_masking_policy

	return p
}

func (s *With_masking_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *With_masking_policyContext) MASKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, 0)
}

func (s *With_masking_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *With_masking_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *With_masking_policyContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *With_masking_policyContext) USING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSING, 0)
}

func (s *With_masking_policyContext) Column_list_in_parentheses() IColumn_list_in_parenthesesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_list_in_parenthesesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_list_in_parenthesesContext)
}

func (s *With_masking_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_masking_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *With_masking_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterWith_masking_policy(s)
	}
}

func (s *With_masking_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitWith_masking_policy(s)
	}
}

func (s *With_masking_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitWith_masking_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) With_masking_policy() (localctx IWith_masking_policyContext) {
	this := p
	_ = this

	localctx = NewWith_masking_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 476, SnowflakeParserRULE_with_masking_policy)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8399)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserWITH {
		{
			p.SetState(8398)
			p.Match(SnowflakeParserWITH)
		}

	}
	{
		p.SetState(8401)
		p.Match(SnowflakeParserMASKING)
	}
	{
		p.SetState(8402)
		p.Match(SnowflakeParserPOLICY)
	}
	{
		p.SetState(8403)
		p.Id_()
	}
	p.SetState(8406)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserUSING {
		{
			p.SetState(8404)
			p.Match(SnowflakeParserUSING)
		}
		{
			p.SetState(8405)
			p.Column_list_in_parentheses()
		}

	}



	return localctx
}


// ICollateContext is an interface to support dynamic dispatch.
type ICollateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollateContext differentiates from other interfaces.
	IsCollateContext()
}

type CollateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollateContext() *CollateContext {
	var p = new(CollateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_collate
	return p
}

func (*CollateContext) IsCollateContext() {}

func NewCollateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollateContext {
	var p = new(CollateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_collate

	return p
}

func (s *CollateContext) GetParser() antlr.Parser { return s.parser }

func (s *CollateContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLLATE, 0)
}

func (s *CollateContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *CollateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CollateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCollate(s)
	}
}

func (s *CollateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCollate(s)
	}
}

func (s *CollateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCollate(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Collate() (localctx ICollateContext) {
	this := p
	_ = this

	localctx = NewCollateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 478, SnowflakeParserRULE_collate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8408)
		p.Match(SnowflakeParserCOLLATE)
	}
	{
		p.SetState(8409)
		p.String_()
	}



	return localctx
}


// INot_nullContext is an interface to support dynamic dispatch.
type INot_nullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNot_nullContext differentiates from other interfaces.
	IsNot_nullContext()
}

type Not_nullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNot_nullContext() *Not_nullContext {
	var p = new(Not_nullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_not_null
	return p
}

func (*Not_nullContext) IsNot_nullContext() {}

func NewNot_nullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Not_nullContext {
	var p = new(Not_nullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_not_null

	return p
}

func (s *Not_nullContext) GetParser() antlr.Parser { return s.parser }

func (s *Not_nullContext) NOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, 0)
}

func (s *Not_nullContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, 0)
}

func (s *Not_nullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Not_nullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Not_nullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterNot_null(s)
	}
}

func (s *Not_nullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitNot_null(s)
	}
}

func (s *Not_nullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitNot_null(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Not_null() (localctx INot_nullContext) {
	this := p
	_ = this

	localctx = NewNot_nullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 480, SnowflakeParserRULE_not_null)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8411)
		p.Match(SnowflakeParserNOT)
	}
	{
		p.SetState(8412)
		p.Match(SnowflakeParserNULL_)
	}



	return localctx
}


// IDefault_valueContext is an interface to support dynamic dispatch.
type IDefault_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefault_valueContext differentiates from other interfaces.
	IsDefault_valueContext()
}

type Default_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_valueContext() *Default_valueContext {
	var p = new(Default_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_default_value
	return p
}

func (*Default_valueContext) IsDefault_valueContext() {}

func NewDefault_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_valueContext {
	var p = new(Default_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_default_value

	return p
}

func (s *Default_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_valueContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT, 0)
}

func (s *Default_valueContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Default_valueContext) AUTOINCREMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTOINCREMENT, 0)
}

func (s *Default_valueContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIDENTITY, 0)
}

func (s *Default_valueContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Default_valueContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Default_valueContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Default_valueContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, 0)
}

func (s *Default_valueContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Default_valueContext) START() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTART, 0)
}

func (s *Default_valueContext) INCREMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINCREMENT, 0)
}

func (s *Default_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Default_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDefault_value(s)
	}
}

func (s *Default_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDefault_value(s)
	}
}

func (s *Default_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDefault_value(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Default_value() (localctx IDefault_valueContext) {
	this := p
	_ = this

	localctx = NewDefault_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 482, SnowflakeParserRULE_default_value)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8430)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserDEFAULT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8414)
			p.Match(SnowflakeParserDEFAULT)
		}
		{
			p.SetState(8415)
			p.expr(0)
		}


	case SnowflakeParserAUTOINCREMENT, SnowflakeParserIDENTITY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8416)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserAUTOINCREMENT || _la == SnowflakeParserIDENTITY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(8428)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserLR_BRACKET:
			{
				p.SetState(8417)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(8418)
				p.Num()
			}
			{
				p.SetState(8419)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(8420)
				p.Num()
			}
			{
				p.SetState(8421)
				p.Match(SnowflakeParserRR_BRACKET)
			}


		case SnowflakeParserSTART:
			{
				p.SetState(8423)
				p.Match(SnowflakeParserSTART)
			}
			{
				p.SetState(8424)
				p.Num()
			}
			{
				p.SetState(8425)
				p.Match(SnowflakeParserINCREMENT)
			}
			{
				p.SetState(8426)
				p.Num()
			}


		case SnowflakeParserCONSTRAINT, SnowflakeParserFOREIGN, SnowflakeParserMASKING, SnowflakeParserNOT, SnowflakeParserPRIMARY, SnowflakeParserREFERENCES, SnowflakeParserTAG, SnowflakeParserUNIQUE, SnowflakeParserWITH, SnowflakeParserRR_BRACKET, SnowflakeParserCOMMA:



		default:
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IForeign_keyContext is an interface to support dynamic dispatch.
type IForeign_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForeign_keyContext differentiates from other interfaces.
	IsForeign_keyContext()
}

type Foreign_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_keyContext() *Foreign_keyContext {
	var p = new(Foreign_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_foreign_key
	return p
}

func (*Foreign_keyContext) IsForeign_keyContext() {}

func NewForeign_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_keyContext {
	var p = new(Foreign_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_foreign_key

	return p
}

func (s *Foreign_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_keyContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFOREIGN, 0)
}

func (s *Foreign_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserKEY, 0)
}

func (s *Foreign_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Foreign_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterForeign_key(s)
	}
}

func (s *Foreign_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitForeign_key(s)
	}
}

func (s *Foreign_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitForeign_key(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Foreign_key() (localctx IForeign_keyContext) {
	this := p
	_ = this

	localctx = NewForeign_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 484, SnowflakeParserRULE_foreign_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8432)
		p.Match(SnowflakeParserFOREIGN)
	}
	{
		p.SetState(8433)
		p.Match(SnowflakeParserKEY)
	}



	return localctx
}


// IOut_of_line_constraintContext is an interface to support dynamic dispatch.
type IOut_of_line_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOut_of_line_constraintContext differentiates from other interfaces.
	IsOut_of_line_constraintContext()
}

type Out_of_line_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOut_of_line_constraintContext() *Out_of_line_constraintContext {
	var p = new(Out_of_line_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_out_of_line_constraint
	return p
}

func (*Out_of_line_constraintContext) IsOut_of_line_constraintContext() {}

func NewOut_of_line_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Out_of_line_constraintContext {
	var p = new(Out_of_line_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_out_of_line_constraint

	return p
}

func (s *Out_of_line_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Out_of_line_constraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNIQUE, 0)
}

func (s *Out_of_line_constraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIMARY, 0)
}

func (s *Out_of_line_constraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserKEY, 0)
}

func (s *Out_of_line_constraintContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREFERENCES, 0)
}

func (s *Out_of_line_constraintContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Out_of_line_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCONSTRAINT, 0)
}

func (s *Out_of_line_constraintContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Out_of_line_constraintContext) Constraint_properties() IConstraint_propertiesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraint_propertiesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraint_propertiesContext)
}

func (s *Out_of_line_constraintContext) AllColumn_list_in_parentheses() []IColumn_list_in_parenthesesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_list_in_parenthesesContext); ok {
			len++
		}
	}

	tst := make([]IColumn_list_in_parenthesesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_list_in_parenthesesContext); ok {
			tst[i] = t.(IColumn_list_in_parenthesesContext)
			i++
		}
	}

	return tst
}

func (s *Out_of_line_constraintContext) Column_list_in_parentheses(i int) IColumn_list_in_parenthesesContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_list_in_parenthesesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_list_in_parenthesesContext)
}

func (s *Out_of_line_constraintContext) Foreign_key() IForeign_keyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_keyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_keyContext)
}

func (s *Out_of_line_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Out_of_line_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Out_of_line_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterOut_of_line_constraint(s)
	}
}

func (s *Out_of_line_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitOut_of_line_constraint(s)
	}
}

func (s *Out_of_line_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitOut_of_line_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Out_of_line_constraint() (localctx IOut_of_line_constraintContext) {
	this := p
	_ = this

	localctx = NewOut_of_line_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 486, SnowflakeParserRULE_out_of_line_constraint)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8437)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCONSTRAINT {
		{
			p.SetState(8435)
			p.Match(SnowflakeParserCONSTRAINT)
		}
		{
			p.SetState(8436)
			p.Id_()
		}

	}
	p.SetState(8459)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserUNIQUE:
		{
			p.SetState(8439)
			p.Match(SnowflakeParserUNIQUE)
		}
		p.SetState(8441)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserLR_BRACKET {
			{
				p.SetState(8440)
				p.Column_list_in_parentheses()
			}

		}


	case SnowflakeParserPRIMARY:
		{
			p.SetState(8443)
			p.Match(SnowflakeParserPRIMARY)
		}
		{
			p.SetState(8444)
			p.Match(SnowflakeParserKEY)
		}
		p.SetState(8446)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserLR_BRACKET {
			{
				p.SetState(8445)
				p.Column_list_in_parentheses()
			}

		}


	case SnowflakeParserFOREIGN, SnowflakeParserREFERENCES, SnowflakeParserLR_BRACKET:
		p.SetState(8449)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFOREIGN {
			{
				p.SetState(8448)
				p.Foreign_key()
			}

		}
		p.SetState(8452)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserLR_BRACKET {
			{
				p.SetState(8451)
				p.Column_list_in_parentheses()
			}

		}
		{
			p.SetState(8454)
			p.Match(SnowflakeParserREFERENCES)
		}
		{
			p.SetState(8455)
			p.Object_name()
		}
		p.SetState(8457)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserLR_BRACKET {
			{
				p.SetState(8456)
				p.Column_list_in_parentheses()
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(8462)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (int64((_la - 217)) & ^0x3f) == 0 && ((int64(1) << (_la - 217)) & 8796629901377) != 0 || _la == SnowflakeParserINITIALLY || (int64((_la - 440)) & ^0x3f) == 0 && ((int64(1) << (_la - 440)) & 291608075872239617) != 0 || _la == SnowflakeParserRELY || _la == SnowflakeParserUPDATE || _la == SnowflakeParserVALIDATE {
		{
			p.SetState(8461)
			p.Constraint_properties()
		}

	}



	return localctx
}


// IFull_col_declContext is an interface to support dynamic dispatch.
type IFull_col_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFull_col_declContext differentiates from other interfaces.
	IsFull_col_declContext()
}

type Full_col_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFull_col_declContext() *Full_col_declContext {
	var p = new(Full_col_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_full_col_decl
	return p
}

func (*Full_col_declContext) IsFull_col_declContext() {}

func NewFull_col_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_col_declContext {
	var p = new(Full_col_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_full_col_decl

	return p
}

func (s *Full_col_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_col_declContext) Col_decl() ICol_declContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICol_declContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICol_declContext)
}

func (s *Full_col_declContext) Collate() ICollateContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollateContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollateContext)
}

func (s *Full_col_declContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Full_col_declContext) Default_value() IDefault_valueContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_valueContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_valueContext)
}

func (s *Full_col_declContext) Not_null() INot_nullContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INot_nullContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INot_nullContext)
}

func (s *Full_col_declContext) With_masking_policy() IWith_masking_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_masking_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_masking_policyContext)
}

func (s *Full_col_declContext) With_tags() IWith_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_tagsContext)
}

func (s *Full_col_declContext) Inline_constraint() IInline_constraintContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInline_constraintContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInline_constraintContext)
}

func (s *Full_col_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_col_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Full_col_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFull_col_decl(s)
	}
}

func (s *Full_col_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFull_col_decl(s)
	}
}

func (s *Full_col_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFull_col_decl(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Full_col_decl() (localctx IFull_col_declContext) {
	this := p
	_ = this

	localctx = NewFull_col_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, SnowflakeParserRULE_full_col_decl)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8464)
		p.Col_decl()
	}
	p.SetState(8466)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOLLATE {
		{
			p.SetState(8465)
			p.Collate()
		}

	}
	p.SetState(8469)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOMMENT {
		{
			p.SetState(8468)
			p.Comment_clause()
		}

	}
	p.SetState(8472)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAUTOINCREMENT || _la == SnowflakeParserDEFAULT || _la == SnowflakeParserIDENTITY {
		{
			p.SetState(8471)
			p.Default_value()
		}

	}
	p.SetState(8475)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1051, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8474)
			p.Not_null()
		}


	}
	p.SetState(8478)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1052, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8477)
			p.With_masking_policy()
		}


	}
	p.SetState(8481)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTAG || _la == SnowflakeParserWITH {
		{
			p.SetState(8480)
			p.With_tags()
		}

	}
	p.SetState(8484)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCONSTRAINT || _la == SnowflakeParserFOREIGN || _la == SnowflakeParserNOT || _la == SnowflakeParserPRIMARY || _la == SnowflakeParserREFERENCES || _la == SnowflakeParserUNIQUE {
		{
			p.SetState(8483)
			p.Inline_constraint()
		}

	}



	return localctx
}


// IColumn_decl_itemContext is an interface to support dynamic dispatch.
type IColumn_decl_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_decl_itemContext differentiates from other interfaces.
	IsColumn_decl_itemContext()
}

type Column_decl_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_decl_itemContext() *Column_decl_itemContext {
	var p = new(Column_decl_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_column_decl_item
	return p
}

func (*Column_decl_itemContext) IsColumn_decl_itemContext() {}

func NewColumn_decl_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_decl_itemContext {
	var p = new(Column_decl_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_column_decl_item

	return p
}

func (s *Column_decl_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_decl_itemContext) Full_col_decl() IFull_col_declContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFull_col_declContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFull_col_declContext)
}

func (s *Column_decl_itemContext) Out_of_line_constraint() IOut_of_line_constraintContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOut_of_line_constraintContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOut_of_line_constraintContext)
}

func (s *Column_decl_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_decl_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_decl_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterColumn_decl_item(s)
	}
}

func (s *Column_decl_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitColumn_decl_item(s)
	}
}

func (s *Column_decl_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitColumn_decl_item(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Column_decl_item() (localctx IColumn_decl_itemContext) {
	this := p
	_ = this

	localctx = NewColumn_decl_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, SnowflakeParserRULE_column_decl_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8488)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserINT, SnowflakeParserSTAGE, SnowflakeParserBIGINT, SnowflakeParserDOUBLE_QUOTE_ID, SnowflakeParserDOUBLE_QUOTE_BLANK, SnowflakeParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8486)
			p.Full_col_decl()
		}


	case SnowflakeParserCONSTRAINT, SnowflakeParserFOREIGN, SnowflakeParserPRIMARY, SnowflakeParserREFERENCES, SnowflakeParserUNIQUE, SnowflakeParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8487)
			p.Out_of_line_constraint()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IColumn_decl_item_listContext is an interface to support dynamic dispatch.
type IColumn_decl_item_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_decl_item_listContext differentiates from other interfaces.
	IsColumn_decl_item_listContext()
}

type Column_decl_item_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_decl_item_listContext() *Column_decl_item_listContext {
	var p = new(Column_decl_item_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_column_decl_item_list
	return p
}

func (*Column_decl_item_listContext) IsColumn_decl_item_listContext() {}

func NewColumn_decl_item_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_decl_item_listContext {
	var p = new(Column_decl_item_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_column_decl_item_list

	return p
}

func (s *Column_decl_item_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_decl_item_listContext) AllColumn_decl_item() []IColumn_decl_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_decl_itemContext); ok {
			len++
		}
	}

	tst := make([]IColumn_decl_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_decl_itemContext); ok {
			tst[i] = t.(IColumn_decl_itemContext)
			i++
		}
	}

	return tst
}

func (s *Column_decl_item_listContext) Column_decl_item(i int) IColumn_decl_itemContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_decl_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_decl_itemContext)
}

func (s *Column_decl_item_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Column_decl_item_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Column_decl_item_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_decl_item_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_decl_item_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterColumn_decl_item_list(s)
	}
}

func (s *Column_decl_item_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitColumn_decl_item_list(s)
	}
}

func (s *Column_decl_item_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitColumn_decl_item_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Column_decl_item_list() (localctx IColumn_decl_item_listContext) {
	this := p
	_ = this

	localctx = NewColumn_decl_item_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, SnowflakeParserRULE_column_decl_item_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8490)
		p.Column_decl_item()
	}
	p.SetState(8495)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(8491)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(8492)
			p.Column_decl_item()
		}


		p.SetState(8497)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ICreate_tableContext is an interface to support dynamic dispatch.
type ICreate_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_tableContext differentiates from other interfaces.
	IsCreate_tableContext()
}

type Create_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_tableContext() *Create_tableContext {
	var p = new(Create_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_table
	return p
}

func (*Create_tableContext) IsCreate_tableContext() {}

func NewCreate_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_tableContext {
	var p = new(Create_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_table

	return p
}

func (s *Create_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_tableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Create_tableContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_tableContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Create_tableContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Create_tableContext) Column_decl_item_list() IColumn_decl_item_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_decl_item_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_decl_item_listContext)
}

func (s *Create_tableContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Create_tableContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Create_tableContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_tableContext) Table_type() ITable_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_typeContext)
}

func (s *Create_tableContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_tableContext) Cluster_by() ICluster_byContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICluster_byContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICluster_byContext)
}

func (s *Create_tableContext) Stage_file_format() IStage_file_formatContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStage_file_formatContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStage_file_formatContext)
}

func (s *Create_tableContext) STAGE_COPY_OPTIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE_COPY_OPTIONS, 0)
}

func (s *Create_tableContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_tableContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_tableContext) Copy_options() ICopy_optionsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_optionsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_optionsContext)
}

func (s *Create_tableContext) DATA_RETENTION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS, 0)
}

func (s *Create_tableContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Create_tableContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Create_tableContext) MAX_DATA_EXTENSION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS, 0)
}

func (s *Create_tableContext) Change_tracking() IChange_trackingContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChange_trackingContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChange_trackingContext)
}

func (s *Create_tableContext) Default_ddl_collation() IDefault_ddl_collationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_ddl_collationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_ddl_collationContext)
}

func (s *Create_tableContext) Copy_grants() ICopy_grantsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_grantsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_grantsContext)
}

func (s *Create_tableContext) With_row_access_policy() IWith_row_access_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_row_access_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_row_access_policyContext)
}

func (s *Create_tableContext) With_tags() IWith_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_tagsContext)
}

func (s *Create_tableContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_table(s)
	}
}

func (s *Create_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_table(s)
	}
}

func (s *Create_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_table(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_table() (localctx ICreate_tableContext) {
	this := p
	_ = this

	localctx = NewCreate_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 494, SnowflakeParserRULE_create_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8498)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(8500)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(8499)
			p.Or_replace()
		}

	}
	p.SetState(8503)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserGLOBAL || _la == SnowflakeParserLOCAL || _la == SnowflakeParserTRANSIENT || _la == SnowflakeParserVOLATILE {
		{
			p.SetState(8502)
			p.Table_type()
		}

	}
	{
		p.SetState(8505)
		p.Match(SnowflakeParserTABLE)
	}
	p.SetState(8507)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8506)
			p.If_not_exists()
		}

	}
	{
		p.SetState(8509)
		p.Object_name()
	}
	{
		p.SetState(8510)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(8511)
		p.Column_decl_item_list()
	}
	{
		p.SetState(8512)
		p.Match(SnowflakeParserRR_BRACKET)
	}
	p.SetState(8514)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCLUSTER {
		{
			p.SetState(8513)
			p.Cluster_by()
		}

	}
	p.SetState(8517)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSTAGE_FILE_FORMAT || _la == SnowflakeParserTYPE {
		{
			p.SetState(8516)
			p.Stage_file_format()
		}

	}
	p.SetState(8525)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSTAGE_COPY_OPTIONS {
		{
			p.SetState(8519)
			p.Match(SnowflakeParserSTAGE_COPY_OPTIONS)
		}
		{
			p.SetState(8520)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8521)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(8522)
			p.Copy_options()
		}
		{
			p.SetState(8523)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	p.SetState(8530)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserDATA_RETENTION_TIME_IN_DAYS {
		{
			p.SetState(8527)
			p.Match(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS)
		}
		{
			p.SetState(8528)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8529)
			p.Num()
		}

	}
	p.SetState(8535)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS {
		{
			p.SetState(8532)
			p.Match(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS)
		}
		{
			p.SetState(8533)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8534)
			p.Num()
		}

	}
	p.SetState(8538)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCHANGE_TRACKING {
		{
			p.SetState(8537)
			p.Change_tracking()
		}

	}
	p.SetState(8541)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserDEFAULT_DDL_COLLATION_ {
		{
			p.SetState(8540)
			p.Default_ddl_collation()
		}

	}
	p.SetState(8544)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1067, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8543)
			p.Copy_grants()
		}


	}
	p.SetState(8547)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1068, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8546)
			p.With_row_access_policy()
		}


	}
	p.SetState(8550)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1069, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8549)
			p.With_tags()
		}


	}
	p.SetState(8553)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1070, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8552)
			p.Comment_clause()
		}


	}



	return localctx
}


// ICreate_tagContext is an interface to support dynamic dispatch.
type ICreate_tagContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_tagContext differentiates from other interfaces.
	IsCreate_tagContext()
}

type Create_tagContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_tagContext() *Create_tagContext {
	var p = new(Create_tagContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_tag
	return p
}

func (*Create_tagContext) IsCreate_tagContext() {}

func NewCreate_tagContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_tagContext {
	var p = new(Create_tagContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_tag

	return p
}

func (s *Create_tagContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_tagContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_tagContext) TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTAG, 0)
}

func (s *Create_tagContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_tagContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_tagContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_tagContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Create_tagContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Create_tagContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Create_tagContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_tagContext) ALLOWED_VALUES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOWED_VALUES, 0)
}

func (s *Create_tagContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Create_tagContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Create_tagContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_tagContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_tagContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_tag(s)
	}
}

func (s *Create_tagContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_tag(s)
	}
}

func (s *Create_tagContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_tag(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_tag() (localctx ICreate_tagContext) {
	this := p
	_ = this

	localctx = NewCreate_tagContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, SnowflakeParserRULE_create_tag)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8589)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1078, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8555)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(8557)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(8556)
				p.Or_replace()
			}

		}
		{
			p.SetState(8559)
			p.Match(SnowflakeParserTAG)
		}
		p.SetState(8561)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(8560)
				p.If_not_exists()
			}

		}
		{
			p.SetState(8563)
			p.Id_()
		}
		p.SetState(8567)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1073, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8564)
				p.Match(SnowflakeParserCOMMENT)
			}
			{
				p.SetState(8565)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(8566)
				p.String_()
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8569)
			p.Match(SnowflakeParserCREATE)
		}
		p.SetState(8571)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOR {
			{
				p.SetState(8570)
				p.Or_replace()
			}

		}
		{
			p.SetState(8573)
			p.Match(SnowflakeParserTAG)
		}
		p.SetState(8575)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserIF {
			{
				p.SetState(8574)
				p.If_not_exists()
			}

		}
		{
			p.SetState(8577)
			p.Id_()
		}
		p.SetState(8587)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserALLOWED_VALUES {
			{
				p.SetState(8578)
				p.Match(SnowflakeParserALLOWED_VALUES)
			}
			{
				p.SetState(8579)
				p.String_()
			}
			p.SetState(8584)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SnowflakeParserCOMMA {
				{
					p.SetState(8580)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(8581)
					p.String_()
				}


				p.SetState(8586)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	}


	return localctx
}


// ISession_parameterContext is an interface to support dynamic dispatch.
type ISession_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSession_parameterContext differentiates from other interfaces.
	IsSession_parameterContext()
}

type Session_parameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySession_parameterContext() *Session_parameterContext {
	var p = new(Session_parameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_session_parameter
	return p
}

func (*Session_parameterContext) IsSession_parameterContext() {}

func NewSession_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Session_parameterContext {
	var p = new(Session_parameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_session_parameter

	return p
}

func (s *Session_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Session_parameterContext) ABORT_DETACHED_QUERY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserABORT_DETACHED_QUERY, 0)
}

func (s *Session_parameterContext) ALLOW_CLIENT_MFA_CACHING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOW_CLIENT_MFA_CACHING, 0)
}

func (s *Session_parameterContext) ALLOW_ID_TOKEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOW_ID_TOKEN, 0)
}

func (s *Session_parameterContext) AUTOCOMMIT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTOCOMMIT, 0)
}

func (s *Session_parameterContext) AUTOCOMMIT_API_SUPPORTED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTOCOMMIT_API_SUPPORTED, 0)
}

func (s *Session_parameterContext) BINARY_INPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBINARY_INPUT_FORMAT, 0)
}

func (s *Session_parameterContext) BINARY_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBINARY_OUTPUT_FORMAT, 0)
}

func (s *Session_parameterContext) CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS, 0)
}

func (s *Session_parameterContext) CLIENT_ENCRYPTION_KEY_SIZE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLIENT_ENCRYPTION_KEY_SIZE, 0)
}

func (s *Session_parameterContext) CLIENT_MEMORY_LIMIT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLIENT_MEMORY_LIMIT, 0)
}

func (s *Session_parameterContext) CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLIENT_METADATA_REQUEST_USE_CONNECTION_CTX, 0)
}

func (s *Session_parameterContext) CLIENT_METADATA_USE_SESSION_DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLIENT_METADATA_USE_SESSION_DATABASE, 0)
}

func (s *Session_parameterContext) CLIENT_PREFETCH_THREADS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLIENT_PREFETCH_THREADS, 0)
}

func (s *Session_parameterContext) CLIENT_RESULT_CHUNK_SIZE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLIENT_RESULT_CHUNK_SIZE, 0)
}

func (s *Session_parameterContext) CLIENT_RESULT_COLUMN_CASE_INSENSITIVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLIENT_RESULT_COLUMN_CASE_INSENSITIVE, 0)
}

func (s *Session_parameterContext) CLIENT_SESSION_KEEP_ALIVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLIENT_SESSION_KEEP_ALIVE, 0)
}

func (s *Session_parameterContext) CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY, 0)
}

func (s *Session_parameterContext) CLIENT_TIMESTAMP_TYPE_MAPPING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCLIENT_TIMESTAMP_TYPE_MAPPING, 0)
}

func (s *Session_parameterContext) DATA_RETENTION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATA_RETENTION_TIME_IN_DAYS, 0)
}

func (s *Session_parameterContext) DATE_INPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATE_INPUT_FORMAT, 0)
}

func (s *Session_parameterContext) DATE_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATE_OUTPUT_FORMAT, 0)
}

func (s *Session_parameterContext) DEFAULT_DDL_COLLATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT_DDL_COLLATION, 0)
}

func (s *Session_parameterContext) ENABLE_INTERNAL_STAGES_PRIVATELINK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE_INTERNAL_STAGES_PRIVATELINK, 0)
}

func (s *Session_parameterContext) ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION, 0)
}

func (s *Session_parameterContext) ENFORCE_SESSION_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENFORCE_SESSION_POLICY, 0)
}

func (s *Session_parameterContext) ERROR_ON_NONDETERMINISTIC_MERGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserERROR_ON_NONDETERMINISTIC_MERGE, 0)
}

func (s *Session_parameterContext) ERROR_ON_NONDETERMINISTIC_UPDATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserERROR_ON_NONDETERMINISTIC_UPDATE, 0)
}

func (s *Session_parameterContext) EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST, 0)
}

func (s *Session_parameterContext) GEOGRAPHY_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGEOGRAPHY_OUTPUT_FORMAT, 0)
}

func (s *Session_parameterContext) GEOMETRY_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGEOMETRY_OUTPUT_FORMAT, 0)
}

func (s *Session_parameterContext) INITIAL_REPLICATION_SIZE_LIMIT_IN_TB() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINITIAL_REPLICATION_SIZE_LIMIT_IN_TB, 0)
}

func (s *Session_parameterContext) JDBC_TREAT_DECIMAL_AS_INT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserJDBC_TREAT_DECIMAL_AS_INT, 0)
}

func (s *Session_parameterContext) JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserJDBC_TREAT_TIMESTAMP_NTZ_AS_UTC, 0)
}

func (s *Session_parameterContext) JDBC_USE_SESSION_TIMEZONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserJDBC_USE_SESSION_TIMEZONE, 0)
}

func (s *Session_parameterContext) JSON_INDENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserJSON_INDENT, 0)
}

func (s *Session_parameterContext) JS_TREAT_INTEGER_AS_BIGINT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserJS_TREAT_INTEGER_AS_BIGINT, 0)
}

func (s *Session_parameterContext) LOCK_TIMEOUT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLOCK_TIMEOUT, 0)
}

func (s *Session_parameterContext) MAX_CONCURRENCY_LEVEL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_CONCURRENCY_LEVEL, 0)
}

func (s *Session_parameterContext) MAX_DATA_EXTENSION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_DATA_EXTENSION_TIME_IN_DAYS, 0)
}

func (s *Session_parameterContext) MULTI_STATEMENT_COUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMULTI_STATEMENT_COUNT, 0)
}

func (s *Session_parameterContext) MIN_DATA_RETENTION_TIME_IN_DAYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMIN_DATA_RETENTION_TIME_IN_DAYS, 0)
}

func (s *Session_parameterContext) NETWORK_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK_POLICY, 0)
}

func (s *Session_parameterContext) SHARE_RESTRICTIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARE_RESTRICTIONS, 0)
}

func (s *Session_parameterContext) PERIODIC_DATA_REKEYING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPERIODIC_DATA_REKEYING, 0)
}

func (s *Session_parameterContext) PIPE_EXECUTION_PAUSED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPIPE_EXECUTION_PAUSED, 0)
}

func (s *Session_parameterContext) PREVENT_UNLOAD_TO_INLINE_URL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPREVENT_UNLOAD_TO_INLINE_URL, 0)
}

func (s *Session_parameterContext) PREVENT_UNLOAD_TO_INTERNAL_STAGES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPREVENT_UNLOAD_TO_INTERNAL_STAGES, 0)
}

func (s *Session_parameterContext) QUERY_TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserQUERY_TAG, 0)
}

func (s *Session_parameterContext) QUOTED_IDENTIFIERS_IGNORE_CASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserQUOTED_IDENTIFIERS_IGNORE_CASE, 0)
}

func (s *Session_parameterContext) REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION, 0)
}

func (s *Session_parameterContext) REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION, 0)
}

func (s *Session_parameterContext) ROWS_PER_RESULTSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROWS_PER_RESULTSET, 0)
}

func (s *Session_parameterContext) SAML_IDENTITY_PROVIDER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAML_IDENTITY_PROVIDER, 0)
}

func (s *Session_parameterContext) SIMULATED_DATA_SHARING_CONSUMER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSIMULATED_DATA_SHARING_CONSUMER, 0)
}

func (s *Session_parameterContext) SSO_LOGIN_PAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSSO_LOGIN_PAGE, 0)
}

func (s *Session_parameterContext) STATEMENT_QUEUED_TIMEOUT_IN_SECONDS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTATEMENT_QUEUED_TIMEOUT_IN_SECONDS, 0)
}

func (s *Session_parameterContext) STATEMENT_TIMEOUT_IN_SECONDS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTATEMENT_TIMEOUT_IN_SECONDS, 0)
}

func (s *Session_parameterContext) STRICT_JSON_OUTPUT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRICT_JSON_OUTPUT, 0)
}

func (s *Session_parameterContext) SUSPEND_TASK_AFTER_NUM_FAILURES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND_TASK_AFTER_NUM_FAILURES, 0)
}

func (s *Session_parameterContext) TIMESTAMP_DAY_IS_ALWAYS_24H() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_DAY_IS_ALWAYS_24H, 0)
}

func (s *Session_parameterContext) TIMESTAMP_INPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_INPUT_FORMAT, 0)
}

func (s *Session_parameterContext) TIMESTAMP_LTZ_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_LTZ_OUTPUT_FORMAT, 0)
}

func (s *Session_parameterContext) TIMESTAMP_NTZ_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_NTZ_OUTPUT_FORMAT, 0)
}

func (s *Session_parameterContext) TIMESTAMP_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_OUTPUT_FORMAT, 0)
}

func (s *Session_parameterContext) TIMESTAMP_TYPE_MAPPING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_TYPE_MAPPING, 0)
}

func (s *Session_parameterContext) TIMESTAMP_TZ_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_TZ_OUTPUT_FORMAT, 0)
}

func (s *Session_parameterContext) TIMEZONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMEZONE, 0)
}

func (s *Session_parameterContext) TIME_INPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIME_INPUT_FORMAT, 0)
}

func (s *Session_parameterContext) TIME_OUTPUT_FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIME_OUTPUT_FORMAT, 0)
}

func (s *Session_parameterContext) TRANSACTION_ABORT_ON_ERROR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRANSACTION_ABORT_ON_ERROR, 0)
}

func (s *Session_parameterContext) TRANSACTION_DEFAULT_ISOLATION_LEVEL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRANSACTION_DEFAULT_ISOLATION_LEVEL, 0)
}

func (s *Session_parameterContext) TWO_DIGIT_CENTURY_START() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTWO_DIGIT_CENTURY_START, 0)
}

func (s *Session_parameterContext) UNSUPPORTED_DDL_ACTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNSUPPORTED_DDL_ACTION, 0)
}

func (s *Session_parameterContext) USE_CACHED_RESULT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSE_CACHED_RESULT, 0)
}

func (s *Session_parameterContext) USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE, 0)
}

func (s *Session_parameterContext) USER_TASK_TIMEOUT_MS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER_TASK_TIMEOUT_MS, 0)
}

func (s *Session_parameterContext) WEEK_OF_YEAR_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWEEK_OF_YEAR_POLICY, 0)
}

func (s *Session_parameterContext) WEEK_START() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWEEK_START, 0)
}

func (s *Session_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Session_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Session_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSession_parameter(s)
	}
}

func (s *Session_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSession_parameter(s)
	}
}

func (s *Session_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSession_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Session_parameter() (localctx ISession_parameterContext) {
	this := p
	_ = this

	localctx = NewSession_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, SnowflakeParserRULE_session_parameter)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8591)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la - 4)) & ^0x3f) == 0 && ((int64(1) << (_la - 4)) & -4611686018426208255) != 0 || (int64((_la - 95)) & ^0x3f) == 0 && ((int64(1) << (_la - 95)) & 281337537757187) != 0 || (int64((_la - 199)) & ^0x3f) == 0 && ((int64(1) << (_la - 199)) & 1157988054187638833) != 0 || (int64((_la - 265)) & ^0x3f) == 0 && ((int64(1) << (_la - 265)) & 131075) != 0 || (int64((_la - 329)) & ^0x3f) == 0 && ((int64(1) << (_la - 329)) & 6629300850512625667) != 0 || (int64((_la - 393)) & ^0x3f) == 0 && ((int64(1) << (_la - 393)) & 108086392130633729) != 0 || (int64((_la - 457)) & ^0x3f) == 0 && ((int64(1) << (_la - 457)) & 2101249) != 0 || (int64((_la - 571)) & ^0x3f) == 0 && ((int64(1) << (_la - 571)) & 1407374889844801) != 0 || (int64((_la - 666)) & ^0x3f) == 0 && ((int64(1) << (_la - 666)) & 1152921779484753923) != 0 || (int64((_la - 761)) & ^0x3f) == 0 && ((int64(1) << (_la - 761)) & 422221055002625) != 0 || (int64((_la - 833)) & ^0x3f) == 0 && ((int64(1) << (_la - 833)) & -4580538228402026495) != 0 || (int64((_la - 915)) & ^0x3f) == 0 && ((int64(1) << (_la - 915)) & 6917529238102867969) != 0 || _la == SnowflakeParserDEFAULT_DDL_COLLATION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ISession_parameter_listContext is an interface to support dynamic dispatch.
type ISession_parameter_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSession_parameter_listContext differentiates from other interfaces.
	IsSession_parameter_listContext()
}

type Session_parameter_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySession_parameter_listContext() *Session_parameter_listContext {
	var p = new(Session_parameter_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_session_parameter_list
	return p
}

func (*Session_parameter_listContext) IsSession_parameter_listContext() {}

func NewSession_parameter_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Session_parameter_listContext {
	var p = new(Session_parameter_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_session_parameter_list

	return p
}

func (s *Session_parameter_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Session_parameter_listContext) AllSession_parameter() []ISession_parameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISession_parameterContext); ok {
			len++
		}
	}

	tst := make([]ISession_parameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISession_parameterContext); ok {
			tst[i] = t.(ISession_parameterContext)
			i++
		}
	}

	return tst
}

func (s *Session_parameter_listContext) Session_parameter(i int) ISession_parameterContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISession_parameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISession_parameterContext)
}

func (s *Session_parameter_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Session_parameter_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Session_parameter_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Session_parameter_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Session_parameter_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSession_parameter_list(s)
	}
}

func (s *Session_parameter_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSession_parameter_list(s)
	}
}

func (s *Session_parameter_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSession_parameter_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Session_parameter_list() (localctx ISession_parameter_listContext) {
	this := p
	_ = this

	localctx = NewSession_parameter_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, SnowflakeParserRULE_session_parameter_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8593)
		p.Session_parameter()
	}
	p.SetState(8598)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(8594)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(8595)
			p.Session_parameter()
		}


		p.SetState(8600)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ISession_parameter_init_listContext is an interface to support dynamic dispatch.
type ISession_parameter_init_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSession_parameter_init_listContext differentiates from other interfaces.
	IsSession_parameter_init_listContext()
}

type Session_parameter_init_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySession_parameter_init_listContext() *Session_parameter_init_listContext {
	var p = new(Session_parameter_init_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_session_parameter_init_list
	return p
}

func (*Session_parameter_init_listContext) IsSession_parameter_init_listContext() {}

func NewSession_parameter_init_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Session_parameter_init_listContext {
	var p = new(Session_parameter_init_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_session_parameter_init_list

	return p
}

func (s *Session_parameter_init_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Session_parameter_init_listContext) AllSession_parameter_init() []ISession_parameter_initContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISession_parameter_initContext); ok {
			len++
		}
	}

	tst := make([]ISession_parameter_initContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISession_parameter_initContext); ok {
			tst[i] = t.(ISession_parameter_initContext)
			i++
		}
	}

	return tst
}

func (s *Session_parameter_init_listContext) Session_parameter_init(i int) ISession_parameter_initContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISession_parameter_initContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISession_parameter_initContext)
}

func (s *Session_parameter_init_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Session_parameter_init_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Session_parameter_init_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Session_parameter_init_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Session_parameter_init_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSession_parameter_init_list(s)
	}
}

func (s *Session_parameter_init_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSession_parameter_init_list(s)
	}
}

func (s *Session_parameter_init_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSession_parameter_init_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Session_parameter_init_list() (localctx ISession_parameter_init_listContext) {
	this := p
	_ = this

	localctx = NewSession_parameter_init_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, SnowflakeParserRULE_session_parameter_init_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8601)
		p.Session_parameter_init()
	}
	p.SetState(8606)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(8602)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(8603)
			p.Session_parameter_init()
		}


		p.SetState(8608)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ISession_parameter_initContext is an interface to support dynamic dispatch.
type ISession_parameter_initContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSession_parameter_initContext differentiates from other interfaces.
	IsSession_parameter_initContext()
}

type Session_parameter_initContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySession_parameter_initContext() *Session_parameter_initContext {
	var p = new(Session_parameter_initContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_session_parameter_init
	return p
}

func (*Session_parameter_initContext) IsSession_parameter_initContext() {}

func NewSession_parameter_initContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Session_parameter_initContext {
	var p = new(Session_parameter_initContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_session_parameter_init

	return p
}

func (s *Session_parameter_initContext) GetParser() antlr.Parser { return s.parser }

func (s *Session_parameter_initContext) Session_parameter() ISession_parameterContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISession_parameterContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISession_parameterContext)
}

func (s *Session_parameter_initContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Session_parameter_initContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Session_parameter_initContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Session_parameter_initContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Session_parameter_initContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSession_parameter_init(s)
	}
}

func (s *Session_parameter_initContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSession_parameter_init(s)
	}
}

func (s *Session_parameter_initContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSession_parameter_init(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Session_parameter_init() (localctx ISession_parameter_initContext) {
	this := p
	_ = this

	localctx = NewSession_parameter_initContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, SnowflakeParserRULE_session_parameter_init)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8609)
		p.Session_parameter()
	}
	{
		p.SetState(8610)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(8611)
		p.True_false()
	}



	return localctx
}


// ICreate_taskContext is an interface to support dynamic dispatch.
type ICreate_taskContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_taskContext differentiates from other interfaces.
	IsCreate_taskContext()
}

type Create_taskContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_taskContext() *Create_taskContext {
	var p = new(Create_taskContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_task
	return p
}

func (*Create_taskContext) IsCreate_taskContext() {}

func NewCreate_taskContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_taskContext {
	var p = new(Create_taskContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_task

	return p
}

func (s *Create_taskContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_taskContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_taskContext) TASK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTASK, 0)
}

func (s *Create_taskContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_taskContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Create_taskContext) Sql() ISqlContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISqlContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISqlContext)
}

func (s *Create_taskContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_taskContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_taskContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEDULE, 0)
}

func (s *Create_taskContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserEQ)
}

func (s *Create_taskContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, i)
}

func (s *Create_taskContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Create_taskContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Create_taskContext) ALLOW_OVERLAPPING_EXECUTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALLOW_OVERLAPPING_EXECUTION, 0)
}

func (s *Create_taskContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Create_taskContext) Session_parameter_init_list() ISession_parameter_init_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISession_parameter_init_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISession_parameter_init_listContext)
}

func (s *Create_taskContext) USER_TASK_TIMEOUT_MS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER_TASK_TIMEOUT_MS, 0)
}

func (s *Create_taskContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Create_taskContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Create_taskContext) SUSPEND_TASK_AFTER_NUM_FAILURES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND_TASK_AFTER_NUM_FAILURES, 0)
}

func (s *Create_taskContext) ERROR_INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserERROR_INTEGRATION, 0)
}

func (s *Create_taskContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_taskContext) Copy_grants() ICopy_grantsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_grantsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_grantsContext)
}

func (s *Create_taskContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_taskContext) AFTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAFTER, 0)
}

func (s *Create_taskContext) WHEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWHEN, 0)
}

func (s *Create_taskContext) Search_condition() ISearch_conditionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISearch_conditionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Create_taskContext) WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE, 0)
}

func (s *Create_taskContext) USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE, 0)
}

func (s *Create_taskContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Create_taskContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Create_taskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_taskContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_taskContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_task(s)
	}
}

func (s *Create_taskContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_task(s)
	}
}

func (s *Create_taskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_task(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_task() (localctx ICreate_taskContext) {
	this := p
	_ = this

	localctx = NewCreate_taskContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, SnowflakeParserRULE_create_task)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8613)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(8615)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(8614)
			p.Or_replace()
		}

	}
	{
		p.SetState(8617)
		p.Match(SnowflakeParserTASK)
	}
	p.SetState(8619)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8618)
			p.If_not_exists()
		}

	}
	{
		p.SetState(8621)
		p.Object_name()
	}
	p.SetState(8628)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1083, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8622)
			p.Match(SnowflakeParserWAREHOUSE)
		}
		{
			p.SetState(8623)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8624)
			p.String_()
		}


	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1083, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(8625)
			p.Match(SnowflakeParserUSER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE)
		}
		{
			p.SetState(8626)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8627)
			p.String_()
		}



	}
	p.SetState(8633)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSCHEDULE {
		{
			p.SetState(8630)
			p.Match(SnowflakeParserSCHEDULE)
		}
		{
			p.SetState(8631)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8632)
			p.String_()
		}

	}
	p.SetState(8638)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserALLOW_OVERLAPPING_EXECUTION {
		{
			p.SetState(8635)
			p.Match(SnowflakeParserALLOW_OVERLAPPING_EXECUTION)
		}
		{
			p.SetState(8636)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8637)
			p.True_false()
		}

	}
	p.SetState(8641)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1086, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8640)
			p.Session_parameter_init_list()
		}


	}
	p.SetState(8646)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserUSER_TASK_TIMEOUT_MS {
		{
			p.SetState(8643)
			p.Match(SnowflakeParserUSER_TASK_TIMEOUT_MS)
		}
		{
			p.SetState(8644)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8645)
			p.Num()
		}

	}
	p.SetState(8651)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSUSPEND_TASK_AFTER_NUM_FAILURES {
		{
			p.SetState(8648)
			p.Match(SnowflakeParserSUSPEND_TASK_AFTER_NUM_FAILURES)
		}
		{
			p.SetState(8649)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8650)
			p.Num()
		}

	}
	p.SetState(8656)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserERROR_INTEGRATION {
		{
			p.SetState(8653)
			p.Match(SnowflakeParserERROR_INTEGRATION)
		}
		{
			p.SetState(8654)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8655)
			p.Id_()
		}

	}
	p.SetState(8659)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOPY {
		{
			p.SetState(8658)
			p.Copy_grants()
		}

	}
	p.SetState(8662)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOMMENT {
		{
			p.SetState(8661)
			p.Comment_clause()
		}

	}
	p.SetState(8673)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAFTER {
		{
			p.SetState(8664)
			p.Match(SnowflakeParserAFTER)
		}
		{
			p.SetState(8665)
			p.String_()
		}
		p.SetState(8670)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(8666)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(8667)
				p.String_()
			}


			p.SetState(8672)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(8677)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserWHEN {
		{
			p.SetState(8675)
			p.Match(SnowflakeParserWHEN)
		}
		{
			p.SetState(8676)
			p.search_condition(0)
		}

	}
	{
		p.SetState(8679)
		p.Match(SnowflakeParserAS)
	}
	{
		p.SetState(8680)
		p.Sql()
	}



	return localctx
}


// ISqlContext is an interface to support dynamic dispatch.
type ISqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSqlContext differentiates from other interfaces.
	IsSqlContext()
}

type SqlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlContext() *SqlContext {
	var p = new(SqlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_sql
	return p
}

func (*SqlContext) IsSqlContext() {}

func NewSqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlContext {
	var p = new(SqlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_sql

	return p
}

func (s *SqlContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlContext) Sql_command() ISql_commandContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_commandContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_commandContext)
}

func (s *SqlContext) Call() ICallContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICallContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *SqlContext) DBL_DOLLAR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDBL_DOLLAR, 0)
}

func (s *SqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSql(s)
	}
}

func (s *SqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSql(s)
	}
}

func (s *SqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSql(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Sql() (localctx ISqlContext) {
	this := p
	_ = this

	localctx = NewSqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, SnowflakeParserRULE_sql)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8685)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCOPY, SnowflakeParserCREATE, SnowflakeParserDELETE, SnowflakeParserDESC, SnowflakeParserDESCRIBE, SnowflakeParserDROP, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserINSERT, SnowflakeParserLIST, SnowflakeParserMERGE, SnowflakeParserPUT, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSELECT, SnowflakeParserSET, SnowflakeParserSHOW, SnowflakeParserTRUNCATE, SnowflakeParserUNDROP, SnowflakeParserUNSET, SnowflakeParserUPDATE, SnowflakeParserUSE, SnowflakeParserWITH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8682)
			p.Sql_command()
		}


	case SnowflakeParserCALL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8683)
			p.Call()
		}


	case SnowflakeParserDBL_DOLLAR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8684)
			p.Match(SnowflakeParserDBL_DOLLAR)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICallContext is an interface to support dynamic dispatch.
type ICallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallContext differentiates from other interfaces.
	IsCallContext()
}

type CallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallContext() *CallContext {
	var p = new(CallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_call
	return p
}

func (*CallContext) IsCallContext() {}

func NewCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallContext {
	var p = new(CallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_call

	return p
}

func (s *CallContext) GetParser() antlr.Parser { return s.parser }

func (s *CallContext) CALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCALL, 0)
}

func (s *CallContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *CallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *CallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *CallContext) Expr_list() IExpr_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *CallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCall(s)
	}
}

func (s *CallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCall(s)
	}
}

func (s *CallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCall(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Call() (localctx ICallContext) {
	this := p
	_ = this

	localctx = NewCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, SnowflakeParserRULE_call)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8687)
		p.Match(SnowflakeParserCALL)
	}
	{
		p.SetState(8688)
		p.Object_name()
	}
	{
		p.SetState(8689)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(8691)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCASE || _la == SnowflakeParserCAST || _la == SnowflakeParserDEFAULT || _la == SnowflakeParserDENSE_RANK || _la == SnowflakeParserFALSE || _la == SnowflakeParserINT || (int64((_la - 499)) & ^0x3f) == 0 && ((int64(1) << (_la - 499)) & 562949953421315) != 0 || _la == SnowflakeParserRANK || _la == SnowflakeParserROW_NUMBER || _la == SnowflakeParserSTAGE || _la == SnowflakeParserTRUE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 4899982412588515329) != 0 || (int64((_la - 1065)) & ^0x3f) == 0 && ((int64(1) << (_la - 1065)) & 6149) != 0 {
		{
			p.SetState(8690)
			p.Expr_list()
		}

	}
	{
		p.SetState(8693)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// ICreate_userContext is an interface to support dynamic dispatch.
type ICreate_userContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_userContext differentiates from other interfaces.
	IsCreate_userContext()
}

type Create_userContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_userContext() *Create_userContext {
	var p = new(Create_userContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_user
	return p
}

func (*Create_userContext) IsCreate_userContext() {}

func NewCreate_userContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_userContext {
	var p = new(Create_userContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_user

	return p
}

func (s *Create_userContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_userContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_userContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Create_userContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_userContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_userContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_userContext) Object_properties() IObject_propertiesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_propertiesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_propertiesContext)
}

func (s *Create_userContext) Object_params() IObject_paramsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_paramsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_paramsContext)
}

func (s *Create_userContext) Session_params() ISession_paramsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISession_paramsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISession_paramsContext)
}

func (s *Create_userContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_userContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_userContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_user(s)
	}
}

func (s *Create_userContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_user(s)
	}
}

func (s *Create_userContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_user(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_user() (localctx ICreate_userContext) {
	this := p
	_ = this

	localctx = NewCreate_userContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, SnowflakeParserRULE_create_user)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8695)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(8697)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(8696)
			p.Or_replace()
		}

	}
	{
		p.SetState(8699)
		p.Match(SnowflakeParserUSER)
	}
	p.SetState(8701)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8700)
			p.If_not_exists()
		}

	}
	{
		p.SetState(8703)
		p.Id_()
	}
	p.SetState(8705)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1099, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8704)
			p.Object_properties()
		}


	}
	p.SetState(8708)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1100, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8707)
			p.Object_params()
		}


	}
	p.SetState(8711)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserABORT_DETACHED_QUERY || (int64((_la - 66)) & ^0x3f) == 0 && ((int64(1) << (_la - 66)) & 1610612737) != 0 || (int64((_la - 203)) & ^0x3f) == 0 && ((int64(1) << (_la - 203)) & -4611686018427387901) != 0 || _la == SnowflakeParserJSON_INDENT || _la == SnowflakeParserLOCK_TIMEOUT || _la == SnowflakeParserQUERY_TAG || _la == SnowflakeParserROWS_PER_RESULTSET || (int64((_la - 772)) & ^0x3f) == 0 && ((int64(1) << (_la - 772)) & 2305843146652647425) != 0 || (int64((_la - 871)) & ^0x3f) == 0 && ((int64(1) << (_la - 871)) & 17592219712163) != 0 || (int64((_la - 938)) & ^0x3f) == 0 && ((int64(1) << (_la - 938)) & 824633721345) != 0 {
		{
			p.SetState(8710)
			p.Session_params()
		}

	}



	return localctx
}


// IView_colContext is an interface to support dynamic dispatch.
type IView_colContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsView_colContext differentiates from other interfaces.
	IsView_colContext()
}

type View_colContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyView_colContext() *View_colContext {
	var p = new(View_colContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_view_col
	return p
}

func (*View_colContext) IsView_colContext() {}

func NewView_colContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *View_colContext {
	var p = new(View_colContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_view_col

	return p
}

func (s *View_colContext) GetParser() antlr.Parser { return s.parser }

func (s *View_colContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *View_colContext) With_masking_policy() IWith_masking_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_masking_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_masking_policyContext)
}

func (s *View_colContext) With_tags() IWith_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_tagsContext)
}

func (s *View_colContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *View_colContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *View_colContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterView_col(s)
	}
}

func (s *View_colContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitView_col(s)
	}
}

func (s *View_colContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitView_col(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) View_col() (localctx IView_colContext) {
	this := p
	_ = this

	localctx = NewView_colContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, SnowflakeParserRULE_view_col)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8713)
		p.Column_name()
	}
	{
		p.SetState(8714)
		p.With_masking_policy()
	}
	{
		p.SetState(8715)
		p.With_tags()
	}



	return localctx
}


// ICreate_viewContext is an interface to support dynamic dispatch.
type ICreate_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_viewContext differentiates from other interfaces.
	IsCreate_viewContext()
}

type Create_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_viewContext() *Create_viewContext {
	var p = new(Create_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_view
	return p
}

func (*Create_viewContext) IsCreate_viewContext() {}

func NewCreate_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_viewContext {
	var p = new(Create_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_view

	return p
}

func (s *Create_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_viewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Create_viewContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Create_viewContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Create_viewContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Create_viewContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_viewContext) SECURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURE, 0)
}

func (s *Create_viewContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRECURSIVE, 0)
}

func (s *Create_viewContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_viewContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Create_viewContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Create_viewContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Create_viewContext) AllView_col() []IView_colContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IView_colContext); ok {
			len++
		}
	}

	tst := make([]IView_colContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IView_colContext); ok {
			tst[i] = t.(IView_colContext)
			i++
		}
	}

	return tst
}

func (s *Create_viewContext) View_col(i int) IView_colContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IView_colContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IView_colContext)
}

func (s *Create_viewContext) With_row_access_policy() IWith_row_access_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_row_access_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_row_access_policyContext)
}

func (s *Create_viewContext) With_tags() IWith_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_tagsContext)
}

func (s *Create_viewContext) Copy_grants() ICopy_grantsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_grantsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_grantsContext)
}

func (s *Create_viewContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Create_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_view(s)
	}
}

func (s *Create_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_view(s)
	}
}

func (s *Create_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_view(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_view() (localctx ICreate_viewContext) {
	this := p
	_ = this

	localctx = NewCreate_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 516, SnowflakeParserRULE_create_view)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8717)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(8719)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(8718)
			p.Or_replace()
		}

	}
	p.SetState(8722)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSECURE {
		{
			p.SetState(8721)
			p.Match(SnowflakeParserSECURE)
		}

	}
	p.SetState(8725)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserRECURSIVE {
		{
			p.SetState(8724)
			p.Match(SnowflakeParserRECURSIVE)
		}

	}
	{
		p.SetState(8727)
		p.Match(SnowflakeParserVIEW)
	}
	p.SetState(8729)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8728)
			p.If_not_exists()
		}

	}
	{
		p.SetState(8731)
		p.Object_name()
	}
	p.SetState(8736)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLR_BRACKET {
		{
			p.SetState(8732)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(8733)
			p.Column_list()
		}
		{
			p.SetState(8734)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	p.SetState(8741)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
		{
			p.SetState(8738)
			p.View_col()
		}


		p.SetState(8743)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(8745)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1108, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8744)
			p.With_row_access_policy()
		}


	}
	p.SetState(8748)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTAG || _la == SnowflakeParserWITH {
		{
			p.SetState(8747)
			p.With_tags()
		}

	}
	p.SetState(8751)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOPY {
		{
			p.SetState(8750)
			p.Copy_grants()
		}

	}
	p.SetState(8754)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCOMMENT {
		{
			p.SetState(8753)
			p.Comment_clause()
		}

	}
	{
		p.SetState(8756)
		p.Match(SnowflakeParserAS)
	}
	{
		p.SetState(8757)
		p.Select_statement()
	}



	return localctx
}


// ICreate_warehouseContext is an interface to support dynamic dispatch.
type ICreate_warehouseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_warehouseContext differentiates from other interfaces.
	IsCreate_warehouseContext()
}

type Create_warehouseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_warehouseContext() *Create_warehouseContext {
	var p = new(Create_warehouseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_create_warehouse
	return p
}

func (*Create_warehouseContext) IsCreate_warehouseContext() {}

func NewCreate_warehouseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_warehouseContext {
	var p = new(Create_warehouseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_create_warehouse

	return p
}

func (s *Create_warehouseContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_warehouseContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCREATE, 0)
}

func (s *Create_warehouseContext) WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE, 0)
}

func (s *Create_warehouseContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_warehouseContext) Or_replace() IOr_replaceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOr_replaceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOr_replaceContext)
}

func (s *Create_warehouseContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_warehouseContext) AllWh_params() []IWh_paramsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWh_paramsContext); ok {
			len++
		}
	}

	tst := make([]IWh_paramsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWh_paramsContext); ok {
			tst[i] = t.(IWh_paramsContext)
			i++
		}
	}

	return tst
}

func (s *Create_warehouseContext) Wh_params(i int) IWh_paramsContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWh_paramsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWh_paramsContext)
}

func (s *Create_warehouseContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Create_warehouseContext) AllWh_properties() []IWh_propertiesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWh_propertiesContext); ok {
			len++
		}
	}

	tst := make([]IWh_propertiesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWh_propertiesContext); ok {
			tst[i] = t.(IWh_propertiesContext)
			i++
		}
	}

	return tst
}

func (s *Create_warehouseContext) Wh_properties(i int) IWh_propertiesContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWh_propertiesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWh_propertiesContext)
}

func (s *Create_warehouseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_warehouseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_warehouseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCreate_warehouse(s)
	}
}

func (s *Create_warehouseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCreate_warehouse(s)
	}
}

func (s *Create_warehouseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCreate_warehouse(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Create_warehouse() (localctx ICreate_warehouseContext) {
	this := p
	_ = this

	localctx = NewCreate_warehouseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 518, SnowflakeParserRULE_create_warehouse)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8759)
		p.Match(SnowflakeParserCREATE)
	}
	p.SetState(8761)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOR {
		{
			p.SetState(8760)
			p.Or_replace()
		}

	}
	{
		p.SetState(8763)
		p.Match(SnowflakeParserWAREHOUSE)
	}
	p.SetState(8765)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8764)
			p.If_not_exists()
		}

	}
	{
		p.SetState(8767)
		p.Id_()
	}
	p.SetState(8776)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1116, p.GetParserRuleContext()) == 1 {
		p.SetState(8769)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserWITH {
			{
				p.SetState(8768)
				p.Match(SnowflakeParserWITH)
			}

		}
		p.SetState(8772)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
					{
						p.SetState(8771)
						p.Wh_properties()
					}




			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(8774)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1115, p.GetParserRuleContext())
		}


	}
	p.SetState(8781)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserMAX_CONCURRENCY_LEVEL || _la == SnowflakeParserSTATEMENT_QUEUED_TIMEOUT_IN_SECONDS || _la == SnowflakeParserSTATEMENT_TIMEOUT_IN_SECONDS {
		{
			p.SetState(8778)
			p.Wh_params()
		}


		p.SetState(8783)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IWh_propertiesContext is an interface to support dynamic dispatch.
type IWh_propertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWh_propertiesContext differentiates from other interfaces.
	IsWh_propertiesContext()
}

type Wh_propertiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWh_propertiesContext() *Wh_propertiesContext {
	var p = new(Wh_propertiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_wh_properties
	return p
}

func (*Wh_propertiesContext) IsWh_propertiesContext() {}

func NewWh_propertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Wh_propertiesContext {
	var p = new(Wh_propertiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_wh_properties

	return p
}

func (s *Wh_propertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *Wh_propertiesContext) WAREHOUSE_SIZE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE_SIZE, 0)
}

func (s *Wh_propertiesContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Wh_propertiesContext) XSMALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserXSMALL, 0)
}

func (s *Wh_propertiesContext) SMALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSMALL, 0)
}

func (s *Wh_propertiesContext) MEDIUM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMEDIUM, 0)
}

func (s *Wh_propertiesContext) LARGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLARGE, 0)
}

func (s *Wh_propertiesContext) XLARGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserXLARGE, 0)
}

func (s *Wh_propertiesContext) XXLARGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserXXLARGE, 0)
}

func (s *Wh_propertiesContext) XXXLARGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserXXXLARGE, 0)
}

func (s *Wh_propertiesContext) X4LARGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserX4LARGE, 0)
}

func (s *Wh_propertiesContext) X5LARGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserX5LARGE, 0)
}

func (s *Wh_propertiesContext) X6LARGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserX6LARGE, 0)
}

func (s *Wh_propertiesContext) MAX_CLUSTER_COUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_CLUSTER_COUNT, 0)
}

func (s *Wh_propertiesContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Wh_propertiesContext) MIN_CLUSTER_COUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMIN_CLUSTER_COUNT, 0)
}

func (s *Wh_propertiesContext) SCALING_POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCALING_POLICY, 0)
}

func (s *Wh_propertiesContext) STANDARD() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTANDARD, 0)
}

func (s *Wh_propertiesContext) ECONOMY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserECONOMY, 0)
}

func (s *Wh_propertiesContext) AUTO_SUSPEND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTO_SUSPEND, 0)
}

func (s *Wh_propertiesContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, 0)
}

func (s *Wh_propertiesContext) AUTO_RESUME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTO_RESUME, 0)
}

func (s *Wh_propertiesContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *Wh_propertiesContext) INITIALLY_SUSPENDED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINITIALLY_SUSPENDED, 0)
}

func (s *Wh_propertiesContext) RESOURCE_MONITOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESOURCE_MONITOR, 0)
}

func (s *Wh_propertiesContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Wh_propertiesContext) Comment_clause() IComment_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComment_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComment_clauseContext)
}

func (s *Wh_propertiesContext) ENABLE_QUERY_ACCELERATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserENABLE_QUERY_ACCELERATION, 0)
}

func (s *Wh_propertiesContext) QUERY_ACCELERATION_MAX_SCALE_FACTOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserQUERY_ACCELERATION_MAX_SCALE_FACTOR, 0)
}

func (s *Wh_propertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Wh_propertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Wh_propertiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterWh_properties(s)
	}
}

func (s *Wh_propertiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitWh_properties(s)
	}
}

func (s *Wh_propertiesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitWh_properties(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Wh_properties() (localctx IWh_propertiesContext) {
	this := p
	_ = this

	localctx = NewWh_propertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, SnowflakeParserRULE_wh_properties)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8819)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserWAREHOUSE_SIZE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8784)
			p.Match(SnowflakeParserWAREHOUSE_SIZE)
		}
		{
			p.SetState(8785)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8786)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserLARGE || _la == SnowflakeParserMEDIUM || _la == SnowflakeParserSMALL || (int64((_la - 989)) & ^0x3f) == 0 && ((int64(1) << (_la - 989)) & 463) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SnowflakeParserMAX_CLUSTER_COUNT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8787)
			p.Match(SnowflakeParserMAX_CLUSTER_COUNT)
		}
		{
			p.SetState(8788)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8789)
			p.Num()
		}


	case SnowflakeParserMIN_CLUSTER_COUNT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8790)
			p.Match(SnowflakeParserMIN_CLUSTER_COUNT)
		}
		{
			p.SetState(8791)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8792)
			p.Num()
		}


	case SnowflakeParserSCALING_POLICY:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8793)
			p.Match(SnowflakeParserSCALING_POLICY)
		}
		{
			p.SetState(8794)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8795)
			p.Match(SnowflakeParserSTANDARD)
		}


	case SnowflakeParserECONOMY:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(8796)
			p.Match(SnowflakeParserECONOMY)
		}


	case SnowflakeParserAUTO_SUSPEND:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(8797)
			p.Match(SnowflakeParserAUTO_SUSPEND)
		}
		p.SetState(8801)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserEQ:
			{
				p.SetState(8798)
				p.Match(SnowflakeParserEQ)
			}
			{
				p.SetState(8799)
				p.Num()
			}


		case SnowflakeParserNULL_:
			{
				p.SetState(8800)
				p.Match(SnowflakeParserNULL_)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SnowflakeParserAUTO_RESUME:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(8803)
			p.Match(SnowflakeParserAUTO_RESUME)
		}
		{
			p.SetState(8804)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8805)
			p.True_false()
		}


	case SnowflakeParserINITIALLY_SUSPENDED:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(8806)
			p.Match(SnowflakeParserINITIALLY_SUSPENDED)
		}
		{
			p.SetState(8807)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8808)
			p.True_false()
		}


	case SnowflakeParserRESOURCE_MONITOR:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(8809)
			p.Match(SnowflakeParserRESOURCE_MONITOR)
		}
		{
			p.SetState(8810)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8811)
			p.Id_()
		}


	case SnowflakeParserCOMMENT:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(8812)
			p.Comment_clause()
		}


	case SnowflakeParserENABLE_QUERY_ACCELERATION:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(8813)
			p.Match(SnowflakeParserENABLE_QUERY_ACCELERATION)
		}
		{
			p.SetState(8814)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8815)
			p.True_false()
		}


	case SnowflakeParserQUERY_ACCELERATION_MAX_SCALE_FACTOR:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(8816)
			p.Match(SnowflakeParserQUERY_ACCELERATION_MAX_SCALE_FACTOR)
		}
		{
			p.SetState(8817)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8818)
			p.Num()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IWh_paramsContext is an interface to support dynamic dispatch.
type IWh_paramsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWh_paramsContext differentiates from other interfaces.
	IsWh_paramsContext()
}

type Wh_paramsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWh_paramsContext() *Wh_paramsContext {
	var p = new(Wh_paramsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_wh_params
	return p
}

func (*Wh_paramsContext) IsWh_paramsContext() {}

func NewWh_paramsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Wh_paramsContext {
	var p = new(Wh_paramsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_wh_params

	return p
}

func (s *Wh_paramsContext) GetParser() antlr.Parser { return s.parser }

func (s *Wh_paramsContext) MAX_CONCURRENCY_LEVEL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMAX_CONCURRENCY_LEVEL, 0)
}

func (s *Wh_paramsContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Wh_paramsContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Wh_paramsContext) STATEMENT_QUEUED_TIMEOUT_IN_SECONDS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTATEMENT_QUEUED_TIMEOUT_IN_SECONDS, 0)
}

func (s *Wh_paramsContext) STATEMENT_TIMEOUT_IN_SECONDS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTATEMENT_TIMEOUT_IN_SECONDS, 0)
}

func (s *Wh_paramsContext) With_tags() IWith_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_tagsContext)
}

func (s *Wh_paramsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Wh_paramsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Wh_paramsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterWh_params(s)
	}
}

func (s *Wh_paramsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitWh_params(s)
	}
}

func (s *Wh_paramsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitWh_params(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Wh_params() (localctx IWh_paramsContext) {
	this := p
	_ = this

	localctx = NewWh_paramsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, SnowflakeParserRULE_wh_params)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8833)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserMAX_CONCURRENCY_LEVEL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8821)
			p.Match(SnowflakeParserMAX_CONCURRENCY_LEVEL)
		}
		{
			p.SetState(8822)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8823)
			p.Num()
		}


	case SnowflakeParserSTATEMENT_QUEUED_TIMEOUT_IN_SECONDS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8824)
			p.Match(SnowflakeParserSTATEMENT_QUEUED_TIMEOUT_IN_SECONDS)
		}
		{
			p.SetState(8825)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8826)
			p.Num()
		}


	case SnowflakeParserSTATEMENT_TIMEOUT_IN_SECONDS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8827)
			p.Match(SnowflakeParserSTATEMENT_TIMEOUT_IN_SECONDS)
		}
		{
			p.SetState(8828)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(8829)
			p.Num()
		}
		p.SetState(8831)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1120, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8830)
				p.With_tags()
			}


		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ITrigger_definitionContext is an interface to support dynamic dispatch.
type ITrigger_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrigger_definitionContext differentiates from other interfaces.
	IsTrigger_definitionContext()
}

type Trigger_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrigger_definitionContext() *Trigger_definitionContext {
	var p = new(Trigger_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_trigger_definition
	return p
}

func (*Trigger_definitionContext) IsTrigger_definitionContext() {}

func NewTrigger_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Trigger_definitionContext {
	var p = new(Trigger_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_trigger_definition

	return p
}

func (s *Trigger_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Trigger_definitionContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Trigger_definitionContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Trigger_definitionContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPERCENT, 0)
}

func (s *Trigger_definitionContext) DO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDO, 0)
}

func (s *Trigger_definitionContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND, 0)
}

func (s *Trigger_definitionContext) SUSPEND_IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPEND_IMMEDIATE, 0)
}

func (s *Trigger_definitionContext) NOTIFY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOTIFY, 0)
}

func (s *Trigger_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Trigger_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Trigger_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTrigger_definition(s)
	}
}

func (s *Trigger_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTrigger_definition(s)
	}
}

func (s *Trigger_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTrigger_definition(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Trigger_definition() (localctx ITrigger_definitionContext) {
	this := p
	_ = this

	localctx = NewTrigger_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, SnowflakeParserRULE_trigger_definition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8835)
		p.Match(SnowflakeParserON)
	}
	{
		p.SetState(8836)
		p.Num()
	}
	{
		p.SetState(8837)
		p.Match(SnowflakeParserPERCENT)
	}
	{
		p.SetState(8838)
		p.Match(SnowflakeParserDO)
	}
	{
		p.SetState(8839)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserNOTIFY || _la == SnowflakeParserSUSPEND || _la == SnowflakeParserSUSPEND_IMMEDIATE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IObject_type_nameContext is an interface to support dynamic dispatch.
type IObject_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObject_type_nameContext differentiates from other interfaces.
	IsObject_type_nameContext()
}

type Object_type_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObject_type_nameContext() *Object_type_nameContext {
	var p = new(Object_type_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_object_type_name
	return p
}

func (*Object_type_nameContext) IsObject_type_nameContext() {}

func NewObject_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Object_type_nameContext {
	var p = new(Object_type_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_object_type_name

	return p
}

func (s *Object_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Object_type_nameContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, 0)
}

func (s *Object_type_nameContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Object_type_nameContext) WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE, 0)
}

func (s *Object_type_nameContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Object_type_nameContext) NETWORK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK, 0)
}

func (s *Object_type_nameContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Object_type_nameContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION, 0)
}

func (s *Object_type_nameContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Object_type_nameContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Object_type_nameContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Object_type_nameContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Object_type_nameContext) STAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE, 0)
}

func (s *Object_type_nameContext) FILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE, 0)
}

func (s *Object_type_nameContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORMAT, 0)
}

func (s *Object_type_nameContext) STREAM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTREAM, 0)
}

func (s *Object_type_nameContext) TASK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTASK, 0)
}

func (s *Object_type_nameContext) MASKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, 0)
}

func (s *Object_type_nameContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *Object_type_nameContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, 0)
}

func (s *Object_type_nameContext) TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTAG, 0)
}

func (s *Object_type_nameContext) PIPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPIPE, 0)
}

func (s *Object_type_nameContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUNCTION, 0)
}

func (s *Object_type_nameContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPROCEDURE, 0)
}

func (s *Object_type_nameContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEQUENCE, 0)
}

func (s *Object_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Object_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Object_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterObject_type_name(s)
	}
}

func (s *Object_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitObject_type_name(s)
	}
}

func (s *Object_type_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitObject_type_name(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Object_type_name() (localctx IObject_type_nameContext) {
	this := p
	_ = this

	localctx = NewObject_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, SnowflakeParserRULE_object_type_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8868)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserROLE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8841)
			p.Match(SnowflakeParserROLE)
		}


	case SnowflakeParserUSER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8842)
			p.Match(SnowflakeParserUSER)
		}


	case SnowflakeParserWAREHOUSE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8843)
			p.Match(SnowflakeParserWAREHOUSE)
		}


	case SnowflakeParserINTEGRATION:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8844)
			p.Match(SnowflakeParserINTEGRATION)
		}


	case SnowflakeParserNETWORK:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(8845)
			p.Match(SnowflakeParserNETWORK)
		}
		{
			p.SetState(8846)
			p.Match(SnowflakeParserPOLICY)
		}


	case SnowflakeParserSESSION:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(8847)
			p.Match(SnowflakeParserSESSION)
		}
		{
			p.SetState(8848)
			p.Match(SnowflakeParserPOLICY)
		}


	case SnowflakeParserDATABASE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(8849)
			p.Match(SnowflakeParserDATABASE)
		}


	case SnowflakeParserSCHEMA:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(8850)
			p.Match(SnowflakeParserSCHEMA)
		}


	case SnowflakeParserTABLE:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(8851)
			p.Match(SnowflakeParserTABLE)
		}


	case SnowflakeParserVIEW:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(8852)
			p.Match(SnowflakeParserVIEW)
		}


	case SnowflakeParserSTAGE:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(8853)
			p.Match(SnowflakeParserSTAGE)
		}


	case SnowflakeParserFILE:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(8854)
			p.Match(SnowflakeParserFILE)
		}
		{
			p.SetState(8855)
			p.Match(SnowflakeParserFORMAT)
		}


	case SnowflakeParserSTREAM:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(8856)
			p.Match(SnowflakeParserSTREAM)
		}


	case SnowflakeParserTASK:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(8857)
			p.Match(SnowflakeParserTASK)
		}


	case SnowflakeParserMASKING:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(8858)
			p.Match(SnowflakeParserMASKING)
		}
		{
			p.SetState(8859)
			p.Match(SnowflakeParserPOLICY)
		}


	case SnowflakeParserROW:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(8860)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(8861)
			p.Match(SnowflakeParserACCESS)
		}
		{
			p.SetState(8862)
			p.Match(SnowflakeParserPOLICY)
		}


	case SnowflakeParserTAG:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(8863)
			p.Match(SnowflakeParserTAG)
		}


	case SnowflakeParserPIPE:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(8864)
			p.Match(SnowflakeParserPIPE)
		}


	case SnowflakeParserFUNCTION:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(8865)
			p.Match(SnowflakeParserFUNCTION)
		}


	case SnowflakeParserPROCEDURE:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(8866)
			p.Match(SnowflakeParserPROCEDURE)
		}


	case SnowflakeParserSEQUENCE:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(8867)
			p.Match(SnowflakeParserSEQUENCE)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IObject_type_pluralContext is an interface to support dynamic dispatch.
type IObject_type_pluralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObject_type_pluralContext differentiates from other interfaces.
	IsObject_type_pluralContext()
}

type Object_type_pluralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObject_type_pluralContext() *Object_type_pluralContext {
	var p = new(Object_type_pluralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_object_type_plural
	return p
}

func (*Object_type_pluralContext) IsObject_type_pluralContext() {}

func NewObject_type_pluralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Object_type_pluralContext {
	var p = new(Object_type_pluralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_object_type_plural

	return p
}

func (s *Object_type_pluralContext) GetParser() antlr.Parser { return s.parser }

func (s *Object_type_pluralContext) ROLES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLES, 0)
}

func (s *Object_type_pluralContext) USERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSERS, 0)
}

func (s *Object_type_pluralContext) WAREHOUSES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSES, 0)
}

func (s *Object_type_pluralContext) INTEGRATIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATIONS, 0)
}

func (s *Object_type_pluralContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASES, 0)
}

func (s *Object_type_pluralContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMAS, 0)
}

func (s *Object_type_pluralContext) TABLES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLES, 0)
}

func (s *Object_type_pluralContext) VIEWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEWS, 0)
}

func (s *Object_type_pluralContext) STAGES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGES, 0)
}

func (s *Object_type_pluralContext) STREAMS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTREAMS, 0)
}

func (s *Object_type_pluralContext) TASKS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTASKS, 0)
}

func (s *Object_type_pluralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Object_type_pluralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Object_type_pluralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterObject_type_plural(s)
	}
}

func (s *Object_type_pluralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitObject_type_plural(s)
	}
}

func (s *Object_type_pluralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitObject_type_plural(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Object_type_plural() (localctx IObject_type_pluralContext) {
	this := p
	_ = this

	localctx = NewObject_type_pluralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, SnowflakeParserRULE_object_type_plural)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8870)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserDATABASES || _la == SnowflakeParserINTEGRATIONS || _la == SnowflakeParserROLES || _la == SnowflakeParserSCHEMAS || (int64((_la - 798)) & ^0x3f) == 0 && ((int64(1) << (_la - 798)) & 144115196665790465) != 0 || _la == SnowflakeParserTASKS || (int64((_la - 953)) & ^0x3f) == 0 && ((int64(1) << (_la - 953)) & 4259841) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IDrop_commandContext is an interface to support dynamic dispatch.
type IDrop_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_commandContext differentiates from other interfaces.
	IsDrop_commandContext()
}

type Drop_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_commandContext() *Drop_commandContext {
	var p = new(Drop_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_command
	return p
}

func (*Drop_commandContext) IsDrop_commandContext() {}

func NewDrop_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_commandContext {
	var p = new(Drop_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_command

	return p
}

func (s *Drop_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_commandContext) Drop_object() IDrop_objectContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_objectContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_objectContext)
}

func (s *Drop_commandContext) Drop_connection() IDrop_connectionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_connectionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_connectionContext)
}

func (s *Drop_commandContext) Drop_database() IDrop_databaseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_databaseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_databaseContext)
}

func (s *Drop_commandContext) Drop_external_table() IDrop_external_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_external_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_external_tableContext)
}

func (s *Drop_commandContext) Drop_failover_group() IDrop_failover_groupContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_failover_groupContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_failover_groupContext)
}

func (s *Drop_commandContext) Drop_file_format() IDrop_file_formatContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_file_formatContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_file_formatContext)
}

func (s *Drop_commandContext) Drop_function() IDrop_functionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_functionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_functionContext)
}

func (s *Drop_commandContext) Drop_integration() IDrop_integrationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_integrationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_integrationContext)
}

func (s *Drop_commandContext) Drop_managed_account() IDrop_managed_accountContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_managed_accountContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_managed_accountContext)
}

func (s *Drop_commandContext) Drop_masking_policy() IDrop_masking_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_masking_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_masking_policyContext)
}

func (s *Drop_commandContext) Drop_materialized_view() IDrop_materialized_viewContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_materialized_viewContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_materialized_viewContext)
}

func (s *Drop_commandContext) Drop_network_policy() IDrop_network_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_network_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_network_policyContext)
}

func (s *Drop_commandContext) Drop_pipe() IDrop_pipeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_pipeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_pipeContext)
}

func (s *Drop_commandContext) Drop_procedure() IDrop_procedureContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_procedureContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_procedureContext)
}

func (s *Drop_commandContext) Drop_replication_group() IDrop_replication_groupContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_replication_groupContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_replication_groupContext)
}

func (s *Drop_commandContext) Drop_resource_monitor() IDrop_resource_monitorContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_resource_monitorContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_resource_monitorContext)
}

func (s *Drop_commandContext) Drop_role() IDrop_roleContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_roleContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_roleContext)
}

func (s *Drop_commandContext) Drop_row_access_policy() IDrop_row_access_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_row_access_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_row_access_policyContext)
}

func (s *Drop_commandContext) Drop_schema() IDrop_schemaContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_schemaContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_schemaContext)
}

func (s *Drop_commandContext) Drop_sequence() IDrop_sequenceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_sequenceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_sequenceContext)
}

func (s *Drop_commandContext) Drop_session_policy() IDrop_session_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_session_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_session_policyContext)
}

func (s *Drop_commandContext) Drop_share() IDrop_shareContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_shareContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_shareContext)
}

func (s *Drop_commandContext) Drop_stage() IDrop_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_stageContext)
}

func (s *Drop_commandContext) Drop_stream() IDrop_streamContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_streamContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_streamContext)
}

func (s *Drop_commandContext) Drop_table() IDrop_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_tableContext)
}

func (s *Drop_commandContext) Drop_tag() IDrop_tagContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_tagContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_tagContext)
}

func (s *Drop_commandContext) Drop_task() IDrop_taskContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_taskContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_taskContext)
}

func (s *Drop_commandContext) Drop_user() IDrop_userContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_userContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_userContext)
}

func (s *Drop_commandContext) Drop_view() IDrop_viewContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_viewContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_viewContext)
}

func (s *Drop_commandContext) Drop_warehouse() IDrop_warehouseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_warehouseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_warehouseContext)
}

func (s *Drop_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_command(s)
	}
}

func (s *Drop_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_command(s)
	}
}

func (s *Drop_commandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_command(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_command() (localctx IDrop_commandContext) {
	this := p
	_ = this

	localctx = NewDrop_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, SnowflakeParserRULE_drop_command)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8902)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1123, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8872)
			p.Drop_object()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8873)
			p.Drop_connection()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8874)
			p.Drop_database()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8875)
			p.Drop_external_table()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(8876)
			p.Drop_failover_group()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(8877)
			p.Drop_file_format()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(8878)
			p.Drop_function()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(8879)
			p.Drop_integration()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(8880)
			p.Drop_managed_account()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(8881)
			p.Drop_masking_policy()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(8882)
			p.Drop_materialized_view()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(8883)
			p.Drop_network_policy()
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(8884)
			p.Drop_pipe()
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(8885)
			p.Drop_procedure()
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(8886)
			p.Drop_replication_group()
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(8887)
			p.Drop_resource_monitor()
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(8888)
			p.Drop_role()
		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(8889)
			p.Drop_row_access_policy()
		}


	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(8890)
			p.Drop_schema()
		}


	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(8891)
			p.Drop_sequence()
		}


	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(8892)
			p.Drop_session_policy()
		}


	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(8893)
			p.Drop_share()
		}


	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(8894)
			p.Drop_stage()
		}


	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(8895)
			p.Drop_stream()
		}


	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(8896)
			p.Drop_table()
		}


	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(8897)
			p.Drop_tag()
		}


	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(8898)
			p.Drop_task()
		}


	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(8899)
			p.Drop_user()
		}


	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(8900)
			p.Drop_view()
		}


	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(8901)
			p.Drop_warehouse()
		}

	}


	return localctx
}


// IDrop_objectContext is an interface to support dynamic dispatch.
type IDrop_objectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_objectContext differentiates from other interfaces.
	IsDrop_objectContext()
}

type Drop_objectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_objectContext() *Drop_objectContext {
	var p = new(Drop_objectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_object
	return p
}

func (*Drop_objectContext) IsDrop_objectContext() {}

func NewDrop_objectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_objectContext {
	var p = new(Drop_objectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_object

	return p
}

func (s *Drop_objectContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_objectContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_objectContext) Object_type() IObject_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_typeContext)
}

func (s *Drop_objectContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_objectContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_objectContext) Cascade_restrict() ICascade_restrictContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICascade_restrictContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_objectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_objectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_objectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_object(s)
	}
}

func (s *Drop_objectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_object(s)
	}
}

func (s *Drop_objectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_object(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_object() (localctx IDrop_objectContext) {
	this := p
	_ = this

	localctx = NewDrop_objectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, SnowflakeParserRULE_drop_object)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8904)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(8905)
		p.Object_type()
	}
	{
		p.SetState(8906)
		p.If_exists()
	}
	{
		p.SetState(8907)
		p.Id_()
	}
	p.SetState(8909)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCASCADE || _la == SnowflakeParserRESTRICT {
		{
			p.SetState(8908)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IDrop_connectionContext is an interface to support dynamic dispatch.
type IDrop_connectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_connectionContext differentiates from other interfaces.
	IsDrop_connectionContext()
}

type Drop_connectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_connectionContext() *Drop_connectionContext {
	var p = new(Drop_connectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_connection
	return p
}

func (*Drop_connectionContext) IsDrop_connectionContext() {}

func NewDrop_connectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_connectionContext {
	var p = new(Drop_connectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_connection

	return p
}

func (s *Drop_connectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_connectionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_connectionContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCONNECTION, 0)
}

func (s *Drop_connectionContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_connectionContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_connectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_connectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_connectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_connection(s)
	}
}

func (s *Drop_connectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_connection(s)
	}
}

func (s *Drop_connectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_connection(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_connection() (localctx IDrop_connectionContext) {
	this := p
	_ = this

	localctx = NewDrop_connectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 534, SnowflakeParserRULE_drop_connection)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8911)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(8912)
		p.Match(SnowflakeParserCONNECTION)
	}
	p.SetState(8914)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8913)
			p.If_exists()
		}

	}
	{
		p.SetState(8916)
		p.Id_()
	}



	return localctx
}


// IDrop_databaseContext is an interface to support dynamic dispatch.
type IDrop_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_databaseContext differentiates from other interfaces.
	IsDrop_databaseContext()
}

type Drop_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_databaseContext() *Drop_databaseContext {
	var p = new(Drop_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_database
	return p
}

func (*Drop_databaseContext) IsDrop_databaseContext() {}

func NewDrop_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_databaseContext {
	var p = new(Drop_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_database

	return p
}

func (s *Drop_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_databaseContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Drop_databaseContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_databaseContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_databaseContext) Cascade_restrict() ICascade_restrictContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICascade_restrictContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_database(s)
	}
}

func (s *Drop_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_database(s)
	}
}

func (s *Drop_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_database(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_database() (localctx IDrop_databaseContext) {
	this := p
	_ = this

	localctx = NewDrop_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 536, SnowflakeParserRULE_drop_database)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8918)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(8919)
		p.Match(SnowflakeParserDATABASE)
	}
	p.SetState(8921)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8920)
			p.If_exists()
		}

	}
	{
		p.SetState(8923)
		p.Id_()
	}
	p.SetState(8925)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCASCADE || _la == SnowflakeParserRESTRICT {
		{
			p.SetState(8924)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IDrop_external_tableContext is an interface to support dynamic dispatch.
type IDrop_external_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_external_tableContext differentiates from other interfaces.
	IsDrop_external_tableContext()
}

type Drop_external_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_external_tableContext() *Drop_external_tableContext {
	var p = new(Drop_external_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_external_table
	return p
}

func (*Drop_external_tableContext) IsDrop_external_tableContext() {}

func NewDrop_external_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_external_tableContext {
	var p = new(Drop_external_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_external_table

	return p
}

func (s *Drop_external_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_external_tableContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_external_tableContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL, 0)
}

func (s *Drop_external_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Drop_external_tableContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Drop_external_tableContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_external_tableContext) Cascade_restrict() ICascade_restrictContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICascade_restrictContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_external_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_external_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_external_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_external_table(s)
	}
}

func (s *Drop_external_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_external_table(s)
	}
}

func (s *Drop_external_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_external_table(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_external_table() (localctx IDrop_external_tableContext) {
	this := p
	_ = this

	localctx = NewDrop_external_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 538, SnowflakeParserRULE_drop_external_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8927)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(8928)
		p.Match(SnowflakeParserEXTERNAL)
	}
	{
		p.SetState(8929)
		p.Match(SnowflakeParserTABLE)
	}
	p.SetState(8931)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8930)
			p.If_exists()
		}

	}
	{
		p.SetState(8933)
		p.Object_name()
	}
	p.SetState(8935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCASCADE || _la == SnowflakeParserRESTRICT {
		{
			p.SetState(8934)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IDrop_failover_groupContext is an interface to support dynamic dispatch.
type IDrop_failover_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_failover_groupContext differentiates from other interfaces.
	IsDrop_failover_groupContext()
}

type Drop_failover_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_failover_groupContext() *Drop_failover_groupContext {
	var p = new(Drop_failover_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_failover_group
	return p
}

func (*Drop_failover_groupContext) IsDrop_failover_groupContext() {}

func NewDrop_failover_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_failover_groupContext {
	var p = new(Drop_failover_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_failover_group

	return p
}

func (s *Drop_failover_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_failover_groupContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_failover_groupContext) FAILOVER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFAILOVER, 0)
}

func (s *Drop_failover_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUP, 0)
}

func (s *Drop_failover_groupContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_failover_groupContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_failover_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_failover_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_failover_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_failover_group(s)
	}
}

func (s *Drop_failover_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_failover_group(s)
	}
}

func (s *Drop_failover_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_failover_group(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_failover_group() (localctx IDrop_failover_groupContext) {
	this := p
	_ = this

	localctx = NewDrop_failover_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 540, SnowflakeParserRULE_drop_failover_group)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8937)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(8938)
		p.Match(SnowflakeParserFAILOVER)
	}
	{
		p.SetState(8939)
		p.Match(SnowflakeParserGROUP)
	}
	p.SetState(8941)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8940)
			p.If_exists()
		}

	}
	{
		p.SetState(8943)
		p.Id_()
	}



	return localctx
}


// IDrop_file_formatContext is an interface to support dynamic dispatch.
type IDrop_file_formatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_file_formatContext differentiates from other interfaces.
	IsDrop_file_formatContext()
}

type Drop_file_formatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_file_formatContext() *Drop_file_formatContext {
	var p = new(Drop_file_formatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_file_format
	return p
}

func (*Drop_file_formatContext) IsDrop_file_formatContext() {}

func NewDrop_file_formatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_file_formatContext {
	var p = new(Drop_file_formatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_file_format

	return p
}

func (s *Drop_file_formatContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_file_formatContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_file_formatContext) FILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE, 0)
}

func (s *Drop_file_formatContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORMAT, 0)
}

func (s *Drop_file_formatContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_file_formatContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_file_formatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_file_formatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_file_formatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_file_format(s)
	}
}

func (s *Drop_file_formatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_file_format(s)
	}
}

func (s *Drop_file_formatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_file_format(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_file_format() (localctx IDrop_file_formatContext) {
	this := p
	_ = this

	localctx = NewDrop_file_formatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 542, SnowflakeParserRULE_drop_file_format)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8945)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(8946)
		p.Match(SnowflakeParserFILE)
	}
	{
		p.SetState(8947)
		p.Match(SnowflakeParserFORMAT)
	}
	p.SetState(8949)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8948)
			p.If_exists()
		}

	}
	{
		p.SetState(8951)
		p.Id_()
	}



	return localctx
}


// IDrop_functionContext is an interface to support dynamic dispatch.
type IDrop_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_functionContext differentiates from other interfaces.
	IsDrop_functionContext()
}

type Drop_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_functionContext() *Drop_functionContext {
	var p = new(Drop_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_function
	return p
}

func (*Drop_functionContext) IsDrop_functionContext() {}

func NewDrop_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_functionContext {
	var p = new(Drop_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_function

	return p
}

func (s *Drop_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_functionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_functionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUNCTION, 0)
}

func (s *Drop_functionContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Drop_functionContext) Arg_types() IArg_typesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_typesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_typesContext)
}

func (s *Drop_functionContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_function(s)
	}
}

func (s *Drop_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_function(s)
	}
}

func (s *Drop_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_function(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_function() (localctx IDrop_functionContext) {
	this := p
	_ = this

	localctx = NewDrop_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 544, SnowflakeParserRULE_drop_function)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8953)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(8954)
		p.Match(SnowflakeParserFUNCTION)
	}
	p.SetState(8956)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8955)
			p.If_exists()
		}

	}
	{
		p.SetState(8958)
		p.Object_name()
	}
	{
		p.SetState(8959)
		p.Arg_types()
	}



	return localctx
}


// IDrop_integrationContext is an interface to support dynamic dispatch.
type IDrop_integrationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_integrationContext differentiates from other interfaces.
	IsDrop_integrationContext()
}

type Drop_integrationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_integrationContext() *Drop_integrationContext {
	var p = new(Drop_integrationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_integration
	return p
}

func (*Drop_integrationContext) IsDrop_integrationContext() {}

func NewDrop_integrationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_integrationContext {
	var p = new(Drop_integrationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_integration

	return p
}

func (s *Drop_integrationContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_integrationContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_integrationContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Drop_integrationContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_integrationContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_integrationContext) API() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI, 0)
}

func (s *Drop_integrationContext) NOTIFICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOTIFICATION, 0)
}

func (s *Drop_integrationContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Drop_integrationContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE, 0)
}

func (s *Drop_integrationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_integrationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_integrationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_integration(s)
	}
}

func (s *Drop_integrationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_integration(s)
	}
}

func (s *Drop_integrationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_integration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_integration() (localctx IDrop_integrationContext) {
	this := p
	_ = this

	localctx = NewDrop_integrationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 546, SnowflakeParserRULE_drop_integration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8961)
		p.Match(SnowflakeParserDROP)
	}
	p.SetState(8963)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAPI || _la == SnowflakeParserNOTIFICATION || _la == SnowflakeParserSECURITY || _la == SnowflakeParserSTORAGE {
		{
			p.SetState(8962)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserAPI || _la == SnowflakeParserNOTIFICATION || _la == SnowflakeParserSECURITY || _la == SnowflakeParserSTORAGE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(8965)
		p.Match(SnowflakeParserINTEGRATION)
	}
	p.SetState(8967)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8966)
			p.If_exists()
		}

	}
	{
		p.SetState(8969)
		p.Id_()
	}



	return localctx
}


// IDrop_managed_accountContext is an interface to support dynamic dispatch.
type IDrop_managed_accountContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_managed_accountContext differentiates from other interfaces.
	IsDrop_managed_accountContext()
}

type Drop_managed_accountContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_managed_accountContext() *Drop_managed_accountContext {
	var p = new(Drop_managed_accountContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_managed_account
	return p
}

func (*Drop_managed_accountContext) IsDrop_managed_accountContext() {}

func NewDrop_managed_accountContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_managed_accountContext {
	var p = new(Drop_managed_accountContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_managed_account

	return p
}

func (s *Drop_managed_accountContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_managed_accountContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_managed_accountContext) MANAGED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMANAGED, 0)
}

func (s *Drop_managed_accountContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Drop_managed_accountContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_managed_accountContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_managed_accountContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_managed_accountContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_managed_account(s)
	}
}

func (s *Drop_managed_accountContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_managed_account(s)
	}
}

func (s *Drop_managed_accountContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_managed_account(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_managed_account() (localctx IDrop_managed_accountContext) {
	this := p
	_ = this

	localctx = NewDrop_managed_accountContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 548, SnowflakeParserRULE_drop_managed_account)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8971)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(8972)
		p.Match(SnowflakeParserMANAGED)
	}
	{
		p.SetState(8973)
		p.Match(SnowflakeParserACCOUNT)
	}
	{
		p.SetState(8974)
		p.Id_()
	}



	return localctx
}


// IDrop_masking_policyContext is an interface to support dynamic dispatch.
type IDrop_masking_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_masking_policyContext differentiates from other interfaces.
	IsDrop_masking_policyContext()
}

type Drop_masking_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_masking_policyContext() *Drop_masking_policyContext {
	var p = new(Drop_masking_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_masking_policy
	return p
}

func (*Drop_masking_policyContext) IsDrop_masking_policyContext() {}

func NewDrop_masking_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_masking_policyContext {
	var p = new(Drop_masking_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_masking_policy

	return p
}

func (s *Drop_masking_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_masking_policyContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_masking_policyContext) MASKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, 0)
}

func (s *Drop_masking_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Drop_masking_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_masking_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_masking_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_masking_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_masking_policy(s)
	}
}

func (s *Drop_masking_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_masking_policy(s)
	}
}

func (s *Drop_masking_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_masking_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_masking_policy() (localctx IDrop_masking_policyContext) {
	this := p
	_ = this

	localctx = NewDrop_masking_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 550, SnowflakeParserRULE_drop_masking_policy)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8976)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(8977)
		p.Match(SnowflakeParserMASKING)
	}
	{
		p.SetState(8978)
		p.Match(SnowflakeParserPOLICY)
	}
	{
		p.SetState(8979)
		p.Id_()
	}



	return localctx
}


// IDrop_materialized_viewContext is an interface to support dynamic dispatch.
type IDrop_materialized_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_materialized_viewContext differentiates from other interfaces.
	IsDrop_materialized_viewContext()
}

type Drop_materialized_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_materialized_viewContext() *Drop_materialized_viewContext {
	var p = new(Drop_materialized_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_materialized_view
	return p
}

func (*Drop_materialized_viewContext) IsDrop_materialized_viewContext() {}

func NewDrop_materialized_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_materialized_viewContext {
	var p = new(Drop_materialized_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_materialized_view

	return p
}

func (s *Drop_materialized_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_materialized_viewContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_materialized_viewContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATERIALIZED, 0)
}

func (s *Drop_materialized_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Drop_materialized_viewContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Drop_materialized_viewContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_materialized_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_materialized_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_materialized_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_materialized_view(s)
	}
}

func (s *Drop_materialized_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_materialized_view(s)
	}
}

func (s *Drop_materialized_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_materialized_view(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_materialized_view() (localctx IDrop_materialized_viewContext) {
	this := p
	_ = this

	localctx = NewDrop_materialized_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 552, SnowflakeParserRULE_drop_materialized_view)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8981)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(8982)
		p.Match(SnowflakeParserMATERIALIZED)
	}
	{
		p.SetState(8983)
		p.Match(SnowflakeParserVIEW)
	}
	p.SetState(8985)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8984)
			p.If_exists()
		}

	}
	{
		p.SetState(8987)
		p.Object_name()
	}



	return localctx
}


// IDrop_network_policyContext is an interface to support dynamic dispatch.
type IDrop_network_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_network_policyContext differentiates from other interfaces.
	IsDrop_network_policyContext()
}

type Drop_network_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_network_policyContext() *Drop_network_policyContext {
	var p = new(Drop_network_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_network_policy
	return p
}

func (*Drop_network_policyContext) IsDrop_network_policyContext() {}

func NewDrop_network_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_network_policyContext {
	var p = new(Drop_network_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_network_policy

	return p
}

func (s *Drop_network_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_network_policyContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_network_policyContext) NETWORK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK, 0)
}

func (s *Drop_network_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Drop_network_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_network_policyContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_network_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_network_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_network_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_network_policy(s)
	}
}

func (s *Drop_network_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_network_policy(s)
	}
}

func (s *Drop_network_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_network_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_network_policy() (localctx IDrop_network_policyContext) {
	this := p
	_ = this

	localctx = NewDrop_network_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 554, SnowflakeParserRULE_drop_network_policy)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8989)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(8990)
		p.Match(SnowflakeParserNETWORK)
	}
	{
		p.SetState(8991)
		p.Match(SnowflakeParserPOLICY)
	}
	p.SetState(8993)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8992)
			p.If_exists()
		}

	}
	{
		p.SetState(8995)
		p.Id_()
	}



	return localctx
}


// IDrop_pipeContext is an interface to support dynamic dispatch.
type IDrop_pipeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_pipeContext differentiates from other interfaces.
	IsDrop_pipeContext()
}

type Drop_pipeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_pipeContext() *Drop_pipeContext {
	var p = new(Drop_pipeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_pipe
	return p
}

func (*Drop_pipeContext) IsDrop_pipeContext() {}

func NewDrop_pipeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_pipeContext {
	var p = new(Drop_pipeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_pipe

	return p
}

func (s *Drop_pipeContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_pipeContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_pipeContext) PIPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPIPE, 0)
}

func (s *Drop_pipeContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Drop_pipeContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_pipeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_pipeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_pipeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_pipe(s)
	}
}

func (s *Drop_pipeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_pipe(s)
	}
}

func (s *Drop_pipeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_pipe(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_pipe() (localctx IDrop_pipeContext) {
	this := p
	_ = this

	localctx = NewDrop_pipeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 556, SnowflakeParserRULE_drop_pipe)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8997)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(8998)
		p.Match(SnowflakeParserPIPE)
	}
	p.SetState(9000)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(8999)
			p.If_exists()
		}

	}
	{
		p.SetState(9002)
		p.Object_name()
	}



	return localctx
}


// IDrop_procedureContext is an interface to support dynamic dispatch.
type IDrop_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_procedureContext differentiates from other interfaces.
	IsDrop_procedureContext()
}

type Drop_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_procedureContext() *Drop_procedureContext {
	var p = new(Drop_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_procedure
	return p
}

func (*Drop_procedureContext) IsDrop_procedureContext() {}

func NewDrop_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_procedureContext {
	var p = new(Drop_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_procedure

	return p
}

func (s *Drop_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_procedureContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPROCEDURE, 0)
}

func (s *Drop_procedureContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Drop_procedureContext) Arg_types() IArg_typesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_typesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_typesContext)
}

func (s *Drop_procedureContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_procedure(s)
	}
}

func (s *Drop_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_procedure(s)
	}
}

func (s *Drop_procedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_procedure(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_procedure() (localctx IDrop_procedureContext) {
	this := p
	_ = this

	localctx = NewDrop_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 558, SnowflakeParserRULE_drop_procedure)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9004)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9005)
		p.Match(SnowflakeParserPROCEDURE)
	}
	p.SetState(9007)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9006)
			p.If_exists()
		}

	}
	{
		p.SetState(9009)
		p.Object_name()
	}
	{
		p.SetState(9010)
		p.Arg_types()
	}



	return localctx
}


// IDrop_replication_groupContext is an interface to support dynamic dispatch.
type IDrop_replication_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_replication_groupContext differentiates from other interfaces.
	IsDrop_replication_groupContext()
}

type Drop_replication_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_replication_groupContext() *Drop_replication_groupContext {
	var p = new(Drop_replication_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_replication_group
	return p
}

func (*Drop_replication_groupContext) IsDrop_replication_groupContext() {}

func NewDrop_replication_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_replication_groupContext {
	var p = new(Drop_replication_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_replication_group

	return p
}

func (s *Drop_replication_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_replication_groupContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_replication_groupContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION, 0)
}

func (s *Drop_replication_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUP, 0)
}

func (s *Drop_replication_groupContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_replication_groupContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_replication_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_replication_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_replication_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_replication_group(s)
	}
}

func (s *Drop_replication_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_replication_group(s)
	}
}

func (s *Drop_replication_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_replication_group(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_replication_group() (localctx IDrop_replication_groupContext) {
	this := p
	_ = this

	localctx = NewDrop_replication_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 560, SnowflakeParserRULE_drop_replication_group)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9012)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9013)
		p.Match(SnowflakeParserREPLICATION)
	}
	{
		p.SetState(9014)
		p.Match(SnowflakeParserGROUP)
	}
	p.SetState(9016)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9015)
			p.If_exists()
		}

	}
	{
		p.SetState(9018)
		p.Id_()
	}



	return localctx
}


// IDrop_resource_monitorContext is an interface to support dynamic dispatch.
type IDrop_resource_monitorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_resource_monitorContext differentiates from other interfaces.
	IsDrop_resource_monitorContext()
}

type Drop_resource_monitorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_resource_monitorContext() *Drop_resource_monitorContext {
	var p = new(Drop_resource_monitorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_resource_monitor
	return p
}

func (*Drop_resource_monitorContext) IsDrop_resource_monitorContext() {}

func NewDrop_resource_monitorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_resource_monitorContext {
	var p = new(Drop_resource_monitorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_resource_monitor

	return p
}

func (s *Drop_resource_monitorContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_resource_monitorContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_resource_monitorContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESOURCE, 0)
}

func (s *Drop_resource_monitorContext) MONITOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMONITOR, 0)
}

func (s *Drop_resource_monitorContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_resource_monitorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_resource_monitorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_resource_monitorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_resource_monitor(s)
	}
}

func (s *Drop_resource_monitorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_resource_monitor(s)
	}
}

func (s *Drop_resource_monitorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_resource_monitor(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_resource_monitor() (localctx IDrop_resource_monitorContext) {
	this := p
	_ = this

	localctx = NewDrop_resource_monitorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 562, SnowflakeParserRULE_drop_resource_monitor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9020)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9021)
		p.Match(SnowflakeParserRESOURCE)
	}
	{
		p.SetState(9022)
		p.Match(SnowflakeParserMONITOR)
	}
	{
		p.SetState(9023)
		p.Id_()
	}



	return localctx
}


// IDrop_roleContext is an interface to support dynamic dispatch.
type IDrop_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_roleContext differentiates from other interfaces.
	IsDrop_roleContext()
}

type Drop_roleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_roleContext() *Drop_roleContext {
	var p = new(Drop_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_role
	return p
}

func (*Drop_roleContext) IsDrop_roleContext() {}

func NewDrop_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_roleContext {
	var p = new(Drop_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_role

	return p
}

func (s *Drop_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_roleContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, 0)
}

func (s *Drop_roleContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_roleContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_role(s)
	}
}

func (s *Drop_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_role(s)
	}
}

func (s *Drop_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_role(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_role() (localctx IDrop_roleContext) {
	this := p
	_ = this

	localctx = NewDrop_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 564, SnowflakeParserRULE_drop_role)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9025)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9026)
		p.Match(SnowflakeParserROLE)
	}
	p.SetState(9028)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9027)
			p.If_exists()
		}

	}
	{
		p.SetState(9030)
		p.Id_()
	}



	return localctx
}


// IDrop_row_access_policyContext is an interface to support dynamic dispatch.
type IDrop_row_access_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_row_access_policyContext differentiates from other interfaces.
	IsDrop_row_access_policyContext()
}

type Drop_row_access_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_row_access_policyContext() *Drop_row_access_policyContext {
	var p = new(Drop_row_access_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_row_access_policy
	return p
}

func (*Drop_row_access_policyContext) IsDrop_row_access_policyContext() {}

func NewDrop_row_access_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_row_access_policyContext {
	var p = new(Drop_row_access_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_row_access_policy

	return p
}

func (s *Drop_row_access_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_row_access_policyContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_row_access_policyContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *Drop_row_access_policyContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, 0)
}

func (s *Drop_row_access_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Drop_row_access_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_row_access_policyContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_row_access_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_row_access_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_row_access_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_row_access_policy(s)
	}
}

func (s *Drop_row_access_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_row_access_policy(s)
	}
}

func (s *Drop_row_access_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_row_access_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_row_access_policy() (localctx IDrop_row_access_policyContext) {
	this := p
	_ = this

	localctx = NewDrop_row_access_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 566, SnowflakeParserRULE_drop_row_access_policy)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9032)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9033)
		p.Match(SnowflakeParserROW)
	}
	{
		p.SetState(9034)
		p.Match(SnowflakeParserACCESS)
	}
	{
		p.SetState(9035)
		p.Match(SnowflakeParserPOLICY)
	}
	p.SetState(9037)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9036)
			p.If_exists()
		}

	}
	{
		p.SetState(9039)
		p.Id_()
	}



	return localctx
}


// IDrop_schemaContext is an interface to support dynamic dispatch.
type IDrop_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_schemaContext differentiates from other interfaces.
	IsDrop_schemaContext()
}

type Drop_schemaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_schemaContext() *Drop_schemaContext {
	var p = new(Drop_schemaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_schema
	return p
}

func (*Drop_schemaContext) IsDrop_schemaContext() {}

func NewDrop_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_schemaContext {
	var p = new(Drop_schemaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_schema

	return p
}

func (s *Drop_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_schemaContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_schemaContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Drop_schemaContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Drop_schemaContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_schemaContext) Cascade_restrict() ICascade_restrictContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICascade_restrictContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_schema(s)
	}
}

func (s *Drop_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_schema(s)
	}
}

func (s *Drop_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_schema(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_schema() (localctx IDrop_schemaContext) {
	this := p
	_ = this

	localctx = NewDrop_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 568, SnowflakeParserRULE_drop_schema)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9041)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9042)
		p.Match(SnowflakeParserSCHEMA)
	}
	p.SetState(9044)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9043)
			p.If_exists()
		}

	}
	{
		p.SetState(9046)
		p.Schema_name()
	}
	p.SetState(9048)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCASCADE || _la == SnowflakeParserRESTRICT {
		{
			p.SetState(9047)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IDrop_sequenceContext is an interface to support dynamic dispatch.
type IDrop_sequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_sequenceContext differentiates from other interfaces.
	IsDrop_sequenceContext()
}

type Drop_sequenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_sequenceContext() *Drop_sequenceContext {
	var p = new(Drop_sequenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_sequence
	return p
}

func (*Drop_sequenceContext) IsDrop_sequenceContext() {}

func NewDrop_sequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_sequenceContext {
	var p = new(Drop_sequenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_sequence

	return p
}

func (s *Drop_sequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_sequenceContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_sequenceContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEQUENCE, 0)
}

func (s *Drop_sequenceContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Drop_sequenceContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_sequenceContext) Cascade_restrict() ICascade_restrictContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICascade_restrictContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_sequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_sequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_sequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_sequence(s)
	}
}

func (s *Drop_sequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_sequence(s)
	}
}

func (s *Drop_sequenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_sequence(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_sequence() (localctx IDrop_sequenceContext) {
	this := p
	_ = this

	localctx = NewDrop_sequenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 570, SnowflakeParserRULE_drop_sequence)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9050)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9051)
		p.Match(SnowflakeParserSEQUENCE)
	}
	p.SetState(9053)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9052)
			p.If_exists()
		}

	}
	{
		p.SetState(9055)
		p.Object_name()
	}
	p.SetState(9057)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCASCADE || _la == SnowflakeParserRESTRICT {
		{
			p.SetState(9056)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IDrop_session_policyContext is an interface to support dynamic dispatch.
type IDrop_session_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_session_policyContext differentiates from other interfaces.
	IsDrop_session_policyContext()
}

type Drop_session_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_session_policyContext() *Drop_session_policyContext {
	var p = new(Drop_session_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_session_policy
	return p
}

func (*Drop_session_policyContext) IsDrop_session_policyContext() {}

func NewDrop_session_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_session_policyContext {
	var p = new(Drop_session_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_session_policy

	return p
}

func (s *Drop_session_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_session_policyContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_session_policyContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION, 0)
}

func (s *Drop_session_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Drop_session_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_session_policyContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_session_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_session_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_session_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_session_policy(s)
	}
}

func (s *Drop_session_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_session_policy(s)
	}
}

func (s *Drop_session_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_session_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_session_policy() (localctx IDrop_session_policyContext) {
	this := p
	_ = this

	localctx = NewDrop_session_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 572, SnowflakeParserRULE_drop_session_policy)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9059)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9060)
		p.Match(SnowflakeParserSESSION)
	}
	{
		p.SetState(9061)
		p.Match(SnowflakeParserPOLICY)
	}
	p.SetState(9063)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9062)
			p.If_exists()
		}

	}
	{
		p.SetState(9065)
		p.Id_()
	}



	return localctx
}


// IDrop_shareContext is an interface to support dynamic dispatch.
type IDrop_shareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_shareContext differentiates from other interfaces.
	IsDrop_shareContext()
}

type Drop_shareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_shareContext() *Drop_shareContext {
	var p = new(Drop_shareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_share
	return p
}

func (*Drop_shareContext) IsDrop_shareContext() {}

func NewDrop_shareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_shareContext {
	var p = new(Drop_shareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_share

	return p
}

func (s *Drop_shareContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_shareContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_shareContext) SHARE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARE, 0)
}

func (s *Drop_shareContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_shareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_shareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_shareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_share(s)
	}
}

func (s *Drop_shareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_share(s)
	}
}

func (s *Drop_shareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_share(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_share() (localctx IDrop_shareContext) {
	this := p
	_ = this

	localctx = NewDrop_shareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 574, SnowflakeParserRULE_drop_share)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9067)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9068)
		p.Match(SnowflakeParserSHARE)
	}
	{
		p.SetState(9069)
		p.Id_()
	}



	return localctx
}


// IDrop_stageContext is an interface to support dynamic dispatch.
type IDrop_stageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_stageContext differentiates from other interfaces.
	IsDrop_stageContext()
}

type Drop_stageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_stageContext() *Drop_stageContext {
	var p = new(Drop_stageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_stage
	return p
}

func (*Drop_stageContext) IsDrop_stageContext() {}

func NewDrop_stageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_stageContext {
	var p = new(Drop_stageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_stage

	return p
}

func (s *Drop_stageContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_stageContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_stageContext) STAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE, 0)
}

func (s *Drop_stageContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Drop_stageContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_stageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_stageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_stageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_stage(s)
	}
}

func (s *Drop_stageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_stage(s)
	}
}

func (s *Drop_stageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_stage(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_stage() (localctx IDrop_stageContext) {
	this := p
	_ = this

	localctx = NewDrop_stageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 576, SnowflakeParserRULE_drop_stage)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9071)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9072)
		p.Match(SnowflakeParserSTAGE)
	}
	p.SetState(9074)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9073)
			p.If_exists()
		}

	}
	{
		p.SetState(9076)
		p.Object_name()
	}



	return localctx
}


// IDrop_streamContext is an interface to support dynamic dispatch.
type IDrop_streamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_streamContext differentiates from other interfaces.
	IsDrop_streamContext()
}

type Drop_streamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_streamContext() *Drop_streamContext {
	var p = new(Drop_streamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_stream
	return p
}

func (*Drop_streamContext) IsDrop_streamContext() {}

func NewDrop_streamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_streamContext {
	var p = new(Drop_streamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_stream

	return p
}

func (s *Drop_streamContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_streamContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_streamContext) STREAM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTREAM, 0)
}

func (s *Drop_streamContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Drop_streamContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_streamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_streamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_streamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_stream(s)
	}
}

func (s *Drop_streamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_stream(s)
	}
}

func (s *Drop_streamContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_stream(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_stream() (localctx IDrop_streamContext) {
	this := p
	_ = this

	localctx = NewDrop_streamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 578, SnowflakeParserRULE_drop_stream)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9078)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9079)
		p.Match(SnowflakeParserSTREAM)
	}
	p.SetState(9081)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9080)
			p.If_exists()
		}

	}
	{
		p.SetState(9083)
		p.Object_name()
	}



	return localctx
}


// IDrop_tableContext is an interface to support dynamic dispatch.
type IDrop_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_tableContext differentiates from other interfaces.
	IsDrop_tableContext()
}

type Drop_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_tableContext() *Drop_tableContext {
	var p = new(Drop_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_table
	return p
}

func (*Drop_tableContext) IsDrop_tableContext() {}

func NewDrop_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_tableContext {
	var p = new(Drop_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_table

	return p
}

func (s *Drop_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_tableContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Drop_tableContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Drop_tableContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_tableContext) Cascade_restrict() ICascade_restrictContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICascade_restrictContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_table(s)
	}
}

func (s *Drop_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_table(s)
	}
}

func (s *Drop_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_table(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_table() (localctx IDrop_tableContext) {
	this := p
	_ = this

	localctx = NewDrop_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 580, SnowflakeParserRULE_drop_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9085)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9086)
		p.Match(SnowflakeParserTABLE)
	}
	p.SetState(9088)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9087)
			p.If_exists()
		}

	}
	{
		p.SetState(9090)
		p.Object_name()
	}
	p.SetState(9092)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCASCADE || _la == SnowflakeParserRESTRICT {
		{
			p.SetState(9091)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IDrop_tagContext is an interface to support dynamic dispatch.
type IDrop_tagContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_tagContext differentiates from other interfaces.
	IsDrop_tagContext()
}

type Drop_tagContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_tagContext() *Drop_tagContext {
	var p = new(Drop_tagContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_tag
	return p
}

func (*Drop_tagContext) IsDrop_tagContext() {}

func NewDrop_tagContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_tagContext {
	var p = new(Drop_tagContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_tag

	return p
}

func (s *Drop_tagContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_tagContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_tagContext) TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTAG, 0)
}

func (s *Drop_tagContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_tagContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_tagContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_tagContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_tagContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_tag(s)
	}
}

func (s *Drop_tagContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_tag(s)
	}
}

func (s *Drop_tagContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_tag(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_tag() (localctx IDrop_tagContext) {
	this := p
	_ = this

	localctx = NewDrop_tagContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 582, SnowflakeParserRULE_drop_tag)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9094)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9095)
		p.Match(SnowflakeParserTAG)
	}
	p.SetState(9097)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9096)
			p.If_exists()
		}

	}
	{
		p.SetState(9099)
		p.Id_()
	}



	return localctx
}


// IDrop_taskContext is an interface to support dynamic dispatch.
type IDrop_taskContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_taskContext differentiates from other interfaces.
	IsDrop_taskContext()
}

type Drop_taskContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_taskContext() *Drop_taskContext {
	var p = new(Drop_taskContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_task
	return p
}

func (*Drop_taskContext) IsDrop_taskContext() {}

func NewDrop_taskContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_taskContext {
	var p = new(Drop_taskContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_task

	return p
}

func (s *Drop_taskContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_taskContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_taskContext) TASK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTASK, 0)
}

func (s *Drop_taskContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Drop_taskContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_taskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_taskContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_taskContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_task(s)
	}
}

func (s *Drop_taskContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_task(s)
	}
}

func (s *Drop_taskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_task(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_task() (localctx IDrop_taskContext) {
	this := p
	_ = this

	localctx = NewDrop_taskContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 584, SnowflakeParserRULE_drop_task)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9101)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9102)
		p.Match(SnowflakeParserTASK)
	}
	p.SetState(9104)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9103)
			p.If_exists()
		}

	}
	{
		p.SetState(9106)
		p.Object_name()
	}



	return localctx
}


// IDrop_userContext is an interface to support dynamic dispatch.
type IDrop_userContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_userContext differentiates from other interfaces.
	IsDrop_userContext()
}

type Drop_userContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_userContext() *Drop_userContext {
	var p = new(Drop_userContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_user
	return p
}

func (*Drop_userContext) IsDrop_userContext() {}

func NewDrop_userContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_userContext {
	var p = new(Drop_userContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_user

	return p
}

func (s *Drop_userContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_userContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_userContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Drop_userContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_userContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_userContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_userContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_userContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_user(s)
	}
}

func (s *Drop_userContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_user(s)
	}
}

func (s *Drop_userContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_user(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_user() (localctx IDrop_userContext) {
	this := p
	_ = this

	localctx = NewDrop_userContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 586, SnowflakeParserRULE_drop_user)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9108)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9109)
		p.Match(SnowflakeParserUSER)
	}
	p.SetState(9111)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9110)
			p.If_exists()
		}

	}
	{
		p.SetState(9113)
		p.Id_()
	}



	return localctx
}


// IDrop_viewContext is an interface to support dynamic dispatch.
type IDrop_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_viewContext differentiates from other interfaces.
	IsDrop_viewContext()
}

type Drop_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_viewContext() *Drop_viewContext {
	var p = new(Drop_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_view
	return p
}

func (*Drop_viewContext) IsDrop_viewContext() {}

func NewDrop_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_viewContext {
	var p = new(Drop_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_view

	return p
}

func (s *Drop_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_viewContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Drop_viewContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Drop_viewContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_view(s)
	}
}

func (s *Drop_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_view(s)
	}
}

func (s *Drop_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_view(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_view() (localctx IDrop_viewContext) {
	this := p
	_ = this

	localctx = NewDrop_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 588, SnowflakeParserRULE_drop_view)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9115)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9116)
		p.Match(SnowflakeParserVIEW)
	}
	p.SetState(9118)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9117)
			p.If_exists()
		}

	}
	{
		p.SetState(9120)
		p.Object_name()
	}



	return localctx
}


// IDrop_warehouseContext is an interface to support dynamic dispatch.
type IDrop_warehouseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_warehouseContext differentiates from other interfaces.
	IsDrop_warehouseContext()
}

type Drop_warehouseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_warehouseContext() *Drop_warehouseContext {
	var p = new(Drop_warehouseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_drop_warehouse
	return p
}

func (*Drop_warehouseContext) IsDrop_warehouseContext() {}

func NewDrop_warehouseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_warehouseContext {
	var p = new(Drop_warehouseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_drop_warehouse

	return p
}

func (s *Drop_warehouseContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_warehouseContext) DROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDROP, 0)
}

func (s *Drop_warehouseContext) WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE, 0)
}

func (s *Drop_warehouseContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_warehouseContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_warehouseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_warehouseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_warehouseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDrop_warehouse(s)
	}
}

func (s *Drop_warehouseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDrop_warehouse(s)
	}
}

func (s *Drop_warehouseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDrop_warehouse(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Drop_warehouse() (localctx IDrop_warehouseContext) {
	this := p
	_ = this

	localctx = NewDrop_warehouseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 590, SnowflakeParserRULE_drop_warehouse)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9122)
		p.Match(SnowflakeParserDROP)
	}
	{
		p.SetState(9123)
		p.Match(SnowflakeParserWAREHOUSE)
	}
	p.SetState(9125)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIF {
		{
			p.SetState(9124)
			p.If_exists()
		}

	}
	{
		p.SetState(9127)
		p.Id_()
	}



	return localctx
}


// ICascade_restrictContext is an interface to support dynamic dispatch.
type ICascade_restrictContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCascade_restrictContext differentiates from other interfaces.
	IsCascade_restrictContext()
}

type Cascade_restrictContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCascade_restrictContext() *Cascade_restrictContext {
	var p = new(Cascade_restrictContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_cascade_restrict
	return p
}

func (*Cascade_restrictContext) IsCascade_restrictContext() {}

func NewCascade_restrictContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cascade_restrictContext {
	var p = new(Cascade_restrictContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_cascade_restrict

	return p
}

func (s *Cascade_restrictContext) GetParser() antlr.Parser { return s.parser }

func (s *Cascade_restrictContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCASCADE, 0)
}

func (s *Cascade_restrictContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESTRICT, 0)
}

func (s *Cascade_restrictContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cascade_restrictContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Cascade_restrictContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCascade_restrict(s)
	}
}

func (s *Cascade_restrictContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCascade_restrict(s)
	}
}

func (s *Cascade_restrictContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCascade_restrict(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Cascade_restrict() (localctx ICascade_restrictContext) {
	this := p
	_ = this

	localctx = NewCascade_restrictContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 592, SnowflakeParserRULE_cascade_restrict)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9129)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserCASCADE || _la == SnowflakeParserRESTRICT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IArg_typesContext is an interface to support dynamic dispatch.
type IArg_typesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArg_typesContext differentiates from other interfaces.
	IsArg_typesContext()
}

type Arg_typesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArg_typesContext() *Arg_typesContext {
	var p = new(Arg_typesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_arg_types
	return p
}

func (*Arg_typesContext) IsArg_typesContext() {}

func NewArg_typesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Arg_typesContext {
	var p = new(Arg_typesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_arg_types

	return p
}

func (s *Arg_typesContext) GetParser() antlr.Parser { return s.parser }

func (s *Arg_typesContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Arg_typesContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Arg_typesContext) Data_type_list() IData_type_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_type_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_type_listContext)
}

func (s *Arg_typesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arg_typesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Arg_typesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterArg_types(s)
	}
}

func (s *Arg_typesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitArg_types(s)
	}
}

func (s *Arg_typesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitArg_types(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Arg_types() (localctx IArg_typesContext) {
	this := p
	_ = this

	localctx = NewArg_typesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 594, SnowflakeParserRULE_arg_types)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9131)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(9133)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserCHAR || _la == SnowflakeParserCHARACTER || _la == SnowflakeParserDOUBLE || _la == SnowflakeParserINT || _la == SnowflakeParserNUMBER || _la == SnowflakeParserOBJECT || (int64((_la - 869)) & ^0x3f) == 0 && ((int64(1) << (_la - 869)) & 70721) != 0 || (int64((_la - 1000)) & ^0x3f) == 0 && ((int64(1) << (_la - 1000)) & 133791711) != 0 {
		{
			p.SetState(9132)
			p.Data_type_list()
		}

	}
	{
		p.SetState(9135)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IUndrop_commandContext is an interface to support dynamic dispatch.
type IUndrop_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUndrop_commandContext differentiates from other interfaces.
	IsUndrop_commandContext()
}

type Undrop_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUndrop_commandContext() *Undrop_commandContext {
	var p = new(Undrop_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_undrop_command
	return p
}

func (*Undrop_commandContext) IsUndrop_commandContext() {}

func NewUndrop_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Undrop_commandContext {
	var p = new(Undrop_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_undrop_command

	return p
}

func (s *Undrop_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Undrop_commandContext) Undrop_database() IUndrop_databaseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUndrop_databaseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUndrop_databaseContext)
}

func (s *Undrop_commandContext) Undrop_schema() IUndrop_schemaContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUndrop_schemaContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUndrop_schemaContext)
}

func (s *Undrop_commandContext) Undrop_table() IUndrop_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUndrop_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUndrop_tableContext)
}

func (s *Undrop_commandContext) Undrop_tag() IUndrop_tagContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUndrop_tagContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUndrop_tagContext)
}

func (s *Undrop_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Undrop_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Undrop_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUndrop_command(s)
	}
}

func (s *Undrop_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUndrop_command(s)
	}
}

func (s *Undrop_commandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUndrop_command(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Undrop_command() (localctx IUndrop_commandContext) {
	this := p
	_ = this

	localctx = NewUndrop_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 596, SnowflakeParserRULE_undrop_command)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9141)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1157, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9137)
			p.Undrop_database()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9138)
			p.Undrop_schema()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9139)
			p.Undrop_table()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9140)
			p.Undrop_tag()
		}

	}


	return localctx
}


// IUndrop_databaseContext is an interface to support dynamic dispatch.
type IUndrop_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUndrop_databaseContext differentiates from other interfaces.
	IsUndrop_databaseContext()
}

type Undrop_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUndrop_databaseContext() *Undrop_databaseContext {
	var p = new(Undrop_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_undrop_database
	return p
}

func (*Undrop_databaseContext) IsUndrop_databaseContext() {}

func NewUndrop_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Undrop_databaseContext {
	var p = new(Undrop_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_undrop_database

	return p
}

func (s *Undrop_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Undrop_databaseContext) UNDROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNDROP, 0)
}

func (s *Undrop_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Undrop_databaseContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Undrop_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Undrop_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Undrop_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUndrop_database(s)
	}
}

func (s *Undrop_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUndrop_database(s)
	}
}

func (s *Undrop_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUndrop_database(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Undrop_database() (localctx IUndrop_databaseContext) {
	this := p
	_ = this

	localctx = NewUndrop_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 598, SnowflakeParserRULE_undrop_database)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9143)
		p.Match(SnowflakeParserUNDROP)
	}
	{
		p.SetState(9144)
		p.Match(SnowflakeParserDATABASE)
	}
	{
		p.SetState(9145)
		p.Id_()
	}



	return localctx
}


// IUndrop_schemaContext is an interface to support dynamic dispatch.
type IUndrop_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUndrop_schemaContext differentiates from other interfaces.
	IsUndrop_schemaContext()
}

type Undrop_schemaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUndrop_schemaContext() *Undrop_schemaContext {
	var p = new(Undrop_schemaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_undrop_schema
	return p
}

func (*Undrop_schemaContext) IsUndrop_schemaContext() {}

func NewUndrop_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Undrop_schemaContext {
	var p = new(Undrop_schemaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_undrop_schema

	return p
}

func (s *Undrop_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Undrop_schemaContext) UNDROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNDROP, 0)
}

func (s *Undrop_schemaContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Undrop_schemaContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Undrop_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Undrop_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Undrop_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUndrop_schema(s)
	}
}

func (s *Undrop_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUndrop_schema(s)
	}
}

func (s *Undrop_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUndrop_schema(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Undrop_schema() (localctx IUndrop_schemaContext) {
	this := p
	_ = this

	localctx = NewUndrop_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 600, SnowflakeParserRULE_undrop_schema)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9147)
		p.Match(SnowflakeParserUNDROP)
	}
	{
		p.SetState(9148)
		p.Match(SnowflakeParserSCHEMA)
	}
	{
		p.SetState(9149)
		p.Schema_name()
	}



	return localctx
}


// IUndrop_tableContext is an interface to support dynamic dispatch.
type IUndrop_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUndrop_tableContext differentiates from other interfaces.
	IsUndrop_tableContext()
}

type Undrop_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUndrop_tableContext() *Undrop_tableContext {
	var p = new(Undrop_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_undrop_table
	return p
}

func (*Undrop_tableContext) IsUndrop_tableContext() {}

func NewUndrop_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Undrop_tableContext {
	var p = new(Undrop_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_undrop_table

	return p
}

func (s *Undrop_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Undrop_tableContext) UNDROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNDROP, 0)
}

func (s *Undrop_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Undrop_tableContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Undrop_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Undrop_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Undrop_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUndrop_table(s)
	}
}

func (s *Undrop_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUndrop_table(s)
	}
}

func (s *Undrop_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUndrop_table(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Undrop_table() (localctx IUndrop_tableContext) {
	this := p
	_ = this

	localctx = NewUndrop_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 602, SnowflakeParserRULE_undrop_table)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9151)
		p.Match(SnowflakeParserUNDROP)
	}
	{
		p.SetState(9152)
		p.Match(SnowflakeParserTABLE)
	}
	{
		p.SetState(9153)
		p.Object_name()
	}



	return localctx
}


// IUndrop_tagContext is an interface to support dynamic dispatch.
type IUndrop_tagContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUndrop_tagContext differentiates from other interfaces.
	IsUndrop_tagContext()
}

type Undrop_tagContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUndrop_tagContext() *Undrop_tagContext {
	var p = new(Undrop_tagContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_undrop_tag
	return p
}

func (*Undrop_tagContext) IsUndrop_tagContext() {}

func NewUndrop_tagContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Undrop_tagContext {
	var p = new(Undrop_tagContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_undrop_tag

	return p
}

func (s *Undrop_tagContext) GetParser() antlr.Parser { return s.parser }

func (s *Undrop_tagContext) UNDROP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNDROP, 0)
}

func (s *Undrop_tagContext) TAG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTAG, 0)
}

func (s *Undrop_tagContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Undrop_tagContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Undrop_tagContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Undrop_tagContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUndrop_tag(s)
	}
}

func (s *Undrop_tagContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUndrop_tag(s)
	}
}

func (s *Undrop_tagContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUndrop_tag(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Undrop_tag() (localctx IUndrop_tagContext) {
	this := p
	_ = this

	localctx = NewUndrop_tagContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 604, SnowflakeParserRULE_undrop_tag)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9155)
		p.Match(SnowflakeParserUNDROP)
	}
	{
		p.SetState(9156)
		p.Match(SnowflakeParserTAG)
	}
	{
		p.SetState(9157)
		p.Id_()
	}



	return localctx
}


// IUse_commandContext is an interface to support dynamic dispatch.
type IUse_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUse_commandContext differentiates from other interfaces.
	IsUse_commandContext()
}

type Use_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUse_commandContext() *Use_commandContext {
	var p = new(Use_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_use_command
	return p
}

func (*Use_commandContext) IsUse_commandContext() {}

func NewUse_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_commandContext {
	var p = new(Use_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_use_command

	return p
}

func (s *Use_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_commandContext) Use_database() IUse_databaseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUse_databaseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUse_databaseContext)
}

func (s *Use_commandContext) Use_role() IUse_roleContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUse_roleContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUse_roleContext)
}

func (s *Use_commandContext) Use_schema() IUse_schemaContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUse_schemaContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUse_schemaContext)
}

func (s *Use_commandContext) Use_secondary_roles() IUse_secondary_rolesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUse_secondary_rolesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUse_secondary_rolesContext)
}

func (s *Use_commandContext) Use_warehouse() IUse_warehouseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUse_warehouseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUse_warehouseContext)
}

func (s *Use_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Use_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUse_command(s)
	}
}

func (s *Use_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUse_command(s)
	}
}

func (s *Use_commandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUse_command(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Use_command() (localctx IUse_commandContext) {
	this := p
	_ = this

	localctx = NewUse_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 606, SnowflakeParserRULE_use_command)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9164)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1158, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9159)
			p.Use_database()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9160)
			p.Use_role()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9161)
			p.Use_schema()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9162)
			p.Use_secondary_roles()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(9163)
			p.Use_warehouse()
		}

	}


	return localctx
}


// IUse_databaseContext is an interface to support dynamic dispatch.
type IUse_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUse_databaseContext differentiates from other interfaces.
	IsUse_databaseContext()
}

type Use_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUse_databaseContext() *Use_databaseContext {
	var p = new(Use_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_use_database
	return p
}

func (*Use_databaseContext) IsUse_databaseContext() {}

func NewUse_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_databaseContext {
	var p = new(Use_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_use_database

	return p
}

func (s *Use_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_databaseContext) USE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSE, 0)
}

func (s *Use_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Use_databaseContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Use_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Use_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUse_database(s)
	}
}

func (s *Use_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUse_database(s)
	}
}

func (s *Use_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUse_database(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Use_database() (localctx IUse_databaseContext) {
	this := p
	_ = this

	localctx = NewUse_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 608, SnowflakeParserRULE_use_database)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9166)
		p.Match(SnowflakeParserUSE)
	}
	{
		p.SetState(9167)
		p.Match(SnowflakeParserDATABASE)
	}
	{
		p.SetState(9168)
		p.Id_()
	}



	return localctx
}


// IUse_roleContext is an interface to support dynamic dispatch.
type IUse_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUse_roleContext differentiates from other interfaces.
	IsUse_roleContext()
}

type Use_roleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUse_roleContext() *Use_roleContext {
	var p = new(Use_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_use_role
	return p
}

func (*Use_roleContext) IsUse_roleContext() {}

func NewUse_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_roleContext {
	var p = new(Use_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_use_role

	return p
}

func (s *Use_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_roleContext) USE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSE, 0)
}

func (s *Use_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, 0)
}

func (s *Use_roleContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Use_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Use_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUse_role(s)
	}
}

func (s *Use_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUse_role(s)
	}
}

func (s *Use_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUse_role(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Use_role() (localctx IUse_roleContext) {
	this := p
	_ = this

	localctx = NewUse_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 610, SnowflakeParserRULE_use_role)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9170)
		p.Match(SnowflakeParserUSE)
	}
	{
		p.SetState(9171)
		p.Match(SnowflakeParserROLE)
	}
	{
		p.SetState(9172)
		p.Id_()
	}



	return localctx
}


// IUse_schemaContext is an interface to support dynamic dispatch.
type IUse_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUse_schemaContext differentiates from other interfaces.
	IsUse_schemaContext()
}

type Use_schemaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUse_schemaContext() *Use_schemaContext {
	var p = new(Use_schemaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_use_schema
	return p
}

func (*Use_schemaContext) IsUse_schemaContext() {}

func NewUse_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_schemaContext {
	var p = new(Use_schemaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_use_schema

	return p
}

func (s *Use_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_schemaContext) USE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSE, 0)
}

func (s *Use_schemaContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Use_schemaContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Use_schemaContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Use_schemaContext) DOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, 0)
}

func (s *Use_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Use_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUse_schema(s)
	}
}

func (s *Use_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUse_schema(s)
	}
}

func (s *Use_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUse_schema(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Use_schema() (localctx IUse_schemaContext) {
	this := p
	_ = this

	localctx = NewUse_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 612, SnowflakeParserRULE_use_schema)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9174)
		p.Match(SnowflakeParserUSE)
	}
	p.SetState(9176)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSCHEMA {
		{
			p.SetState(9175)
			p.Match(SnowflakeParserSCHEMA)
		}

	}
	p.SetState(9181)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1160, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(9178)
			p.Id_()
		}
		{
			p.SetState(9179)
			p.Match(SnowflakeParserDOT)
		}


	}
	{
		p.SetState(9183)
		p.Id_()
	}



	return localctx
}


// IUse_secondary_rolesContext is an interface to support dynamic dispatch.
type IUse_secondary_rolesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUse_secondary_rolesContext differentiates from other interfaces.
	IsUse_secondary_rolesContext()
}

type Use_secondary_rolesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUse_secondary_rolesContext() *Use_secondary_rolesContext {
	var p = new(Use_secondary_rolesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_use_secondary_roles
	return p
}

func (*Use_secondary_rolesContext) IsUse_secondary_rolesContext() {}

func NewUse_secondary_rolesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_secondary_rolesContext {
	var p = new(Use_secondary_rolesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_use_secondary_roles

	return p
}

func (s *Use_secondary_rolesContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_secondary_rolesContext) USE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSE, 0)
}

func (s *Use_secondary_rolesContext) SECONDARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECONDARY, 0)
}

func (s *Use_secondary_rolesContext) ROLES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLES, 0)
}

func (s *Use_secondary_rolesContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *Use_secondary_rolesContext) NONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNONE, 0)
}

func (s *Use_secondary_rolesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_secondary_rolesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Use_secondary_rolesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUse_secondary_roles(s)
	}
}

func (s *Use_secondary_rolesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUse_secondary_roles(s)
	}
}

func (s *Use_secondary_rolesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUse_secondary_roles(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Use_secondary_roles() (localctx IUse_secondary_rolesContext) {
	this := p
	_ = this

	localctx = NewUse_secondary_rolesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 614, SnowflakeParserRULE_use_secondary_roles)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9185)
		p.Match(SnowflakeParserUSE)
	}
	{
		p.SetState(9186)
		p.Match(SnowflakeParserSECONDARY)
	}
	{
		p.SetState(9187)
		p.Match(SnowflakeParserROLES)
	}
	{
		p.SetState(9188)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserALL || _la == SnowflakeParserNONE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IUse_warehouseContext is an interface to support dynamic dispatch.
type IUse_warehouseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUse_warehouseContext differentiates from other interfaces.
	IsUse_warehouseContext()
}

type Use_warehouseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUse_warehouseContext() *Use_warehouseContext {
	var p = new(Use_warehouseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_use_warehouse
	return p
}

func (*Use_warehouseContext) IsUse_warehouseContext() {}

func NewUse_warehouseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_warehouseContext {
	var p = new(Use_warehouseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_use_warehouse

	return p
}

func (s *Use_warehouseContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_warehouseContext) USE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSE, 0)
}

func (s *Use_warehouseContext) WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE, 0)
}

func (s *Use_warehouseContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Use_warehouseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_warehouseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Use_warehouseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterUse_warehouse(s)
	}
}

func (s *Use_warehouseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitUse_warehouse(s)
	}
}

func (s *Use_warehouseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitUse_warehouse(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Use_warehouse() (localctx IUse_warehouseContext) {
	this := p
	_ = this

	localctx = NewUse_warehouseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 616, SnowflakeParserRULE_use_warehouse)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9190)
		p.Match(SnowflakeParserUSE)
	}
	{
		p.SetState(9191)
		p.Match(SnowflakeParserWAREHOUSE)
	}
	{
		p.SetState(9192)
		p.Id_()
	}



	return localctx
}


// IComment_clauseContext is an interface to support dynamic dispatch.
type IComment_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComment_clauseContext differentiates from other interfaces.
	IsComment_clauseContext()
}

type Comment_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComment_clauseContext() *Comment_clauseContext {
	var p = new(Comment_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_comment_clause
	return p
}

func (*Comment_clauseContext) IsComment_clauseContext() {}

func NewComment_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comment_clauseContext {
	var p = new(Comment_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_comment_clause

	return p
}

func (s *Comment_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Comment_clauseContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMENT, 0)
}

func (s *Comment_clauseContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Comment_clauseContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Comment_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comment_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Comment_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterComment_clause(s)
	}
}

func (s *Comment_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitComment_clause(s)
	}
}

func (s *Comment_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitComment_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Comment_clause() (localctx IComment_clauseContext) {
	this := p
	_ = this

	localctx = NewComment_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 618, SnowflakeParserRULE_comment_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9194)
		p.Match(SnowflakeParserCOMMENT)
	}
	{
		p.SetState(9195)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(9196)
		p.String_()
	}



	return localctx
}


// IIf_suspendedContext is an interface to support dynamic dispatch.
type IIf_suspendedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_suspendedContext differentiates from other interfaces.
	IsIf_suspendedContext()
}

type If_suspendedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_suspendedContext() *If_suspendedContext {
	var p = new(If_suspendedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_if_suspended
	return p
}

func (*If_suspendedContext) IsIf_suspendedContext() {}

func NewIf_suspendedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_suspendedContext {
	var p = new(If_suspendedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_if_suspended

	return p
}

func (s *If_suspendedContext) GetParser() antlr.Parser { return s.parser }

func (s *If_suspendedContext) IF() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIF, 0)
}

func (s *If_suspendedContext) SUSPENDED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSUSPENDED, 0)
}

func (s *If_suspendedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_suspendedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *If_suspendedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterIf_suspended(s)
	}
}

func (s *If_suspendedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitIf_suspended(s)
	}
}

func (s *If_suspendedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitIf_suspended(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) If_suspended() (localctx IIf_suspendedContext) {
	this := p
	_ = this

	localctx = NewIf_suspendedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 620, SnowflakeParserRULE_if_suspended)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9198)
		p.Match(SnowflakeParserIF)
	}
	{
		p.SetState(9199)
		p.Match(SnowflakeParserSUSPENDED)
	}



	return localctx
}


// IIf_existsContext is an interface to support dynamic dispatch.
type IIf_existsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_existsContext differentiates from other interfaces.
	IsIf_existsContext()
}

type If_existsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_existsContext() *If_existsContext {
	var p = new(If_existsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_if_exists
	return p
}

func (*If_existsContext) IsIf_existsContext() {}

func NewIf_existsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_existsContext {
	var p = new(If_existsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_if_exists

	return p
}

func (s *If_existsContext) GetParser() antlr.Parser { return s.parser }

func (s *If_existsContext) IF() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIF, 0)
}

func (s *If_existsContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXISTS, 0)
}

func (s *If_existsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_existsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *If_existsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterIf_exists(s)
	}
}

func (s *If_existsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitIf_exists(s)
	}
}

func (s *If_existsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitIf_exists(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) If_exists() (localctx IIf_existsContext) {
	this := p
	_ = this

	localctx = NewIf_existsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 622, SnowflakeParserRULE_if_exists)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9201)
		p.Match(SnowflakeParserIF)
	}
	{
		p.SetState(9202)
		p.Match(SnowflakeParserEXISTS)
	}



	return localctx
}


// IIf_not_existsContext is an interface to support dynamic dispatch.
type IIf_not_existsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_not_existsContext differentiates from other interfaces.
	IsIf_not_existsContext()
}

type If_not_existsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_not_existsContext() *If_not_existsContext {
	var p = new(If_not_existsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_if_not_exists
	return p
}

func (*If_not_existsContext) IsIf_not_existsContext() {}

func NewIf_not_existsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_not_existsContext {
	var p = new(If_not_existsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_if_not_exists

	return p
}

func (s *If_not_existsContext) GetParser() antlr.Parser { return s.parser }

func (s *If_not_existsContext) IF() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIF, 0)
}

func (s *If_not_existsContext) NOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, 0)
}

func (s *If_not_existsContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXISTS, 0)
}

func (s *If_not_existsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_not_existsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *If_not_existsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterIf_not_exists(s)
	}
}

func (s *If_not_existsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitIf_not_exists(s)
	}
}

func (s *If_not_existsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitIf_not_exists(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) If_not_exists() (localctx IIf_not_existsContext) {
	this := p
	_ = this

	localctx = NewIf_not_existsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 624, SnowflakeParserRULE_if_not_exists)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9204)
		p.Match(SnowflakeParserIF)
	}
	{
		p.SetState(9205)
		p.Match(SnowflakeParserNOT)
	}
	{
		p.SetState(9206)
		p.Match(SnowflakeParserEXISTS)
	}



	return localctx
}


// IOr_replaceContext is an interface to support dynamic dispatch.
type IOr_replaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOr_replaceContext differentiates from other interfaces.
	IsOr_replaceContext()
}

type Or_replaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOr_replaceContext() *Or_replaceContext {
	var p = new(Or_replaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_or_replace
	return p
}

func (*Or_replaceContext) IsOr_replaceContext() {}

func NewOr_replaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Or_replaceContext {
	var p = new(Or_replaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_or_replace

	return p
}

func (s *Or_replaceContext) GetParser() antlr.Parser { return s.parser }

func (s *Or_replaceContext) OR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOR, 0)
}

func (s *Or_replaceContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLACE, 0)
}

func (s *Or_replaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Or_replaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Or_replaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterOr_replace(s)
	}
}

func (s *Or_replaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitOr_replace(s)
	}
}

func (s *Or_replaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitOr_replace(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Or_replace() (localctx IOr_replaceContext) {
	this := p
	_ = this

	localctx = NewOr_replaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 626, SnowflakeParserRULE_or_replace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9208)
		p.Match(SnowflakeParserOR)
	}
	{
		p.SetState(9209)
		p.Match(SnowflakeParserREPLACE)
	}



	return localctx
}


// IDescribeContext is an interface to support dynamic dispatch.
type IDescribeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribeContext differentiates from other interfaces.
	IsDescribeContext()
}

type DescribeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribeContext() *DescribeContext {
	var p = new(DescribeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe
	return p
}

func (*DescribeContext) IsDescribeContext() {}

func NewDescribeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DescribeContext {
	var p = new(DescribeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe

	return p
}

func (s *DescribeContext) GetParser() antlr.Parser { return s.parser }

func (s *DescribeContext) DESC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDESC, 0)
}

func (s *DescribeContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDESCRIBE, 0)
}

func (s *DescribeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescribeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DescribeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe(s)
	}
}

func (s *DescribeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe(s)
	}
}

func (s *DescribeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe() (localctx IDescribeContext) {
	this := p
	_ = this

	localctx = NewDescribeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 628, SnowflakeParserRULE_describe)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9211)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserDESC || _la == SnowflakeParserDESCRIBE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IDescribe_commandContext is an interface to support dynamic dispatch.
type IDescribe_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_commandContext differentiates from other interfaces.
	IsDescribe_commandContext()
}

type Describe_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_commandContext() *Describe_commandContext {
	var p = new(Describe_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_command
	return p
}

func (*Describe_commandContext) IsDescribe_commandContext() {}

func NewDescribe_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_commandContext {
	var p = new(Describe_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_command

	return p
}

func (s *Describe_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_commandContext) Describe_database() IDescribe_databaseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_databaseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_databaseContext)
}

func (s *Describe_commandContext) Describe_external_table() IDescribe_external_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_external_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_external_tableContext)
}

func (s *Describe_commandContext) Describe_file_format() IDescribe_file_formatContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_file_formatContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_file_formatContext)
}

func (s *Describe_commandContext) Describe_function() IDescribe_functionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_functionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_functionContext)
}

func (s *Describe_commandContext) Describe_integration() IDescribe_integrationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_integrationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_integrationContext)
}

func (s *Describe_commandContext) Describe_masking_policy() IDescribe_masking_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_masking_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_masking_policyContext)
}

func (s *Describe_commandContext) Describe_materialized_view() IDescribe_materialized_viewContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_materialized_viewContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_materialized_viewContext)
}

func (s *Describe_commandContext) Describe_network_policy() IDescribe_network_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_network_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_network_policyContext)
}

func (s *Describe_commandContext) Describe_pipe() IDescribe_pipeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_pipeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_pipeContext)
}

func (s *Describe_commandContext) Describe_procedure() IDescribe_procedureContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_procedureContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_procedureContext)
}

func (s *Describe_commandContext) Describe_result() IDescribe_resultContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_resultContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_resultContext)
}

func (s *Describe_commandContext) Describe_row_access_policy() IDescribe_row_access_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_row_access_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_row_access_policyContext)
}

func (s *Describe_commandContext) Describe_schema() IDescribe_schemaContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_schemaContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_schemaContext)
}

func (s *Describe_commandContext) Describe_search_optimization() IDescribe_search_optimizationContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_search_optimizationContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_search_optimizationContext)
}

func (s *Describe_commandContext) Describe_sequence() IDescribe_sequenceContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_sequenceContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_sequenceContext)
}

func (s *Describe_commandContext) Describe_session_policy() IDescribe_session_policyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_session_policyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_session_policyContext)
}

func (s *Describe_commandContext) Describe_share() IDescribe_shareContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_shareContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_shareContext)
}

func (s *Describe_commandContext) Describe_stage() IDescribe_stageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_stageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_stageContext)
}

func (s *Describe_commandContext) Describe_stream() IDescribe_streamContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_streamContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_streamContext)
}

func (s *Describe_commandContext) Describe_table() IDescribe_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_tableContext)
}

func (s *Describe_commandContext) Describe_task() IDescribe_taskContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_taskContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_taskContext)
}

func (s *Describe_commandContext) Describe_transaction() IDescribe_transactionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_transactionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_transactionContext)
}

func (s *Describe_commandContext) Describe_user() IDescribe_userContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_userContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_userContext)
}

func (s *Describe_commandContext) Describe_view() IDescribe_viewContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_viewContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_viewContext)
}

func (s *Describe_commandContext) Describe_warehouse() IDescribe_warehouseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_warehouseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_warehouseContext)
}

func (s *Describe_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_command(s)
	}
}

func (s *Describe_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_command(s)
	}
}

func (s *Describe_commandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_command(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_command() (localctx IDescribe_commandContext) {
	this := p
	_ = this

	localctx = NewDescribe_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 630, SnowflakeParserRULE_describe_command)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9238)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1161, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9213)
			p.Describe_database()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9214)
			p.Describe_external_table()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9215)
			p.Describe_file_format()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9216)
			p.Describe_function()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(9217)
			p.Describe_integration()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(9218)
			p.Describe_masking_policy()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(9219)
			p.Describe_materialized_view()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(9220)
			p.Describe_network_policy()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(9221)
			p.Describe_pipe()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(9222)
			p.Describe_procedure()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(9223)
			p.Describe_result()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(9224)
			p.Describe_row_access_policy()
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(9225)
			p.Describe_schema()
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(9226)
			p.Describe_search_optimization()
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(9227)
			p.Describe_sequence()
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(9228)
			p.Describe_session_policy()
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(9229)
			p.Describe_share()
		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(9230)
			p.Describe_stage()
		}


	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(9231)
			p.Describe_stream()
		}


	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(9232)
			p.Describe_table()
		}


	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(9233)
			p.Describe_task()
		}


	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(9234)
			p.Describe_transaction()
		}


	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(9235)
			p.Describe_user()
		}


	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(9236)
			p.Describe_view()
		}


	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(9237)
			p.Describe_warehouse()
		}

	}


	return localctx
}


// IDescribe_databaseContext is an interface to support dynamic dispatch.
type IDescribe_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_databaseContext differentiates from other interfaces.
	IsDescribe_databaseContext()
}

type Describe_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_databaseContext() *Describe_databaseContext {
	var p = new(Describe_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_database
	return p
}

func (*Describe_databaseContext) IsDescribe_databaseContext() {}

func NewDescribe_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_databaseContext {
	var p = new(Describe_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_database

	return p
}

func (s *Describe_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_databaseContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Describe_databaseContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Describe_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_database(s)
	}
}

func (s *Describe_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_database(s)
	}
}

func (s *Describe_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_database(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_database() (localctx IDescribe_databaseContext) {
	this := p
	_ = this

	localctx = NewDescribe_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 632, SnowflakeParserRULE_describe_database)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9240)
		p.Describe()
	}
	{
		p.SetState(9241)
		p.Match(SnowflakeParserDATABASE)
	}
	{
		p.SetState(9242)
		p.Id_()
	}



	return localctx
}


// IDescribe_external_tableContext is an interface to support dynamic dispatch.
type IDescribe_external_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_external_tableContext differentiates from other interfaces.
	IsDescribe_external_tableContext()
}

type Describe_external_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_external_tableContext() *Describe_external_tableContext {
	var p = new(Describe_external_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_external_table
	return p
}

func (*Describe_external_tableContext) IsDescribe_external_tableContext() {}

func NewDescribe_external_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_external_tableContext {
	var p = new(Describe_external_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_external_table

	return p
}

func (s *Describe_external_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_external_tableContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_external_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Describe_external_tableContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Describe_external_tableContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL, 0)
}

func (s *Describe_external_tableContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Describe_external_tableContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Describe_external_tableContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLUMNS, 0)
}

func (s *Describe_external_tableContext) STAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE, 0)
}

func (s *Describe_external_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_external_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_external_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_external_table(s)
	}
}

func (s *Describe_external_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_external_table(s)
	}
}

func (s *Describe_external_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_external_table(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_external_table() (localctx IDescribe_external_tableContext) {
	this := p
	_ = this

	localctx = NewDescribe_external_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 634, SnowflakeParserRULE_describe_external_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9244)
		p.Describe()
	}
	p.SetState(9246)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserEXTERNAL {
		{
			p.SetState(9245)
			p.Match(SnowflakeParserEXTERNAL)
		}

	}
	{
		p.SetState(9248)
		p.Match(SnowflakeParserTABLE)
	}
	{
		p.SetState(9249)
		p.Object_name()
	}
	p.SetState(9253)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTYPE {
		{
			p.SetState(9250)
			p.Match(SnowflakeParserTYPE)
		}
		{
			p.SetState(9251)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(9252)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserCOLUMNS || _la == SnowflakeParserSTAGE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}



	return localctx
}


// IDescribe_file_formatContext is an interface to support dynamic dispatch.
type IDescribe_file_formatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_file_formatContext differentiates from other interfaces.
	IsDescribe_file_formatContext()
}

type Describe_file_formatContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_file_formatContext() *Describe_file_formatContext {
	var p = new(Describe_file_formatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_file_format
	return p
}

func (*Describe_file_formatContext) IsDescribe_file_formatContext() {}

func NewDescribe_file_formatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_file_formatContext {
	var p = new(Describe_file_formatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_file_format

	return p
}

func (s *Describe_file_formatContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_file_formatContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_file_formatContext) FILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE, 0)
}

func (s *Describe_file_formatContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORMAT, 0)
}

func (s *Describe_file_formatContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Describe_file_formatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_file_formatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_file_formatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_file_format(s)
	}
}

func (s *Describe_file_formatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_file_format(s)
	}
}

func (s *Describe_file_formatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_file_format(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_file_format() (localctx IDescribe_file_formatContext) {
	this := p
	_ = this

	localctx = NewDescribe_file_formatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 636, SnowflakeParserRULE_describe_file_format)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9255)
		p.Describe()
	}
	{
		p.SetState(9256)
		p.Match(SnowflakeParserFILE)
	}
	{
		p.SetState(9257)
		p.Match(SnowflakeParserFORMAT)
	}
	{
		p.SetState(9258)
		p.Id_()
	}



	return localctx
}


// IDescribe_functionContext is an interface to support dynamic dispatch.
type IDescribe_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_functionContext differentiates from other interfaces.
	IsDescribe_functionContext()
}

type Describe_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_functionContext() *Describe_functionContext {
	var p = new(Describe_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_function
	return p
}

func (*Describe_functionContext) IsDescribe_functionContext() {}

func NewDescribe_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_functionContext {
	var p = new(Describe_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_function

	return p
}

func (s *Describe_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_functionContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_functionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUNCTION, 0)
}

func (s *Describe_functionContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Describe_functionContext) Arg_types() IArg_typesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_typesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_typesContext)
}

func (s *Describe_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_function(s)
	}
}

func (s *Describe_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_function(s)
	}
}

func (s *Describe_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_function(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_function() (localctx IDescribe_functionContext) {
	this := p
	_ = this

	localctx = NewDescribe_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 638, SnowflakeParserRULE_describe_function)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9260)
		p.Describe()
	}
	{
		p.SetState(9261)
		p.Match(SnowflakeParserFUNCTION)
	}
	{
		p.SetState(9262)
		p.Object_name()
	}
	{
		p.SetState(9263)
		p.Arg_types()
	}



	return localctx
}


// IDescribe_integrationContext is an interface to support dynamic dispatch.
type IDescribe_integrationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_integrationContext differentiates from other interfaces.
	IsDescribe_integrationContext()
}

type Describe_integrationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_integrationContext() *Describe_integrationContext {
	var p = new(Describe_integrationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_integration
	return p
}

func (*Describe_integrationContext) IsDescribe_integrationContext() {}

func NewDescribe_integrationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_integrationContext {
	var p = new(Describe_integrationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_integration

	return p
}

func (s *Describe_integrationContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_integrationContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_integrationContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Describe_integrationContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Describe_integrationContext) API() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI, 0)
}

func (s *Describe_integrationContext) NOTIFICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOTIFICATION, 0)
}

func (s *Describe_integrationContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Describe_integrationContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE, 0)
}

func (s *Describe_integrationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_integrationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_integrationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_integration(s)
	}
}

func (s *Describe_integrationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_integration(s)
	}
}

func (s *Describe_integrationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_integration(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_integration() (localctx IDescribe_integrationContext) {
	this := p
	_ = this

	localctx = NewDescribe_integrationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 640, SnowflakeParserRULE_describe_integration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9265)
		p.Describe()
	}
	p.SetState(9267)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAPI || _la == SnowflakeParserNOTIFICATION || _la == SnowflakeParserSECURITY || _la == SnowflakeParserSTORAGE {
		{
			p.SetState(9266)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserAPI || _la == SnowflakeParserNOTIFICATION || _la == SnowflakeParserSECURITY || _la == SnowflakeParserSTORAGE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(9269)
		p.Match(SnowflakeParserINTEGRATION)
	}
	{
		p.SetState(9270)
		p.Id_()
	}



	return localctx
}


// IDescribe_masking_policyContext is an interface to support dynamic dispatch.
type IDescribe_masking_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_masking_policyContext differentiates from other interfaces.
	IsDescribe_masking_policyContext()
}

type Describe_masking_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_masking_policyContext() *Describe_masking_policyContext {
	var p = new(Describe_masking_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_masking_policy
	return p
}

func (*Describe_masking_policyContext) IsDescribe_masking_policyContext() {}

func NewDescribe_masking_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_masking_policyContext {
	var p = new(Describe_masking_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_masking_policy

	return p
}

func (s *Describe_masking_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_masking_policyContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_masking_policyContext) MASKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, 0)
}

func (s *Describe_masking_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Describe_masking_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Describe_masking_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_masking_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_masking_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_masking_policy(s)
	}
}

func (s *Describe_masking_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_masking_policy(s)
	}
}

func (s *Describe_masking_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_masking_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_masking_policy() (localctx IDescribe_masking_policyContext) {
	this := p
	_ = this

	localctx = NewDescribe_masking_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 642, SnowflakeParserRULE_describe_masking_policy)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9272)
		p.Describe()
	}
	{
		p.SetState(9273)
		p.Match(SnowflakeParserMASKING)
	}
	{
		p.SetState(9274)
		p.Match(SnowflakeParserPOLICY)
	}
	{
		p.SetState(9275)
		p.Id_()
	}



	return localctx
}


// IDescribe_materialized_viewContext is an interface to support dynamic dispatch.
type IDescribe_materialized_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_materialized_viewContext differentiates from other interfaces.
	IsDescribe_materialized_viewContext()
}

type Describe_materialized_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_materialized_viewContext() *Describe_materialized_viewContext {
	var p = new(Describe_materialized_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_materialized_view
	return p
}

func (*Describe_materialized_viewContext) IsDescribe_materialized_viewContext() {}

func NewDescribe_materialized_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_materialized_viewContext {
	var p = new(Describe_materialized_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_materialized_view

	return p
}

func (s *Describe_materialized_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_materialized_viewContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_materialized_viewContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATERIALIZED, 0)
}

func (s *Describe_materialized_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Describe_materialized_viewContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Describe_materialized_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_materialized_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_materialized_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_materialized_view(s)
	}
}

func (s *Describe_materialized_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_materialized_view(s)
	}
}

func (s *Describe_materialized_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_materialized_view(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_materialized_view() (localctx IDescribe_materialized_viewContext) {
	this := p
	_ = this

	localctx = NewDescribe_materialized_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 644, SnowflakeParserRULE_describe_materialized_view)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9277)
		p.Describe()
	}
	{
		p.SetState(9278)
		p.Match(SnowflakeParserMATERIALIZED)
	}
	{
		p.SetState(9279)
		p.Match(SnowflakeParserVIEW)
	}
	{
		p.SetState(9280)
		p.Object_name()
	}



	return localctx
}


// IDescribe_network_policyContext is an interface to support dynamic dispatch.
type IDescribe_network_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_network_policyContext differentiates from other interfaces.
	IsDescribe_network_policyContext()
}

type Describe_network_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_network_policyContext() *Describe_network_policyContext {
	var p = new(Describe_network_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_network_policy
	return p
}

func (*Describe_network_policyContext) IsDescribe_network_policyContext() {}

func NewDescribe_network_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_network_policyContext {
	var p = new(Describe_network_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_network_policy

	return p
}

func (s *Describe_network_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_network_policyContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_network_policyContext) NETWORK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK, 0)
}

func (s *Describe_network_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Describe_network_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Describe_network_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_network_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_network_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_network_policy(s)
	}
}

func (s *Describe_network_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_network_policy(s)
	}
}

func (s *Describe_network_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_network_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_network_policy() (localctx IDescribe_network_policyContext) {
	this := p
	_ = this

	localctx = NewDescribe_network_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 646, SnowflakeParserRULE_describe_network_policy)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9282)
		p.Describe()
	}
	{
		p.SetState(9283)
		p.Match(SnowflakeParserNETWORK)
	}
	{
		p.SetState(9284)
		p.Match(SnowflakeParserPOLICY)
	}
	{
		p.SetState(9285)
		p.Id_()
	}



	return localctx
}


// IDescribe_pipeContext is an interface to support dynamic dispatch.
type IDescribe_pipeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_pipeContext differentiates from other interfaces.
	IsDescribe_pipeContext()
}

type Describe_pipeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_pipeContext() *Describe_pipeContext {
	var p = new(Describe_pipeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_pipe
	return p
}

func (*Describe_pipeContext) IsDescribe_pipeContext() {}

func NewDescribe_pipeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_pipeContext {
	var p = new(Describe_pipeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_pipe

	return p
}

func (s *Describe_pipeContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_pipeContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_pipeContext) PIPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPIPE, 0)
}

func (s *Describe_pipeContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Describe_pipeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_pipeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_pipeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_pipe(s)
	}
}

func (s *Describe_pipeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_pipe(s)
	}
}

func (s *Describe_pipeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_pipe(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_pipe() (localctx IDescribe_pipeContext) {
	this := p
	_ = this

	localctx = NewDescribe_pipeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 648, SnowflakeParserRULE_describe_pipe)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9287)
		p.Describe()
	}
	{
		p.SetState(9288)
		p.Match(SnowflakeParserPIPE)
	}
	{
		p.SetState(9289)
		p.Object_name()
	}



	return localctx
}


// IDescribe_procedureContext is an interface to support dynamic dispatch.
type IDescribe_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_procedureContext differentiates from other interfaces.
	IsDescribe_procedureContext()
}

type Describe_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_procedureContext() *Describe_procedureContext {
	var p = new(Describe_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_procedure
	return p
}

func (*Describe_procedureContext) IsDescribe_procedureContext() {}

func NewDescribe_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_procedureContext {
	var p = new(Describe_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_procedure

	return p
}

func (s *Describe_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_procedureContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPROCEDURE, 0)
}

func (s *Describe_procedureContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Describe_procedureContext) Arg_types() IArg_typesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArg_typesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArg_typesContext)
}

func (s *Describe_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_procedure(s)
	}
}

func (s *Describe_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_procedure(s)
	}
}

func (s *Describe_procedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_procedure(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_procedure() (localctx IDescribe_procedureContext) {
	this := p
	_ = this

	localctx = NewDescribe_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 650, SnowflakeParserRULE_describe_procedure)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9291)
		p.Describe()
	}
	{
		p.SetState(9292)
		p.Match(SnowflakeParserPROCEDURE)
	}
	{
		p.SetState(9293)
		p.Object_name()
	}
	{
		p.SetState(9294)
		p.Arg_types()
	}



	return localctx
}


// IDescribe_resultContext is an interface to support dynamic dispatch.
type IDescribe_resultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_resultContext differentiates from other interfaces.
	IsDescribe_resultContext()
}

type Describe_resultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_resultContext() *Describe_resultContext {
	var p = new(Describe_resultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_result
	return p
}

func (*Describe_resultContext) IsDescribe_resultContext() {}

func NewDescribe_resultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_resultContext {
	var p = new(Describe_resultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_result

	return p
}

func (s *Describe_resultContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_resultContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_resultContext) RESULT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESULT, 0)
}

func (s *Describe_resultContext) STRING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRING, 0)
}

func (s *Describe_resultContext) LAST_QUERY_ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLAST_QUERY_ID, 0)
}

func (s *Describe_resultContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Describe_resultContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Describe_resultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_resultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_resultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_result(s)
	}
}

func (s *Describe_resultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_result(s)
	}
}

func (s *Describe_resultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_result(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_result() (localctx IDescribe_resultContext) {
	this := p
	_ = this

	localctx = NewDescribe_resultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 652, SnowflakeParserRULE_describe_result)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9296)
		p.Describe()
	}
	{
		p.SetState(9297)
		p.Match(SnowflakeParserRESULT)
	}
	p.SetState(9302)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserSTRING:
		{
			p.SetState(9298)
			p.Match(SnowflakeParserSTRING)
		}


	case SnowflakeParserLAST_QUERY_ID:
		{
			p.SetState(9299)
			p.Match(SnowflakeParserLAST_QUERY_ID)
		}
		{
			p.SetState(9300)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(9301)
			p.Match(SnowflakeParserRR_BRACKET)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IDescribe_row_access_policyContext is an interface to support dynamic dispatch.
type IDescribe_row_access_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_row_access_policyContext differentiates from other interfaces.
	IsDescribe_row_access_policyContext()
}

type Describe_row_access_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_row_access_policyContext() *Describe_row_access_policyContext {
	var p = new(Describe_row_access_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_row_access_policy
	return p
}

func (*Describe_row_access_policyContext) IsDescribe_row_access_policyContext() {}

func NewDescribe_row_access_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_row_access_policyContext {
	var p = new(Describe_row_access_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_row_access_policy

	return p
}

func (s *Describe_row_access_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_row_access_policyContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_row_access_policyContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *Describe_row_access_policyContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, 0)
}

func (s *Describe_row_access_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Describe_row_access_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Describe_row_access_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_row_access_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_row_access_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_row_access_policy(s)
	}
}

func (s *Describe_row_access_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_row_access_policy(s)
	}
}

func (s *Describe_row_access_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_row_access_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_row_access_policy() (localctx IDescribe_row_access_policyContext) {
	this := p
	_ = this

	localctx = NewDescribe_row_access_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 654, SnowflakeParserRULE_describe_row_access_policy)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9304)
		p.Describe()
	}
	{
		p.SetState(9305)
		p.Match(SnowflakeParserROW)
	}
	{
		p.SetState(9306)
		p.Match(SnowflakeParserACCESS)
	}
	{
		p.SetState(9307)
		p.Match(SnowflakeParserPOLICY)
	}
	{
		p.SetState(9308)
		p.Id_()
	}



	return localctx
}


// IDescribe_schemaContext is an interface to support dynamic dispatch.
type IDescribe_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_schemaContext differentiates from other interfaces.
	IsDescribe_schemaContext()
}

type Describe_schemaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_schemaContext() *Describe_schemaContext {
	var p = new(Describe_schemaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_schema
	return p
}

func (*Describe_schemaContext) IsDescribe_schemaContext() {}

func NewDescribe_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_schemaContext {
	var p = new(Describe_schemaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_schema

	return p
}

func (s *Describe_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_schemaContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_schemaContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Describe_schemaContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Describe_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_schema(s)
	}
}

func (s *Describe_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_schema(s)
	}
}

func (s *Describe_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_schema(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_schema() (localctx IDescribe_schemaContext) {
	this := p
	_ = this

	localctx = NewDescribe_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 656, SnowflakeParserRULE_describe_schema)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9310)
		p.Describe()
	}
	{
		p.SetState(9311)
		p.Match(SnowflakeParserSCHEMA)
	}
	{
		p.SetState(9312)
		p.Schema_name()
	}



	return localctx
}


// IDescribe_search_optimizationContext is an interface to support dynamic dispatch.
type IDescribe_search_optimizationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_search_optimizationContext differentiates from other interfaces.
	IsDescribe_search_optimizationContext()
}

type Describe_search_optimizationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_search_optimizationContext() *Describe_search_optimizationContext {
	var p = new(Describe_search_optimizationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_search_optimization
	return p
}

func (*Describe_search_optimizationContext) IsDescribe_search_optimizationContext() {}

func NewDescribe_search_optimizationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_search_optimizationContext {
	var p = new(Describe_search_optimizationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_search_optimization

	return p
}

func (s *Describe_search_optimizationContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_search_optimizationContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_search_optimizationContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEARCH, 0)
}

func (s *Describe_search_optimizationContext) OPTIMIZATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOPTIMIZATION, 0)
}

func (s *Describe_search_optimizationContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Describe_search_optimizationContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Describe_search_optimizationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_search_optimizationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_search_optimizationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_search_optimization(s)
	}
}

func (s *Describe_search_optimizationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_search_optimization(s)
	}
}

func (s *Describe_search_optimizationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_search_optimization(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_search_optimization() (localctx IDescribe_search_optimizationContext) {
	this := p
	_ = this

	localctx = NewDescribe_search_optimizationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 658, SnowflakeParserRULE_describe_search_optimization)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9314)
		p.Describe()
	}
	{
		p.SetState(9315)
		p.Match(SnowflakeParserSEARCH)
	}
	{
		p.SetState(9316)
		p.Match(SnowflakeParserOPTIMIZATION)
	}
	{
		p.SetState(9317)
		p.Match(SnowflakeParserON)
	}
	{
		p.SetState(9318)
		p.Object_name()
	}



	return localctx
}


// IDescribe_sequenceContext is an interface to support dynamic dispatch.
type IDescribe_sequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_sequenceContext differentiates from other interfaces.
	IsDescribe_sequenceContext()
}

type Describe_sequenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_sequenceContext() *Describe_sequenceContext {
	var p = new(Describe_sequenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_sequence
	return p
}

func (*Describe_sequenceContext) IsDescribe_sequenceContext() {}

func NewDescribe_sequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_sequenceContext {
	var p = new(Describe_sequenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_sequence

	return p
}

func (s *Describe_sequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_sequenceContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_sequenceContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEQUENCE, 0)
}

func (s *Describe_sequenceContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Describe_sequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_sequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_sequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_sequence(s)
	}
}

func (s *Describe_sequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_sequence(s)
	}
}

func (s *Describe_sequenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_sequence(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_sequence() (localctx IDescribe_sequenceContext) {
	this := p
	_ = this

	localctx = NewDescribe_sequenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 660, SnowflakeParserRULE_describe_sequence)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9320)
		p.Describe()
	}
	{
		p.SetState(9321)
		p.Match(SnowflakeParserSEQUENCE)
	}
	{
		p.SetState(9322)
		p.Object_name()
	}



	return localctx
}


// IDescribe_session_policyContext is an interface to support dynamic dispatch.
type IDescribe_session_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_session_policyContext differentiates from other interfaces.
	IsDescribe_session_policyContext()
}

type Describe_session_policyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_session_policyContext() *Describe_session_policyContext {
	var p = new(Describe_session_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_session_policy
	return p
}

func (*Describe_session_policyContext) IsDescribe_session_policyContext() {}

func NewDescribe_session_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_session_policyContext {
	var p = new(Describe_session_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_session_policy

	return p
}

func (s *Describe_session_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_session_policyContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_session_policyContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION, 0)
}

func (s *Describe_session_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICY, 0)
}

func (s *Describe_session_policyContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Describe_session_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_session_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_session_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_session_policy(s)
	}
}

func (s *Describe_session_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_session_policy(s)
	}
}

func (s *Describe_session_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_session_policy(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_session_policy() (localctx IDescribe_session_policyContext) {
	this := p
	_ = this

	localctx = NewDescribe_session_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 662, SnowflakeParserRULE_describe_session_policy)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9324)
		p.Describe()
	}
	{
		p.SetState(9325)
		p.Match(SnowflakeParserSESSION)
	}
	{
		p.SetState(9326)
		p.Match(SnowflakeParserPOLICY)
	}
	{
		p.SetState(9327)
		p.Id_()
	}



	return localctx
}


// IDescribe_shareContext is an interface to support dynamic dispatch.
type IDescribe_shareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_shareContext differentiates from other interfaces.
	IsDescribe_shareContext()
}

type Describe_shareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_shareContext() *Describe_shareContext {
	var p = new(Describe_shareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_share
	return p
}

func (*Describe_shareContext) IsDescribe_shareContext() {}

func NewDescribe_shareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_shareContext {
	var p = new(Describe_shareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_share

	return p
}

func (s *Describe_shareContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_shareContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_shareContext) SHARE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARE, 0)
}

func (s *Describe_shareContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Describe_shareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_shareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_shareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_share(s)
	}
}

func (s *Describe_shareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_share(s)
	}
}

func (s *Describe_shareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_share(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_share() (localctx IDescribe_shareContext) {
	this := p
	_ = this

	localctx = NewDescribe_shareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 664, SnowflakeParserRULE_describe_share)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9329)
		p.Describe()
	}
	{
		p.SetState(9330)
		p.Match(SnowflakeParserSHARE)
	}
	{
		p.SetState(9331)
		p.Id_()
	}



	return localctx
}


// IDescribe_stageContext is an interface to support dynamic dispatch.
type IDescribe_stageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_stageContext differentiates from other interfaces.
	IsDescribe_stageContext()
}

type Describe_stageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_stageContext() *Describe_stageContext {
	var p = new(Describe_stageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_stage
	return p
}

func (*Describe_stageContext) IsDescribe_stageContext() {}

func NewDescribe_stageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_stageContext {
	var p = new(Describe_stageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_stage

	return p
}

func (s *Describe_stageContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_stageContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_stageContext) STAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE, 0)
}

func (s *Describe_stageContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Describe_stageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_stageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_stageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_stage(s)
	}
}

func (s *Describe_stageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_stage(s)
	}
}

func (s *Describe_stageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_stage(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_stage() (localctx IDescribe_stageContext) {
	this := p
	_ = this

	localctx = NewDescribe_stageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 666, SnowflakeParserRULE_describe_stage)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9333)
		p.Describe()
	}
	{
		p.SetState(9334)
		p.Match(SnowflakeParserSTAGE)
	}
	{
		p.SetState(9335)
		p.Object_name()
	}



	return localctx
}


// IDescribe_streamContext is an interface to support dynamic dispatch.
type IDescribe_streamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_streamContext differentiates from other interfaces.
	IsDescribe_streamContext()
}

type Describe_streamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_streamContext() *Describe_streamContext {
	var p = new(Describe_streamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_stream
	return p
}

func (*Describe_streamContext) IsDescribe_streamContext() {}

func NewDescribe_streamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_streamContext {
	var p = new(Describe_streamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_stream

	return p
}

func (s *Describe_streamContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_streamContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_streamContext) STREAM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTREAM, 0)
}

func (s *Describe_streamContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Describe_streamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_streamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_streamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_stream(s)
	}
}

func (s *Describe_streamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_stream(s)
	}
}

func (s *Describe_streamContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_stream(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_stream() (localctx IDescribe_streamContext) {
	this := p
	_ = this

	localctx = NewDescribe_streamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 668, SnowflakeParserRULE_describe_stream)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9337)
		p.Describe()
	}
	{
		p.SetState(9338)
		p.Match(SnowflakeParserSTREAM)
	}
	{
		p.SetState(9339)
		p.Object_name()
	}



	return localctx
}


// IDescribe_tableContext is an interface to support dynamic dispatch.
type IDescribe_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_tableContext differentiates from other interfaces.
	IsDescribe_tableContext()
}

type Describe_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_tableContext() *Describe_tableContext {
	var p = new(Describe_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_table
	return p
}

func (*Describe_tableContext) IsDescribe_tableContext() {}

func NewDescribe_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_tableContext {
	var p = new(Describe_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_table

	return p
}

func (s *Describe_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_tableContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Describe_tableContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Describe_tableContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTYPE, 0)
}

func (s *Describe_tableContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Describe_tableContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLUMNS, 0)
}

func (s *Describe_tableContext) STAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE, 0)
}

func (s *Describe_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_table(s)
	}
}

func (s *Describe_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_table(s)
	}
}

func (s *Describe_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_table(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_table() (localctx IDescribe_tableContext) {
	this := p
	_ = this

	localctx = NewDescribe_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 670, SnowflakeParserRULE_describe_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9341)
		p.Describe()
	}
	{
		p.SetState(9342)
		p.Match(SnowflakeParserTABLE)
	}
	{
		p.SetState(9343)
		p.Object_name()
	}
	p.SetState(9347)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTYPE {
		{
			p.SetState(9344)
			p.Match(SnowflakeParserTYPE)
		}
		{
			p.SetState(9345)
			p.Match(SnowflakeParserEQ)
		}
		{
			p.SetState(9346)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserCOLUMNS || _la == SnowflakeParserSTAGE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}



	return localctx
}


// IDescribe_taskContext is an interface to support dynamic dispatch.
type IDescribe_taskContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_taskContext differentiates from other interfaces.
	IsDescribe_taskContext()
}

type Describe_taskContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_taskContext() *Describe_taskContext {
	var p = new(Describe_taskContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_task
	return p
}

func (*Describe_taskContext) IsDescribe_taskContext() {}

func NewDescribe_taskContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_taskContext {
	var p = new(Describe_taskContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_task

	return p
}

func (s *Describe_taskContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_taskContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_taskContext) TASK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTASK, 0)
}

func (s *Describe_taskContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Describe_taskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_taskContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_taskContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_task(s)
	}
}

func (s *Describe_taskContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_task(s)
	}
}

func (s *Describe_taskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_task(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_task() (localctx IDescribe_taskContext) {
	this := p
	_ = this

	localctx = NewDescribe_taskContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 672, SnowflakeParserRULE_describe_task)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9349)
		p.Describe()
	}
	{
		p.SetState(9350)
		p.Match(SnowflakeParserTASK)
	}
	{
		p.SetState(9351)
		p.Object_name()
	}



	return localctx
}


// IDescribe_transactionContext is an interface to support dynamic dispatch.
type IDescribe_transactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_transactionContext differentiates from other interfaces.
	IsDescribe_transactionContext()
}

type Describe_transactionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_transactionContext() *Describe_transactionContext {
	var p = new(Describe_transactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_transaction
	return p
}

func (*Describe_transactionContext) IsDescribe_transactionContext() {}

func NewDescribe_transactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_transactionContext {
	var p = new(Describe_transactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_transaction

	return p
}

func (s *Describe_transactionContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_transactionContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_transactionContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRANSACTION, 0)
}

func (s *Describe_transactionContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Describe_transactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_transactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_transactionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_transaction(s)
	}
}

func (s *Describe_transactionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_transaction(s)
	}
}

func (s *Describe_transactionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_transaction(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_transaction() (localctx IDescribe_transactionContext) {
	this := p
	_ = this

	localctx = NewDescribe_transactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 674, SnowflakeParserRULE_describe_transaction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9353)
		p.Describe()
	}
	{
		p.SetState(9354)
		p.Match(SnowflakeParserTRANSACTION)
	}
	{
		p.SetState(9355)
		p.Num()
	}



	return localctx
}


// IDescribe_userContext is an interface to support dynamic dispatch.
type IDescribe_userContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_userContext differentiates from other interfaces.
	IsDescribe_userContext()
}

type Describe_userContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_userContext() *Describe_userContext {
	var p = new(Describe_userContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_user
	return p
}

func (*Describe_userContext) IsDescribe_userContext() {}

func NewDescribe_userContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_userContext {
	var p = new(Describe_userContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_user

	return p
}

func (s *Describe_userContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_userContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_userContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Describe_userContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Describe_userContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_userContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_userContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_user(s)
	}
}

func (s *Describe_userContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_user(s)
	}
}

func (s *Describe_userContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_user(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_user() (localctx IDescribe_userContext) {
	this := p
	_ = this

	localctx = NewDescribe_userContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 676, SnowflakeParserRULE_describe_user)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9357)
		p.Describe()
	}
	{
		p.SetState(9358)
		p.Match(SnowflakeParserUSER)
	}
	{
		p.SetState(9359)
		p.Id_()
	}



	return localctx
}


// IDescribe_viewContext is an interface to support dynamic dispatch.
type IDescribe_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_viewContext differentiates from other interfaces.
	IsDescribe_viewContext()
}

type Describe_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_viewContext() *Describe_viewContext {
	var p = new(Describe_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_view
	return p
}

func (*Describe_viewContext) IsDescribe_viewContext() {}

func NewDescribe_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_viewContext {
	var p = new(Describe_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_view

	return p
}

func (s *Describe_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_viewContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Describe_viewContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Describe_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_view(s)
	}
}

func (s *Describe_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_view(s)
	}
}

func (s *Describe_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_view(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_view() (localctx IDescribe_viewContext) {
	this := p
	_ = this

	localctx = NewDescribe_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 678, SnowflakeParserRULE_describe_view)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9361)
		p.Describe()
	}
	{
		p.SetState(9362)
		p.Match(SnowflakeParserVIEW)
	}
	{
		p.SetState(9363)
		p.Object_name()
	}



	return localctx
}


// IDescribe_warehouseContext is an interface to support dynamic dispatch.
type IDescribe_warehouseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_warehouseContext differentiates from other interfaces.
	IsDescribe_warehouseContext()
}

type Describe_warehouseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_warehouseContext() *Describe_warehouseContext {
	var p = new(Describe_warehouseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_describe_warehouse
	return p
}

func (*Describe_warehouseContext) IsDescribe_warehouseContext() {}

func NewDescribe_warehouseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_warehouseContext {
	var p = new(Describe_warehouseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_describe_warehouse

	return p
}

func (s *Describe_warehouseContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_warehouseContext) Describe() IDescribeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeContext)
}

func (s *Describe_warehouseContext) WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE, 0)
}

func (s *Describe_warehouseContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Describe_warehouseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_warehouseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Describe_warehouseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDescribe_warehouse(s)
	}
}

func (s *Describe_warehouseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDescribe_warehouse(s)
	}
}

func (s *Describe_warehouseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDescribe_warehouse(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Describe_warehouse() (localctx IDescribe_warehouseContext) {
	this := p
	_ = this

	localctx = NewDescribe_warehouseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 680, SnowflakeParserRULE_describe_warehouse)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9365)
		p.Describe()
	}
	{
		p.SetState(9366)
		p.Match(SnowflakeParserWAREHOUSE)
	}
	{
		p.SetState(9367)
		p.Id_()
	}



	return localctx
}


// IShow_commandContext is an interface to support dynamic dispatch.
type IShow_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_commandContext differentiates from other interfaces.
	IsShow_commandContext()
}

type Show_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_commandContext() *Show_commandContext {
	var p = new(Show_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_command
	return p
}

func (*Show_commandContext) IsShow_commandContext() {}

func NewShow_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_commandContext {
	var p = new(Show_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_command

	return p
}

func (s *Show_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_commandContext) Show_columns() IShow_columnsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_columnsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_columnsContext)
}

func (s *Show_commandContext) Show_connections() IShow_connectionsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_connectionsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_connectionsContext)
}

func (s *Show_commandContext) Show_databases() IShow_databasesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_databasesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_databasesContext)
}

func (s *Show_commandContext) Show_databases_in_failover_group() IShow_databases_in_failover_groupContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_databases_in_failover_groupContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_databases_in_failover_groupContext)
}

func (s *Show_commandContext) Show_databases_in_replication_group() IShow_databases_in_replication_groupContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_databases_in_replication_groupContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_databases_in_replication_groupContext)
}

func (s *Show_commandContext) Show_delegated_authorizations() IShow_delegated_authorizationsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_delegated_authorizationsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_delegated_authorizationsContext)
}

func (s *Show_commandContext) Show_external_functions() IShow_external_functionsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_external_functionsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_external_functionsContext)
}

func (s *Show_commandContext) Show_external_tables() IShow_external_tablesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_external_tablesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_external_tablesContext)
}

func (s *Show_commandContext) Show_failover_groups() IShow_failover_groupsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_failover_groupsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_failover_groupsContext)
}

func (s *Show_commandContext) Show_file_formats() IShow_file_formatsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_file_formatsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_file_formatsContext)
}

func (s *Show_commandContext) Show_functions() IShow_functionsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_functionsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_functionsContext)
}

func (s *Show_commandContext) Show_global_accounts() IShow_global_accountsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_global_accountsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_global_accountsContext)
}

func (s *Show_commandContext) Show_grants() IShow_grantsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_grantsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_grantsContext)
}

func (s *Show_commandContext) Show_integrations() IShow_integrationsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_integrationsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_integrationsContext)
}

func (s *Show_commandContext) Show_locks() IShow_locksContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_locksContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_locksContext)
}

func (s *Show_commandContext) Show_managed_accounts() IShow_managed_accountsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_managed_accountsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_managed_accountsContext)
}

func (s *Show_commandContext) Show_masking_policies() IShow_masking_policiesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_masking_policiesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_masking_policiesContext)
}

func (s *Show_commandContext) Show_materialized_views() IShow_materialized_viewsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_materialized_viewsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_materialized_viewsContext)
}

func (s *Show_commandContext) Show_network_policies() IShow_network_policiesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_network_policiesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_network_policiesContext)
}

func (s *Show_commandContext) Show_objects() IShow_objectsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_objectsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_objectsContext)
}

func (s *Show_commandContext) Show_organization_accounts() IShow_organization_accountsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_organization_accountsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_organization_accountsContext)
}

func (s *Show_commandContext) Show_parameters() IShow_parametersContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_parametersContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_parametersContext)
}

func (s *Show_commandContext) Show_pipes() IShow_pipesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_pipesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_pipesContext)
}

func (s *Show_commandContext) Show_primary_keys() IShow_primary_keysContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_primary_keysContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_primary_keysContext)
}

func (s *Show_commandContext) Show_procedures() IShow_proceduresContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_proceduresContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_proceduresContext)
}

func (s *Show_commandContext) Show_regions() IShow_regionsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_regionsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_regionsContext)
}

func (s *Show_commandContext) Show_replication_accounts() IShow_replication_accountsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_replication_accountsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_replication_accountsContext)
}

func (s *Show_commandContext) Show_replication_databases() IShow_replication_databasesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_replication_databasesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_replication_databasesContext)
}

func (s *Show_commandContext) Show_replication_groups() IShow_replication_groupsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_replication_groupsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_replication_groupsContext)
}

func (s *Show_commandContext) Show_resource_monitors() IShow_resource_monitorsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_resource_monitorsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_resource_monitorsContext)
}

func (s *Show_commandContext) Show_roles() IShow_rolesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_rolesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_rolesContext)
}

func (s *Show_commandContext) Show_row_access_policies() IShow_row_access_policiesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_row_access_policiesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_row_access_policiesContext)
}

func (s *Show_commandContext) Show_schemas() IShow_schemasContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_schemasContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_schemasContext)
}

func (s *Show_commandContext) Show_sequences() IShow_sequencesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_sequencesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_sequencesContext)
}

func (s *Show_commandContext) Show_session_policies() IShow_session_policiesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_session_policiesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_session_policiesContext)
}

func (s *Show_commandContext) Show_shares() IShow_sharesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_sharesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_sharesContext)
}

func (s *Show_commandContext) Show_shares_in_failover_group() IShow_shares_in_failover_groupContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_shares_in_failover_groupContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_shares_in_failover_groupContext)
}

func (s *Show_commandContext) Show_shares_in_replication_group() IShow_shares_in_replication_groupContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_shares_in_replication_groupContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_shares_in_replication_groupContext)
}

func (s *Show_commandContext) Show_stages() IShow_stagesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_stagesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_stagesContext)
}

func (s *Show_commandContext) Show_streams() IShow_streamsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_streamsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_streamsContext)
}

func (s *Show_commandContext) Show_tables() IShow_tablesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_tablesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_tablesContext)
}

func (s *Show_commandContext) Show_tags() IShow_tagsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_tagsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_tagsContext)
}

func (s *Show_commandContext) Show_tasks() IShow_tasksContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_tasksContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_tasksContext)
}

func (s *Show_commandContext) Show_transactions() IShow_transactionsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_transactionsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_transactionsContext)
}

func (s *Show_commandContext) Show_user_functions() IShow_user_functionsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_user_functionsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_user_functionsContext)
}

func (s *Show_commandContext) Show_users() IShow_usersContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_usersContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_usersContext)
}

func (s *Show_commandContext) Show_variables() IShow_variablesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_variablesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_variablesContext)
}

func (s *Show_commandContext) Show_views() IShow_viewsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_viewsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_viewsContext)
}

func (s *Show_commandContext) Show_warehouses() IShow_warehousesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_warehousesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_warehousesContext)
}

func (s *Show_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_command(s)
	}
}

func (s *Show_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_command(s)
	}
}

func (s *Show_commandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_command(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_command() (localctx IShow_commandContext) {
	this := p
	_ = this

	localctx = NewShow_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 682, SnowflakeParserRULE_show_command)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9418)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1167, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9369)
			p.Show_columns()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9370)
			p.Show_connections()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9371)
			p.Show_databases()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9372)
			p.Show_databases_in_failover_group()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(9373)
			p.Show_databases_in_replication_group()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(9374)
			p.Show_delegated_authorizations()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(9375)
			p.Show_external_functions()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(9376)
			p.Show_external_tables()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(9377)
			p.Show_failover_groups()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(9378)
			p.Show_file_formats()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(9379)
			p.Show_functions()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(9380)
			p.Show_global_accounts()
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(9381)
			p.Show_grants()
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(9382)
			p.Show_integrations()
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(9383)
			p.Show_locks()
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(9384)
			p.Show_managed_accounts()
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(9385)
			p.Show_masking_policies()
		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(9386)
			p.Show_materialized_views()
		}


	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(9387)
			p.Show_network_policies()
		}


	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(9388)
			p.Show_objects()
		}


	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(9389)
			p.Show_organization_accounts()
		}


	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(9390)
			p.Show_parameters()
		}


	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(9391)
			p.Show_pipes()
		}


	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(9392)
			p.Show_primary_keys()
		}


	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(9393)
			p.Show_procedures()
		}


	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(9394)
			p.Show_regions()
		}


	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(9395)
			p.Show_replication_accounts()
		}


	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(9396)
			p.Show_replication_databases()
		}


	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(9397)
			p.Show_replication_groups()
		}


	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(9398)
			p.Show_resource_monitors()
		}


	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(9399)
			p.Show_roles()
		}


	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(9400)
			p.Show_row_access_policies()
		}


	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(9401)
			p.Show_schemas()
		}


	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(9402)
			p.Show_sequences()
		}


	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(9403)
			p.Show_session_policies()
		}


	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(9404)
			p.Show_shares()
		}


	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(9405)
			p.Show_shares_in_failover_group()
		}


	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(9406)
			p.Show_shares_in_replication_group()
		}


	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(9407)
			p.Show_stages()
		}


	case 40:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(9408)
			p.Show_streams()
		}


	case 41:
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(9409)
			p.Show_tables()
		}


	case 42:
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(9410)
			p.Show_tags()
		}


	case 43:
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(9411)
			p.Show_tasks()
		}


	case 44:
		p.EnterOuterAlt(localctx, 44)
		{
			p.SetState(9412)
			p.Show_transactions()
		}


	case 45:
		p.EnterOuterAlt(localctx, 45)
		{
			p.SetState(9413)
			p.Show_user_functions()
		}


	case 46:
		p.EnterOuterAlt(localctx, 46)
		{
			p.SetState(9414)
			p.Show_users()
		}


	case 47:
		p.EnterOuterAlt(localctx, 47)
		{
			p.SetState(9415)
			p.Show_variables()
		}


	case 48:
		p.EnterOuterAlt(localctx, 48)
		{
			p.SetState(9416)
			p.Show_views()
		}


	case 49:
		p.EnterOuterAlt(localctx, 49)
		{
			p.SetState(9417)
			p.Show_warehouses()
		}

	}


	return localctx
}


// IShow_columnsContext is an interface to support dynamic dispatch.
type IShow_columnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_columnsContext differentiates from other interfaces.
	IsShow_columnsContext()
}

type Show_columnsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_columnsContext() *Show_columnsContext {
	var p = new(Show_columnsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_columns
	return p
}

func (*Show_columnsContext) IsShow_columnsContext() {}

func NewShow_columnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_columnsContext {
	var p = new(Show_columnsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_columns

	return p
}

func (s *Show_columnsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_columnsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_columnsContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLUMNS, 0)
}

func (s *Show_columnsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_columnsContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_columnsContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_columnsContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Show_columnsContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Show_columnsContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Show_columnsContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Show_columnsContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEW, 0)
}

func (s *Show_columnsContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_columnsContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Show_columnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_columnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_columnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_columns(s)
	}
}

func (s *Show_columnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_columns(s)
	}
}

func (s *Show_columnsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_columns(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_columns() (localctx IShow_columnsContext) {
	this := p
	_ = this

	localctx = NewShow_columnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 684, SnowflakeParserRULE_show_columns)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9420)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9421)
		p.Match(SnowflakeParserCOLUMNS)
	}
	p.SetState(9423)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9422)
			p.Like_pattern()
		}

	}
	p.SetState(9447)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9425)
			p.Match(SnowflakeParserIN)
		}
		p.SetState(9445)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1173, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(9426)
				p.Match(SnowflakeParserACCOUNT)
			}


		case 2:
			{
				p.SetState(9427)
				p.Match(SnowflakeParserDATABASE)
			}
			p.SetState(9429)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
				{
					p.SetState(9428)
					p.Id_()
				}

			}


		case 3:
			{
				p.SetState(9431)
				p.Match(SnowflakeParserSCHEMA)
			}
			p.SetState(9433)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
				{
					p.SetState(9432)
					p.Schema_name()
				}

			}


		case 4:
			{
				p.SetState(9435)
				p.Match(SnowflakeParserTABLE)
			}


		case 5:
			p.SetState(9437)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserTABLE {
				{
					p.SetState(9436)
					p.Match(SnowflakeParserTABLE)
				}

			}
			{
				p.SetState(9439)
				p.Object_name()
			}


		case 6:
			{
				p.SetState(9440)
				p.Match(SnowflakeParserVIEW)
			}


		case 7:
			p.SetState(9442)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserVIEW {
				{
					p.SetState(9441)
					p.Match(SnowflakeParserVIEW)
				}

			}
			{
				p.SetState(9444)
				p.Object_name()
			}

		}

	}



	return localctx
}


// IShow_connectionsContext is an interface to support dynamic dispatch.
type IShow_connectionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_connectionsContext differentiates from other interfaces.
	IsShow_connectionsContext()
}

type Show_connectionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_connectionsContext() *Show_connectionsContext {
	var p = new(Show_connectionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_connections
	return p
}

func (*Show_connectionsContext) IsShow_connectionsContext() {}

func NewShow_connectionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_connectionsContext {
	var p = new(Show_connectionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_connections

	return p
}

func (s *Show_connectionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_connectionsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_connectionsContext) CONNECTIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCONNECTIONS, 0)
}

func (s *Show_connectionsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_connectionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_connectionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_connectionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_connections(s)
	}
}

func (s *Show_connectionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_connections(s)
	}
}

func (s *Show_connectionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_connections(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_connections() (localctx IShow_connectionsContext) {
	this := p
	_ = this

	localctx = NewShow_connectionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 686, SnowflakeParserRULE_show_connections)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9449)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9450)
		p.Match(SnowflakeParserCONNECTIONS)
	}
	p.SetState(9452)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9451)
			p.Like_pattern()
		}

	}



	return localctx
}


// IStarts_withContext is an interface to support dynamic dispatch.
type IStarts_withContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStarts_withContext differentiates from other interfaces.
	IsStarts_withContext()
}

type Starts_withContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStarts_withContext() *Starts_withContext {
	var p = new(Starts_withContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_starts_with
	return p
}

func (*Starts_withContext) IsStarts_withContext() {}

func NewStarts_withContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Starts_withContext {
	var p = new(Starts_withContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_starts_with

	return p
}

func (s *Starts_withContext) GetParser() antlr.Parser { return s.parser }

func (s *Starts_withContext) STARTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTARTS, 0)
}

func (s *Starts_withContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Starts_withContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Starts_withContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Starts_withContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Starts_withContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterStarts_with(s)
	}
}

func (s *Starts_withContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitStarts_with(s)
	}
}

func (s *Starts_withContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitStarts_with(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Starts_with() (localctx IStarts_withContext) {
	this := p
	_ = this

	localctx = NewStarts_withContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 688, SnowflakeParserRULE_starts_with)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9454)
		p.Match(SnowflakeParserSTARTS)
	}
	{
		p.SetState(9455)
		p.Match(SnowflakeParserWITH)
	}
	{
		p.SetState(9456)
		p.String_()
	}



	return localctx
}


// ILimit_rowsContext is an interface to support dynamic dispatch.
type ILimit_rowsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLimit_rowsContext differentiates from other interfaces.
	IsLimit_rowsContext()
}

type Limit_rowsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimit_rowsContext() *Limit_rowsContext {
	var p = new(Limit_rowsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_limit_rows
	return p
}

func (*Limit_rowsContext) IsLimit_rowsContext() {}

func NewLimit_rowsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Limit_rowsContext {
	var p = new(Limit_rowsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_limit_rows

	return p
}

func (s *Limit_rowsContext) GetParser() antlr.Parser { return s.parser }

func (s *Limit_rowsContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLIMIT, 0)
}

func (s *Limit_rowsContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Limit_rowsContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *Limit_rowsContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Limit_rowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Limit_rowsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Limit_rowsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterLimit_rows(s)
	}
}

func (s *Limit_rowsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitLimit_rows(s)
	}
}

func (s *Limit_rowsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitLimit_rows(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Limit_rows() (localctx ILimit_rowsContext) {
	this := p
	_ = this

	localctx = NewLimit_rowsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 690, SnowflakeParserRULE_limit_rows)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9458)
		p.Match(SnowflakeParserLIMIT)
	}
	{
		p.SetState(9459)
		p.Num()
	}
	p.SetState(9462)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserFROM {
		{
			p.SetState(9460)
			p.Match(SnowflakeParserFROM)
		}
		{
			p.SetState(9461)
			p.String_()
		}

	}



	return localctx
}


// IShow_databasesContext is an interface to support dynamic dispatch.
type IShow_databasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_databasesContext differentiates from other interfaces.
	IsShow_databasesContext()
}

type Show_databasesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_databasesContext() *Show_databasesContext {
	var p = new(Show_databasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_databases
	return p
}

func (*Show_databasesContext) IsShow_databasesContext() {}

func NewShow_databasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_databasesContext {
	var p = new(Show_databasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_databases

	return p
}

func (s *Show_databasesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_databasesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_databasesContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASES, 0)
}

func (s *Show_databasesContext) TERSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTERSE, 0)
}

func (s *Show_databasesContext) HISTORY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserHISTORY, 0)
}

func (s *Show_databasesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_databasesContext) Starts_with() IStarts_withContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStarts_withContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStarts_withContext)
}

func (s *Show_databasesContext) Limit_rows() ILimit_rowsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_rowsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_rowsContext)
}

func (s *Show_databasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_databasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_databasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_databases(s)
	}
}

func (s *Show_databasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_databases(s)
	}
}

func (s *Show_databasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_databases(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_databases() (localctx IShow_databasesContext) {
	this := p
	_ = this

	localctx = NewShow_databasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 692, SnowflakeParserRULE_show_databases)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9464)
		p.Match(SnowflakeParserSHOW)
	}
	p.SetState(9466)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTERSE {
		{
			p.SetState(9465)
			p.Match(SnowflakeParserTERSE)
		}

	}
	{
		p.SetState(9468)
		p.Match(SnowflakeParserDATABASES)
	}
	p.SetState(9470)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserHISTORY {
		{
			p.SetState(9469)
			p.Match(SnowflakeParserHISTORY)
		}

	}
	p.SetState(9473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9472)
			p.Like_pattern()
		}

	}
	p.SetState(9476)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSTARTS {
		{
			p.SetState(9475)
			p.Starts_with()
		}

	}
	p.SetState(9479)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIMIT {
		{
			p.SetState(9478)
			p.Limit_rows()
		}

	}



	return localctx
}


// IShow_databases_in_failover_groupContext is an interface to support dynamic dispatch.
type IShow_databases_in_failover_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_databases_in_failover_groupContext differentiates from other interfaces.
	IsShow_databases_in_failover_groupContext()
}

type Show_databases_in_failover_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_databases_in_failover_groupContext() *Show_databases_in_failover_groupContext {
	var p = new(Show_databases_in_failover_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_databases_in_failover_group
	return p
}

func (*Show_databases_in_failover_groupContext) IsShow_databases_in_failover_groupContext() {}

func NewShow_databases_in_failover_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_databases_in_failover_groupContext {
	var p = new(Show_databases_in_failover_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_databases_in_failover_group

	return p
}

func (s *Show_databases_in_failover_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_databases_in_failover_groupContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_databases_in_failover_groupContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASES, 0)
}

func (s *Show_databases_in_failover_groupContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_databases_in_failover_groupContext) FAILOVER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFAILOVER, 0)
}

func (s *Show_databases_in_failover_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUP, 0)
}

func (s *Show_databases_in_failover_groupContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_databases_in_failover_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_databases_in_failover_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_databases_in_failover_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_databases_in_failover_group(s)
	}
}

func (s *Show_databases_in_failover_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_databases_in_failover_group(s)
	}
}

func (s *Show_databases_in_failover_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_databases_in_failover_group(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_databases_in_failover_group() (localctx IShow_databases_in_failover_groupContext) {
	this := p
	_ = this

	localctx = NewShow_databases_in_failover_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 694, SnowflakeParserRULE_show_databases_in_failover_group)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9481)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9482)
		p.Match(SnowflakeParserDATABASES)
	}
	{
		p.SetState(9483)
		p.Match(SnowflakeParserIN)
	}
	{
		p.SetState(9484)
		p.Match(SnowflakeParserFAILOVER)
	}
	{
		p.SetState(9485)
		p.Match(SnowflakeParserGROUP)
	}
	{
		p.SetState(9486)
		p.Id_()
	}



	return localctx
}


// IShow_databases_in_replication_groupContext is an interface to support dynamic dispatch.
type IShow_databases_in_replication_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_databases_in_replication_groupContext differentiates from other interfaces.
	IsShow_databases_in_replication_groupContext()
}

type Show_databases_in_replication_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_databases_in_replication_groupContext() *Show_databases_in_replication_groupContext {
	var p = new(Show_databases_in_replication_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_databases_in_replication_group
	return p
}

func (*Show_databases_in_replication_groupContext) IsShow_databases_in_replication_groupContext() {}

func NewShow_databases_in_replication_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_databases_in_replication_groupContext {
	var p = new(Show_databases_in_replication_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_databases_in_replication_group

	return p
}

func (s *Show_databases_in_replication_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_databases_in_replication_groupContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_databases_in_replication_groupContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASES, 0)
}

func (s *Show_databases_in_replication_groupContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_databases_in_replication_groupContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION, 0)
}

func (s *Show_databases_in_replication_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUP, 0)
}

func (s *Show_databases_in_replication_groupContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_databases_in_replication_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_databases_in_replication_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_databases_in_replication_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_databases_in_replication_group(s)
	}
}

func (s *Show_databases_in_replication_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_databases_in_replication_group(s)
	}
}

func (s *Show_databases_in_replication_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_databases_in_replication_group(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_databases_in_replication_group() (localctx IShow_databases_in_replication_groupContext) {
	this := p
	_ = this

	localctx = NewShow_databases_in_replication_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 696, SnowflakeParserRULE_show_databases_in_replication_group)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9488)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9489)
		p.Match(SnowflakeParserDATABASES)
	}
	{
		p.SetState(9490)
		p.Match(SnowflakeParserIN)
	}
	{
		p.SetState(9491)
		p.Match(SnowflakeParserREPLICATION)
	}
	{
		p.SetState(9492)
		p.Match(SnowflakeParserGROUP)
	}
	{
		p.SetState(9493)
		p.Id_()
	}



	return localctx
}


// IShow_delegated_authorizationsContext is an interface to support dynamic dispatch.
type IShow_delegated_authorizationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_delegated_authorizationsContext differentiates from other interfaces.
	IsShow_delegated_authorizationsContext()
}

type Show_delegated_authorizationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_delegated_authorizationsContext() *Show_delegated_authorizationsContext {
	var p = new(Show_delegated_authorizationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_delegated_authorizations
	return p
}

func (*Show_delegated_authorizationsContext) IsShow_delegated_authorizationsContext() {}

func NewShow_delegated_authorizationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_delegated_authorizationsContext {
	var p = new(Show_delegated_authorizationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_delegated_authorizations

	return p
}

func (s *Show_delegated_authorizationsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_delegated_authorizationsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_delegated_authorizationsContext) DELEGATED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDELEGATED, 0)
}

func (s *Show_delegated_authorizationsContext) AUTHORIZATIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAUTHORIZATIONS, 0)
}

func (s *Show_delegated_authorizationsContext) BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBY, 0)
}

func (s *Show_delegated_authorizationsContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Show_delegated_authorizationsContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_delegated_authorizationsContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Show_delegated_authorizationsContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Show_delegated_authorizationsContext) INTEGRATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATION, 0)
}

func (s *Show_delegated_authorizationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_delegated_authorizationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_delegated_authorizationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_delegated_authorizations(s)
	}
}

func (s *Show_delegated_authorizationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_delegated_authorizations(s)
	}
}

func (s *Show_delegated_authorizationsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_delegated_authorizations(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_delegated_authorizations() (localctx IShow_delegated_authorizationsContext) {
	this := p
	_ = this

	localctx = NewShow_delegated_authorizationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 698, SnowflakeParserRULE_show_delegated_authorizations)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9511)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1182, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9495)
			p.Match(SnowflakeParserSHOW)
		}
		{
			p.SetState(9496)
			p.Match(SnowflakeParserDELEGATED)
		}
		{
			p.SetState(9497)
			p.Match(SnowflakeParserAUTHORIZATIONS)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9498)
			p.Match(SnowflakeParserSHOW)
		}
		{
			p.SetState(9499)
			p.Match(SnowflakeParserDELEGATED)
		}
		{
			p.SetState(9500)
			p.Match(SnowflakeParserAUTHORIZATIONS)
		}
		{
			p.SetState(9501)
			p.Match(SnowflakeParserBY)
		}
		{
			p.SetState(9502)
			p.Match(SnowflakeParserUSER)
		}
		{
			p.SetState(9503)
			p.Id_()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9504)
			p.Match(SnowflakeParserSHOW)
		}
		{
			p.SetState(9505)
			p.Match(SnowflakeParserDELEGATED)
		}
		{
			p.SetState(9506)
			p.Match(SnowflakeParserAUTHORIZATIONS)
		}
		{
			p.SetState(9507)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(9508)
			p.Match(SnowflakeParserSECURITY)
		}
		{
			p.SetState(9509)
			p.Match(SnowflakeParserINTEGRATION)
		}
		{
			p.SetState(9510)
			p.Id_()
		}

	}


	return localctx
}


// IShow_external_functionsContext is an interface to support dynamic dispatch.
type IShow_external_functionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_external_functionsContext differentiates from other interfaces.
	IsShow_external_functionsContext()
}

type Show_external_functionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_external_functionsContext() *Show_external_functionsContext {
	var p = new(Show_external_functionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_external_functions
	return p
}

func (*Show_external_functionsContext) IsShow_external_functionsContext() {}

func NewShow_external_functionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_external_functionsContext {
	var p = new(Show_external_functionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_external_functions

	return p
}

func (s *Show_external_functionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_external_functionsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_external_functionsContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL, 0)
}

func (s *Show_external_functionsContext) FUNCTIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUNCTIONS, 0)
}

func (s *Show_external_functionsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_external_functionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_external_functionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_external_functionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_external_functions(s)
	}
}

func (s *Show_external_functionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_external_functions(s)
	}
}

func (s *Show_external_functionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_external_functions(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_external_functions() (localctx IShow_external_functionsContext) {
	this := p
	_ = this

	localctx = NewShow_external_functionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 700, SnowflakeParserRULE_show_external_functions)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9513)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9514)
		p.Match(SnowflakeParserEXTERNAL)
	}
	{
		p.SetState(9515)
		p.Match(SnowflakeParserFUNCTIONS)
	}
	p.SetState(9517)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9516)
			p.Like_pattern()
		}

	}



	return localctx
}


// IShow_external_tablesContext is an interface to support dynamic dispatch.
type IShow_external_tablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_external_tablesContext differentiates from other interfaces.
	IsShow_external_tablesContext()
}

type Show_external_tablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_external_tablesContext() *Show_external_tablesContext {
	var p = new(Show_external_tablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_external_tables
	return p
}

func (*Show_external_tablesContext) IsShow_external_tablesContext() {}

func NewShow_external_tablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_external_tablesContext {
	var p = new(Show_external_tablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_external_tables

	return p
}

func (s *Show_external_tablesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_external_tablesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_external_tablesContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXTERNAL, 0)
}

func (s *Show_external_tablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLES, 0)
}

func (s *Show_external_tablesContext) TERSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTERSE, 0)
}

func (s *Show_external_tablesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_external_tablesContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_external_tablesContext) Starts_with() IStarts_withContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStarts_withContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStarts_withContext)
}

func (s *Show_external_tablesContext) Limit_rows() ILimit_rowsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_rowsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_rowsContext)
}

func (s *Show_external_tablesContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_external_tablesContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Show_external_tablesContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_external_tablesContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Show_external_tablesContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Show_external_tablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_external_tablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_external_tablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_external_tables(s)
	}
}

func (s *Show_external_tablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_external_tables(s)
	}
}

func (s *Show_external_tablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_external_tables(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_external_tables() (localctx IShow_external_tablesContext) {
	this := p
	_ = this

	localctx = NewShow_external_tablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 702, SnowflakeParserRULE_show_external_tables)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9519)
		p.Match(SnowflakeParserSHOW)
	}
	p.SetState(9521)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTERSE {
		{
			p.SetState(9520)
			p.Match(SnowflakeParserTERSE)
		}

	}
	{
		p.SetState(9523)
		p.Match(SnowflakeParserEXTERNAL)
	}
	{
		p.SetState(9524)
		p.Match(SnowflakeParserTABLES)
	}
	p.SetState(9526)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9525)
			p.Like_pattern()
		}

	}
	p.SetState(9542)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9528)
			p.Match(SnowflakeParserIN)
		}
		p.SetState(9540)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserACCOUNT:
			{
				p.SetState(9529)
				p.Match(SnowflakeParserACCOUNT)
			}


		case SnowflakeParserDATABASE:
			{
				p.SetState(9530)
				p.Match(SnowflakeParserDATABASE)
			}
			p.SetState(9532)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
				{
					p.SetState(9531)
					p.Id_()
				}

			}


		case SnowflakeParserEOF, SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCOPY, SnowflakeParserCREATE, SnowflakeParserDELETE, SnowflakeParserDESC, SnowflakeParserDESCRIBE, SnowflakeParserDROP, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserINSERT, SnowflakeParserINT, SnowflakeParserLIMIT, SnowflakeParserLIST, SnowflakeParserMERGE, SnowflakeParserPUT, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSCHEMA, SnowflakeParserSELECT, SnowflakeParserSET, SnowflakeParserSHOW, SnowflakeParserSTAGE, SnowflakeParserSTARTS, SnowflakeParserTRUNCATE, SnowflakeParserUNDROP, SnowflakeParserUNSET, SnowflakeParserUPDATE, SnowflakeParserUSE, SnowflakeParserWITH, SnowflakeParserBIGINT, SnowflakeParserDOUBLE_QUOTE_ID, SnowflakeParserDOUBLE_QUOTE_BLANK, SnowflakeParserID, SnowflakeParserSEMI:
			p.SetState(9535)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserSCHEMA {
				{
					p.SetState(9534)
					p.Match(SnowflakeParserSCHEMA)
				}

			}
			p.SetState(9538)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
				{
					p.SetState(9537)
					p.Schema_name()
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(9545)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSTARTS {
		{
			p.SetState(9544)
			p.Starts_with()
		}

	}
	p.SetState(9548)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIMIT {
		{
			p.SetState(9547)
			p.Limit_rows()
		}

	}



	return localctx
}


// IShow_failover_groupsContext is an interface to support dynamic dispatch.
type IShow_failover_groupsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_failover_groupsContext differentiates from other interfaces.
	IsShow_failover_groupsContext()
}

type Show_failover_groupsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_failover_groupsContext() *Show_failover_groupsContext {
	var p = new(Show_failover_groupsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_failover_groups
	return p
}

func (*Show_failover_groupsContext) IsShow_failover_groupsContext() {}

func NewShow_failover_groupsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_failover_groupsContext {
	var p = new(Show_failover_groupsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_failover_groups

	return p
}

func (s *Show_failover_groupsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_failover_groupsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_failover_groupsContext) FAILOVER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFAILOVER, 0)
}

func (s *Show_failover_groupsContext) GROUPS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUPS, 0)
}

func (s *Show_failover_groupsContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_failover_groupsContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_failover_groupsContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_failover_groupsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_failover_groupsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_failover_groupsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_failover_groups(s)
	}
}

func (s *Show_failover_groupsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_failover_groups(s)
	}
}

func (s *Show_failover_groupsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_failover_groups(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_failover_groups() (localctx IShow_failover_groupsContext) {
	this := p
	_ = this

	localctx = NewShow_failover_groupsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 704, SnowflakeParserRULE_show_failover_groups)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9550)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9551)
		p.Match(SnowflakeParserFAILOVER)
	}
	{
		p.SetState(9552)
		p.Match(SnowflakeParserGROUPS)
	}
	p.SetState(9556)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9553)
			p.Match(SnowflakeParserIN)
		}
		{
			p.SetState(9554)
			p.Match(SnowflakeParserACCOUNT)
		}
		{
			p.SetState(9555)
			p.Id_()
		}

	}



	return localctx
}


// IShow_file_formatsContext is an interface to support dynamic dispatch.
type IShow_file_formatsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_file_formatsContext differentiates from other interfaces.
	IsShow_file_formatsContext()
}

type Show_file_formatsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_file_formatsContext() *Show_file_formatsContext {
	var p = new(Show_file_formatsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_file_formats
	return p
}

func (*Show_file_formatsContext) IsShow_file_formatsContext() {}

func NewShow_file_formatsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_file_formatsContext {
	var p = new(Show_file_formatsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_file_formats

	return p
}

func (s *Show_file_formatsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_file_formatsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_file_formatsContext) FILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFILE, 0)
}

func (s *Show_file_formatsContext) FORMATS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFORMATS, 0)
}

func (s *Show_file_formatsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_file_formatsContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_file_formatsContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_file_formatsContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Show_file_formatsContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_file_formatsContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Show_file_formatsContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Show_file_formatsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_file_formatsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_file_formatsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_file_formats(s)
	}
}

func (s *Show_file_formatsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_file_formats(s)
	}
}

func (s *Show_file_formatsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_file_formats(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_file_formats() (localctx IShow_file_formatsContext) {
	this := p
	_ = this

	localctx = NewShow_file_formatsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 706, SnowflakeParserRULE_show_file_formats)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9558)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9559)
		p.Match(SnowflakeParserFILE)
	}
	{
		p.SetState(9560)
		p.Match(SnowflakeParserFORMATS)
	}
	p.SetState(9562)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9561)
			p.Like_pattern()
		}

	}
	p.SetState(9575)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9564)
			p.Match(SnowflakeParserIN)
		}
		p.SetState(9573)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1195, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(9565)
				p.Match(SnowflakeParserACCOUNT)
			}


		case 2:
			{
				p.SetState(9566)
				p.Match(SnowflakeParserDATABASE)
			}


		case 3:
			{
				p.SetState(9567)
				p.Match(SnowflakeParserDATABASE)
			}
			{
				p.SetState(9568)
				p.Id_()
			}


		case 4:
			{
				p.SetState(9569)
				p.Match(SnowflakeParserSCHEMA)
			}


		case 5:
			{
				p.SetState(9570)
				p.Match(SnowflakeParserSCHEMA)
			}
			{
				p.SetState(9571)
				p.Schema_name()
			}


		case 6:
			{
				p.SetState(9572)
				p.Schema_name()
			}

		}

	}



	return localctx
}


// IShow_functionsContext is an interface to support dynamic dispatch.
type IShow_functionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_functionsContext differentiates from other interfaces.
	IsShow_functionsContext()
}

type Show_functionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_functionsContext() *Show_functionsContext {
	var p = new(Show_functionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_functions
	return p
}

func (*Show_functionsContext) IsShow_functionsContext() {}

func NewShow_functionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_functionsContext {
	var p = new(Show_functionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_functions

	return p
}

func (s *Show_functionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_functionsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_functionsContext) FUNCTIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUNCTIONS, 0)
}

func (s *Show_functionsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_functionsContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_functionsContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_functionsContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Show_functionsContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_functionsContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Show_functionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_functionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_functionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_functions(s)
	}
}

func (s *Show_functionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_functions(s)
	}
}

func (s *Show_functionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_functions(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_functions() (localctx IShow_functionsContext) {
	this := p
	_ = this

	localctx = NewShow_functionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 708, SnowflakeParserRULE_show_functions)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9577)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9578)
		p.Match(SnowflakeParserFUNCTIONS)
	}
	p.SetState(9580)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9579)
			p.Like_pattern()
		}

	}
	p.SetState(9593)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9582)
			p.Match(SnowflakeParserIN)
		}
		p.SetState(9591)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1198, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(9583)
				p.Match(SnowflakeParserACCOUNT)
			}


		case 2:
			{
				p.SetState(9584)
				p.Match(SnowflakeParserDATABASE)
			}


		case 3:
			{
				p.SetState(9585)
				p.Match(SnowflakeParserDATABASE)
			}
			{
				p.SetState(9586)
				p.Id_()
			}


		case 4:
			{
				p.SetState(9587)
				p.Match(SnowflakeParserSCHEMA)
			}


		case 5:
			{
				p.SetState(9588)
				p.Match(SnowflakeParserSCHEMA)
			}
			{
				p.SetState(9589)
				p.Id_()
			}


		case 6:
			{
				p.SetState(9590)
				p.Id_()
			}

		}

	}



	return localctx
}


// IShow_global_accountsContext is an interface to support dynamic dispatch.
type IShow_global_accountsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_global_accountsContext differentiates from other interfaces.
	IsShow_global_accountsContext()
}

type Show_global_accountsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_global_accountsContext() *Show_global_accountsContext {
	var p = new(Show_global_accountsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_global_accounts
	return p
}

func (*Show_global_accountsContext) IsShow_global_accountsContext() {}

func NewShow_global_accountsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_global_accountsContext {
	var p = new(Show_global_accountsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_global_accounts

	return p
}

func (s *Show_global_accountsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_global_accountsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_global_accountsContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGLOBAL, 0)
}

func (s *Show_global_accountsContext) ACCOUNTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNTS, 0)
}

func (s *Show_global_accountsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_global_accountsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_global_accountsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_global_accountsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_global_accounts(s)
	}
}

func (s *Show_global_accountsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_global_accounts(s)
	}
}

func (s *Show_global_accountsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_global_accounts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_global_accounts() (localctx IShow_global_accountsContext) {
	this := p
	_ = this

	localctx = NewShow_global_accountsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 710, SnowflakeParserRULE_show_global_accounts)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9595)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9596)
		p.Match(SnowflakeParserGLOBAL)
	}
	{
		p.SetState(9597)
		p.Match(SnowflakeParserACCOUNTS)
	}
	p.SetState(9599)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9598)
			p.Like_pattern()
		}

	}



	return localctx
}


// IShow_grantsContext is an interface to support dynamic dispatch.
type IShow_grantsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_grantsContext differentiates from other interfaces.
	IsShow_grantsContext()
}

type Show_grantsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_grantsContext() *Show_grantsContext {
	var p = new(Show_grantsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_grants
	return p
}

func (*Show_grantsContext) IsShow_grantsContext() {}

func NewShow_grantsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_grantsContext {
	var p = new(Show_grantsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_grants

	return p
}

func (s *Show_grantsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_grantsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_grantsContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGRANTS, 0)
}

func (s *Show_grantsContext) Show_grants_opts() IShow_grants_optsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShow_grants_optsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShow_grants_optsContext)
}

func (s *Show_grantsContext) FUTURE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUTURE, 0)
}

func (s *Show_grantsContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_grantsContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Show_grantsContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Show_grantsContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Show_grantsContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_grantsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_grantsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_grantsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_grants(s)
	}
}

func (s *Show_grantsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_grants(s)
	}
}

func (s *Show_grantsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_grants(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_grants() (localctx IShow_grantsContext) {
	this := p
	_ = this

	localctx = NewShow_grantsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 712, SnowflakeParserRULE_show_grants)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9618)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1202, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9601)
			p.Match(SnowflakeParserSHOW)
		}
		{
			p.SetState(9602)
			p.Match(SnowflakeParserGRANTS)
		}
		p.SetState(9604)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOF || _la == SnowflakeParserON || _la == SnowflakeParserTO {
			{
				p.SetState(9603)
				p.Show_grants_opts()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9606)
			p.Match(SnowflakeParserSHOW)
		}
		{
			p.SetState(9607)
			p.Match(SnowflakeParserFUTURE)
		}
		{
			p.SetState(9608)
			p.Match(SnowflakeParserGRANTS)
		}
		{
			p.SetState(9609)
			p.Match(SnowflakeParserIN)
		}
		{
			p.SetState(9610)
			p.Match(SnowflakeParserSCHEMA)
		}
		{
			p.SetState(9611)
			p.Schema_name()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9612)
			p.Match(SnowflakeParserSHOW)
		}
		{
			p.SetState(9613)
			p.Match(SnowflakeParserFUTURE)
		}
		{
			p.SetState(9614)
			p.Match(SnowflakeParserGRANTS)
		}
		{
			p.SetState(9615)
			p.Match(SnowflakeParserIN)
		}
		{
			p.SetState(9616)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(9617)
			p.Id_()
		}

	}


	return localctx
}


// IShow_grants_optsContext is an interface to support dynamic dispatch.
type IShow_grants_optsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_grants_optsContext differentiates from other interfaces.
	IsShow_grants_optsContext()
}

type Show_grants_optsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_grants_optsContext() *Show_grants_optsContext {
	var p = new(Show_grants_optsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_grants_opts
	return p
}

func (*Show_grants_optsContext) IsShow_grants_optsContext() {}

func NewShow_grants_optsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_grants_optsContext {
	var p = new(Show_grants_optsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_grants_opts

	return p
}

func (s *Show_grants_optsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_grants_optsContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Show_grants_optsContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_grants_optsContext) Object_type() IObject_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_typeContext)
}

func (s *Show_grants_optsContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Show_grants_optsContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *Show_grants_optsContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLE, 0)
}

func (s *Show_grants_optsContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_grants_optsContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Show_grants_optsContext) SHARE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARE, 0)
}

func (s *Show_grants_optsContext) OF() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOF, 0)
}

func (s *Show_grants_optsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_grants_optsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_grants_optsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_grants_opts(s)
	}
}

func (s *Show_grants_optsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_grants_opts(s)
	}
}

func (s *Show_grants_optsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_grants_opts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_grants_opts() (localctx IShow_grants_optsContext) {
	this := p
	_ = this

	localctx = NewShow_grants_optsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 714, SnowflakeParserRULE_show_grants_opts)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9641)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1204, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9620)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(9621)
			p.Match(SnowflakeParserACCOUNT)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9622)
			p.Match(SnowflakeParserON)
		}
		{
			p.SetState(9623)
			p.Object_type()
		}
		{
			p.SetState(9624)
			p.Object_name()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9626)
			p.Match(SnowflakeParserTO)
		}
		p.SetState(9633)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserROLE:
			{
				p.SetState(9627)
				p.Match(SnowflakeParserROLE)
			}
			{
				p.SetState(9628)
				p.Id_()
			}


		case SnowflakeParserUSER:
			{
				p.SetState(9629)
				p.Match(SnowflakeParserUSER)
			}
			{
				p.SetState(9630)
				p.Id_()
			}


		case SnowflakeParserSHARE:
			{
				p.SetState(9631)
				p.Match(SnowflakeParserSHARE)
			}
			{
				p.SetState(9632)
				p.Id_()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9635)
			p.Match(SnowflakeParserOF)
		}
		{
			p.SetState(9636)
			p.Match(SnowflakeParserROLE)
		}
		{
			p.SetState(9637)
			p.Id_()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(9638)
			p.Match(SnowflakeParserOF)
		}
		{
			p.SetState(9639)
			p.Match(SnowflakeParserSHARE)
		}
		{
			p.SetState(9640)
			p.Id_()
		}

	}


	return localctx
}


// IShow_integrationsContext is an interface to support dynamic dispatch.
type IShow_integrationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_integrationsContext differentiates from other interfaces.
	IsShow_integrationsContext()
}

type Show_integrationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_integrationsContext() *Show_integrationsContext {
	var p = new(Show_integrationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_integrations
	return p
}

func (*Show_integrationsContext) IsShow_integrationsContext() {}

func NewShow_integrationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_integrationsContext {
	var p = new(Show_integrationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_integrations

	return p
}

func (s *Show_integrationsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_integrationsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_integrationsContext) INTEGRATIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATIONS, 0)
}

func (s *Show_integrationsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_integrationsContext) API() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPI, 0)
}

func (s *Show_integrationsContext) NOTIFICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOTIFICATION, 0)
}

func (s *Show_integrationsContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSECURITY, 0)
}

func (s *Show_integrationsContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTORAGE, 0)
}

func (s *Show_integrationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_integrationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_integrationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_integrations(s)
	}
}

func (s *Show_integrationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_integrations(s)
	}
}

func (s *Show_integrationsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_integrations(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_integrations() (localctx IShow_integrationsContext) {
	this := p
	_ = this

	localctx = NewShow_integrationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 716, SnowflakeParserRULE_show_integrations)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9643)
		p.Match(SnowflakeParserSHOW)
	}
	p.SetState(9645)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAPI || _la == SnowflakeParserNOTIFICATION || _la == SnowflakeParserSECURITY || _la == SnowflakeParserSTORAGE {
		{
			p.SetState(9644)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserAPI || _la == SnowflakeParserNOTIFICATION || _la == SnowflakeParserSECURITY || _la == SnowflakeParserSTORAGE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(9647)
		p.Match(SnowflakeParserINTEGRATIONS)
	}
	p.SetState(9649)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9648)
			p.Like_pattern()
		}

	}



	return localctx
}


// IShow_locksContext is an interface to support dynamic dispatch.
type IShow_locksContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_locksContext differentiates from other interfaces.
	IsShow_locksContext()
}

type Show_locksContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_locksContext() *Show_locksContext {
	var p = new(Show_locksContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_locks
	return p
}

func (*Show_locksContext) IsShow_locksContext() {}

func NewShow_locksContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_locksContext {
	var p = new(Show_locksContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_locks

	return p
}

func (s *Show_locksContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_locksContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_locksContext) LOCKS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLOCKS, 0)
}

func (s *Show_locksContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_locksContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_locksContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_locksContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_locksContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_locks(s)
	}
}

func (s *Show_locksContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_locks(s)
	}
}

func (s *Show_locksContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_locks(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_locks() (localctx IShow_locksContext) {
	this := p
	_ = this

	localctx = NewShow_locksContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 718, SnowflakeParserRULE_show_locks)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9651)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9652)
		p.Match(SnowflakeParserLOCKS)
	}
	p.SetState(9655)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9653)
			p.Match(SnowflakeParserIN)
		}
		{
			p.SetState(9654)
			p.Match(SnowflakeParserACCOUNT)
		}

	}



	return localctx
}


// IShow_managed_accountsContext is an interface to support dynamic dispatch.
type IShow_managed_accountsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_managed_accountsContext differentiates from other interfaces.
	IsShow_managed_accountsContext()
}

type Show_managed_accountsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_managed_accountsContext() *Show_managed_accountsContext {
	var p = new(Show_managed_accountsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_managed_accounts
	return p
}

func (*Show_managed_accountsContext) IsShow_managed_accountsContext() {}

func NewShow_managed_accountsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_managed_accountsContext {
	var p = new(Show_managed_accountsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_managed_accounts

	return p
}

func (s *Show_managed_accountsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_managed_accountsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_managed_accountsContext) MANAGED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMANAGED, 0)
}

func (s *Show_managed_accountsContext) ACCOUNTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNTS, 0)
}

func (s *Show_managed_accountsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_managed_accountsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_managed_accountsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_managed_accountsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_managed_accounts(s)
	}
}

func (s *Show_managed_accountsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_managed_accounts(s)
	}
}

func (s *Show_managed_accountsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_managed_accounts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_managed_accounts() (localctx IShow_managed_accountsContext) {
	this := p
	_ = this

	localctx = NewShow_managed_accountsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 720, SnowflakeParserRULE_show_managed_accounts)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9657)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9658)
		p.Match(SnowflakeParserMANAGED)
	}
	{
		p.SetState(9659)
		p.Match(SnowflakeParserACCOUNTS)
	}
	p.SetState(9661)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9660)
			p.Like_pattern()
		}

	}



	return localctx
}


// IShow_masking_policiesContext is an interface to support dynamic dispatch.
type IShow_masking_policiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_masking_policiesContext differentiates from other interfaces.
	IsShow_masking_policiesContext()
}

type Show_masking_policiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_masking_policiesContext() *Show_masking_policiesContext {
	var p = new(Show_masking_policiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_masking_policies
	return p
}

func (*Show_masking_policiesContext) IsShow_masking_policiesContext() {}

func NewShow_masking_policiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_masking_policiesContext {
	var p = new(Show_masking_policiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_masking_policies

	return p
}

func (s *Show_masking_policiesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_masking_policiesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_masking_policiesContext) MASKING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMASKING, 0)
}

func (s *Show_masking_policiesContext) POLICIES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICIES, 0)
}

func (s *Show_masking_policiesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_masking_policiesContext) In_obj() IIn_objContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_objContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_objContext)
}

func (s *Show_masking_policiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_masking_policiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_masking_policiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_masking_policies(s)
	}
}

func (s *Show_masking_policiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_masking_policies(s)
	}
}

func (s *Show_masking_policiesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_masking_policies(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_masking_policies() (localctx IShow_masking_policiesContext) {
	this := p
	_ = this

	localctx = NewShow_masking_policiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 722, SnowflakeParserRULE_show_masking_policies)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9663)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9664)
		p.Match(SnowflakeParserMASKING)
	}
	{
		p.SetState(9665)
		p.Match(SnowflakeParserPOLICIES)
	}
	p.SetState(9667)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9666)
			p.Like_pattern()
		}

	}
	p.SetState(9670)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9669)
			p.In_obj()
		}

	}



	return localctx
}


// IIn_objContext is an interface to support dynamic dispatch.
type IIn_objContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIn_objContext differentiates from other interfaces.
	IsIn_objContext()
}

type In_objContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIn_objContext() *In_objContext {
	var p = new(In_objContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_in_obj
	return p
}

func (*In_objContext) IsIn_objContext() {}

func NewIn_objContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *In_objContext {
	var p = new(In_objContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_in_obj

	return p
}

func (s *In_objContext) GetParser() antlr.Parser { return s.parser }

func (s *In_objContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *In_objContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *In_objContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *In_objContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *In_objContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *In_objContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *In_objContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *In_objContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *In_objContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterIn_obj(s)
	}
}

func (s *In_objContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitIn_obj(s)
	}
}

func (s *In_objContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitIn_obj(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) In_obj() (localctx IIn_objContext) {
	this := p
	_ = this

	localctx = NewIn_objContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 724, SnowflakeParserRULE_in_obj)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9672)
		p.Match(SnowflakeParserIN)
	}
	p.SetState(9681)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1211, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(9673)
			p.Match(SnowflakeParserACCOUNT)
		}


	case 2:
		{
			p.SetState(9674)
			p.Match(SnowflakeParserDATABASE)
		}


	case 3:
		{
			p.SetState(9675)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(9676)
			p.Id_()
		}


	case 4:
		{
			p.SetState(9677)
			p.Match(SnowflakeParserSCHEMA)
		}


	case 5:
		{
			p.SetState(9678)
			p.Match(SnowflakeParserSCHEMA)
		}
		{
			p.SetState(9679)
			p.Schema_name()
		}


	case 6:
		{
			p.SetState(9680)
			p.Schema_name()
		}

	}



	return localctx
}


// IIn_obj_2Context is an interface to support dynamic dispatch.
type IIn_obj_2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIn_obj_2Context differentiates from other interfaces.
	IsIn_obj_2Context()
}

type In_obj_2Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIn_obj_2Context() *In_obj_2Context {
	var p = new(In_obj_2Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_in_obj_2
	return p
}

func (*In_obj_2Context) IsIn_obj_2Context() {}

func NewIn_obj_2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *In_obj_2Context {
	var p = new(In_obj_2Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_in_obj_2

	return p
}

func (s *In_obj_2Context) GetParser() antlr.Parser { return s.parser }

func (s *In_obj_2Context) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *In_obj_2Context) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *In_obj_2Context) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *In_obj_2Context) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *In_obj_2Context) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *In_obj_2Context) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *In_obj_2Context) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *In_obj_2Context) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *In_obj_2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *In_obj_2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *In_obj_2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterIn_obj_2(s)
	}
}

func (s *In_obj_2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitIn_obj_2(s)
	}
}

func (s *In_obj_2Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitIn_obj_2(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) In_obj_2() (localctx IIn_obj_2Context) {
	this := p
	_ = this

	localctx = NewIn_obj_2Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 726, SnowflakeParserRULE_in_obj_2)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9683)
		p.Match(SnowflakeParserIN)
	}
	p.SetState(9696)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1214, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(9684)
			p.Match(SnowflakeParserACCOUNT)
		}


	case 2:
		{
			p.SetState(9685)
			p.Match(SnowflakeParserDATABASE)
		}
		p.SetState(9687)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(9686)
				p.Id_()
			}

		}


	case 3:
		{
			p.SetState(9689)
			p.Match(SnowflakeParserSCHEMA)
		}
		p.SetState(9691)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(9690)
				p.Schema_name()
			}

		}


	case 4:
		{
			p.SetState(9693)
			p.Match(SnowflakeParserTABLE)
		}


	case 5:
		{
			p.SetState(9694)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(9695)
			p.Object_name()
		}

	}



	return localctx
}


// IShow_materialized_viewsContext is an interface to support dynamic dispatch.
type IShow_materialized_viewsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_materialized_viewsContext differentiates from other interfaces.
	IsShow_materialized_viewsContext()
}

type Show_materialized_viewsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_materialized_viewsContext() *Show_materialized_viewsContext {
	var p = new(Show_materialized_viewsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_materialized_views
	return p
}

func (*Show_materialized_viewsContext) IsShow_materialized_viewsContext() {}

func NewShow_materialized_viewsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_materialized_viewsContext {
	var p = new(Show_materialized_viewsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_materialized_views

	return p
}

func (s *Show_materialized_viewsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_materialized_viewsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_materialized_viewsContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATERIALIZED, 0)
}

func (s *Show_materialized_viewsContext) VIEWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEWS, 0)
}

func (s *Show_materialized_viewsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_materialized_viewsContext) In_obj() IIn_objContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_objContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_objContext)
}

func (s *Show_materialized_viewsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_materialized_viewsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_materialized_viewsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_materialized_views(s)
	}
}

func (s *Show_materialized_viewsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_materialized_views(s)
	}
}

func (s *Show_materialized_viewsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_materialized_views(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_materialized_views() (localctx IShow_materialized_viewsContext) {
	this := p
	_ = this

	localctx = NewShow_materialized_viewsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 728, SnowflakeParserRULE_show_materialized_views)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9698)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9699)
		p.Match(SnowflakeParserMATERIALIZED)
	}
	{
		p.SetState(9700)
		p.Match(SnowflakeParserVIEWS)
	}
	p.SetState(9702)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9701)
			p.Like_pattern()
		}

	}
	p.SetState(9705)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9704)
			p.In_obj()
		}

	}



	return localctx
}


// IShow_network_policiesContext is an interface to support dynamic dispatch.
type IShow_network_policiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_network_policiesContext differentiates from other interfaces.
	IsShow_network_policiesContext()
}

type Show_network_policiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_network_policiesContext() *Show_network_policiesContext {
	var p = new(Show_network_policiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_network_policies
	return p
}

func (*Show_network_policiesContext) IsShow_network_policiesContext() {}

func NewShow_network_policiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_network_policiesContext {
	var p = new(Show_network_policiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_network_policies

	return p
}

func (s *Show_network_policiesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_network_policiesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_network_policiesContext) NETWORK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK, 0)
}

func (s *Show_network_policiesContext) POLICIES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICIES, 0)
}

func (s *Show_network_policiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_network_policiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_network_policiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_network_policies(s)
	}
}

func (s *Show_network_policiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_network_policies(s)
	}
}

func (s *Show_network_policiesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_network_policies(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_network_policies() (localctx IShow_network_policiesContext) {
	this := p
	_ = this

	localctx = NewShow_network_policiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 730, SnowflakeParserRULE_show_network_policies)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9707)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9708)
		p.Match(SnowflakeParserNETWORK)
	}
	{
		p.SetState(9709)
		p.Match(SnowflakeParserPOLICIES)
	}



	return localctx
}


// IShow_objectsContext is an interface to support dynamic dispatch.
type IShow_objectsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_objectsContext differentiates from other interfaces.
	IsShow_objectsContext()
}

type Show_objectsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_objectsContext() *Show_objectsContext {
	var p = new(Show_objectsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_objects
	return p
}

func (*Show_objectsContext) IsShow_objectsContext() {}

func NewShow_objectsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_objectsContext {
	var p = new(Show_objectsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_objects

	return p
}

func (s *Show_objectsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_objectsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_objectsContext) OBJECTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOBJECTS, 0)
}

func (s *Show_objectsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_objectsContext) In_obj() IIn_objContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_objContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_objContext)
}

func (s *Show_objectsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_objectsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_objectsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_objects(s)
	}
}

func (s *Show_objectsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_objects(s)
	}
}

func (s *Show_objectsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_objects(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_objects() (localctx IShow_objectsContext) {
	this := p
	_ = this

	localctx = NewShow_objectsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 732, SnowflakeParserRULE_show_objects)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9711)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9712)
		p.Match(SnowflakeParserOBJECTS)
	}
	p.SetState(9714)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9713)
			p.Like_pattern()
		}

	}
	p.SetState(9717)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9716)
			p.In_obj()
		}

	}



	return localctx
}


// IShow_organization_accountsContext is an interface to support dynamic dispatch.
type IShow_organization_accountsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_organization_accountsContext differentiates from other interfaces.
	IsShow_organization_accountsContext()
}

type Show_organization_accountsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_organization_accountsContext() *Show_organization_accountsContext {
	var p = new(Show_organization_accountsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_organization_accounts
	return p
}

func (*Show_organization_accountsContext) IsShow_organization_accountsContext() {}

func NewShow_organization_accountsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_organization_accountsContext {
	var p = new(Show_organization_accountsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_organization_accounts

	return p
}

func (s *Show_organization_accountsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_organization_accountsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_organization_accountsContext) ORGANIZATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserORGANIZATION, 0)
}

func (s *Show_organization_accountsContext) ACCOUNTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNTS, 0)
}

func (s *Show_organization_accountsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_organization_accountsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_organization_accountsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_organization_accountsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_organization_accounts(s)
	}
}

func (s *Show_organization_accountsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_organization_accounts(s)
	}
}

func (s *Show_organization_accountsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_organization_accounts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_organization_accounts() (localctx IShow_organization_accountsContext) {
	this := p
	_ = this

	localctx = NewShow_organization_accountsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 734, SnowflakeParserRULE_show_organization_accounts)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9719)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9720)
		p.Match(SnowflakeParserORGANIZATION)
	}
	{
		p.SetState(9721)
		p.Match(SnowflakeParserACCOUNTS)
	}
	p.SetState(9723)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9722)
			p.Like_pattern()
		}

	}



	return localctx
}


// IIn_forContext is an interface to support dynamic dispatch.
type IIn_forContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIn_forContext differentiates from other interfaces.
	IsIn_forContext()
}

type In_forContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIn_forContext() *In_forContext {
	var p = new(In_forContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_in_for
	return p
}

func (*In_forContext) IsIn_forContext() {}

func NewIn_forContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *In_forContext {
	var p = new(In_forContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_in_for

	return p
}

func (s *In_forContext) GetParser() antlr.Parser { return s.parser }

func (s *In_forContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *In_forContext) FOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFOR, 0)
}

func (s *In_forContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *In_forContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *In_forContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterIn_for(s)
	}
}

func (s *In_forContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitIn_for(s)
	}
}

func (s *In_forContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitIn_for(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) In_for() (localctx IIn_forContext) {
	this := p
	_ = this

	localctx = NewIn_forContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 736, SnowflakeParserRULE_in_for)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9725)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserFOR || _la == SnowflakeParserIN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IShow_parametersContext is an interface to support dynamic dispatch.
type IShow_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_parametersContext differentiates from other interfaces.
	IsShow_parametersContext()
}

type Show_parametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_parametersContext() *Show_parametersContext {
	var p = new(Show_parametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_parameters
	return p
}

func (*Show_parametersContext) IsShow_parametersContext() {}

func NewShow_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_parametersContext {
	var p = new(Show_parametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_parameters

	return p
}

func (s *Show_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_parametersContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_parametersContext) PARAMETERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPARAMETERS, 0)
}

func (s *Show_parametersContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_parametersContext) In_for() IIn_forContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_forContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_forContext)
}

func (s *Show_parametersContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION, 0)
}

func (s *Show_parametersContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_parametersContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Show_parametersContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Show_parametersContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Show_parametersContext) WAREHOUSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSE, 0)
}

func (s *Show_parametersContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Show_parametersContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Show_parametersContext) TASK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTASK, 0)
}

func (s *Show_parametersContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_parameters(s)
	}
}

func (s *Show_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_parameters(s)
	}
}

func (s *Show_parametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_parameters(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_parameters() (localctx IShow_parametersContext) {
	this := p
	_ = this

	localctx = NewShow_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 738, SnowflakeParserRULE_show_parameters)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9727)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9728)
		p.Match(SnowflakeParserPARAMETERS)
	}
	p.SetState(9730)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9729)
			p.Like_pattern()
		}

	}
	p.SetState(9747)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserFOR || _la == SnowflakeParserIN {
		{
			p.SetState(9732)
			p.In_for()
		}
		p.SetState(9745)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSESSION:
			{
				p.SetState(9733)
				p.Match(SnowflakeParserSESSION)
			}


		case SnowflakeParserACCOUNT:
			{
				p.SetState(9734)
				p.Match(SnowflakeParserACCOUNT)
			}


		case SnowflakeParserUSER:
			{
				p.SetState(9735)
				p.Match(SnowflakeParserUSER)
			}
			p.SetState(9737)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
				{
					p.SetState(9736)
					p.Id_()
				}

			}


		case SnowflakeParserDATABASE, SnowflakeParserSCHEMA, SnowflakeParserTASK, SnowflakeParserWAREHOUSE:
			{
				p.SetState(9739)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SnowflakeParserDATABASE || _la == SnowflakeParserSCHEMA || _la == SnowflakeParserTASK || _la == SnowflakeParserWAREHOUSE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(9741)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
				{
					p.SetState(9740)
					p.Id_()
				}

			}


		case SnowflakeParserTABLE:
			{
				p.SetState(9743)
				p.Match(SnowflakeParserTABLE)
			}
			{
				p.SetState(9744)
				p.Object_name()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}



	return localctx
}


// IShow_pipesContext is an interface to support dynamic dispatch.
type IShow_pipesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_pipesContext differentiates from other interfaces.
	IsShow_pipesContext()
}

type Show_pipesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_pipesContext() *Show_pipesContext {
	var p = new(Show_pipesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_pipes
	return p
}

func (*Show_pipesContext) IsShow_pipesContext() {}

func NewShow_pipesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_pipesContext {
	var p = new(Show_pipesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_pipes

	return p
}

func (s *Show_pipesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_pipesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_pipesContext) PIPES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPIPES, 0)
}

func (s *Show_pipesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_pipesContext) In_obj() IIn_objContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_objContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_objContext)
}

func (s *Show_pipesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_pipesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_pipesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_pipes(s)
	}
}

func (s *Show_pipesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_pipes(s)
	}
}

func (s *Show_pipesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_pipes(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_pipes() (localctx IShow_pipesContext) {
	this := p
	_ = this

	localctx = NewShow_pipesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 740, SnowflakeParserRULE_show_pipes)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9749)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9750)
		p.Match(SnowflakeParserPIPES)
	}
	p.SetState(9752)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9751)
			p.Like_pattern()
		}

	}
	p.SetState(9755)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9754)
			p.In_obj()
		}

	}



	return localctx
}


// IShow_primary_keysContext is an interface to support dynamic dispatch.
type IShow_primary_keysContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_primary_keysContext differentiates from other interfaces.
	IsShow_primary_keysContext()
}

type Show_primary_keysContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_primary_keysContext() *Show_primary_keysContext {
	var p = new(Show_primary_keysContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_primary_keys
	return p
}

func (*Show_primary_keysContext) IsShow_primary_keysContext() {}

func NewShow_primary_keysContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_primary_keysContext {
	var p = new(Show_primary_keysContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_primary_keys

	return p
}

func (s *Show_primary_keysContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_primary_keysContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_primary_keysContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIMARY, 0)
}

func (s *Show_primary_keysContext) KEYS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserKEYS, 0)
}

func (s *Show_primary_keysContext) TERSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTERSE, 0)
}

func (s *Show_primary_keysContext) In_obj_2() IIn_obj_2Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_obj_2Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_obj_2Context)
}

func (s *Show_primary_keysContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_primary_keysContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_primary_keysContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_primary_keys(s)
	}
}

func (s *Show_primary_keysContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_primary_keys(s)
	}
}

func (s *Show_primary_keysContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_primary_keys(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_primary_keys() (localctx IShow_primary_keysContext) {
	this := p
	_ = this

	localctx = NewShow_primary_keysContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 742, SnowflakeParserRULE_show_primary_keys)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9757)
		p.Match(SnowflakeParserSHOW)
	}
	p.SetState(9759)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTERSE {
		{
			p.SetState(9758)
			p.Match(SnowflakeParserTERSE)
		}

	}
	{
		p.SetState(9761)
		p.Match(SnowflakeParserPRIMARY)
	}
	{
		p.SetState(9762)
		p.Match(SnowflakeParserKEYS)
	}
	p.SetState(9764)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9763)
			p.In_obj_2()
		}

	}



	return localctx
}


// IShow_proceduresContext is an interface to support dynamic dispatch.
type IShow_proceduresContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_proceduresContext differentiates from other interfaces.
	IsShow_proceduresContext()
}

type Show_proceduresContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_proceduresContext() *Show_proceduresContext {
	var p = new(Show_proceduresContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_procedures
	return p
}

func (*Show_proceduresContext) IsShow_proceduresContext() {}

func NewShow_proceduresContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_proceduresContext {
	var p = new(Show_proceduresContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_procedures

	return p
}

func (s *Show_proceduresContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_proceduresContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_proceduresContext) PROCEDURES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPROCEDURES, 0)
}

func (s *Show_proceduresContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_proceduresContext) In_obj() IIn_objContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_objContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_objContext)
}

func (s *Show_proceduresContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_proceduresContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_proceduresContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_procedures(s)
	}
}

func (s *Show_proceduresContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_procedures(s)
	}
}

func (s *Show_proceduresContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_procedures(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_procedures() (localctx IShow_proceduresContext) {
	this := p
	_ = this

	localctx = NewShow_proceduresContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 744, SnowflakeParserRULE_show_procedures)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9766)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9767)
		p.Match(SnowflakeParserPROCEDURES)
	}
	p.SetState(9769)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9768)
			p.Like_pattern()
		}

	}
	p.SetState(9772)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9771)
			p.In_obj()
		}

	}



	return localctx
}


// IShow_regionsContext is an interface to support dynamic dispatch.
type IShow_regionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_regionsContext differentiates from other interfaces.
	IsShow_regionsContext()
}

type Show_regionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_regionsContext() *Show_regionsContext {
	var p = new(Show_regionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_regions
	return p
}

func (*Show_regionsContext) IsShow_regionsContext() {}

func NewShow_regionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_regionsContext {
	var p = new(Show_regionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_regions

	return p
}

func (s *Show_regionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_regionsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_regionsContext) REGIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREGIONS, 0)
}

func (s *Show_regionsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_regionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_regionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_regionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_regions(s)
	}
}

func (s *Show_regionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_regions(s)
	}
}

func (s *Show_regionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_regions(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_regions() (localctx IShow_regionsContext) {
	this := p
	_ = this

	localctx = NewShow_regionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 746, SnowflakeParserRULE_show_regions)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9774)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9775)
		p.Match(SnowflakeParserREGIONS)
	}
	p.SetState(9777)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9776)
			p.Like_pattern()
		}

	}



	return localctx
}


// IShow_replication_accountsContext is an interface to support dynamic dispatch.
type IShow_replication_accountsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_replication_accountsContext differentiates from other interfaces.
	IsShow_replication_accountsContext()
}

type Show_replication_accountsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_replication_accountsContext() *Show_replication_accountsContext {
	var p = new(Show_replication_accountsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_replication_accounts
	return p
}

func (*Show_replication_accountsContext) IsShow_replication_accountsContext() {}

func NewShow_replication_accountsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_replication_accountsContext {
	var p = new(Show_replication_accountsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_replication_accounts

	return p
}

func (s *Show_replication_accountsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_replication_accountsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_replication_accountsContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION, 0)
}

func (s *Show_replication_accountsContext) ACCOUNTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNTS, 0)
}

func (s *Show_replication_accountsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_replication_accountsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_replication_accountsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_replication_accountsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_replication_accounts(s)
	}
}

func (s *Show_replication_accountsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_replication_accounts(s)
	}
}

func (s *Show_replication_accountsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_replication_accounts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_replication_accounts() (localctx IShow_replication_accountsContext) {
	this := p
	_ = this

	localctx = NewShow_replication_accountsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 748, SnowflakeParserRULE_show_replication_accounts)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9779)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9780)
		p.Match(SnowflakeParserREPLICATION)
	}
	{
		p.SetState(9781)
		p.Match(SnowflakeParserACCOUNTS)
	}
	p.SetState(9783)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9782)
			p.Like_pattern()
		}

	}



	return localctx
}


// IShow_replication_databasesContext is an interface to support dynamic dispatch.
type IShow_replication_databasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_replication_databasesContext differentiates from other interfaces.
	IsShow_replication_databasesContext()
}

type Show_replication_databasesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_replication_databasesContext() *Show_replication_databasesContext {
	var p = new(Show_replication_databasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_replication_databases
	return p
}

func (*Show_replication_databasesContext) IsShow_replication_databasesContext() {}

func NewShow_replication_databasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_replication_databasesContext {
	var p = new(Show_replication_databasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_replication_databases

	return p
}

func (s *Show_replication_databasesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_replication_databasesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_replication_databasesContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION, 0)
}

func (s *Show_replication_databasesContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASES, 0)
}

func (s *Show_replication_databasesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_replication_databasesContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Show_replication_databasesContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIMARY, 0)
}

func (s *Show_replication_databasesContext) Account_identifier() IAccount_identifierContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccount_identifierContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccount_identifierContext)
}

func (s *Show_replication_databasesContext) DOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, 0)
}

func (s *Show_replication_databasesContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_replication_databasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_replication_databasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_replication_databasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_replication_databases(s)
	}
}

func (s *Show_replication_databasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_replication_databases(s)
	}
}

func (s *Show_replication_databasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_replication_databases(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_replication_databases() (localctx IShow_replication_databasesContext) {
	this := p
	_ = this

	localctx = NewShow_replication_databasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 750, SnowflakeParserRULE_show_replication_databases)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9785)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9786)
		p.Match(SnowflakeParserREPLICATION)
	}
	{
		p.SetState(9787)
		p.Match(SnowflakeParserDATABASES)
	}
	p.SetState(9789)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9788)
			p.Like_pattern()
		}

	}
	p.SetState(9797)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1234, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(9791)
			p.Match(SnowflakeParserWITH)
		}
		{
			p.SetState(9792)
			p.Match(SnowflakeParserPRIMARY)
		}
		{
			p.SetState(9793)
			p.Account_identifier()
		}
		{
			p.SetState(9794)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(9795)
			p.Id_()
		}


	}



	return localctx
}


// IShow_replication_groupsContext is an interface to support dynamic dispatch.
type IShow_replication_groupsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_replication_groupsContext differentiates from other interfaces.
	IsShow_replication_groupsContext()
}

type Show_replication_groupsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_replication_groupsContext() *Show_replication_groupsContext {
	var p = new(Show_replication_groupsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_replication_groups
	return p
}

func (*Show_replication_groupsContext) IsShow_replication_groupsContext() {}

func NewShow_replication_groupsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_replication_groupsContext {
	var p = new(Show_replication_groupsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_replication_groups

	return p
}

func (s *Show_replication_groupsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_replication_groupsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_replication_groupsContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION, 0)
}

func (s *Show_replication_groupsContext) GROUPS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUPS, 0)
}

func (s *Show_replication_groupsContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_replication_groupsContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_replication_groupsContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_replication_groupsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_replication_groupsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_replication_groupsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_replication_groups(s)
	}
}

func (s *Show_replication_groupsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_replication_groups(s)
	}
}

func (s *Show_replication_groupsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_replication_groups(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_replication_groups() (localctx IShow_replication_groupsContext) {
	this := p
	_ = this

	localctx = NewShow_replication_groupsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 752, SnowflakeParserRULE_show_replication_groups)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9799)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9800)
		p.Match(SnowflakeParserREPLICATION)
	}
	{
		p.SetState(9801)
		p.Match(SnowflakeParserGROUPS)
	}
	p.SetState(9805)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9802)
			p.Match(SnowflakeParserIN)
		}
		{
			p.SetState(9803)
			p.Match(SnowflakeParserACCOUNT)
		}
		{
			p.SetState(9804)
			p.Id_()
		}

	}



	return localctx
}


// IShow_resource_monitorsContext is an interface to support dynamic dispatch.
type IShow_resource_monitorsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_resource_monitorsContext differentiates from other interfaces.
	IsShow_resource_monitorsContext()
}

type Show_resource_monitorsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_resource_monitorsContext() *Show_resource_monitorsContext {
	var p = new(Show_resource_monitorsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_resource_monitors
	return p
}

func (*Show_resource_monitorsContext) IsShow_resource_monitorsContext() {}

func NewShow_resource_monitorsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_resource_monitorsContext {
	var p = new(Show_resource_monitorsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_resource_monitors

	return p
}

func (s *Show_resource_monitorsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_resource_monitorsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_resource_monitorsContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESOURCE, 0)
}

func (s *Show_resource_monitorsContext) MONITORS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMONITORS, 0)
}

func (s *Show_resource_monitorsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_resource_monitorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_resource_monitorsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_resource_monitorsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_resource_monitors(s)
	}
}

func (s *Show_resource_monitorsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_resource_monitors(s)
	}
}

func (s *Show_resource_monitorsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_resource_monitors(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_resource_monitors() (localctx IShow_resource_monitorsContext) {
	this := p
	_ = this

	localctx = NewShow_resource_monitorsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 754, SnowflakeParserRULE_show_resource_monitors)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9807)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9808)
		p.Match(SnowflakeParserRESOURCE)
	}
	{
		p.SetState(9809)
		p.Match(SnowflakeParserMONITORS)
	}
	p.SetState(9811)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9810)
			p.Like_pattern()
		}

	}



	return localctx
}


// IShow_rolesContext is an interface to support dynamic dispatch.
type IShow_rolesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_rolesContext differentiates from other interfaces.
	IsShow_rolesContext()
}

type Show_rolesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_rolesContext() *Show_rolesContext {
	var p = new(Show_rolesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_roles
	return p
}

func (*Show_rolesContext) IsShow_rolesContext() {}

func NewShow_rolesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_rolesContext {
	var p = new(Show_rolesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_roles

	return p
}

func (s *Show_rolesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_rolesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_rolesContext) ROLES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLES, 0)
}

func (s *Show_rolesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_rolesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_rolesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_rolesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_roles(s)
	}
}

func (s *Show_rolesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_roles(s)
	}
}

func (s *Show_rolesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_roles(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_roles() (localctx IShow_rolesContext) {
	this := p
	_ = this

	localctx = NewShow_rolesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 756, SnowflakeParserRULE_show_roles)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9813)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9814)
		p.Match(SnowflakeParserROLES)
	}
	p.SetState(9816)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9815)
			p.Like_pattern()
		}

	}



	return localctx
}


// IShow_row_access_policiesContext is an interface to support dynamic dispatch.
type IShow_row_access_policiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_row_access_policiesContext differentiates from other interfaces.
	IsShow_row_access_policiesContext()
}

type Show_row_access_policiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_row_access_policiesContext() *Show_row_access_policiesContext {
	var p = new(Show_row_access_policiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_row_access_policies
	return p
}

func (*Show_row_access_policiesContext) IsShow_row_access_policiesContext() {}

func NewShow_row_access_policiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_row_access_policiesContext {
	var p = new(Show_row_access_policiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_row_access_policies

	return p
}

func (s *Show_row_access_policiesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_row_access_policiesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_row_access_policiesContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *Show_row_access_policiesContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCESS, 0)
}

func (s *Show_row_access_policiesContext) POLICIES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICIES, 0)
}

func (s *Show_row_access_policiesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_row_access_policiesContext) In_obj() IIn_objContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_objContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_objContext)
}

func (s *Show_row_access_policiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_row_access_policiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_row_access_policiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_row_access_policies(s)
	}
}

func (s *Show_row_access_policiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_row_access_policies(s)
	}
}

func (s *Show_row_access_policiesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_row_access_policies(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_row_access_policies() (localctx IShow_row_access_policiesContext) {
	this := p
	_ = this

	localctx = NewShow_row_access_policiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 758, SnowflakeParserRULE_show_row_access_policies)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9818)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9819)
		p.Match(SnowflakeParserROW)
	}
	{
		p.SetState(9820)
		p.Match(SnowflakeParserACCESS)
	}
	{
		p.SetState(9821)
		p.Match(SnowflakeParserPOLICIES)
	}
	p.SetState(9823)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9822)
			p.Like_pattern()
		}

	}
	p.SetState(9826)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9825)
			p.In_obj()
		}

	}



	return localctx
}


// IShow_schemasContext is an interface to support dynamic dispatch.
type IShow_schemasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_schemasContext differentiates from other interfaces.
	IsShow_schemasContext()
}

type Show_schemasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_schemasContext() *Show_schemasContext {
	var p = new(Show_schemasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_schemas
	return p
}

func (*Show_schemasContext) IsShow_schemasContext() {}

func NewShow_schemasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_schemasContext {
	var p = new(Show_schemasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_schemas

	return p
}

func (s *Show_schemasContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_schemasContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_schemasContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMAS, 0)
}

func (s *Show_schemasContext) TERSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTERSE, 0)
}

func (s *Show_schemasContext) HISTORY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserHISTORY, 0)
}

func (s *Show_schemasContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_schemasContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_schemasContext) Starts_with() IStarts_withContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStarts_withContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStarts_withContext)
}

func (s *Show_schemasContext) Limit_rows() ILimit_rowsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_rowsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_rowsContext)
}

func (s *Show_schemasContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_schemasContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Show_schemasContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_schemasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_schemasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_schemasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_schemas(s)
	}
}

func (s *Show_schemasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_schemas(s)
	}
}

func (s *Show_schemasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_schemas(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_schemas() (localctx IShow_schemasContext) {
	this := p
	_ = this

	localctx = NewShow_schemasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 760, SnowflakeParserRULE_show_schemas)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9828)
		p.Match(SnowflakeParserSHOW)
	}
	p.SetState(9830)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTERSE {
		{
			p.SetState(9829)
			p.Match(SnowflakeParserTERSE)
		}

	}
	{
		p.SetState(9832)
		p.Match(SnowflakeParserSCHEMAS)
	}
	p.SetState(9834)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserHISTORY {
		{
			p.SetState(9833)
			p.Match(SnowflakeParserHISTORY)
		}

	}
	p.SetState(9837)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9836)
			p.Like_pattern()
		}

	}
	p.SetState(9847)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9839)
			p.Match(SnowflakeParserIN)
		}
		p.SetState(9845)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserACCOUNT:
			{
				p.SetState(9840)
				p.Match(SnowflakeParserACCOUNT)
			}


		case SnowflakeParserDATABASE:
			{
				p.SetState(9841)
				p.Match(SnowflakeParserDATABASE)
			}
			p.SetState(9843)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
				{
					p.SetState(9842)
					p.Id_()
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(9850)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSTARTS {
		{
			p.SetState(9849)
			p.Starts_with()
		}

	}
	p.SetState(9853)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIMIT {
		{
			p.SetState(9852)
			p.Limit_rows()
		}

	}



	return localctx
}


// IShow_sequencesContext is an interface to support dynamic dispatch.
type IShow_sequencesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_sequencesContext differentiates from other interfaces.
	IsShow_sequencesContext()
}

type Show_sequencesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_sequencesContext() *Show_sequencesContext {
	var p = new(Show_sequencesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_sequences
	return p
}

func (*Show_sequencesContext) IsShow_sequencesContext() {}

func NewShow_sequencesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_sequencesContext {
	var p = new(Show_sequencesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_sequences

	return p
}

func (s *Show_sequencesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_sequencesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_sequencesContext) SEQUENCES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEQUENCES, 0)
}

func (s *Show_sequencesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_sequencesContext) In_obj() IIn_objContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_objContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_objContext)
}

func (s *Show_sequencesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_sequencesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_sequencesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_sequences(s)
	}
}

func (s *Show_sequencesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_sequences(s)
	}
}

func (s *Show_sequencesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_sequences(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_sequences() (localctx IShow_sequencesContext) {
	this := p
	_ = this

	localctx = NewShow_sequencesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 762, SnowflakeParserRULE_show_sequences)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9855)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9856)
		p.Match(SnowflakeParserSEQUENCES)
	}
	p.SetState(9858)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9857)
			p.Like_pattern()
		}

	}
	p.SetState(9861)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9860)
			p.In_obj()
		}

	}



	return localctx
}


// IShow_session_policiesContext is an interface to support dynamic dispatch.
type IShow_session_policiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_session_policiesContext differentiates from other interfaces.
	IsShow_session_policiesContext()
}

type Show_session_policiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_session_policiesContext() *Show_session_policiesContext {
	var p = new(Show_session_policiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_session_policies
	return p
}

func (*Show_session_policiesContext) IsShow_session_policiesContext() {}

func NewShow_session_policiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_session_policiesContext {
	var p = new(Show_session_policiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_session_policies

	return p
}

func (s *Show_session_policiesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_session_policiesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_session_policiesContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSESSION, 0)
}

func (s *Show_session_policiesContext) POLICIES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICIES, 0)
}

func (s *Show_session_policiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_session_policiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_session_policiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_session_policies(s)
	}
}

func (s *Show_session_policiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_session_policies(s)
	}
}

func (s *Show_session_policiesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_session_policies(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_session_policies() (localctx IShow_session_policiesContext) {
	this := p
	_ = this

	localctx = NewShow_session_policiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 764, SnowflakeParserRULE_show_session_policies)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9863)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9864)
		p.Match(SnowflakeParserSESSION)
	}
	{
		p.SetState(9865)
		p.Match(SnowflakeParserPOLICIES)
	}



	return localctx
}


// IShow_sharesContext is an interface to support dynamic dispatch.
type IShow_sharesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_sharesContext differentiates from other interfaces.
	IsShow_sharesContext()
}

type Show_sharesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_sharesContext() *Show_sharesContext {
	var p = new(Show_sharesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_shares
	return p
}

func (*Show_sharesContext) IsShow_sharesContext() {}

func NewShow_sharesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_sharesContext {
	var p = new(Show_sharesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_shares

	return p
}

func (s *Show_sharesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_sharesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_sharesContext) SHARES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARES, 0)
}

func (s *Show_sharesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_sharesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_sharesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_sharesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_shares(s)
	}
}

func (s *Show_sharesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_shares(s)
	}
}

func (s *Show_sharesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_shares(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_shares() (localctx IShow_sharesContext) {
	this := p
	_ = this

	localctx = NewShow_sharesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 766, SnowflakeParserRULE_show_shares)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9867)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9868)
		p.Match(SnowflakeParserSHARES)
	}
	p.SetState(9870)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9869)
			p.Like_pattern()
		}

	}



	return localctx
}


// IShow_shares_in_failover_groupContext is an interface to support dynamic dispatch.
type IShow_shares_in_failover_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_shares_in_failover_groupContext differentiates from other interfaces.
	IsShow_shares_in_failover_groupContext()
}

type Show_shares_in_failover_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_shares_in_failover_groupContext() *Show_shares_in_failover_groupContext {
	var p = new(Show_shares_in_failover_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_shares_in_failover_group
	return p
}

func (*Show_shares_in_failover_groupContext) IsShow_shares_in_failover_groupContext() {}

func NewShow_shares_in_failover_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_shares_in_failover_groupContext {
	var p = new(Show_shares_in_failover_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_shares_in_failover_group

	return p
}

func (s *Show_shares_in_failover_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_shares_in_failover_groupContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_shares_in_failover_groupContext) SHARES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARES, 0)
}

func (s *Show_shares_in_failover_groupContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_shares_in_failover_groupContext) FAILOVER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFAILOVER, 0)
}

func (s *Show_shares_in_failover_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUP, 0)
}

func (s *Show_shares_in_failover_groupContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_shares_in_failover_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_shares_in_failover_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_shares_in_failover_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_shares_in_failover_group(s)
	}
}

func (s *Show_shares_in_failover_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_shares_in_failover_group(s)
	}
}

func (s *Show_shares_in_failover_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_shares_in_failover_group(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_shares_in_failover_group() (localctx IShow_shares_in_failover_groupContext) {
	this := p
	_ = this

	localctx = NewShow_shares_in_failover_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 768, SnowflakeParserRULE_show_shares_in_failover_group)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9872)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9873)
		p.Match(SnowflakeParserSHARES)
	}
	{
		p.SetState(9874)
		p.Match(SnowflakeParserIN)
	}
	{
		p.SetState(9875)
		p.Match(SnowflakeParserFAILOVER)
	}
	{
		p.SetState(9876)
		p.Match(SnowflakeParserGROUP)
	}
	{
		p.SetState(9877)
		p.Id_()
	}



	return localctx
}


// IShow_shares_in_replication_groupContext is an interface to support dynamic dispatch.
type IShow_shares_in_replication_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_shares_in_replication_groupContext differentiates from other interfaces.
	IsShow_shares_in_replication_groupContext()
}

type Show_shares_in_replication_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_shares_in_replication_groupContext() *Show_shares_in_replication_groupContext {
	var p = new(Show_shares_in_replication_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_shares_in_replication_group
	return p
}

func (*Show_shares_in_replication_groupContext) IsShow_shares_in_replication_groupContext() {}

func NewShow_shares_in_replication_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_shares_in_replication_groupContext {
	var p = new(Show_shares_in_replication_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_shares_in_replication_group

	return p
}

func (s *Show_shares_in_replication_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_shares_in_replication_groupContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_shares_in_replication_groupContext) SHARES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARES, 0)
}

func (s *Show_shares_in_replication_groupContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_shares_in_replication_groupContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPLICATION, 0)
}

func (s *Show_shares_in_replication_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUP, 0)
}

func (s *Show_shares_in_replication_groupContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_shares_in_replication_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_shares_in_replication_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_shares_in_replication_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_shares_in_replication_group(s)
	}
}

func (s *Show_shares_in_replication_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_shares_in_replication_group(s)
	}
}

func (s *Show_shares_in_replication_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_shares_in_replication_group(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_shares_in_replication_group() (localctx IShow_shares_in_replication_groupContext) {
	this := p
	_ = this

	localctx = NewShow_shares_in_replication_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 770, SnowflakeParserRULE_show_shares_in_replication_group)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9879)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9880)
		p.Match(SnowflakeParserSHARES)
	}
	{
		p.SetState(9881)
		p.Match(SnowflakeParserIN)
	}
	{
		p.SetState(9882)
		p.Match(SnowflakeParserREPLICATION)
	}
	{
		p.SetState(9883)
		p.Match(SnowflakeParserGROUP)
	}
	{
		p.SetState(9884)
		p.Id_()
	}



	return localctx
}


// IShow_stagesContext is an interface to support dynamic dispatch.
type IShow_stagesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_stagesContext differentiates from other interfaces.
	IsShow_stagesContext()
}

type Show_stagesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_stagesContext() *Show_stagesContext {
	var p = new(Show_stagesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_stages
	return p
}

func (*Show_stagesContext) IsShow_stagesContext() {}

func NewShow_stagesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_stagesContext {
	var p = new(Show_stagesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_stages

	return p
}

func (s *Show_stagesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_stagesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_stagesContext) STAGES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGES, 0)
}

func (s *Show_stagesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_stagesContext) In_obj() IIn_objContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_objContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_objContext)
}

func (s *Show_stagesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_stagesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_stagesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_stages(s)
	}
}

func (s *Show_stagesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_stages(s)
	}
}

func (s *Show_stagesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_stages(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_stages() (localctx IShow_stagesContext) {
	this := p
	_ = this

	localctx = NewShow_stagesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 772, SnowflakeParserRULE_show_stages)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9886)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9887)
		p.Match(SnowflakeParserSTAGES)
	}
	p.SetState(9889)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9888)
			p.Like_pattern()
		}

	}
	p.SetState(9892)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9891)
			p.In_obj()
		}

	}



	return localctx
}


// IShow_streamsContext is an interface to support dynamic dispatch.
type IShow_streamsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_streamsContext differentiates from other interfaces.
	IsShow_streamsContext()
}

type Show_streamsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_streamsContext() *Show_streamsContext {
	var p = new(Show_streamsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_streams
	return p
}

func (*Show_streamsContext) IsShow_streamsContext() {}

func NewShow_streamsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_streamsContext {
	var p = new(Show_streamsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_streams

	return p
}

func (s *Show_streamsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_streamsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_streamsContext) STREAMS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTREAMS, 0)
}

func (s *Show_streamsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_streamsContext) In_obj() IIn_objContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_objContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_objContext)
}

func (s *Show_streamsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_streamsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_streamsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_streams(s)
	}
}

func (s *Show_streamsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_streams(s)
	}
}

func (s *Show_streamsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_streams(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_streams() (localctx IShow_streamsContext) {
	this := p
	_ = this

	localctx = NewShow_streamsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 774, SnowflakeParserRULE_show_streams)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9894)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9895)
		p.Match(SnowflakeParserSTREAMS)
	}
	p.SetState(9897)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9896)
			p.Like_pattern()
		}

	}
	p.SetState(9900)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9899)
			p.In_obj()
		}

	}



	return localctx
}


// IShow_tablesContext is an interface to support dynamic dispatch.
type IShow_tablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_tablesContext differentiates from other interfaces.
	IsShow_tablesContext()
}

type Show_tablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_tablesContext() *Show_tablesContext {
	var p = new(Show_tablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_tables
	return p
}

func (*Show_tablesContext) IsShow_tablesContext() {}

func NewShow_tablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_tablesContext {
	var p = new(Show_tablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_tables

	return p
}

func (s *Show_tablesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_tablesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_tablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLES, 0)
}

func (s *Show_tablesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_tablesContext) In_obj() IIn_objContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_objContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_objContext)
}

func (s *Show_tablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_tablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_tablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_tables(s)
	}
}

func (s *Show_tablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_tables(s)
	}
}

func (s *Show_tablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_tables(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_tables() (localctx IShow_tablesContext) {
	this := p
	_ = this

	localctx = NewShow_tablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 776, SnowflakeParserRULE_show_tables)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9902)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9903)
		p.Match(SnowflakeParserTABLES)
	}
	p.SetState(9905)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9904)
			p.Like_pattern()
		}

	}
	p.SetState(9908)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9907)
			p.In_obj()
		}

	}



	return localctx
}


// IShow_tagsContext is an interface to support dynamic dispatch.
type IShow_tagsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_tagsContext differentiates from other interfaces.
	IsShow_tagsContext()
}

type Show_tagsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_tagsContext() *Show_tagsContext {
	var p = new(Show_tagsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_tags
	return p
}

func (*Show_tagsContext) IsShow_tagsContext() {}

func NewShow_tagsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_tagsContext {
	var p = new(Show_tagsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_tags

	return p
}

func (s *Show_tagsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_tagsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_tagsContext) TAGS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTAGS, 0)
}

func (s *Show_tagsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_tagsContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_tagsContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_tagsContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Show_tagsContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_tagsContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Show_tagsContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Show_tagsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_tagsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_tagsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_tags(s)
	}
}

func (s *Show_tagsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_tags(s)
	}
}

func (s *Show_tagsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_tags(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_tags() (localctx IShow_tagsContext) {
	this := p
	_ = this

	localctx = NewShow_tagsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 778, SnowflakeParserRULE_show_tags)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9910)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9911)
		p.Match(SnowflakeParserTAGS)
	}
	p.SetState(9913)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9912)
			p.Like_pattern()
		}

	}
	p.SetState(9924)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1258, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(9915)
			p.Match(SnowflakeParserIN)
		}
		{
			p.SetState(9916)
			p.Match(SnowflakeParserACCOUNT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1258, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(9917)
			p.Match(SnowflakeParserDATABASE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1258, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(9918)
			p.Match(SnowflakeParserDATABASE)
		}
		{
			p.SetState(9919)
			p.Id_()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1258, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(9920)
			p.Match(SnowflakeParserSCHEMA)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1258, p.GetParserRuleContext()) == 5 {
		{
			p.SetState(9921)
			p.Match(SnowflakeParserSCHEMA)
		}
		{
			p.SetState(9922)
			p.Schema_name()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1258, p.GetParserRuleContext()) == 6 {
		{
			p.SetState(9923)
			p.Schema_name()
		}


	}



	return localctx
}


// IShow_tasksContext is an interface to support dynamic dispatch.
type IShow_tasksContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_tasksContext differentiates from other interfaces.
	IsShow_tasksContext()
}

type Show_tasksContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_tasksContext() *Show_tasksContext {
	var p = new(Show_tasksContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_tasks
	return p
}

func (*Show_tasksContext) IsShow_tasksContext() {}

func NewShow_tasksContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_tasksContext {
	var p = new(Show_tasksContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_tasks

	return p
}

func (s *Show_tasksContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_tasksContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_tasksContext) TASKS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTASKS, 0)
}

func (s *Show_tasksContext) TERSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTERSE, 0)
}

func (s *Show_tasksContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_tasksContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_tasksContext) Starts_with() IStarts_withContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStarts_withContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStarts_withContext)
}

func (s *Show_tasksContext) Limit_rows() ILimit_rowsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_rowsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_rowsContext)
}

func (s *Show_tasksContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_tasksContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Show_tasksContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_tasksContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Show_tasksContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Show_tasksContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_tasksContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_tasksContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_tasks(s)
	}
}

func (s *Show_tasksContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_tasks(s)
	}
}

func (s *Show_tasksContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_tasks(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_tasks() (localctx IShow_tasksContext) {
	this := p
	_ = this

	localctx = NewShow_tasksContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 780, SnowflakeParserRULE_show_tasks)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9926)
		p.Match(SnowflakeParserSHOW)
	}
	p.SetState(9928)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTERSE {
		{
			p.SetState(9927)
			p.Match(SnowflakeParserTERSE)
		}

	}
	{
		p.SetState(9930)
		p.Match(SnowflakeParserTASKS)
	}
	p.SetState(9932)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9931)
			p.Like_pattern()
		}

	}
	p.SetState(9948)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9934)
			p.Match(SnowflakeParserIN)
		}
		p.SetState(9946)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserACCOUNT:
			{
				p.SetState(9935)
				p.Match(SnowflakeParserACCOUNT)
			}


		case SnowflakeParserDATABASE:
			{
				p.SetState(9936)
				p.Match(SnowflakeParserDATABASE)
			}
			p.SetState(9938)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
				{
					p.SetState(9937)
					p.Id_()
				}

			}


		case SnowflakeParserEOF, SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCOPY, SnowflakeParserCREATE, SnowflakeParserDELETE, SnowflakeParserDESC, SnowflakeParserDESCRIBE, SnowflakeParserDROP, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserINSERT, SnowflakeParserINT, SnowflakeParserLIMIT, SnowflakeParserLIST, SnowflakeParserMERGE, SnowflakeParserPUT, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSCHEMA, SnowflakeParserSELECT, SnowflakeParserSET, SnowflakeParserSHOW, SnowflakeParserSTAGE, SnowflakeParserSTARTS, SnowflakeParserTRUNCATE, SnowflakeParserUNDROP, SnowflakeParserUNSET, SnowflakeParserUPDATE, SnowflakeParserUSE, SnowflakeParserWITH, SnowflakeParserBIGINT, SnowflakeParserDOUBLE_QUOTE_ID, SnowflakeParserDOUBLE_QUOTE_BLANK, SnowflakeParserID, SnowflakeParserSEMI:
			p.SetState(9941)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserSCHEMA {
				{
					p.SetState(9940)
					p.Match(SnowflakeParserSCHEMA)
				}

			}
			p.SetState(9944)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
				{
					p.SetState(9943)
					p.Schema_name()
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(9951)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSTARTS {
		{
			p.SetState(9950)
			p.Starts_with()
		}

	}
	p.SetState(9954)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIMIT {
		{
			p.SetState(9953)
			p.Limit_rows()
		}

	}



	return localctx
}


// IShow_transactionsContext is an interface to support dynamic dispatch.
type IShow_transactionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_transactionsContext differentiates from other interfaces.
	IsShow_transactionsContext()
}

type Show_transactionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_transactionsContext() *Show_transactionsContext {
	var p = new(Show_transactionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_transactions
	return p
}

func (*Show_transactionsContext) IsShow_transactionsContext() {}

func NewShow_transactionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_transactionsContext {
	var p = new(Show_transactionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_transactions

	return p
}

func (s *Show_transactionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_transactionsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_transactionsContext) TRANSACTIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTRANSACTIONS, 0)
}

func (s *Show_transactionsContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_transactionsContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_transactionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_transactionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_transactionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_transactions(s)
	}
}

func (s *Show_transactionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_transactions(s)
	}
}

func (s *Show_transactionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_transactions(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_transactions() (localctx IShow_transactionsContext) {
	this := p
	_ = this

	localctx = NewShow_transactionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 782, SnowflakeParserRULE_show_transactions)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9956)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9957)
		p.Match(SnowflakeParserTRANSACTIONS)
	}
	p.SetState(9960)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9958)
			p.Match(SnowflakeParserIN)
		}
		{
			p.SetState(9959)
			p.Match(SnowflakeParserACCOUNT)
		}

	}



	return localctx
}


// IShow_user_functionsContext is an interface to support dynamic dispatch.
type IShow_user_functionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_user_functionsContext differentiates from other interfaces.
	IsShow_user_functionsContext()
}

type Show_user_functionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_user_functionsContext() *Show_user_functionsContext {
	var p = new(Show_user_functionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_user_functions
	return p
}

func (*Show_user_functionsContext) IsShow_user_functionsContext() {}

func NewShow_user_functionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_user_functionsContext {
	var p = new(Show_user_functionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_user_functions

	return p
}

func (s *Show_user_functionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_user_functionsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_user_functionsContext) USER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSER, 0)
}

func (s *Show_user_functionsContext) FUNCTIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFUNCTIONS, 0)
}

func (s *Show_user_functionsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_user_functionsContext) In_obj() IIn_objContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_objContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_objContext)
}

func (s *Show_user_functionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_user_functionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_user_functionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_user_functions(s)
	}
}

func (s *Show_user_functionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_user_functions(s)
	}
}

func (s *Show_user_functionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_user_functions(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_user_functions() (localctx IShow_user_functionsContext) {
	this := p
	_ = this

	localctx = NewShow_user_functionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 784, SnowflakeParserRULE_show_user_functions)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9962)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9963)
		p.Match(SnowflakeParserUSER)
	}
	{
		p.SetState(9964)
		p.Match(SnowflakeParserFUNCTIONS)
	}
	p.SetState(9966)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9965)
			p.Like_pattern()
		}

	}
	p.SetState(9969)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(9968)
			p.In_obj()
		}

	}



	return localctx
}


// IShow_usersContext is an interface to support dynamic dispatch.
type IShow_usersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_usersContext differentiates from other interfaces.
	IsShow_usersContext()
}

type Show_usersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_usersContext() *Show_usersContext {
	var p = new(Show_usersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_users
	return p
}

func (*Show_usersContext) IsShow_usersContext() {}

func NewShow_usersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_usersContext {
	var p = new(Show_usersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_users

	return p
}

func (s *Show_usersContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_usersContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_usersContext) USERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSERS, 0)
}

func (s *Show_usersContext) TERSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTERSE, 0)
}

func (s *Show_usersContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_usersContext) STARTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTARTS, 0)
}

func (s *Show_usersContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Show_usersContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *Show_usersContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Show_usersContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLIMIT, 0)
}

func (s *Show_usersContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Show_usersContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *Show_usersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_usersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_usersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_users(s)
	}
}

func (s *Show_usersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_users(s)
	}
}

func (s *Show_usersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_users(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_users() (localctx IShow_usersContext) {
	this := p
	_ = this

	localctx = NewShow_usersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 786, SnowflakeParserRULE_show_users)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9971)
		p.Match(SnowflakeParserSHOW)
	}
	p.SetState(9973)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTERSE {
		{
			p.SetState(9972)
			p.Match(SnowflakeParserTERSE)
		}

	}
	{
		p.SetState(9975)
		p.Match(SnowflakeParserUSERS)
	}
	p.SetState(9977)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9976)
			p.Like_pattern()
		}

	}
	p.SetState(9982)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSTARTS {
		{
			p.SetState(9979)
			p.Match(SnowflakeParserSTARTS)
		}
		{
			p.SetState(9980)
			p.Match(SnowflakeParserWITH)
		}
		{
			p.SetState(9981)
			p.String_()
		}

	}
	p.SetState(9986)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIMIT {
		{
			p.SetState(9984)
			p.Match(SnowflakeParserLIMIT)
		}
		{
			p.SetState(9985)
			p.Num()
		}

	}
	p.SetState(9990)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserFROM {
		{
			p.SetState(9988)
			p.Match(SnowflakeParserFROM)
		}
		{
			p.SetState(9989)
			p.String_()
		}

	}



	return localctx
}


// IShow_variablesContext is an interface to support dynamic dispatch.
type IShow_variablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_variablesContext differentiates from other interfaces.
	IsShow_variablesContext()
}

type Show_variablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_variablesContext() *Show_variablesContext {
	var p = new(Show_variablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_variables
	return p
}

func (*Show_variablesContext) IsShow_variablesContext() {}

func NewShow_variablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_variablesContext {
	var p = new(Show_variablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_variables

	return p
}

func (s *Show_variablesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_variablesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_variablesContext) VARIABLES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVARIABLES, 0)
}

func (s *Show_variablesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_variablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_variablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_variablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_variables(s)
	}
}

func (s *Show_variablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_variables(s)
	}
}

func (s *Show_variablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_variables(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_variables() (localctx IShow_variablesContext) {
	this := p
	_ = this

	localctx = NewShow_variablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 788, SnowflakeParserRULE_show_variables)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9992)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(9993)
		p.Match(SnowflakeParserVARIABLES)
	}
	p.SetState(9995)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(9994)
			p.Like_pattern()
		}

	}



	return localctx
}


// IShow_viewsContext is an interface to support dynamic dispatch.
type IShow_viewsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_viewsContext differentiates from other interfaces.
	IsShow_viewsContext()
}

type Show_viewsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_viewsContext() *Show_viewsContext {
	var p = new(Show_viewsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_views
	return p
}

func (*Show_viewsContext) IsShow_viewsContext() {}

func NewShow_viewsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_viewsContext {
	var p = new(Show_viewsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_views

	return p
}

func (s *Show_viewsContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_viewsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_viewsContext) VIEWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVIEWS, 0)
}

func (s *Show_viewsContext) TERSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTERSE, 0)
}

func (s *Show_viewsContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_viewsContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Show_viewsContext) Starts_with() IStarts_withContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStarts_withContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStarts_withContext)
}

func (s *Show_viewsContext) Limit_rows() ILimit_rowsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_rowsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_rowsContext)
}

func (s *Show_viewsContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Show_viewsContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASE, 0)
}

func (s *Show_viewsContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Show_viewsContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSCHEMA, 0)
}

func (s *Show_viewsContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Show_viewsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_viewsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_viewsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_views(s)
	}
}

func (s *Show_viewsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_views(s)
	}
}

func (s *Show_viewsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_views(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_views() (localctx IShow_viewsContext) {
	this := p
	_ = this

	localctx = NewShow_viewsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 790, SnowflakeParserRULE_show_views)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9997)
		p.Match(SnowflakeParserSHOW)
	}
	p.SetState(9999)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTERSE {
		{
			p.SetState(9998)
			p.Match(SnowflakeParserTERSE)
		}

	}
	{
		p.SetState(10001)
		p.Match(SnowflakeParserVIEWS)
	}
	p.SetState(10003)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(10002)
			p.Like_pattern()
		}

	}
	p.SetState(10019)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserIN {
		{
			p.SetState(10005)
			p.Match(SnowflakeParserIN)
		}
		p.SetState(10017)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserACCOUNT:
			{
				p.SetState(10006)
				p.Match(SnowflakeParserACCOUNT)
			}


		case SnowflakeParserDATABASE:
			{
				p.SetState(10007)
				p.Match(SnowflakeParserDATABASE)
			}
			p.SetState(10009)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
				{
					p.SetState(10008)
					p.Id_()
				}

			}


		case SnowflakeParserEOF, SnowflakeParserADD, SnowflakeParserALTER, SnowflakeParserCOMMENT, SnowflakeParserCOMMIT, SnowflakeParserCOPY, SnowflakeParserCREATE, SnowflakeParserDELETE, SnowflakeParserDESC, SnowflakeParserDESCRIBE, SnowflakeParserDROP, SnowflakeParserEXECUTE, SnowflakeParserEXPLAIN, SnowflakeParserGET, SnowflakeParserGRANT, SnowflakeParserINSERT, SnowflakeParserINT, SnowflakeParserLIMIT, SnowflakeParserLIST, SnowflakeParserMERGE, SnowflakeParserPUT, SnowflakeParserREMOVE, SnowflakeParserREVOKE, SnowflakeParserROLLBACK, SnowflakeParserSCHEMA, SnowflakeParserSELECT, SnowflakeParserSET, SnowflakeParserSHOW, SnowflakeParserSTAGE, SnowflakeParserSTARTS, SnowflakeParserTRUNCATE, SnowflakeParserUNDROP, SnowflakeParserUNSET, SnowflakeParserUPDATE, SnowflakeParserUSE, SnowflakeParserWITH, SnowflakeParserBIGINT, SnowflakeParserDOUBLE_QUOTE_ID, SnowflakeParserDOUBLE_QUOTE_BLANK, SnowflakeParserID, SnowflakeParserSEMI:
			p.SetState(10012)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserSCHEMA {
				{
					p.SetState(10011)
					p.Match(SnowflakeParserSCHEMA)
				}

			}
			p.SetState(10015)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
				{
					p.SetState(10014)
					p.Schema_name()
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(10022)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserSTARTS {
		{
			p.SetState(10021)
			p.Starts_with()
		}

	}
	p.SetState(10025)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIMIT {
		{
			p.SetState(10024)
			p.Limit_rows()
		}

	}



	return localctx
}


// IShow_warehousesContext is an interface to support dynamic dispatch.
type IShow_warehousesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_warehousesContext differentiates from other interfaces.
	IsShow_warehousesContext()
}

type Show_warehousesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_warehousesContext() *Show_warehousesContext {
	var p = new(Show_warehousesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_show_warehouses
	return p
}

func (*Show_warehousesContext) IsShow_warehousesContext() {}

func NewShow_warehousesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_warehousesContext {
	var p = new(Show_warehousesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_show_warehouses

	return p
}

func (s *Show_warehousesContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_warehousesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Show_warehousesContext) WAREHOUSES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSES, 0)
}

func (s *Show_warehousesContext) Like_pattern() ILike_patternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_patternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_patternContext)
}

func (s *Show_warehousesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_warehousesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_warehousesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterShow_warehouses(s)
	}
}

func (s *Show_warehousesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitShow_warehouses(s)
	}
}

func (s *Show_warehousesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitShow_warehouses(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Show_warehouses() (localctx IShow_warehousesContext) {
	this := p
	_ = this

	localctx = NewShow_warehousesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 792, SnowflakeParserRULE_show_warehouses)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10027)
		p.Match(SnowflakeParserSHOW)
	}
	{
		p.SetState(10028)
		p.Match(SnowflakeParserWAREHOUSES)
	}
	p.SetState(10030)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLIKE {
		{
			p.SetState(10029)
			p.Like_pattern()
		}

	}



	return localctx
}


// ILike_patternContext is an interface to support dynamic dispatch.
type ILike_patternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLike_patternContext differentiates from other interfaces.
	IsLike_patternContext()
}

type Like_patternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLike_patternContext() *Like_patternContext {
	var p = new(Like_patternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_like_pattern
	return p
}

func (*Like_patternContext) IsLike_patternContext() {}

func NewLike_patternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Like_patternContext {
	var p = new(Like_patternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_like_pattern

	return p
}

func (s *Like_patternContext) GetParser() antlr.Parser { return s.parser }

func (s *Like_patternContext) LIKE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLIKE, 0)
}

func (s *Like_patternContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Like_patternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Like_patternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Like_patternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterLike_pattern(s)
	}
}

func (s *Like_patternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitLike_pattern(s)
	}
}

func (s *Like_patternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitLike_pattern(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Like_pattern() (localctx ILike_patternContext) {
	this := p
	_ = this

	localctx = NewLike_patternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 794, SnowflakeParserRULE_like_pattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10032)
		p.Match(SnowflakeParserLIKE)
	}
	{
		p.SetState(10033)
		p.String_()
	}



	return localctx
}


// IAccount_identifierContext is an interface to support dynamic dispatch.
type IAccount_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccount_identifierContext differentiates from other interfaces.
	IsAccount_identifierContext()
}

type Account_identifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccount_identifierContext() *Account_identifierContext {
	var p = new(Account_identifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_account_identifier
	return p
}

func (*Account_identifierContext) IsAccount_identifierContext() {}

func NewAccount_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Account_identifierContext {
	var p = new(Account_identifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_account_identifier

	return p
}

func (s *Account_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Account_identifierContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Account_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Account_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Account_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAccount_identifier(s)
	}
}

func (s *Account_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAccount_identifier(s)
	}
}

func (s *Account_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAccount_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Account_identifier() (localctx IAccount_identifierContext) {
	this := p
	_ = this

	localctx = NewAccount_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 796, SnowflakeParserRULE_account_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10035)
		p.Id_()
	}



	return localctx
}


// ISchema_nameContext is an interface to support dynamic dispatch.
type ISchema_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_nameContext differentiates from other interfaces.
	IsSchema_nameContext()
}

type Schema_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_nameContext() *Schema_nameContext {
	var p = new(Schema_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_schema_name
	return p
}

func (*Schema_nameContext) IsSchema_nameContext() {}

func NewSchema_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_nameContext {
	var p = new(Schema_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_schema_name

	return p
}

func (s *Schema_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_nameContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Schema_nameContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Schema_nameContext) DOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, 0)
}

func (s *Schema_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSchema_name(s)
	}
}

func (s *Schema_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSchema_name(s)
	}
}

func (s *Schema_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSchema_name(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Schema_name() (localctx ISchema_nameContext) {
	this := p
	_ = this

	localctx = NewSchema_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 798, SnowflakeParserRULE_schema_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10042)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1287, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10037)
			p.Id_()
		}
		{
			p.SetState(10038)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(10039)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10041)
			p.Id_()
		}

	}


	return localctx
}


// IObject_typeContext is an interface to support dynamic dispatch.
type IObject_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObject_typeContext differentiates from other interfaces.
	IsObject_typeContext()
}

type Object_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObject_typeContext() *Object_typeContext {
	var p = new(Object_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_object_type
	return p
}

func (*Object_typeContext) IsObject_typeContext() {}

func NewObject_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Object_typeContext {
	var p = new(Object_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_object_type

	return p
}

func (s *Object_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Object_typeContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserACCOUNT, 0)
}

func (s *Object_typeContext) PARAMETERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPARAMETERS, 0)
}

func (s *Object_typeContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATABASES, 0)
}

func (s *Object_typeContext) INTEGRATIONS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGRATIONS, 0)
}

func (s *Object_typeContext) NETWORK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNETWORK, 0)
}

func (s *Object_typeContext) POLICIES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPOLICIES, 0)
}

func (s *Object_typeContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRESOURCE, 0)
}

func (s *Object_typeContext) MONITORS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMONITORS, 0)
}

func (s *Object_typeContext) ROLES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLES, 0)
}

func (s *Object_typeContext) SHARES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHARES, 0)
}

func (s *Object_typeContext) USERS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSERS, 0)
}

func (s *Object_typeContext) WAREHOUSES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWAREHOUSES, 0)
}

func (s *Object_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Object_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Object_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterObject_type(s)
	}
}

func (s *Object_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitObject_type(s)
	}
}

func (s *Object_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitObject_type(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Object_type() (localctx IObject_typeContext) {
	this := p
	_ = this

	localctx = NewObject_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 800, SnowflakeParserRULE_object_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10056)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserACCOUNT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10044)
			p.Match(SnowflakeParserACCOUNT)
		}
		{
			p.SetState(10045)
			p.Match(SnowflakeParserPARAMETERS)
		}


	case SnowflakeParserDATABASES:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10046)
			p.Match(SnowflakeParserDATABASES)
		}


	case SnowflakeParserINTEGRATIONS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10047)
			p.Match(SnowflakeParserINTEGRATIONS)
		}


	case SnowflakeParserNETWORK:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(10048)
			p.Match(SnowflakeParserNETWORK)
		}
		{
			p.SetState(10049)
			p.Match(SnowflakeParserPOLICIES)
		}


	case SnowflakeParserRESOURCE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(10050)
			p.Match(SnowflakeParserRESOURCE)
		}
		{
			p.SetState(10051)
			p.Match(SnowflakeParserMONITORS)
		}


	case SnowflakeParserROLES:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(10052)
			p.Match(SnowflakeParserROLES)
		}


	case SnowflakeParserSHARES:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(10053)
			p.Match(SnowflakeParserSHARES)
		}


	case SnowflakeParserUSERS:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(10054)
			p.Match(SnowflakeParserUSERS)
		}


	case SnowflakeParserWAREHOUSES:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(10055)
			p.Match(SnowflakeParserWAREHOUSES)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IObject_type_listContext is an interface to support dynamic dispatch.
type IObject_type_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObject_type_listContext differentiates from other interfaces.
	IsObject_type_listContext()
}

type Object_type_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObject_type_listContext() *Object_type_listContext {
	var p = new(Object_type_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_object_type_list
	return p
}

func (*Object_type_listContext) IsObject_type_listContext() {}

func NewObject_type_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Object_type_listContext {
	var p = new(Object_type_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_object_type_list

	return p
}

func (s *Object_type_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Object_type_listContext) AllObject_type() []IObject_typeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObject_typeContext); ok {
			len++
		}
	}

	tst := make([]IObject_typeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObject_typeContext); ok {
			tst[i] = t.(IObject_typeContext)
			i++
		}
	}

	return tst
}

func (s *Object_type_listContext) Object_type(i int) IObject_typeContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_typeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_typeContext)
}

func (s *Object_type_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Object_type_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Object_type_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Object_type_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Object_type_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterObject_type_list(s)
	}
}

func (s *Object_type_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitObject_type_list(s)
	}
}

func (s *Object_type_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitObject_type_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Object_type_list() (localctx IObject_type_listContext) {
	this := p
	_ = this

	localctx = NewObject_type_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 802, SnowflakeParserRULE_object_type_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10058)
		p.Object_type()
	}
	p.SetState(10063)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(10059)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(10060)
			p.Object_type()
		}


		p.SetState(10065)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ITag_valueContext is an interface to support dynamic dispatch.
type ITag_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTag_valueContext differentiates from other interfaces.
	IsTag_valueContext()
}

type Tag_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTag_valueContext() *Tag_valueContext {
	var p = new(Tag_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_tag_value
	return p
}

func (*Tag_valueContext) IsTag_valueContext() {}

func NewTag_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tag_valueContext {
	var p = new(Tag_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_tag_value

	return p
}

func (s *Tag_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Tag_valueContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Tag_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tag_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Tag_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTag_value(s)
	}
}

func (s *Tag_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTag_value(s)
	}
}

func (s *Tag_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTag_value(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Tag_value() (localctx ITag_valueContext) {
	this := p
	_ = this

	localctx = NewTag_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 804, SnowflakeParserRULE_tag_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10066)
		p.String_()
	}



	return localctx
}


// IArg_data_typeContext is an interface to support dynamic dispatch.
type IArg_data_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArg_data_typeContext differentiates from other interfaces.
	IsArg_data_typeContext()
}

type Arg_data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArg_data_typeContext() *Arg_data_typeContext {
	var p = new(Arg_data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_arg_data_type
	return p
}

func (*Arg_data_typeContext) IsArg_data_typeContext() {}

func NewArg_data_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Arg_data_typeContext {
	var p = new(Arg_data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_arg_data_type

	return p
}

func (s *Arg_data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Arg_data_typeContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Arg_data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arg_data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Arg_data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterArg_data_type(s)
	}
}

func (s *Arg_data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitArg_data_type(s)
	}
}

func (s *Arg_data_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitArg_data_type(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Arg_data_type() (localctx IArg_data_typeContext) {
	this := p
	_ = this

	localctx = NewArg_data_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 806, SnowflakeParserRULE_arg_data_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10068)
		p.Id_()
	}



	return localctx
}


// IArg_nameContext is an interface to support dynamic dispatch.
type IArg_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArg_nameContext differentiates from other interfaces.
	IsArg_nameContext()
}

type Arg_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArg_nameContext() *Arg_nameContext {
	var p = new(Arg_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_arg_name
	return p
}

func (*Arg_nameContext) IsArg_nameContext() {}

func NewArg_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Arg_nameContext {
	var p = new(Arg_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_arg_name

	return p
}

func (s *Arg_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Arg_nameContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Arg_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arg_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Arg_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterArg_name(s)
	}
}

func (s *Arg_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitArg_name(s)
	}
}

func (s *Arg_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitArg_name(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Arg_name() (localctx IArg_nameContext) {
	this := p
	_ = this

	localctx = NewArg_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 808, SnowflakeParserRULE_arg_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10070)
		p.Id_()
	}



	return localctx
}


// IParam_nameContext is an interface to support dynamic dispatch.
type IParam_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParam_nameContext differentiates from other interfaces.
	IsParam_nameContext()
}

type Param_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParam_nameContext() *Param_nameContext {
	var p = new(Param_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_param_name
	return p
}

func (*Param_nameContext) IsParam_nameContext() {}

func NewParam_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Param_nameContext {
	var p = new(Param_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_param_name

	return p
}

func (s *Param_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Param_nameContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Param_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Param_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Param_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterParam_name(s)
	}
}

func (s *Param_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitParam_name(s)
	}
}

func (s *Param_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitParam_name(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Param_name() (localctx IParam_nameContext) {
	this := p
	_ = this

	localctx = NewParam_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 810, SnowflakeParserRULE_param_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10072)
		p.Id_()
	}



	return localctx
}


// IRegion_group_idContext is an interface to support dynamic dispatch.
type IRegion_group_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRegion_group_idContext differentiates from other interfaces.
	IsRegion_group_idContext()
}

type Region_group_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRegion_group_idContext() *Region_group_idContext {
	var p = new(Region_group_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_region_group_id
	return p
}

func (*Region_group_idContext) IsRegion_group_idContext() {}

func NewRegion_group_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Region_group_idContext {
	var p = new(Region_group_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_region_group_id

	return p
}

func (s *Region_group_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Region_group_idContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Region_group_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Region_group_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Region_group_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterRegion_group_id(s)
	}
}

func (s *Region_group_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitRegion_group_id(s)
	}
}

func (s *Region_group_idContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitRegion_group_id(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Region_group_id() (localctx IRegion_group_idContext) {
	this := p
	_ = this

	localctx = NewRegion_group_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 812, SnowflakeParserRULE_region_group_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10074)
		p.Id_()
	}



	return localctx
}


// ISnowflake_region_idContext is an interface to support dynamic dispatch.
type ISnowflake_region_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSnowflake_region_idContext differentiates from other interfaces.
	IsSnowflake_region_idContext()
}

type Snowflake_region_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySnowflake_region_idContext() *Snowflake_region_idContext {
	var p = new(Snowflake_region_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_snowflake_region_id
	return p
}

func (*Snowflake_region_idContext) IsSnowflake_region_idContext() {}

func NewSnowflake_region_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Snowflake_region_idContext {
	var p = new(Snowflake_region_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_snowflake_region_id

	return p
}

func (s *Snowflake_region_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Snowflake_region_idContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Snowflake_region_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Snowflake_region_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Snowflake_region_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSnowflake_region_id(s)
	}
}

func (s *Snowflake_region_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSnowflake_region_id(s)
	}
}

func (s *Snowflake_region_idContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSnowflake_region_id(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Snowflake_region_id() (localctx ISnowflake_region_idContext) {
	this := p
	_ = this

	localctx = NewSnowflake_region_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 814, SnowflakeParserRULE_snowflake_region_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10076)
		p.Id_()
	}



	return localctx
}


// IStringContext is an interface to support dynamic dispatch.
type IStringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringContext differentiates from other interfaces.
	IsStringContext()
}

type StringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringContext() *StringContext {
	var p = new(StringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_string
	return p
}

func (*StringContext) IsStringContext() {}

func NewStringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringContext {
	var p = new(StringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_string

	return p
}

func (s *StringContext) GetParser() antlr.Parser { return s.parser }

func (s *StringContext) STRING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRING, 0)
}

func (s *StringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *StringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterString(s)
	}
}

func (s *StringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitString(s)
	}
}

func (s *StringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitString(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) String_() (localctx IStringContext) {
	this := p
	_ = this

	localctx = NewStringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 816, SnowflakeParserRULE_string)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10078)
		p.Match(SnowflakeParserSTRING)
	}



	return localctx
}


// IString_listContext is an interface to support dynamic dispatch.
type IString_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_listContext differentiates from other interfaces.
	IsString_listContext()
}

type String_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_listContext() *String_listContext {
	var p = new(String_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_string_list
	return p
}

func (*String_listContext) IsString_listContext() {}

func NewString_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_listContext {
	var p = new(String_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_string_list

	return p
}

func (s *String_listContext) GetParser() antlr.Parser { return s.parser }

func (s *String_listContext) AllString_() []IStringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStringContext); ok {
			len++
		}
	}

	tst := make([]IStringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStringContext); ok {
			tst[i] = t.(IStringContext)
			i++
		}
	}

	return tst
}

func (s *String_listContext) String_(i int) IStringContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *String_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *String_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *String_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *String_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterString_list(s)
	}
}

func (s *String_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitString_list(s)
	}
}

func (s *String_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitString_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) String_list() (localctx IString_listContext) {
	this := p
	_ = this

	localctx = NewString_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 818, SnowflakeParserRULE_string_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10080)
		p.String_()
	}
	p.SetState(10085)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(10081)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(10082)
			p.String_()
		}


		p.SetState(10087)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IId_Context is an interface to support dynamic dispatch.
type IId_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsId_Context differentiates from other interfaces.
	IsId_Context()
}

type Id_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyId_Context() *Id_Context {
	var p = new(Id_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_id_
	return p
}

func (*Id_Context) IsId_Context() {}

func NewId_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Id_Context {
	var p = new(Id_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_id_

	return p
}

func (s *Id_Context) GetParser() antlr.Parser { return s.parser }

func (s *Id_Context) ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserID, 0)
}

func (s *Id_Context) DOUBLE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOUBLE_QUOTE_ID, 0)
}

func (s *Id_Context) DOUBLE_QUOTE_BLANK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOUBLE_QUOTE_BLANK, 0)
}

func (s *Id_Context) Keyword() IKeywordContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeywordContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeywordContext)
}

func (s *Id_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Id_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Id_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterId_(s)
	}
}

func (s *Id_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitId_(s)
	}
}

func (s *Id_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitId_(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Id_() (localctx IId_Context) {
	this := p
	_ = this

	localctx = NewId_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 820, SnowflakeParserRULE_id_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10092)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10088)
			p.Match(SnowflakeParserID)
		}


	case SnowflakeParserDOUBLE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10089)
			p.Match(SnowflakeParserDOUBLE_QUOTE_ID)
		}


	case SnowflakeParserDOUBLE_QUOTE_BLANK:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10090)
			p.Match(SnowflakeParserDOUBLE_QUOTE_BLANK)
		}


	case SnowflakeParserINT, SnowflakeParserSTAGE, SnowflakeParserBIGINT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(10091)
			p.Keyword()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IKeywordContext is an interface to support dynamic dispatch.
type IKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeywordContext differentiates from other interfaces.
	IsKeywordContext()
}

type KeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordContext() *KeywordContext {
	var p = new(KeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_keyword
	return p
}

func (*KeywordContext) IsKeywordContext() {}

func NewKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordContext {
	var p = new(KeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_keyword

	return p
}

func (s *KeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordContext) INT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINT, 0)
}

func (s *KeywordContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBIGINT, 0)
}

func (s *KeywordContext) STAGE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAGE, 0)
}

func (s *KeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *KeywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterKeyword(s)
	}
}

func (s *KeywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitKeyword(s)
	}
}

func (s *KeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Keyword() (localctx IKeywordContext) {
	this := p
	_ = this

	localctx = NewKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 822, SnowflakeParserRULE_keyword)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10094)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || _la == SnowflakeParserBIGINT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IPatternContext is an interface to support dynamic dispatch.
type IPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPatternContext differentiates from other interfaces.
	IsPatternContext()
}

type PatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternContext() *PatternContext {
	var p = new(PatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_pattern
	return p
}

func (*PatternContext) IsPatternContext() {}

func NewPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternContext {
	var p = new(PatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_pattern

	return p
}

func (s *PatternContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternContext) PATTERN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPATTERN, 0)
}

func (s *PatternContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *PatternContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *PatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterPattern(s)
	}
}

func (s *PatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitPattern(s)
	}
}

func (s *PatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitPattern(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Pattern() (localctx IPatternContext) {
	this := p
	_ = this

	localctx = NewPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 824, SnowflakeParserRULE_pattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10096)
		p.Match(SnowflakeParserPATTERN)
	}
	{
		p.SetState(10097)
		p.Match(SnowflakeParserEQ)
	}
	{
		p.SetState(10098)
		p.String_()
	}



	return localctx
}


// IColumn_nameContext is an interface to support dynamic dispatch.
type IColumn_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_nameContext differentiates from other interfaces.
	IsColumn_nameContext()
}

type Column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_nameContext() *Column_nameContext {
	var p = new(Column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_column_name
	return p
}

func (*Column_nameContext) IsColumn_nameContext() {}

func NewColumn_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_nameContext {
	var p = new(Column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_column_name

	return p
}

func (s *Column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_nameContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterColumn_name(s)
	}
}

func (s *Column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitColumn_name(s)
	}
}

func (s *Column_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitColumn_name(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Column_name() (localctx IColumn_nameContext) {
	this := p
	_ = this

	localctx = NewColumn_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 826, SnowflakeParserRULE_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10100)
		p.Id_()
	}



	return localctx
}


// IColumn_listContext is an interface to support dynamic dispatch.
type IColumn_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_listContext differentiates from other interfaces.
	IsColumn_listContext()
}

type Column_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_listContext() *Column_listContext {
	var p = new(Column_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_column_list
	return p
}

func (*Column_listContext) IsColumn_listContext() {}

func NewColumn_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_listContext {
	var p = new(Column_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_column_list

	return p
}

func (s *Column_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_listContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Column_listContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Column_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Column_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Column_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterColumn_list(s)
	}
}

func (s *Column_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitColumn_list(s)
	}
}

func (s *Column_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitColumn_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Column_list() (localctx IColumn_listContext) {
	this := p
	_ = this

	localctx = NewColumn_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 828, SnowflakeParserRULE_column_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10102)
		p.Column_name()
	}
	p.SetState(10107)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(10103)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(10104)
			p.Column_name()
		}


		p.SetState(10109)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IObject_nameContext is an interface to support dynamic dispatch.
type IObject_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetD returns the d rule contexts.
	GetD() IId_Context

	// GetS returns the s rule contexts.
	GetS() IId_Context

	// GetO returns the o rule contexts.
	GetO() IId_Context


	// SetD sets the d rule contexts.
	SetD(IId_Context)

	// SetS sets the s rule contexts.
	SetS(IId_Context)

	// SetO sets the o rule contexts.
	SetO(IId_Context)


	// IsObject_nameContext differentiates from other interfaces.
	IsObject_nameContext()
}

type Object_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	d IId_Context 
	s IId_Context 
	o IId_Context 
}

func NewEmptyObject_nameContext() *Object_nameContext {
	var p = new(Object_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_object_name
	return p
}

func (*Object_nameContext) IsObject_nameContext() {}

func NewObject_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Object_nameContext {
	var p = new(Object_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_object_name

	return p
}

func (s *Object_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Object_nameContext) GetD() IId_Context { return s.d }

func (s *Object_nameContext) GetS() IId_Context { return s.s }

func (s *Object_nameContext) GetO() IId_Context { return s.o }


func (s *Object_nameContext) SetD(v IId_Context) { s.d = v }

func (s *Object_nameContext) SetS(v IId_Context) { s.s = v }

func (s *Object_nameContext) SetO(v IId_Context) { s.o = v }


func (s *Object_nameContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserDOT)
}

func (s *Object_nameContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, i)
}

func (s *Object_nameContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Object_nameContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Object_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Object_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Object_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterObject_name(s)
	}
}

func (s *Object_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitObject_name(s)
	}
}

func (s *Object_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitObject_name(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Object_name() (localctx IObject_nameContext) {
	this := p
	_ = this

	localctx = NewObject_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 830, SnowflakeParserRULE_object_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10121)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1293, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10110)

			var _x = p.Id_()


			localctx.(*Object_nameContext).d = _x
		}
		{
			p.SetState(10111)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(10112)

			var _x = p.Id_()


			localctx.(*Object_nameContext).s = _x
		}
		{
			p.SetState(10113)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(10114)

			var _x = p.Id_()


			localctx.(*Object_nameContext).o = _x
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10116)

			var _x = p.Id_()


			localctx.(*Object_nameContext).s = _x
		}
		{
			p.SetState(10117)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(10118)

			var _x = p.Id_()


			localctx.(*Object_nameContext).o = _x
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10120)

			var _x = p.Id_()


			localctx.(*Object_nameContext).o = _x
		}

	}


	return localctx
}


// INumContext is an interface to support dynamic dispatch.
type INumContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumContext differentiates from other interfaces.
	IsNumContext()
}

type NumContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumContext() *NumContext {
	var p = new(NumContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_num
	return p
}

func (*NumContext) IsNumContext() {}

func NewNumContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumContext {
	var p = new(NumContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_num

	return p
}

func (s *NumContext) GetParser() antlr.Parser { return s.parser }

func (s *NumContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDECIMAL, 0)
}

func (s *NumContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NumContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterNum(s)
	}
}

func (s *NumContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitNum(s)
	}
}

func (s *NumContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitNum(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Num() (localctx INumContext) {
	this := p
	_ = this

	localctx = NewNumContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 832, SnowflakeParserRULE_num)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10123)
		p.Match(SnowflakeParserDECIMAL)
	}



	return localctx
}


// IExpr_listContext is an interface to support dynamic dispatch.
type IExpr_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_listContext differentiates from other interfaces.
	IsExpr_listContext()
}

type Expr_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_listContext() *Expr_listContext {
	var p = new(Expr_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_expr_list
	return p
}

func (*Expr_listContext) IsExpr_listContext() {}

func NewExpr_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_listContext {
	var p = new(Expr_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_expr_list

	return p
}

func (s *Expr_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_listContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_listContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Expr_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Expr_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Expr_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExpr_list(s)
	}
}

func (s *Expr_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExpr_list(s)
	}
}

func (s *Expr_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExpr_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Expr_list() (localctx IExpr_listContext) {
	this := p
	_ = this

	localctx = NewExpr_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 834, SnowflakeParserRULE_expr_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10125)
		p.expr(0)
	}
	p.SetState(10130)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(10126)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(10127)
			p.expr(0)
		}


		p.SetState(10132)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token 


	// SetOp sets the op token.
	SetOp(antlr.Token) 


	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op antlr.Token
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) GetOp() antlr.Token { return s.op }


func (s *ExprContext) SetOp(v antlr.Token) { s.op = v }


func (s *ExprContext) Primitive_expression() IPrimitive_expressionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimitive_expressionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimitive_expressionContext)
}

func (s *ExprContext) Function_call() IFunction_callContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_callContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *ExprContext) Case_expression() ICase_expressionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_expressionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_expressionContext)
}

func (s *ExprContext) Full_column_name() IFull_column_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFull_column_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *ExprContext) Bracket_expression() IBracket_expressionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBracket_expressionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBracket_expressionContext)
}

func (s *ExprContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPLUS, 0)
}

func (s *ExprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMINUS, 0)
}

func (s *ExprContext) Arr_literal() IArr_literalContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArr_literalContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArr_literalContext)
}

func (s *ExprContext) Over_clause() IOver_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOver_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *ExprContext) CAST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCAST, 0)
}

func (s *ExprContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *ExprContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *ExprContext) Data_type() IData_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IData_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *ExprContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *ExprContext) Json_literal() IJson_literalContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJson_literalContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJson_literalContext)
}

func (s *ExprContext) STAR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAR, 0)
}

func (s *ExprContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDIVIDE, 0)
}

func (s *ExprContext) MODULE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMODULE, 0)
}

func (s *ExprContext) PIPE_PIPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPIPE_PIPE, 0)
}

func (s *ExprContext) COLON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLON, 0)
}

func (s *ExprContext) DOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, 0)
}

func (s *ExprContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLLATE, 0)
}

func (s *ExprContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *ExprContext) LSB() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLSB, 0)
}

func (s *ExprContext) RSB() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRSB, 0)
}

func (s *ExprContext) COLON_COLON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLON_COLON, 0)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExpr(s)
	}
}

func (s *ExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExpr(s)
	}
}

func (s *ExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExpr(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *SnowflakeParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *SnowflakeParser) expr(_p int) (localctx IExprContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 836
	p.EnterRecursionRule(localctx, 836, SnowflakeParserRULE_expr, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10151)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1295, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(10134)
			p.Primitive_expression()
		}


	case 2:
		{
			p.SetState(10135)
			p.Function_call()
		}


	case 3:
		{
			p.SetState(10136)
			p.Case_expression()
		}


	case 4:
		{
			p.SetState(10137)
			p.Full_column_name()
		}


	case 5:
		{
			p.SetState(10138)
			p.Bracket_expression()
		}


	case 6:
		{
			p.SetState(10139)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExprContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserPLUS || _la == SnowflakeParserMINUS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExprContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(10140)
			p.expr(11)
		}


	case 7:
		{
			p.SetState(10141)
			p.Arr_literal()
		}


	case 8:
		{
			p.SetState(10142)
			p.Over_clause()
		}


	case 9:
		{
			p.SetState(10143)
			p.Match(SnowflakeParserCAST)
		}
		{
			p.SetState(10144)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10145)
			p.expr(0)
		}
		{
			p.SetState(10146)
			p.Match(SnowflakeParserAS)
		}
		{
			p.SetState(10147)
			p.Data_type()
		}
		{
			p.SetState(10148)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 10:
		{
			p.SetState(10150)
			p.Json_literal()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(10178)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1297, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(10176)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1296, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SnowflakeParserRULE_expr)
				p.SetState(10153)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(10154)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la - 1073)) & ^0x3f) == 0 && ((int64(1) << (_la - 1073)) & 7) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(10155)
					p.expr(11)
				}


			case 2:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SnowflakeParserRULE_expr)
				p.SetState(10156)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(10157)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la - 1058)) & ^0x3f) == 0 && ((int64(1) << (_la - 1058)) & 786433) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(10158)
					p.expr(10)
				}


			case 3:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SnowflakeParserRULE_expr)
				p.SetState(10159)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(10160)
					p.Match(SnowflakeParserCOLON)
				}
				{
					p.SetState(10161)
					p.expr(7)
				}


			case 4:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SnowflakeParserRULE_expr)
				p.SetState(10162)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(10163)
					p.Match(SnowflakeParserDOT)
				}
				{
					p.SetState(10164)
					p.expr(6)
				}


			case 5:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SnowflakeParserRULE_expr)
				p.SetState(10165)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(10166)
					p.Match(SnowflakeParserCOLLATE)
				}
				{
					p.SetState(10167)
					p.String_()
				}


			case 6:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SnowflakeParserRULE_expr)
				p.SetState(10168)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(10169)
					p.Match(SnowflakeParserLSB)
				}
				{
					p.SetState(10170)
					p.expr(0)
				}
				{
					p.SetState(10171)
					p.Match(SnowflakeParserRSB)
				}


			case 7:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SnowflakeParserRULE_expr)
				p.SetState(10173)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(10174)
					p.Match(SnowflakeParserCOLON_COLON)
				}
				{
					p.SetState(10175)
					p.Data_type()
				}

			}

		}
		p.SetState(10180)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1297, p.GetParserRuleContext())
	}



	return localctx
}


// IJson_literalContext is an interface to support dynamic dispatch.
type IJson_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJson_literalContext differentiates from other interfaces.
	IsJson_literalContext()
}

type Json_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJson_literalContext() *Json_literalContext {
	var p = new(Json_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_json_literal
	return p
}

func (*Json_literalContext) IsJson_literalContext() {}

func NewJson_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Json_literalContext {
	var p = new(Json_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_json_literal

	return p
}

func (s *Json_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Json_literalContext) LCB() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLCB, 0)
}

func (s *Json_literalContext) AllKv_pair() []IKv_pairContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IKv_pairContext); ok {
			len++
		}
	}

	tst := make([]IKv_pairContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IKv_pairContext); ok {
			tst[i] = t.(IKv_pairContext)
			i++
		}
	}

	return tst
}

func (s *Json_literalContext) Kv_pair(i int) IKv_pairContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKv_pairContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKv_pairContext)
}

func (s *Json_literalContext) RCB() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRCB, 0)
}

func (s *Json_literalContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Json_literalContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Json_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Json_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Json_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterJson_literal(s)
	}
}

func (s *Json_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitJson_literal(s)
	}
}

func (s *Json_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitJson_literal(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Json_literal() (localctx IJson_literalContext) {
	this := p
	_ = this

	localctx = NewJson_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 838, SnowflakeParserRULE_json_literal)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10194)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1299, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10181)
			p.Match(SnowflakeParserLCB)
		}
		{
			p.SetState(10182)
			p.Kv_pair()
		}
		p.SetState(10187)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(10183)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(10184)
				p.Kv_pair()
			}


			p.SetState(10189)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(10190)
			p.Match(SnowflakeParserRCB)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10192)
			p.Match(SnowflakeParserLCB)
		}
		{
			p.SetState(10193)
			p.Match(SnowflakeParserRCB)
		}

	}


	return localctx
}


// IKv_pairContext is an interface to support dynamic dispatch.
type IKv_pairContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKey returns the key token.
	GetKey() antlr.Token 


	// SetKey sets the key token.
	SetKey(antlr.Token) 


	// IsKv_pairContext differentiates from other interfaces.
	IsKv_pairContext()
}

type Kv_pairContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	key antlr.Token
}

func NewEmptyKv_pairContext() *Kv_pairContext {
	var p = new(Kv_pairContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_kv_pair
	return p
}

func (*Kv_pairContext) IsKv_pairContext() {}

func NewKv_pairContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Kv_pairContext {
	var p = new(Kv_pairContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_kv_pair

	return p
}

func (s *Kv_pairContext) GetParser() antlr.Parser { return s.parser }

func (s *Kv_pairContext) GetKey() antlr.Token { return s.key }


func (s *Kv_pairContext) SetKey(v antlr.Token) { s.key = v }


func (s *Kv_pairContext) COLON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLON, 0)
}

func (s *Kv_pairContext) Value() IValueContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValueContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValueContext)
}

func (s *Kv_pairContext) STRING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRING, 0)
}

func (s *Kv_pairContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Kv_pairContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Kv_pairContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterKv_pair(s)
	}
}

func (s *Kv_pairContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitKv_pair(s)
	}
}

func (s *Kv_pairContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitKv_pair(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Kv_pair() (localctx IKv_pairContext) {
	this := p
	_ = this

	localctx = NewKv_pairContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 840, SnowflakeParserRULE_kv_pair)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10196)

		var _m = p.Match(SnowflakeParserSTRING)

		localctx.(*Kv_pairContext).key = _m
	}
	{
		p.SetState(10197)
		p.Match(SnowflakeParserCOLON)
	}
	{
		p.SetState(10198)
		p.Value()
	}



	return localctx
}


// IValueContext is an interface to support dynamic dispatch.
type IValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValueContext differentiates from other interfaces.
	IsValueContext()
}

type ValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValueContext() *ValueContext {
	var p = new(ValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_value
	return p
}

func (*ValueContext) IsValueContext() {}

func NewValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueContext {
	var p = new(ValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_value

	return p
}

func (s *ValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterValue(s)
	}
}

func (s *ValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitValue(s)
	}
}

func (s *ValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitValue(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Value() (localctx IValueContext) {
	this := p
	_ = this

	localctx = NewValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 842, SnowflakeParserRULE_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10200)
		p.expr(0)
	}



	return localctx
}


// IArr_literalContext is an interface to support dynamic dispatch.
type IArr_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArr_literalContext differentiates from other interfaces.
	IsArr_literalContext()
}

type Arr_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArr_literalContext() *Arr_literalContext {
	var p = new(Arr_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_arr_literal
	return p
}

func (*Arr_literalContext) IsArr_literalContext() {}

func NewArr_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Arr_literalContext {
	var p = new(Arr_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_arr_literal

	return p
}

func (s *Arr_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Arr_literalContext) LSB() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLSB, 0)
}

func (s *Arr_literalContext) AllValue() []IValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IValueContext); ok {
			len++
		}
	}

	tst := make([]IValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IValueContext); ok {
			tst[i] = t.(IValueContext)
			i++
		}
	}

	return tst
}

func (s *Arr_literalContext) Value(i int) IValueContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValueContext)
}

func (s *Arr_literalContext) RSB() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRSB, 0)
}

func (s *Arr_literalContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Arr_literalContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Arr_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arr_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Arr_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterArr_literal(s)
	}
}

func (s *Arr_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitArr_literal(s)
	}
}

func (s *Arr_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitArr_literal(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Arr_literal() (localctx IArr_literalContext) {
	this := p
	_ = this

	localctx = NewArr_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 844, SnowflakeParserRULE_arr_literal)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10215)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1301, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10202)
			p.Match(SnowflakeParserLSB)
		}
		{
			p.SetState(10203)
			p.Value()
		}
		p.SetState(10208)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(10204)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(10205)
				p.Value()
			}


			p.SetState(10210)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(10211)
			p.Match(SnowflakeParserRSB)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10213)
			p.Match(SnowflakeParserLSB)
		}
		{
			p.SetState(10214)
			p.Match(SnowflakeParserRSB)
		}

	}


	return localctx
}


// IData_typeContext is an interface to support dynamic dispatch.
type IData_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_typeContext differentiates from other interfaces.
	IsData_typeContext()
}

type Data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_typeContext() *Data_typeContext {
	var p = new(Data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_data_type
	return p
}

func (*Data_typeContext) IsData_typeContext() {}

func NewData_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_typeContext {
	var p = new(Data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_data_type

	return p
}

func (s *Data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_typeContext) INT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINT, 0)
}

func (s *Data_typeContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTEGER, 0)
}

func (s *Data_typeContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSMALLINT, 0)
}

func (s *Data_typeContext) TINYINT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTINYINT, 0)
}

func (s *Data_typeContext) BYTEINT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBYTEINT, 0)
}

func (s *Data_typeContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBIGINT, 0)
}

func (s *Data_typeContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNUMBER, 0)
}

func (s *Data_typeContext) NUMERIC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNUMERIC, 0)
}

func (s *Data_typeContext) DECIMAL_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDECIMAL_, 0)
}

func (s *Data_typeContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Data_typeContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Data_typeContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Data_typeContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Data_typeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, 0)
}

func (s *Data_typeContext) FLOAT_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFLOAT_, 0)
}

func (s *Data_typeContext) FLOAT4() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFLOAT4, 0)
}

func (s *Data_typeContext) FLOAT8() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFLOAT8, 0)
}

func (s *Data_typeContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOUBLE, 0)
}

func (s *Data_typeContext) PRECISION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRECISION, 0)
}

func (s *Data_typeContext) REAL_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREAL_, 0)
}

func (s *Data_typeContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBOOLEAN, 0)
}

func (s *Data_typeContext) DATE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATE, 0)
}

func (s *Data_typeContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDATETIME, 0)
}

func (s *Data_typeContext) TIME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIME, 0)
}

func (s *Data_typeContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP, 0)
}

func (s *Data_typeContext) TIMESTAMP_LTZ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_LTZ, 0)
}

func (s *Data_typeContext) TIMESTAMP_NTZ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_NTZ, 0)
}

func (s *Data_typeContext) TIMESTAMP_TZ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP_TZ, 0)
}

func (s *Data_typeContext) STRING_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRING_, 0)
}

func (s *Data_typeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCHAR, 0)
}

func (s *Data_typeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCHARACTER, 0)
}

func (s *Data_typeContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVARCHAR, 0)
}

func (s *Data_typeContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTEXT, 0)
}

func (s *Data_typeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBINARY, 0)
}

func (s *Data_typeContext) VARBINARY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVARBINARY, 0)
}

func (s *Data_typeContext) VARIANT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVARIANT, 0)
}

func (s *Data_typeContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOBJECT, 0)
}

func (s *Data_typeContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserARRAY, 0)
}

func (s *Data_typeContext) GEOGRAPHY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGEOGRAPHY, 0)
}

func (s *Data_typeContext) GEOMETRY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGEOMETRY, 0)
}

func (s *Data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterData_type(s)
	}
}

func (s *Data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitData_type(s)
	}
}

func (s *Data_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitData_type(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Data_type() (localctx IData_typeContext) {
	this := p
	_ = this

	localctx = NewData_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 846, SnowflakeParserRULE_data_type)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10262)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserINT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10217)
			p.Match(SnowflakeParserINT)
		}


	case SnowflakeParserINTEGER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10218)
			p.Match(SnowflakeParserINTEGER)
		}


	case SnowflakeParserSMALLINT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10219)
			p.Match(SnowflakeParserSMALLINT)
		}


	case SnowflakeParserTINYINT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(10220)
			p.Match(SnowflakeParserTINYINT)
		}


	case SnowflakeParserBYTEINT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(10221)
			p.Match(SnowflakeParserBYTEINT)
		}


	case SnowflakeParserBIGINT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(10222)
			p.Match(SnowflakeParserBIGINT)
		}


	case SnowflakeParserNUMBER, SnowflakeParserDECIMAL_, SnowflakeParserNUMERIC:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(10223)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserNUMBER || _la == SnowflakeParserDECIMAL_ || _la == SnowflakeParserNUMERIC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(10232)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1303, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10224)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(10225)
				p.Num()
			}
			p.SetState(10228)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserCOMMA {
				{
					p.SetState(10226)
					p.Match(SnowflakeParserCOMMA)
				}
				{
					p.SetState(10227)
					p.Num()
				}

			}
			{
				p.SetState(10230)
				p.Match(SnowflakeParserRR_BRACKET)
			}


		}


	case SnowflakeParserFLOAT_:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(10234)
			p.Match(SnowflakeParserFLOAT_)
		}


	case SnowflakeParserFLOAT4:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(10235)
			p.Match(SnowflakeParserFLOAT4)
		}


	case SnowflakeParserFLOAT8:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(10236)
			p.Match(SnowflakeParserFLOAT8)
		}


	case SnowflakeParserDOUBLE:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(10237)
			p.Match(SnowflakeParserDOUBLE)
		}
		p.SetState(10239)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1304, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10238)
				p.Match(SnowflakeParserPRECISION)
			}


		}


	case SnowflakeParserREAL_:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(10241)
			p.Match(SnowflakeParserREAL_)
		}


	case SnowflakeParserBOOLEAN:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(10242)
			p.Match(SnowflakeParserBOOLEAN)
		}


	case SnowflakeParserDATE:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(10243)
			p.Match(SnowflakeParserDATE)
		}


	case SnowflakeParserDATETIME:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(10244)
			p.Match(SnowflakeParserDATETIME)
		}


	case SnowflakeParserTIME:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(10245)
			p.Match(SnowflakeParserTIME)
		}


	case SnowflakeParserTIMESTAMP:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(10246)
			p.Match(SnowflakeParserTIMESTAMP)
		}


	case SnowflakeParserTIMESTAMP_LTZ:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(10247)
			p.Match(SnowflakeParserTIMESTAMP_LTZ)
		}


	case SnowflakeParserTIMESTAMP_NTZ:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(10248)
			p.Match(SnowflakeParserTIMESTAMP_NTZ)
		}


	case SnowflakeParserTIMESTAMP_TZ:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(10249)
			p.Match(SnowflakeParserTIMESTAMP_TZ)
		}


	case SnowflakeParserSTRING_:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(10250)
			p.Match(SnowflakeParserSTRING_)
		}


	case SnowflakeParserCHAR:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(10251)
			p.Match(SnowflakeParserCHAR)
		}


	case SnowflakeParserCHARACTER:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(10252)
			p.Match(SnowflakeParserCHARACTER)
		}


	case SnowflakeParserVARCHAR:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(10253)
			p.Match(SnowflakeParserVARCHAR)
		}


	case SnowflakeParserTEXT:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(10254)
			p.Match(SnowflakeParserTEXT)
		}


	case SnowflakeParserBINARY:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(10255)
			p.Match(SnowflakeParserBINARY)
		}


	case SnowflakeParserVARBINARY:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(10256)
			p.Match(SnowflakeParserVARBINARY)
		}


	case SnowflakeParserVARIANT:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(10257)
			p.Match(SnowflakeParserVARIANT)
		}


	case SnowflakeParserOBJECT:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(10258)
			p.Match(SnowflakeParserOBJECT)
		}


	case SnowflakeParserARRAY:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(10259)
			p.Match(SnowflakeParserARRAY)
		}


	case SnowflakeParserGEOGRAPHY:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(10260)
			p.Match(SnowflakeParserGEOGRAPHY)
		}


	case SnowflakeParserGEOMETRY:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(10261)
			p.Match(SnowflakeParserGEOMETRY)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IPrimitive_expressionContext is an interface to support dynamic dispatch.
type IPrimitive_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimitive_expressionContext differentiates from other interfaces.
	IsPrimitive_expressionContext()
}

type Primitive_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitive_expressionContext() *Primitive_expressionContext {
	var p = new(Primitive_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_primitive_expression
	return p
}

func (*Primitive_expressionContext) IsPrimitive_expressionContext() {}

func NewPrimitive_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primitive_expressionContext {
	var p = new(Primitive_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_primitive_expression

	return p
}

func (s *Primitive_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Primitive_expressionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT, 0)
}

func (s *Primitive_expressionContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, 0)
}

func (s *Primitive_expressionContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Primitive_expressionContext) Literal() ILiteralContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *Primitive_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primitive_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Primitive_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterPrimitive_expression(s)
	}
}

func (s *Primitive_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitPrimitive_expression(s)
	}
}

func (s *Primitive_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitPrimitive_expression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Primitive_expression() (localctx IPrimitive_expressionContext) {
	this := p
	_ = this

	localctx = NewPrimitive_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 848, SnowflakeParserRULE_primitive_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10268)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1306, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10264)
			p.Match(SnowflakeParserDEFAULT)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10265)
			p.Match(SnowflakeParserNULL_)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10266)
			p.Id_()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(10267)
			p.Literal()
		}

	}


	return localctx
}


// IOrder_by_exprContext is an interface to support dynamic dispatch.
type IOrder_by_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrder_by_exprContext differentiates from other interfaces.
	IsOrder_by_exprContext()
}

type Order_by_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_exprContext() *Order_by_exprContext {
	var p = new(Order_by_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_order_by_expr
	return p
}

func (*Order_by_exprContext) IsOrder_by_exprContext() {}

func NewOrder_by_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_exprContext {
	var p = new(Order_by_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_order_by_expr

	return p
}

func (s *Order_by_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_exprContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserORDER, 0)
}

func (s *Order_by_exprContext) BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBY, 0)
}

func (s *Order_by_exprContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Order_by_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Order_by_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterOrder_by_expr(s)
	}
}

func (s *Order_by_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitOrder_by_expr(s)
	}
}

func (s *Order_by_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitOrder_by_expr(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Order_by_expr() (localctx IOrder_by_exprContext) {
	this := p
	_ = this

	localctx = NewOrder_by_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 850, SnowflakeParserRULE_order_by_expr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10270)
		p.Match(SnowflakeParserORDER)
	}
	{
		p.SetState(10271)
		p.Match(SnowflakeParserBY)
	}
	{
		p.SetState(10272)
		p.expr(0)
	}



	return localctx
}


// IAsc_descContext is an interface to support dynamic dispatch.
type IAsc_descContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsc_descContext differentiates from other interfaces.
	IsAsc_descContext()
}

type Asc_descContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsc_descContext() *Asc_descContext {
	var p = new(Asc_descContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_asc_desc
	return p
}

func (*Asc_descContext) IsAsc_descContext() {}

func NewAsc_descContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Asc_descContext {
	var p = new(Asc_descContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_asc_desc

	return p
}

func (s *Asc_descContext) GetParser() antlr.Parser { return s.parser }

func (s *Asc_descContext) ASC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserASC, 0)
}

func (s *Asc_descContext) DESC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDESC, 0)
}

func (s *Asc_descContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asc_descContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Asc_descContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAsc_desc(s)
	}
}

func (s *Asc_descContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAsc_desc(s)
	}
}

func (s *Asc_descContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAsc_desc(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Asc_desc() (localctx IAsc_descContext) {
	this := p
	_ = this

	localctx = NewAsc_descContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 852, SnowflakeParserRULE_asc_desc)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10274)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserASC || _la == SnowflakeParserDESC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IOver_clauseContext is an interface to support dynamic dispatch.
type IOver_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOver_clauseContext differentiates from other interfaces.
	IsOver_clauseContext()
}

type Over_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOver_clauseContext() *Over_clauseContext {
	var p = new(Over_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_over_clause
	return p
}

func (*Over_clauseContext) IsOver_clauseContext() {}

func NewOver_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Over_clauseContext {
	var p = new(Over_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_over_clause

	return p
}

func (s *Over_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Over_clauseContext) OVER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOVER, 0)
}

func (s *Over_clauseContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Over_clauseContext) Order_by_expr() IOrder_by_exprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_exprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_exprContext)
}

func (s *Over_clauseContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Over_clauseContext) Partition_by() IPartition_byContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_byContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_byContext)
}

func (s *Over_clauseContext) Asc_desc() IAsc_descContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_descContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_descContext)
}

func (s *Over_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Over_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Over_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterOver_clause(s)
	}
}

func (s *Over_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitOver_clause(s)
	}
}

func (s *Over_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitOver_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Over_clause() (localctx IOver_clauseContext) {
	this := p
	_ = this

	localctx = NewOver_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 854, SnowflakeParserRULE_over_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10276)
		p.Match(SnowflakeParserOVER)
	}
	{
		p.SetState(10277)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(10279)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserPARTITION {
		{
			p.SetState(10278)
			p.Partition_by()
		}

	}
	{
		p.SetState(10281)
		p.Order_by_expr()
	}
	p.SetState(10283)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserASC || _la == SnowflakeParserDESC {
		{
			p.SetState(10282)
			p.Asc_desc()
		}

	}
	{
		p.SetState(10285)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IFunction_callContext is an interface to support dynamic dispatch.
type IFunction_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_callContext differentiates from other interfaces.
	IsFunction_callContext()
}

type Function_callContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_callContext() *Function_callContext {
	var p = new(Function_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_function_call
	return p
}

func (*Function_callContext) IsFunction_callContext() {}

func NewFunction_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_callContext {
	var p = new(Function_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_function_call

	return p
}

func (s *Function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_callContext) Ranking_windowed_function() IRanking_windowed_functionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRanking_windowed_functionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRanking_windowed_functionContext)
}

func (s *Function_callContext) Aggregate_function() IAggregate_functionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAggregate_functionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAggregate_functionContext)
}

func (s *Function_callContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Function_callContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Function_callContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Function_callContext) Expr_list() IExpr_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFunction_call(s)
	}
}

func (s *Function_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFunction_call(s)
	}
}

func (s *Function_callContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFunction_call(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Function_call() (localctx IFunction_callContext) {
	this := p
	_ = this

	localctx = NewFunction_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 856, SnowflakeParserRULE_function_call)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10296)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1310, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10287)
			p.Ranking_windowed_function()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10288)
			p.Aggregate_function()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10289)
			p.Object_name()
		}
		{
			p.SetState(10290)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(10292)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCASE || _la == SnowflakeParserCAST || _la == SnowflakeParserDEFAULT || _la == SnowflakeParserDENSE_RANK || _la == SnowflakeParserFALSE || _la == SnowflakeParserINT || (int64((_la - 499)) & ^0x3f) == 0 && ((int64(1) << (_la - 499)) & 562949953421315) != 0 || _la == SnowflakeParserRANK || _la == SnowflakeParserROW_NUMBER || _la == SnowflakeParserSTAGE || _la == SnowflakeParserTRUE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 4899982412588515329) != 0 || (int64((_la - 1065)) & ^0x3f) == 0 && ((int64(1) << (_la - 1065)) & 6149) != 0 {
			{
				p.SetState(10291)
				p.Expr_list()
			}

		}
		{
			p.SetState(10294)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}


	return localctx
}


// IRanking_windowed_functionContext is an interface to support dynamic dispatch.
type IRanking_windowed_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRanking_windowed_functionContext differentiates from other interfaces.
	IsRanking_windowed_functionContext()
}

type Ranking_windowed_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRanking_windowed_functionContext() *Ranking_windowed_functionContext {
	var p = new(Ranking_windowed_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_ranking_windowed_function
	return p
}

func (*Ranking_windowed_functionContext) IsRanking_windowed_functionContext() {}

func NewRanking_windowed_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ranking_windowed_functionContext {
	var p = new(Ranking_windowed_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_ranking_windowed_function

	return p
}

func (s *Ranking_windowed_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Ranking_windowed_functionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Ranking_windowed_functionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Ranking_windowed_functionContext) Over_clause() IOver_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOver_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Ranking_windowed_functionContext) RANK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRANK, 0)
}

func (s *Ranking_windowed_functionContext) DENSE_RANK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDENSE_RANK, 0)
}

func (s *Ranking_windowed_functionContext) ROW_NUMBER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW_NUMBER, 0)
}

func (s *Ranking_windowed_functionContext) NTILE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNTILE, 0)
}

func (s *Ranking_windowed_functionContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Ranking_windowed_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ranking_windowed_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Ranking_windowed_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterRanking_windowed_function(s)
	}
}

func (s *Ranking_windowed_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitRanking_windowed_function(s)
	}
}

func (s *Ranking_windowed_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitRanking_windowed_function(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Ranking_windowed_function() (localctx IRanking_windowed_functionContext) {
	this := p
	_ = this

	localctx = NewRanking_windowed_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 858, SnowflakeParserRULE_ranking_windowed_function)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10308)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserDENSE_RANK, SnowflakeParserRANK, SnowflakeParserROW_NUMBER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10298)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserDENSE_RANK || _la == SnowflakeParserRANK || _la == SnowflakeParserROW_NUMBER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(10299)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10300)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		{
			p.SetState(10301)
			p.Over_clause()
		}


	case SnowflakeParserNTILE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10302)
			p.Match(SnowflakeParserNTILE)
		}
		{
			p.SetState(10303)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10304)
			p.expr(0)
		}
		{
			p.SetState(10305)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		{
			p.SetState(10306)
			p.Over_clause()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAggregate_functionContext is an interface to support dynamic dispatch.
type IAggregate_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAggregate_functionContext differentiates from other interfaces.
	IsAggregate_functionContext()
}

type Aggregate_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregate_functionContext() *Aggregate_functionContext {
	var p = new(Aggregate_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_aggregate_function
	return p
}

func (*Aggregate_functionContext) IsAggregate_functionContext() {}

func NewAggregate_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aggregate_functionContext {
	var p = new(Aggregate_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_aggregate_function

	return p
}

func (s *Aggregate_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Aggregate_functionContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Aggregate_functionContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Aggregate_functionContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Aggregate_functionContext) Expr_list() IExpr_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Aggregate_functionContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Aggregate_functionContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Aggregate_functionContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISTINCT, 0)
}

func (s *Aggregate_functionContext) STAR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAR, 0)
}

func (s *Aggregate_functionContext) LISTAGG() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLISTAGG, 0)
}

func (s *Aggregate_functionContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Aggregate_functionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, 0)
}

func (s *Aggregate_functionContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Aggregate_functionContext) WITHIN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITHIN, 0)
}

func (s *Aggregate_functionContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUP, 0)
}

func (s *Aggregate_functionContext) Order_by_clause() IOrder_by_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Aggregate_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Aggregate_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAggregate_function(s)
	}
}

func (s *Aggregate_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAggregate_function(s)
	}
}

func (s *Aggregate_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAggregate_function(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Aggregate_function() (localctx IAggregate_functionContext) {
	this := p
	_ = this

	localctx = NewAggregate_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 860, SnowflakeParserRULE_aggregate_function)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10342)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1316, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10310)
			p.Id_()
		}
		{
			p.SetState(10311)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(10313)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserDISTINCT {
			{
				p.SetState(10312)
				p.Match(SnowflakeParserDISTINCT)
			}

		}
		{
			p.SetState(10315)
			p.Expr_list()
		}
		{
			p.SetState(10316)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10318)
			p.Id_()
		}
		{
			p.SetState(10319)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10320)
			p.Match(SnowflakeParserSTAR)
		}
		{
			p.SetState(10321)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10323)
			p.Match(SnowflakeParserLISTAGG)
		}
		{
			p.SetState(10324)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(10326)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserDISTINCT {
			{
				p.SetState(10325)
				p.Match(SnowflakeParserDISTINCT)
			}

		}
		{
			p.SetState(10328)
			p.expr(0)
		}
		p.SetState(10331)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCOMMA {
			{
				p.SetState(10329)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(10330)
				p.String_()
			}

		}
		{
			p.SetState(10333)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		p.SetState(10340)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1315, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10334)
				p.Match(SnowflakeParserWITHIN)
			}
			{
				p.SetState(10335)
				p.Match(SnowflakeParserGROUP)
			}
			{
				p.SetState(10336)
				p.Match(SnowflakeParserLR_BRACKET)
			}
			{
				p.SetState(10337)
				p.Order_by_clause()
			}
			{
				p.SetState(10338)
				p.Match(SnowflakeParserRR_BRACKET)
			}


		}

	}


	return localctx
}


// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) STRING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTRING, 0)
}

func (s *LiteralContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDECIMAL, 0)
}

func (s *LiteralContext) Sign() ISignContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISignContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISignContext)
}

func (s *LiteralContext) REAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREAL, 0)
}

func (s *LiteralContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFLOAT, 0)
}

func (s *LiteralContext) True_false() ITrue_falseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrue_falseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrue_falseContext)
}

func (s *LiteralContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Literal() (localctx ILiteralContext) {
	this := p
	_ = this

	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 862, SnowflakeParserRULE_literal)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10355)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1319, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10344)
			p.Match(SnowflakeParserSTRING)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(10346)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserPLUS || _la == SnowflakeParserMINUS {
			{
				p.SetState(10345)
				p.Sign()
			}

		}
		{
			p.SetState(10348)
			p.Match(SnowflakeParserDECIMAL)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(10350)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserPLUS || _la == SnowflakeParserMINUS {
			{
				p.SetState(10349)
				p.Sign()
			}

		}
		{
			p.SetState(10352)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserFLOAT || _la == SnowflakeParserREAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(10353)
			p.True_false()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(10354)
			p.Match(SnowflakeParserNULL_)
		}

	}


	return localctx
}


// ISignContext is an interface to support dynamic dispatch.
type ISignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignContext differentiates from other interfaces.
	IsSignContext()
}

type SignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignContext() *SignContext {
	var p = new(SignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_sign
	return p
}

func (*SignContext) IsSignContext() {}

func NewSignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignContext {
	var p = new(SignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_sign

	return p
}

func (s *SignContext) GetParser() antlr.Parser { return s.parser }

func (s *SignContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPLUS, 0)
}

func (s *SignContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMINUS, 0)
}

func (s *SignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSign(s)
	}
}

func (s *SignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSign(s)
	}
}

func (s *SignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSign(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Sign() (localctx ISignContext) {
	this := p
	_ = this

	localctx = NewSignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 864, SnowflakeParserRULE_sign)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10357)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserPLUS || _la == SnowflakeParserMINUS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IFull_column_nameContext is an interface to support dynamic dispatch.
type IFull_column_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDb_name returns the db_name rule contexts.
	GetDb_name() IId_Context

	// GetSchema returns the schema rule contexts.
	GetSchema() IId_Context

	// GetTab_name returns the tab_name rule contexts.
	GetTab_name() IId_Context

	// GetCol_name returns the col_name rule contexts.
	GetCol_name() IId_Context


	// SetDb_name sets the db_name rule contexts.
	SetDb_name(IId_Context)

	// SetSchema sets the schema rule contexts.
	SetSchema(IId_Context)

	// SetTab_name sets the tab_name rule contexts.
	SetTab_name(IId_Context)

	// SetCol_name sets the col_name rule contexts.
	SetCol_name(IId_Context)


	// IsFull_column_nameContext differentiates from other interfaces.
	IsFull_column_nameContext()
}

type Full_column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	db_name IId_Context 
	schema IId_Context 
	tab_name IId_Context 
	col_name IId_Context 
}

func NewEmptyFull_column_nameContext() *Full_column_nameContext {
	var p = new(Full_column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_full_column_name
	return p
}

func (*Full_column_nameContext) IsFull_column_nameContext() {}

func NewFull_column_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_column_nameContext {
	var p = new(Full_column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_full_column_name

	return p
}

func (s *Full_column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_column_nameContext) GetDb_name() IId_Context { return s.db_name }

func (s *Full_column_nameContext) GetSchema() IId_Context { return s.schema }

func (s *Full_column_nameContext) GetTab_name() IId_Context { return s.tab_name }

func (s *Full_column_nameContext) GetCol_name() IId_Context { return s.col_name }


func (s *Full_column_nameContext) SetDb_name(v IId_Context) { s.db_name = v }

func (s *Full_column_nameContext) SetSchema(v IId_Context) { s.schema = v }

func (s *Full_column_nameContext) SetTab_name(v IId_Context) { s.tab_name = v }

func (s *Full_column_nameContext) SetCol_name(v IId_Context) { s.col_name = v }


func (s *Full_column_nameContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserDOT)
}

func (s *Full_column_nameContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, i)
}

func (s *Full_column_nameContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Full_column_nameContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Full_column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Full_column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFull_column_name(s)
	}
}

func (s *Full_column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFull_column_name(s)
	}
}

func (s *Full_column_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFull_column_name(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Full_column_name() (localctx IFull_column_nameContext) {
	this := p
	_ = this

	localctx = NewFull_column_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 866, SnowflakeParserRULE_full_column_name)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10387)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1326, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(10360)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(10359)

				var _x = p.Id_()


				localctx.(*Full_column_nameContext).db_name = _x
			}

		}
		{
			p.SetState(10362)
			p.Match(SnowflakeParserDOT)
		}
		p.SetState(10364)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(10363)

				var _x = p.Id_()


				localctx.(*Full_column_nameContext).schema = _x
			}

		}
		{
			p.SetState(10366)
			p.Match(SnowflakeParserDOT)
		}
		p.SetState(10368)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(10367)

				var _x = p.Id_()


				localctx.(*Full_column_nameContext).tab_name = _x
			}

		}
		{
			p.SetState(10370)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(10371)

			var _x = p.Id_()


			localctx.(*Full_column_nameContext).col_name = _x
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(10373)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(10372)

				var _x = p.Id_()


				localctx.(*Full_column_nameContext).schema = _x
			}

		}
		{
			p.SetState(10375)
			p.Match(SnowflakeParserDOT)
		}
		p.SetState(10377)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(10376)

				var _x = p.Id_()


				localctx.(*Full_column_nameContext).tab_name = _x
			}

		}
		{
			p.SetState(10379)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(10380)

			var _x = p.Id_()


			localctx.(*Full_column_nameContext).col_name = _x
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(10382)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(10381)

				var _x = p.Id_()


				localctx.(*Full_column_nameContext).tab_name = _x
			}

		}
		{
			p.SetState(10384)
			p.Match(SnowflakeParserDOT)
		}
		{
			p.SetState(10385)

			var _x = p.Id_()


			localctx.(*Full_column_nameContext).col_name = _x
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(10386)

			var _x = p.Id_()


			localctx.(*Full_column_nameContext).col_name = _x
		}

	}


	return localctx
}


// IBracket_expressionContext is an interface to support dynamic dispatch.
type IBracket_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBracket_expressionContext differentiates from other interfaces.
	IsBracket_expressionContext()
}

type Bracket_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBracket_expressionContext() *Bracket_expressionContext {
	var p = new(Bracket_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_bracket_expression
	return p
}

func (*Bracket_expressionContext) IsBracket_expressionContext() {}

func NewBracket_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bracket_expressionContext {
	var p = new(Bracket_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_bracket_expression

	return p
}

func (s *Bracket_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Bracket_expressionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Bracket_expressionContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Bracket_expressionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Bracket_expressionContext) Subquery() ISubqueryContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubqueryContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Bracket_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bracket_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Bracket_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterBracket_expression(s)
	}
}

func (s *Bracket_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitBracket_expression(s)
	}
}

func (s *Bracket_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitBracket_expression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Bracket_expression() (localctx IBracket_expressionContext) {
	this := p
	_ = this

	localctx = NewBracket_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 868, SnowflakeParserRULE_bracket_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10397)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1327, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10389)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10390)
			p.expr(0)
		}
		{
			p.SetState(10391)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10393)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10394)
			p.Subquery()
		}
		{
			p.SetState(10395)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}


	return localctx
}


// ICase_expressionContext is an interface to support dynamic dispatch.
type ICase_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCase_expressionContext differentiates from other interfaces.
	IsCase_expressionContext()
}

type Case_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_expressionContext() *Case_expressionContext {
	var p = new(Case_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_case_expression
	return p
}

func (*Case_expressionContext) IsCase_expressionContext() {}

func NewCase_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_expressionContext {
	var p = new(Case_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_case_expression

	return p
}

func (s *Case_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_expressionContext) CASE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCASE, 0)
}

func (s *Case_expressionContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Case_expressionContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Case_expressionContext) END() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEND, 0)
}

func (s *Case_expressionContext) AllSwitch_section() []ISwitch_sectionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISwitch_sectionContext); ok {
			len++
		}
	}

	tst := make([]ISwitch_sectionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISwitch_sectionContext); ok {
			tst[i] = t.(ISwitch_sectionContext)
			i++
		}
	}

	return tst
}

func (s *Case_expressionContext) Switch_section(i int) ISwitch_sectionContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitch_sectionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitch_sectionContext)
}

func (s *Case_expressionContext) ELSE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserELSE, 0)
}

func (s *Case_expressionContext) AllSwitch_search_condition_section() []ISwitch_search_condition_sectionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISwitch_search_condition_sectionContext); ok {
			len++
		}
	}

	tst := make([]ISwitch_search_condition_sectionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISwitch_search_condition_sectionContext); ok {
			tst[i] = t.(ISwitch_search_condition_sectionContext)
			i++
		}
	}

	return tst
}

func (s *Case_expressionContext) Switch_search_condition_section(i int) ISwitch_search_condition_sectionContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitch_search_condition_sectionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitch_search_condition_sectionContext)
}

func (s *Case_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Case_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCase_expression(s)
	}
}

func (s *Case_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCase_expression(s)
	}
}

func (s *Case_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCase_expression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Case_expression() (localctx ICase_expressionContext) {
	this := p
	_ = this

	localctx = NewCase_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 870, SnowflakeParserRULE_case_expression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10424)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1332, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10399)
			p.Match(SnowflakeParserCASE)
		}
		{
			p.SetState(10400)
			p.expr(0)
		}
		p.SetState(10402)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SnowflakeParserWHEN {
			{
				p.SetState(10401)
				p.Switch_section()
			}


			p.SetState(10404)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(10408)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserELSE {
			{
				p.SetState(10406)
				p.Match(SnowflakeParserELSE)
			}
			{
				p.SetState(10407)
				p.expr(0)
			}

		}
		{
			p.SetState(10410)
			p.Match(SnowflakeParserEND)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10412)
			p.Match(SnowflakeParserCASE)
		}
		p.SetState(10414)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SnowflakeParserWHEN {
			{
				p.SetState(10413)
				p.Switch_search_condition_section()
			}


			p.SetState(10416)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(10420)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserELSE {
			{
				p.SetState(10418)
				p.Match(SnowflakeParserELSE)
			}
			{
				p.SetState(10419)
				p.expr(0)
			}

		}
		{
			p.SetState(10422)
			p.Match(SnowflakeParserEND)
		}

	}


	return localctx
}


// ISwitch_search_condition_sectionContext is an interface to support dynamic dispatch.
type ISwitch_search_condition_sectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitch_search_condition_sectionContext differentiates from other interfaces.
	IsSwitch_search_condition_sectionContext()
}

type Switch_search_condition_sectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitch_search_condition_sectionContext() *Switch_search_condition_sectionContext {
	var p = new(Switch_search_condition_sectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_switch_search_condition_section
	return p
}

func (*Switch_search_condition_sectionContext) IsSwitch_search_condition_sectionContext() {}

func NewSwitch_search_condition_sectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Switch_search_condition_sectionContext {
	var p = new(Switch_search_condition_sectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_switch_search_condition_section

	return p
}

func (s *Switch_search_condition_sectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Switch_search_condition_sectionContext) WHEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWHEN, 0)
}

func (s *Switch_search_condition_sectionContext) Search_condition() ISearch_conditionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISearch_conditionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Switch_search_condition_sectionContext) THEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTHEN, 0)
}

func (s *Switch_search_condition_sectionContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Switch_search_condition_sectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Switch_search_condition_sectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Switch_search_condition_sectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSwitch_search_condition_section(s)
	}
}

func (s *Switch_search_condition_sectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSwitch_search_condition_section(s)
	}
}

func (s *Switch_search_condition_sectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSwitch_search_condition_section(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Switch_search_condition_section() (localctx ISwitch_search_condition_sectionContext) {
	this := p
	_ = this

	localctx = NewSwitch_search_condition_sectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 872, SnowflakeParserRULE_switch_search_condition_section)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10426)
		p.Match(SnowflakeParserWHEN)
	}
	{
		p.SetState(10427)
		p.search_condition(0)
	}
	{
		p.SetState(10428)
		p.Match(SnowflakeParserTHEN)
	}
	{
		p.SetState(10429)
		p.expr(0)
	}



	return localctx
}


// ISwitch_sectionContext is an interface to support dynamic dispatch.
type ISwitch_sectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitch_sectionContext differentiates from other interfaces.
	IsSwitch_sectionContext()
}

type Switch_sectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitch_sectionContext() *Switch_sectionContext {
	var p = new(Switch_sectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_switch_section
	return p
}

func (*Switch_sectionContext) IsSwitch_sectionContext() {}

func NewSwitch_sectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Switch_sectionContext {
	var p = new(Switch_sectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_switch_section

	return p
}

func (s *Switch_sectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Switch_sectionContext) WHEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWHEN, 0)
}

func (s *Switch_sectionContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Switch_sectionContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Switch_sectionContext) THEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTHEN, 0)
}

func (s *Switch_sectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Switch_sectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Switch_sectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSwitch_section(s)
	}
}

func (s *Switch_sectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSwitch_section(s)
	}
}

func (s *Switch_sectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSwitch_section(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Switch_section() (localctx ISwitch_sectionContext) {
	this := p
	_ = this

	localctx = NewSwitch_sectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 874, SnowflakeParserRULE_switch_section)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10431)
		p.Match(SnowflakeParserWHEN)
	}
	{
		p.SetState(10432)
		p.expr(0)
	}
	{
		p.SetState(10433)
		p.Match(SnowflakeParserTHEN)
	}
	{
		p.SetState(10434)
		p.expr(0)
	}



	return localctx
}


// IQuery_statementContext is an interface to support dynamic dispatch.
type IQuery_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuery_statementContext differentiates from other interfaces.
	IsQuery_statementContext()
}

type Query_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_statementContext() *Query_statementContext {
	var p = new(Query_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_query_statement
	return p
}

func (*Query_statementContext) IsQuery_statementContext() {}

func NewQuery_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_statementContext {
	var p = new(Query_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_query_statement

	return p
}

func (s *Query_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_statementContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Query_statementContext) With_expression() IWith_expressionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_expressionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Query_statementContext) AllSet_operators() []ISet_operatorsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISet_operatorsContext); ok {
			len++
		}
	}

	tst := make([]ISet_operatorsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISet_operatorsContext); ok {
			tst[i] = t.(ISet_operatorsContext)
			i++
		}
	}

	return tst
}

func (s *Query_statementContext) Set_operators(i int) ISet_operatorsContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_operatorsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_operatorsContext)
}

func (s *Query_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Query_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterQuery_statement(s)
	}
}

func (s *Query_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitQuery_statement(s)
	}
}

func (s *Query_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitQuery_statement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Query_statement() (localctx IQuery_statementContext) {
	this := p
	_ = this

	localctx = NewQuery_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 876, SnowflakeParserRULE_query_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10437)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserWITH {
		{
			p.SetState(10436)
			p.With_expression()
		}

	}
	{
		p.SetState(10439)
		p.Select_statement()
	}
	p.SetState(10443)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserEXCEPT || _la == SnowflakeParserINTERSECT || _la == SnowflakeParserMINUS_ || _la == SnowflakeParserUNION || _la == SnowflakeParserLR_BRACKET {
		{
			p.SetState(10440)
			p.Set_operators()
		}


		p.SetState(10445)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IWith_expressionContext is an interface to support dynamic dispatch.
type IWith_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_expressionContext differentiates from other interfaces.
	IsWith_expressionContext()
}

type With_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_expressionContext() *With_expressionContext {
	var p = new(With_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_with_expression
	return p
}

func (*With_expressionContext) IsWith_expressionContext() {}

func NewWith_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_expressionContext {
	var p = new(With_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_with_expression

	return p
}

func (s *With_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *With_expressionContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *With_expressionContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			len++
		}
	}

	tst := make([]ICommon_table_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICommon_table_expressionContext); ok {
			tst[i] = t.(ICommon_table_expressionContext)
			i++
		}
	}

	return tst
}

func (s *With_expressionContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *With_expressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *With_expressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *With_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *With_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterWith_expression(s)
	}
}

func (s *With_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitWith_expression(s)
	}
}

func (s *With_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitWith_expression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) With_expression() (localctx IWith_expressionContext) {
	this := p
	_ = this

	localctx = NewWith_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 878, SnowflakeParserRULE_with_expression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10446)
		p.Match(SnowflakeParserWITH)
	}
	{
		p.SetState(10447)
		p.Common_table_expression()
	}
	p.SetState(10452)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(10448)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(10449)
			p.Common_table_expression()
		}


		p.SetState(10454)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ICommon_table_expressionContext is an interface to support dynamic dispatch.
type ICommon_table_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetColumns returns the columns rule contexts.
	GetColumns() IColumn_listContext


	// SetColumns sets the columns rule contexts.
	SetColumns(IColumn_listContext)


	// IsCommon_table_expressionContext differentiates from other interfaces.
	IsCommon_table_expressionContext()
}

type Common_table_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	columns IColumn_listContext 
}

func NewEmptyCommon_table_expressionContext() *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_common_table_expression
	return p
}

func (*Common_table_expressionContext) IsCommon_table_expressionContext() {}

func NewCommon_table_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_common_table_expression

	return p
}

func (s *Common_table_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_table_expressionContext) GetColumns() IColumn_listContext { return s.columns }


func (s *Common_table_expressionContext) SetColumns(v IColumn_listContext) { s.columns = v }


func (s *Common_table_expressionContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Common_table_expressionContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *Common_table_expressionContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Common_table_expressionContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Common_table_expressionContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Common_table_expressionContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Common_table_expressionContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Common_table_expressionContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Common_table_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_table_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Common_table_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitCommon_table_expression(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Common_table_expression() (localctx ICommon_table_expressionContext) {
	this := p
	_ = this

	localctx = NewCommon_table_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 880, SnowflakeParserRULE_common_table_expression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10455)
		p.Id_()
	}
	p.SetState(10460)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLR_BRACKET {
		{
			p.SetState(10456)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10457)

			var _x = p.Column_list()


			localctx.(*Common_table_expressionContext).columns = _x
		}
		{
			p.SetState(10458)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}
	{
		p.SetState(10462)
		p.Match(SnowflakeParserAS)
	}
	{
		p.SetState(10463)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(10464)
		p.Select_statement()
	}
	{
		p.SetState(10465)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// ISelect_statementContext is an interface to support dynamic dispatch.
type ISelect_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_statementContext differentiates from other interfaces.
	IsSelect_statementContext()
}

type Select_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_statementContext() *Select_statementContext {
	var p = new(Select_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_select_statement
	return p
}

func (*Select_statementContext) IsSelect_statementContext() {}

func NewSelect_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_statementContext {
	var p = new(Select_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_select_statement

	return p
}

func (s *Select_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_statementContext) Select_clause() ISelect_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_clauseContext)
}

func (s *Select_statementContext) Select_optional_clauses() ISelect_optional_clausesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_optional_clausesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_optional_clausesContext)
}

func (s *Select_statementContext) Limit_clause() ILimit_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_clauseContext)
}

func (s *Select_statementContext) Select_top_clause() ISelect_top_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_top_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_top_clauseContext)
}

func (s *Select_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSelect_statement(s)
	}
}

func (s *Select_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSelect_statement(s)
	}
}

func (s *Select_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSelect_statement(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Select_statement() (localctx ISelect_statementContext) {
	this := p
	_ = this

	localctx = NewSelect_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 882, SnowflakeParserRULE_select_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10475)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1338, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10467)
			p.Select_clause()
		}
		{
			p.SetState(10468)
			p.Select_optional_clauses()
		}
		p.SetState(10470)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFETCH || _la == SnowflakeParserLIMIT || _la == SnowflakeParserOFFSET || _la == SnowflakeParserROW || _la == SnowflakeParserROWS {
			{
				p.SetState(10469)
				p.Limit_clause()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10472)
			p.Select_top_clause()
		}
		{
			p.SetState(10473)
			p.Select_optional_clauses()
		}

	}


	return localctx
}


// ISet_operatorsContext is an interface to support dynamic dispatch.
type ISet_operatorsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_operatorsContext differentiates from other interfaces.
	IsSet_operatorsContext()
}

type Set_operatorsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_operatorsContext() *Set_operatorsContext {
	var p = new(Set_operatorsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_set_operators
	return p
}

func (*Set_operatorsContext) IsSet_operatorsContext() {}

func NewSet_operatorsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_operatorsContext {
	var p = new(Set_operatorsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_set_operators

	return p
}

func (s *Set_operatorsContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_operatorsContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Set_operatorsContext) UNION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNION, 0)
}

func (s *Set_operatorsContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTERSECT, 0)
}

func (s *Set_operatorsContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXCEPT, 0)
}

func (s *Set_operatorsContext) MINUS_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMINUS_, 0)
}

func (s *Set_operatorsContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *Set_operatorsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Set_operatorsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Set_operatorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_operatorsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Set_operatorsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSet_operators(s)
	}
}

func (s *Set_operatorsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSet_operators(s)
	}
}

func (s *Set_operatorsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSet_operators(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Set_operators() (localctx ISet_operatorsContext) {
	this := p
	_ = this

	localctx = NewSet_operatorsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 884, SnowflakeParserRULE_set_operators)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10490)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserEXCEPT, SnowflakeParserINTERSECT, SnowflakeParserMINUS_, SnowflakeParserUNION:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(10483)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserUNION:
			{
				p.SetState(10477)
				p.Match(SnowflakeParserUNION)
			}
			p.SetState(10479)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserALL {
				{
					p.SetState(10478)
					p.Match(SnowflakeParserALL)
				}

			}


		case SnowflakeParserEXCEPT, SnowflakeParserMINUS_:
			{
				p.SetState(10481)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SnowflakeParserEXCEPT || _la == SnowflakeParserMINUS_) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}


		case SnowflakeParserINTERSECT:
			{
				p.SetState(10482)
				p.Match(SnowflakeParserINTERSECT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(10485)
			p.Select_statement()
		}


	case SnowflakeParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10486)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10487)
			p.Select_statement()
		}
		{
			p.SetState(10488)
			p.Match(SnowflakeParserRR_BRACKET)
		}




	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISelect_optional_clausesContext is an interface to support dynamic dispatch.
type ISelect_optional_clausesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_optional_clausesContext differentiates from other interfaces.
	IsSelect_optional_clausesContext()
}

type Select_optional_clausesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_optional_clausesContext() *Select_optional_clausesContext {
	var p = new(Select_optional_clausesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_select_optional_clauses
	return p
}

func (*Select_optional_clausesContext) IsSelect_optional_clausesContext() {}

func NewSelect_optional_clausesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_optional_clausesContext {
	var p = new(Select_optional_clausesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_select_optional_clauses

	return p
}

func (s *Select_optional_clausesContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_optional_clausesContext) Into_clause() IInto_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInto_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInto_clauseContext)
}

func (s *Select_optional_clausesContext) From_clause() IFrom_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_clauseContext)
}

func (s *Select_optional_clausesContext) Where_clause() IWhere_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhere_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Select_optional_clausesContext) Group_by_clause() IGroup_by_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_clauseContext)
}

func (s *Select_optional_clausesContext) Qualify_clause() IQualify_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualify_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualify_clauseContext)
}

func (s *Select_optional_clausesContext) Order_by_clause() IOrder_by_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Select_optional_clausesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_optional_clausesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_optional_clausesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSelect_optional_clauses(s)
	}
}

func (s *Select_optional_clausesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSelect_optional_clauses(s)
	}
}

func (s *Select_optional_clausesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSelect_optional_clauses(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Select_optional_clauses() (localctx ISelect_optional_clausesContext) {
	this := p
	_ = this

	localctx = NewSelect_optional_clausesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 886, SnowflakeParserRULE_select_optional_clauses)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10493)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserINTO {
		{
			p.SetState(10492)
			p.Into_clause()
		}

	}
	p.SetState(10496)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserFROM {
		{
			p.SetState(10495)
			p.From_clause()
		}

	}
	p.SetState(10499)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserWHERE {
		{
			p.SetState(10498)
			p.Where_clause()
		}

	}
	p.SetState(10502)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserGROUP {
		{
			p.SetState(10501)
			p.Group_by_clause()
		}

	}
	p.SetState(10505)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserQUALIFY {
		{
			p.SetState(10504)
			p.Qualify_clause()
		}

	}
	p.SetState(10508)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserORDER {
		{
			p.SetState(10507)
			p.Order_by_clause()
		}

	}



	return localctx
}


// ISelect_clauseContext is an interface to support dynamic dispatch.
type ISelect_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_clauseContext differentiates from other interfaces.
	IsSelect_clauseContext()
}

type Select_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_clauseContext() *Select_clauseContext {
	var p = new(Select_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_select_clause
	return p
}

func (*Select_clauseContext) IsSelect_clauseContext() {}

func NewSelect_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_clauseContext {
	var p = new(Select_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_select_clause

	return p
}

func (s *Select_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_clauseContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSELECT, 0)
}

func (s *Select_clauseContext) Select_list_no_top() ISelect_list_no_topContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_list_no_topContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_list_no_topContext)
}

func (s *Select_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSelect_clause(s)
	}
}

func (s *Select_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSelect_clause(s)
	}
}

func (s *Select_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSelect_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Select_clause() (localctx ISelect_clauseContext) {
	this := p
	_ = this

	localctx = NewSelect_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 888, SnowflakeParserRULE_select_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10510)
		p.Match(SnowflakeParserSELECT)
	}
	{
		p.SetState(10511)
		p.Select_list_no_top()
	}



	return localctx
}


// ISelect_top_clauseContext is an interface to support dynamic dispatch.
type ISelect_top_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_top_clauseContext differentiates from other interfaces.
	IsSelect_top_clauseContext()
}

type Select_top_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_top_clauseContext() *Select_top_clauseContext {
	var p = new(Select_top_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_select_top_clause
	return p
}

func (*Select_top_clauseContext) IsSelect_top_clauseContext() {}

func NewSelect_top_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_top_clauseContext {
	var p = new(Select_top_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_select_top_clause

	return p
}

func (s *Select_top_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_top_clauseContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSELECT, 0)
}

func (s *Select_top_clauseContext) Select_list_top() ISelect_list_topContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_list_topContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_list_topContext)
}

func (s *Select_top_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_top_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_top_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSelect_top_clause(s)
	}
}

func (s *Select_top_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSelect_top_clause(s)
	}
}

func (s *Select_top_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSelect_top_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Select_top_clause() (localctx ISelect_top_clauseContext) {
	this := p
	_ = this

	localctx = NewSelect_top_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 890, SnowflakeParserRULE_select_top_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10513)
		p.Match(SnowflakeParserSELECT)
	}
	{
		p.SetState(10514)
		p.Select_list_top()
	}



	return localctx
}


// ISelect_list_no_topContext is an interface to support dynamic dispatch.
type ISelect_list_no_topContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_list_no_topContext differentiates from other interfaces.
	IsSelect_list_no_topContext()
}

type Select_list_no_topContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_list_no_topContext() *Select_list_no_topContext {
	var p = new(Select_list_no_topContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_select_list_no_top
	return p
}

func (*Select_list_no_topContext) IsSelect_list_no_topContext() {}

func NewSelect_list_no_topContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_list_no_topContext {
	var p = new(Select_list_no_topContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_select_list_no_top

	return p
}

func (s *Select_list_no_topContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_list_no_topContext) Select_list() ISelect_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Select_list_no_topContext) All_distinct() IAll_distinctContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAll_distinctContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAll_distinctContext)
}

func (s *Select_list_no_topContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_list_no_topContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_list_no_topContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSelect_list_no_top(s)
	}
}

func (s *Select_list_no_topContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSelect_list_no_top(s)
	}
}

func (s *Select_list_no_topContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSelect_list_no_top(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Select_list_no_top() (localctx ISelect_list_no_topContext) {
	this := p
	_ = this

	localctx = NewSelect_list_no_topContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 892, SnowflakeParserRULE_select_list_no_top)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10517)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserALL || _la == SnowflakeParserDISTINCT {
		{
			p.SetState(10516)
			p.All_distinct()
		}

	}
	{
		p.SetState(10519)
		p.Select_list()
	}



	return localctx
}


// ISelect_list_topContext is an interface to support dynamic dispatch.
type ISelect_list_topContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_list_topContext differentiates from other interfaces.
	IsSelect_list_topContext()
}

type Select_list_topContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_list_topContext() *Select_list_topContext {
	var p = new(Select_list_topContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_select_list_top
	return p
}

func (*Select_list_topContext) IsSelect_list_topContext() {}

func NewSelect_list_topContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_list_topContext {
	var p = new(Select_list_topContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_select_list_top

	return p
}

func (s *Select_list_topContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_list_topContext) Select_list() ISelect_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Select_list_topContext) All_distinct() IAll_distinctContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAll_distinctContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAll_distinctContext)
}

func (s *Select_list_topContext) Top_clause() ITop_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITop_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITop_clauseContext)
}

func (s *Select_list_topContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_list_topContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_list_topContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSelect_list_top(s)
	}
}

func (s *Select_list_topContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSelect_list_top(s)
	}
}

func (s *Select_list_topContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSelect_list_top(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Select_list_top() (localctx ISelect_list_topContext) {
	this := p
	_ = this

	localctx = NewSelect_list_topContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 894, SnowflakeParserRULE_select_list_top)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10522)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserALL || _la == SnowflakeParserDISTINCT {
		{
			p.SetState(10521)
			p.All_distinct()
		}

	}
	p.SetState(10525)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserTOP {
		{
			p.SetState(10524)
			p.Top_clause()
		}

	}
	{
		p.SetState(10527)
		p.Select_list()
	}



	return localctx
}


// ISelect_listContext is an interface to support dynamic dispatch.
type ISelect_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_listContext differentiates from other interfaces.
	IsSelect_listContext()
}

type Select_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_listContext() *Select_listContext {
	var p = new(Select_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_select_list
	return p
}

func (*Select_listContext) IsSelect_listContext() {}

func NewSelect_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_listContext {
	var p = new(Select_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_select_list

	return p
}

func (s *Select_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_listContext) AllSelect_list_elem() []ISelect_list_elemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_list_elemContext); ok {
			len++
		}
	}

	tst := make([]ISelect_list_elemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_list_elemContext); ok {
			tst[i] = t.(ISelect_list_elemContext)
			i++
		}
	}

	return tst
}

func (s *Select_listContext) Select_list_elem(i int) ISelect_list_elemContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_list_elemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_list_elemContext)
}

func (s *Select_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Select_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Select_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSelect_list(s)
	}
}

func (s *Select_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSelect_list(s)
	}
}

func (s *Select_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSelect_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Select_list() (localctx ISelect_listContext) {
	this := p
	_ = this

	localctx = NewSelect_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 896, SnowflakeParserRULE_select_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10529)
		p.Select_list_elem()
	}
	p.SetState(10534)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(10530)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(10531)
			p.Select_list_elem()
		}


		p.SetState(10536)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ISelect_list_elemContext is an interface to support dynamic dispatch.
type ISelect_list_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_list_elemContext differentiates from other interfaces.
	IsSelect_list_elemContext()
}

type Select_list_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_list_elemContext() *Select_list_elemContext {
	var p = new(Select_list_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_select_list_elem
	return p
}

func (*Select_list_elemContext) IsSelect_list_elemContext() {}

func NewSelect_list_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_list_elemContext {
	var p = new(Select_list_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_select_list_elem

	return p
}

func (s *Select_list_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_list_elemContext) Column_elem() IColumn_elemContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_elemContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_elemContext)
}

func (s *Select_list_elemContext) Expression_elem() IExpression_elemContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_elemContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_elemContext)
}

func (s *Select_list_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_list_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_list_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSelect_list_elem(s)
	}
}

func (s *Select_list_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSelect_list_elem(s)
	}
}

func (s *Select_list_elemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSelect_list_elem(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Select_list_elem() (localctx ISelect_list_elemContext) {
	this := p
	_ = this

	localctx = NewSelect_list_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 898, SnowflakeParserRULE_select_list_elem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10539)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1352, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10537)
			p.Column_elem()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10538)
			p.Expression_elem()
		}

	}


	return localctx
}


// IColumn_elemContext is an interface to support dynamic dispatch.
type IColumn_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_elemContext differentiates from other interfaces.
	IsColumn_elemContext()
}

type Column_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_elemContext() *Column_elemContext {
	var p = new(Column_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_column_elem
	return p
}

func (*Column_elemContext) IsColumn_elemContext() {}

func NewColumn_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_elemContext {
	var p = new(Column_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_column_elem

	return p
}

func (s *Column_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_elemContext) STAR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTAR, 0)
}

func (s *Column_elemContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Column_elemContext) Alias() IAliasContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *Column_elemContext) DOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOT, 0)
}

func (s *Column_elemContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Column_elemContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Column_elemContext) DOLLAR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDOLLAR, 0)
}

func (s *Column_elemContext) Column_position() IColumn_positionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_positionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_positionContext)
}

func (s *Column_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterColumn_elem(s)
	}
}

func (s *Column_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitColumn_elem(s)
	}
}

func (s *Column_elemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitColumn_elem(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Column_elem() (localctx IColumn_elemContext) {
	this := p
	_ = this

	localctx = NewColumn_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 900, SnowflakeParserRULE_column_elem)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10569)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1358, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(10545)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1353, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10541)
				p.Object_name()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1353, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(10542)
				p.Alias()
			}
			{
				p.SetState(10543)
				p.Match(SnowflakeParserDOT)
			}


		}
		{
			p.SetState(10547)
			p.Match(SnowflakeParserSTAR)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(10552)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1354, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10548)
				p.Object_name()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1354, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(10549)
				p.Alias()
			}
			{
				p.SetState(10550)
				p.Match(SnowflakeParserDOT)
			}


		}
		{
			p.SetState(10554)
			p.Column_name()
		}
		p.SetState(10556)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAS || _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(10555)
				p.As_alias()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(10562)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1356, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10558)
				p.Object_name()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1356, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(10559)
				p.Alias()
			}
			{
				p.SetState(10560)
				p.Match(SnowflakeParserDOT)
			}


		}
		{
			p.SetState(10564)
			p.Match(SnowflakeParserDOLLAR)
		}
		{
			p.SetState(10565)
			p.Column_position()
		}
		p.SetState(10567)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAS || _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(10566)
				p.As_alias()
			}

		}

	}


	return localctx
}


// IAs_aliasContext is an interface to support dynamic dispatch.
type IAs_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAs_aliasContext differentiates from other interfaces.
	IsAs_aliasContext()
}

type As_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAs_aliasContext() *As_aliasContext {
	var p = new(As_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_as_alias
	return p
}

func (*As_aliasContext) IsAs_aliasContext() {}

func NewAs_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *As_aliasContext {
	var p = new(As_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_as_alias

	return p
}

func (s *As_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *As_aliasContext) Alias() IAliasContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *As_aliasContext) AS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, 0)
}

func (s *As_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *As_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *As_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAs_alias(s)
	}
}

func (s *As_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAs_alias(s)
	}
}

func (s *As_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAs_alias(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) As_alias() (localctx IAs_aliasContext) {
	this := p
	_ = this

	localctx = NewAs_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 902, SnowflakeParserRULE_as_alias)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10572)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAS {
		{
			p.SetState(10571)
			p.Match(SnowflakeParserAS)
		}

	}
	{
		p.SetState(10574)
		p.Alias()
	}



	return localctx
}


// IExpression_elemContext is an interface to support dynamic dispatch.
type IExpression_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_elemContext differentiates from other interfaces.
	IsExpression_elemContext()
}

type Expression_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_elemContext() *Expression_elemContext {
	var p = new(Expression_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_expression_elem
	return p
}

func (*Expression_elemContext) IsExpression_elemContext() {}

func NewExpression_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_elemContext {
	var p = new(Expression_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_expression_elem

	return p
}

func (s *Expression_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_elemContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expression_elemContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Expression_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Expression_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExpression_elem(s)
	}
}

func (s *Expression_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExpression_elem(s)
	}
}

func (s *Expression_elemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExpression_elem(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Expression_elem() (localctx IExpression_elemContext) {
	this := p
	_ = this

	localctx = NewExpression_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 904, SnowflakeParserRULE_expression_elem)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10576)
		p.expr(0)
	}
	p.SetState(10578)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAS || _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
		{
			p.SetState(10577)
			p.As_alias()
		}

	}



	return localctx
}


// IColumn_positionContext is an interface to support dynamic dispatch.
type IColumn_positionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_positionContext differentiates from other interfaces.
	IsColumn_positionContext()
}

type Column_positionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_positionContext() *Column_positionContext {
	var p = new(Column_positionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_column_position
	return p
}

func (*Column_positionContext) IsColumn_positionContext() {}

func NewColumn_positionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_positionContext {
	var p = new(Column_positionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_column_position

	return p
}

func (s *Column_positionContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_positionContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Column_positionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_positionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_positionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterColumn_position(s)
	}
}

func (s *Column_positionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitColumn_position(s)
	}
}

func (s *Column_positionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitColumn_position(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Column_position() (localctx IColumn_positionContext) {
	this := p
	_ = this

	localctx = NewColumn_positionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 906, SnowflakeParserRULE_column_position)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10580)
		p.Num()
	}



	return localctx
}


// IAll_distinctContext is an interface to support dynamic dispatch.
type IAll_distinctContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAll_distinctContext differentiates from other interfaces.
	IsAll_distinctContext()
}

type All_distinctContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAll_distinctContext() *All_distinctContext {
	var p = new(All_distinctContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_all_distinct
	return p
}

func (*All_distinctContext) IsAll_distinctContext() {}

func NewAll_distinctContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *All_distinctContext {
	var p = new(All_distinctContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_all_distinct

	return p
}

func (s *All_distinctContext) GetParser() antlr.Parser { return s.parser }

func (s *All_distinctContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *All_distinctContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDISTINCT, 0)
}

func (s *All_distinctContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *All_distinctContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *All_distinctContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAll_distinct(s)
	}
}

func (s *All_distinctContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAll_distinct(s)
	}
}

func (s *All_distinctContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAll_distinct(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) All_distinct() (localctx IAll_distinctContext) {
	this := p
	_ = this

	localctx = NewAll_distinctContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 908, SnowflakeParserRULE_all_distinct)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10582)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserALL || _la == SnowflakeParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ITop_clauseContext is an interface to support dynamic dispatch.
type ITop_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTop_clauseContext differentiates from other interfaces.
	IsTop_clauseContext()
}

type Top_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTop_clauseContext() *Top_clauseContext {
	var p = new(Top_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_top_clause
	return p
}

func (*Top_clauseContext) IsTop_clauseContext() {}

func NewTop_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Top_clauseContext {
	var p = new(Top_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_top_clause

	return p
}

func (s *Top_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Top_clauseContext) TOP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTOP, 0)
}

func (s *Top_clauseContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Top_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Top_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Top_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTop_clause(s)
	}
}

func (s *Top_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTop_clause(s)
	}
}

func (s *Top_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTop_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Top_clause() (localctx ITop_clauseContext) {
	this := p
	_ = this

	localctx = NewTop_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 910, SnowflakeParserRULE_top_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10584)
		p.Match(SnowflakeParserTOP)
	}
	{
		p.SetState(10585)
		p.Num()
	}



	return localctx
}


// IInto_clauseContext is an interface to support dynamic dispatch.
type IInto_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInto_clauseContext differentiates from other interfaces.
	IsInto_clauseContext()
}

type Into_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInto_clauseContext() *Into_clauseContext {
	var p = new(Into_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_into_clause
	return p
}

func (*Into_clauseContext) IsInto_clauseContext() {}

func NewInto_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Into_clauseContext {
	var p = new(Into_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_into_clause

	return p
}

func (s *Into_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Into_clauseContext) INTO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINTO, 0)
}

func (s *Into_clauseContext) Var_list() IVar_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVar_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVar_listContext)
}

func (s *Into_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Into_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Into_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterInto_clause(s)
	}
}

func (s *Into_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitInto_clause(s)
	}
}

func (s *Into_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitInto_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Into_clause() (localctx IInto_clauseContext) {
	this := p
	_ = this

	localctx = NewInto_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 912, SnowflakeParserRULE_into_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10587)
		p.Match(SnowflakeParserINTO)
	}
	{
		p.SetState(10588)
		p.Var_list()
	}



	return localctx
}


// IVar_listContext is an interface to support dynamic dispatch.
type IVar_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVar_listContext differentiates from other interfaces.
	IsVar_listContext()
}

type Var_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVar_listContext() *Var_listContext {
	var p = new(Var_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_var_list
	return p
}

func (*Var_listContext) IsVar_listContext() {}

func NewVar_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Var_listContext {
	var p = new(Var_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_var_list

	return p
}

func (s *Var_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Var_listContext) AllVar_() []IVarContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVarContext); ok {
			len++
		}
	}

	tst := make([]IVarContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVarContext); ok {
			tst[i] = t.(IVarContext)
			i++
		}
	}

	return tst
}

func (s *Var_listContext) Var_(i int) IVarContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarContext)
}

func (s *Var_listContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, 0)
}

func (s *Var_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Var_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Var_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterVar_list(s)
	}
}

func (s *Var_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitVar_list(s)
	}
}

func (s *Var_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitVar_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Var_list() (localctx IVar_listContext) {
	this := p
	_ = this

	localctx = NewVar_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 914, SnowflakeParserRULE_var_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10590)
		p.Var_()
	}

	{
		p.SetState(10591)
		p.Match(SnowflakeParserCOMMA)
	}
	{
		p.SetState(10592)
		p.Var_()
	}




	return localctx
}


// IVarContext is an interface to support dynamic dispatch.
type IVarContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVarContext differentiates from other interfaces.
	IsVarContext()
}

type VarContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarContext() *VarContext {
	var p = new(VarContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_var
	return p
}

func (*VarContext) IsVarContext() {}

func NewVarContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarContext {
	var p = new(VarContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_var

	return p
}

func (s *VarContext) GetParser() antlr.Parser { return s.parser }

func (s *VarContext) COLON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOLON, 0)
}

func (s *VarContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *VarContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *VarContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterVar(s)
	}
}

func (s *VarContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitVar(s)
	}
}

func (s *VarContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitVar(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Var_() (localctx IVarContext) {
	this := p
	_ = this

	localctx = NewVarContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 916, SnowflakeParserRULE_var)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10594)
		p.Match(SnowflakeParserCOLON)
	}
	{
		p.SetState(10595)
		p.Id_()
	}



	return localctx
}


// IFrom_clauseContext is an interface to support dynamic dispatch.
type IFrom_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrom_clauseContext differentiates from other interfaces.
	IsFrom_clauseContext()
}

type From_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_clauseContext() *From_clauseContext {
	var p = new(From_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_from_clause
	return p
}

func (*From_clauseContext) IsFrom_clauseContext() {}

func NewFrom_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_clauseContext {
	var p = new(From_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_from_clause

	return p
}

func (s *From_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *From_clauseContext) FROM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFROM, 0)
}

func (s *From_clauseContext) Table_sources() ITable_sourcesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_sourcesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *From_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *From_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFrom_clause(s)
	}
}

func (s *From_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFrom_clause(s)
	}
}

func (s *From_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFrom_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) From_clause() (localctx IFrom_clauseContext) {
	this := p
	_ = this

	localctx = NewFrom_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 918, SnowflakeParserRULE_from_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10597)
		p.Match(SnowflakeParserFROM)
	}
	{
		p.SetState(10598)
		p.Table_sources()
	}



	return localctx
}


// ITable_sourcesContext is an interface to support dynamic dispatch.
type ITable_sourcesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_sourcesContext differentiates from other interfaces.
	IsTable_sourcesContext()
}

type Table_sourcesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_sourcesContext() *Table_sourcesContext {
	var p = new(Table_sourcesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_table_sources
	return p
}

func (*Table_sourcesContext) IsTable_sourcesContext() {}

func NewTable_sourcesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_sourcesContext {
	var p = new(Table_sourcesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_table_sources

	return p
}

func (s *Table_sourcesContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_sourcesContext) AllTable_source() []ITable_sourceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_sourceContext); ok {
			len++
		}
	}

	tst := make([]ITable_sourceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_sourceContext); ok {
			tst[i] = t.(ITable_sourceContext)
			i++
		}
	}

	return tst
}

func (s *Table_sourcesContext) Table_source(i int) ITable_sourceContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_sourceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_sourceContext)
}

func (s *Table_sourcesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Table_sourcesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Table_sourcesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_sourcesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_sourcesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTable_sources(s)
	}
}

func (s *Table_sourcesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTable_sources(s)
	}
}

func (s *Table_sourcesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTable_sources(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Table_sources() (localctx ITable_sourcesContext) {
	this := p
	_ = this

	localctx = NewTable_sourcesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 920, SnowflakeParserRULE_table_sources)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10600)
		p.Table_source()
	}
	p.SetState(10605)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(10601)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(10602)
			p.Table_source()
		}


		p.SetState(10607)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ITable_sourceContext is an interface to support dynamic dispatch.
type ITable_sourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_sourceContext differentiates from other interfaces.
	IsTable_sourceContext()
}

type Table_sourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_sourceContext() *Table_sourceContext {
	var p = new(Table_sourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_table_source
	return p
}

func (*Table_sourceContext) IsTable_sourceContext() {}

func NewTable_sourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_sourceContext {
	var p = new(Table_sourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_table_source

	return p
}

func (s *Table_sourceContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_sourceContext) Table_source_item_joined() ITable_source_item_joinedContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_source_item_joinedContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_source_item_joinedContext)
}

func (s *Table_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_sourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_sourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTable_source(s)
	}
}

func (s *Table_sourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTable_source(s)
	}
}

func (s *Table_sourceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTable_source(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Table_source() (localctx ITable_sourceContext) {
	this := p
	_ = this

	localctx = NewTable_sourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 922, SnowflakeParserRULE_table_source)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10608)
		p.Table_source_item_joined()
	}



	return localctx
}


// ITable_source_item_joinedContext is an interface to support dynamic dispatch.
type ITable_source_item_joinedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_source_item_joinedContext differentiates from other interfaces.
	IsTable_source_item_joinedContext()
}

type Table_source_item_joinedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_source_item_joinedContext() *Table_source_item_joinedContext {
	var p = new(Table_source_item_joinedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_table_source_item_joined
	return p
}

func (*Table_source_item_joinedContext) IsTable_source_item_joinedContext() {}

func NewTable_source_item_joinedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_source_item_joinedContext {
	var p = new(Table_source_item_joinedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_table_source_item_joined

	return p
}

func (s *Table_source_item_joinedContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_source_item_joinedContext) Object_ref() IObject_refContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_refContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_refContext)
}

func (s *Table_source_item_joinedContext) AllJoin_clause() []IJoin_clauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoin_clauseContext); ok {
			len++
		}
	}

	tst := make([]IJoin_clauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoin_clauseContext); ok {
			tst[i] = t.(IJoin_clauseContext)
			i++
		}
	}

	return tst
}

func (s *Table_source_item_joinedContext) Join_clause(i int) IJoin_clauseContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_clauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Table_source_item_joinedContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Table_source_item_joinedContext) Table_source_item_joined() ITable_source_item_joinedContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_source_item_joinedContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_source_item_joinedContext)
}

func (s *Table_source_item_joinedContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Table_source_item_joinedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_source_item_joinedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_source_item_joinedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterTable_source_item_joined(s)
	}
}

func (s *Table_source_item_joinedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitTable_source_item_joined(s)
	}
}

func (s *Table_source_item_joinedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitTable_source_item_joined(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Table_source_item_joined() (localctx ITable_source_item_joinedContext) {
	this := p
	_ = this

	localctx = NewTable_source_item_joinedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 924, SnowflakeParserRULE_table_source_item_joined)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10626)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1364, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10610)
			p.Object_ref()
		}
		p.SetState(10614)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCROSS || _la == SnowflakeParserFULL || _la == SnowflakeParserINNER || _la == SnowflakeParserJOIN || _la == SnowflakeParserLEFT || _la == SnowflakeParserNATURAL || _la == SnowflakeParserRIGHT {
			{
				p.SetState(10611)
				p.Join_clause()
			}


			p.SetState(10616)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10617)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10618)
			p.Table_source_item_joined()
		}
		{
			p.SetState(10619)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		p.SetState(10623)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCROSS || _la == SnowflakeParserFULL || _la == SnowflakeParserINNER || _la == SnowflakeParserJOIN || _la == SnowflakeParserLEFT || _la == SnowflakeParserNATURAL || _la == SnowflakeParserRIGHT {
			{
				p.SetState(10620)
				p.Join_clause()
			}


			p.SetState(10625)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}


	return localctx
}


// IObject_refContext is an interface to support dynamic dispatch.
type IObject_refContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObject_refContext differentiates from other interfaces.
	IsObject_refContext()
}

type Object_refContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObject_refContext() *Object_refContext {
	var p = new(Object_refContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_object_ref
	return p
}

func (*Object_refContext) IsObject_refContext() {}

func NewObject_refContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Object_refContext {
	var p = new(Object_refContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_object_ref

	return p
}

func (s *Object_refContext) GetParser() antlr.Parser { return s.parser }

func (s *Object_refContext) Object_name() IObject_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_nameContext)
}

func (s *Object_refContext) At_before() IAt_beforeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAt_beforeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAt_beforeContext)
}

func (s *Object_refContext) Changes() IChangesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChangesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChangesContext)
}

func (s *Object_refContext) Match_recognize() IMatch_recognizeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatch_recognizeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatch_recognizeContext)
}

func (s *Object_refContext) Pivot_unpivot() IPivot_unpivotContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_unpivotContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_unpivotContext)
}

func (s *Object_refContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Object_refContext) Sample() ISampleContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISampleContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISampleContext)
}

func (s *Object_refContext) START() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTART, 0)
}

func (s *Object_refContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Object_refContext) Predicate() IPredicateContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPredicateContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Object_refContext) CONNECT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCONNECT, 0)
}

func (s *Object_refContext) BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBY, 0)
}

func (s *Object_refContext) Prior_list() IPrior_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrior_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrior_listContext)
}

func (s *Object_refContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLE, 0)
}

func (s *Object_refContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Object_refContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Object_refContext) Expr_list() IExpr_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Object_refContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Object_refContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Object_refContext) Values() IValuesContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValuesContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValuesContext)
}

func (s *Object_refContext) Subquery() ISubqueryContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubqueryContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Object_refContext) LATERAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLATERAL, 0)
}

func (s *Object_refContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Object_refContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Object_refContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterObject_ref(s)
	}
}

func (s *Object_refContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitObject_ref(s)
	}
}

func (s *Object_refContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitObject_ref(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Object_ref() (localctx IObject_refContext) {
	this := p
	_ = this

	localctx = NewObject_refContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 926, SnowflakeParserRULE_object_ref)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10687)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1378, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10628)
			p.Object_name()
		}
		p.SetState(10630)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserBEFORE || _la == SnowflakeParserAT {
			{
				p.SetState(10629)
				p.At_before()
			}

		}
		p.SetState(10633)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserCHANGES {
			{
				p.SetState(10632)
				p.Changes()
			}

		}
		p.SetState(10636)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserMATCH_RECOGNIZE {
			{
				p.SetState(10635)
				p.Match_recognize()
			}

		}
		p.SetState(10639)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserPIVOT || _la == SnowflakeParserUNPIVOT {
			{
				p.SetState(10638)
				p.Pivot_unpivot()
			}

		}
		p.SetState(10642)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAS || _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(10641)
				p.As_alias()
			}

		}
		p.SetState(10645)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAMPLE || _la == SnowflakeParserTABLESAMPLE {
			{
				p.SetState(10644)
				p.Sample()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10647)
			p.Object_name()
		}
		{
			p.SetState(10648)
			p.Match(SnowflakeParserSTART)
		}
		{
			p.SetState(10649)
			p.Match(SnowflakeParserWITH)
		}
		{
			p.SetState(10650)
			p.Predicate()
		}
		{
			p.SetState(10651)
			p.Match(SnowflakeParserCONNECT)
		}
		{
			p.SetState(10652)
			p.Match(SnowflakeParserBY)
		}
		p.SetState(10654)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserINT || _la == SnowflakeParserPRIOR || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(10653)
				p.Prior_list()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10656)
			p.Match(SnowflakeParserTABLE)
		}
		{
			p.SetState(10657)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10658)
			p.Object_name()
		}
		{
			p.SetState(10659)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10660)
			p.Expr_list()
		}
		{
			p.SetState(10661)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		{
			p.SetState(10662)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		p.SetState(10664)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserPIVOT || _la == SnowflakeParserUNPIVOT {
			{
				p.SetState(10663)
				p.Pivot_unpivot()
			}

		}
		p.SetState(10667)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAS || _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(10666)
				p.As_alias()
			}

		}
		p.SetState(10670)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAMPLE || _la == SnowflakeParserTABLESAMPLE {
			{
				p.SetState(10669)
				p.Sample()
			}

		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(10672)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10673)
			p.Values()
		}
		{
			p.SetState(10674)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		p.SetState(10676)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserSAMPLE || _la == SnowflakeParserTABLESAMPLE {
			{
				p.SetState(10675)
				p.Sample()
			}

		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(10679)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserLATERAL {
			{
				p.SetState(10678)
				p.Match(SnowflakeParserLATERAL)
			}

		}
		{
			p.SetState(10681)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10682)
			p.Subquery()
		}
		{
			p.SetState(10683)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		p.SetState(10685)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAS || _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
			{
				p.SetState(10684)
				p.As_alias()
			}

		}

	}


	return localctx
}


// IPrior_listContext is an interface to support dynamic dispatch.
type IPrior_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrior_listContext differentiates from other interfaces.
	IsPrior_listContext()
}

type Prior_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrior_listContext() *Prior_listContext {
	var p = new(Prior_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_prior_list
	return p
}

func (*Prior_listContext) IsPrior_listContext() {}

func NewPrior_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Prior_listContext {
	var p = new(Prior_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_prior_list

	return p
}

func (s *Prior_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Prior_listContext) AllPrior_item() []IPrior_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPrior_itemContext); ok {
			len++
		}
	}

	tst := make([]IPrior_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPrior_itemContext); ok {
			tst[i] = t.(IPrior_itemContext)
			i++
		}
	}

	return tst
}

func (s *Prior_listContext) Prior_item(i int) IPrior_itemContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrior_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrior_itemContext)
}

func (s *Prior_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Prior_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Prior_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Prior_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Prior_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterPrior_list(s)
	}
}

func (s *Prior_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitPrior_list(s)
	}
}

func (s *Prior_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitPrior_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Prior_list() (localctx IPrior_listContext) {
	this := p
	_ = this

	localctx = NewPrior_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 928, SnowflakeParserRULE_prior_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10689)
		p.Prior_item()
	}
	p.SetState(10694)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1379, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(10690)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(10691)
				p.Prior_item()
			}


		}
		p.SetState(10696)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1379, p.GetParserRuleContext())
	}



	return localctx
}


// IPrior_itemContext is an interface to support dynamic dispatch.
type IPrior_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrior_itemContext differentiates from other interfaces.
	IsPrior_itemContext()
}

type Prior_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrior_itemContext() *Prior_itemContext {
	var p = new(Prior_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_prior_item
	return p
}

func (*Prior_itemContext) IsPrior_itemContext() {}

func NewPrior_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Prior_itemContext {
	var p = new(Prior_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_prior_item

	return p
}

func (s *Prior_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Prior_itemContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Prior_itemContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Prior_itemContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Prior_itemContext) AllPRIOR() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserPRIOR)
}

func (s *Prior_itemContext) PRIOR(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPRIOR, i)
}

func (s *Prior_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Prior_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Prior_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterPrior_item(s)
	}
}

func (s *Prior_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitPrior_item(s)
	}
}

func (s *Prior_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitPrior_item(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Prior_item() (localctx IPrior_itemContext) {
	this := p
	_ = this

	localctx = NewPrior_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 930, SnowflakeParserRULE_prior_item)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10698)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserPRIOR {
		{
			p.SetState(10697)
			p.Match(SnowflakeParserPRIOR)
		}

	}
	{
		p.SetState(10700)
		p.Id_()
	}
	{
		p.SetState(10701)
		p.Match(SnowflakeParserEQ)
	}
	p.SetState(10703)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserPRIOR {
		{
			p.SetState(10702)
			p.Match(SnowflakeParserPRIOR)
		}

	}
	{
		p.SetState(10705)
		p.Id_()
	}



	return localctx
}


// IOuter_joinContext is an interface to support dynamic dispatch.
type IOuter_joinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOuter_joinContext differentiates from other interfaces.
	IsOuter_joinContext()
}

type Outer_joinContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOuter_joinContext() *Outer_joinContext {
	var p = new(Outer_joinContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_outer_join
	return p
}

func (*Outer_joinContext) IsOuter_joinContext() {}

func NewOuter_joinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Outer_joinContext {
	var p = new(Outer_joinContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_outer_join

	return p
}

func (s *Outer_joinContext) GetParser() antlr.Parser { return s.parser }

func (s *Outer_joinContext) LEFT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLEFT, 0)
}

func (s *Outer_joinContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRIGHT, 0)
}

func (s *Outer_joinContext) FULL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFULL, 0)
}

func (s *Outer_joinContext) OUTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOUTER, 0)
}

func (s *Outer_joinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Outer_joinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Outer_joinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterOuter_join(s)
	}
}

func (s *Outer_joinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitOuter_join(s)
	}
}

func (s *Outer_joinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitOuter_join(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Outer_join() (localctx IOuter_joinContext) {
	this := p
	_ = this

	localctx = NewOuter_joinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 932, SnowflakeParserRULE_outer_join)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10707)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserFULL || _la == SnowflakeParserLEFT || _la == SnowflakeParserRIGHT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(10709)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOUTER {
		{
			p.SetState(10708)
			p.Match(SnowflakeParserOUTER)
		}

	}



	return localctx
}


// IJoin_typeContext is an interface to support dynamic dispatch.
type IJoin_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_typeContext differentiates from other interfaces.
	IsJoin_typeContext()
}

type Join_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_typeContext() *Join_typeContext {
	var p = new(Join_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_join_type
	return p
}

func (*Join_typeContext) IsJoin_typeContext() {}

func NewJoin_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_typeContext {
	var p = new(Join_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_join_type

	return p
}

func (s *Join_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_typeContext) INNER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINNER, 0)
}

func (s *Join_typeContext) Outer_join() IOuter_joinContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOuter_joinContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOuter_joinContext)
}

func (s *Join_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Join_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterJoin_type(s)
	}
}

func (s *Join_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitJoin_type(s)
	}
}

func (s *Join_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitJoin_type(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Join_type() (localctx IJoin_typeContext) {
	this := p
	_ = this

	localctx = NewJoin_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 934, SnowflakeParserRULE_join_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10713)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserINNER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10711)
			p.Match(SnowflakeParserINNER)
		}


	case SnowflakeParserFULL, SnowflakeParserLEFT, SnowflakeParserRIGHT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10712)
			p.Outer_join()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IJoin_clauseContext is an interface to support dynamic dispatch.
type IJoin_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_clauseContext differentiates from other interfaces.
	IsJoin_clauseContext()
}

type Join_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_clauseContext() *Join_clauseContext {
	var p = new(Join_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_join_clause
	return p
}

func (*Join_clauseContext) IsJoin_clauseContext() {}

func NewJoin_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_clauseContext {
	var p = new(Join_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_join_clause

	return p
}

func (s *Join_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_clauseContext) JOIN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserJOIN, 0)
}

func (s *Join_clauseContext) Object_ref() IObject_refContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObject_refContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObject_refContext)
}

func (s *Join_clauseContext) Join_type() IJoin_typeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_typeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_typeContext)
}

func (s *Join_clauseContext) ON() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserON, 0)
}

func (s *Join_clauseContext) Search_condition() ISearch_conditionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISearch_conditionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Join_clauseContext) USING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUSING, 0)
}

func (s *Join_clauseContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Join_clauseContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Join_clauseContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Join_clauseContext) NATURAL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNATURAL, 0)
}

func (s *Join_clauseContext) Outer_join() IOuter_joinContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOuter_joinContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOuter_joinContext)
}

func (s *Join_clauseContext) CROSS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCROSS, 0)
}

func (s *Join_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Join_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterJoin_clause(s)
	}
}

func (s *Join_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitJoin_clause(s)
	}
}

func (s *Join_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitJoin_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Join_clause() (localctx IJoin_clauseContext) {
	this := p
	_ = this

	localctx = NewJoin_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 936, SnowflakeParserRULE_join_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10742)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserFULL, SnowflakeParserINNER, SnowflakeParserJOIN, SnowflakeParserLEFT, SnowflakeParserRIGHT:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(10716)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFULL || _la == SnowflakeParserINNER || _la == SnowflakeParserLEFT || _la == SnowflakeParserRIGHT {
			{
				p.SetState(10715)
				p.Join_type()
			}

		}
		{
			p.SetState(10718)
			p.Match(SnowflakeParserJOIN)
		}
		{
			p.SetState(10719)
			p.Object_ref()
		}
		p.SetState(10731)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1387, p.GetParserRuleContext()) {
		case 1:
			p.SetState(10722)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1385, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(10720)
					p.Match(SnowflakeParserON)
				}
				{
					p.SetState(10721)
					p.search_condition(0)
				}


			}


		case 2:
			p.SetState(10729)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SnowflakeParserUSING {
				{
					p.SetState(10724)
					p.Match(SnowflakeParserUSING)
				}
				{
					p.SetState(10725)
					p.Match(SnowflakeParserLR_BRACKET)
				}
				{
					p.SetState(10726)
					p.Column_list()
				}
				{
					p.SetState(10727)
					p.Match(SnowflakeParserRR_BRACKET)
				}

			}

		}


	case SnowflakeParserNATURAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10733)
			p.Match(SnowflakeParserNATURAL)
		}
		p.SetState(10735)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFULL || _la == SnowflakeParserLEFT || _la == SnowflakeParserRIGHT {
			{
				p.SetState(10734)
				p.Outer_join()
			}

		}
		{
			p.SetState(10737)
			p.Match(SnowflakeParserJOIN)
		}
		{
			p.SetState(10738)
			p.Object_ref()
		}


	case SnowflakeParserCROSS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10739)
			p.Match(SnowflakeParserCROSS)
		}
		{
			p.SetState(10740)
			p.Match(SnowflakeParserJOIN)
		}
		{
			p.SetState(10741)
			p.Object_ref()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAt_beforeContext is an interface to support dynamic dispatch.
type IAt_beforeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAt_beforeContext differentiates from other interfaces.
	IsAt_beforeContext()
}

type At_beforeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAt_beforeContext() *At_beforeContext {
	var p = new(At_beforeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_at_before
	return p
}

func (*At_beforeContext) IsAt_beforeContext() {}

func NewAt_beforeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *At_beforeContext {
	var p = new(At_beforeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_at_before

	return p
}

func (s *At_beforeContext) GetParser() antlr.Parser { return s.parser }

func (s *At_beforeContext) AT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAT, 0)
}

func (s *At_beforeContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *At_beforeContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *At_beforeContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP, 0)
}

func (s *At_beforeContext) ARROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserARROW, 0)
}

func (s *At_beforeContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *At_beforeContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOFFSET, 0)
}

func (s *At_beforeContext) STATEMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTATEMENT, 0)
}

func (s *At_beforeContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *At_beforeContext) STREAM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTREAM, 0)
}

func (s *At_beforeContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBEFORE, 0)
}

func (s *At_beforeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *At_beforeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *At_beforeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAt_before(s)
	}
}

func (s *At_beforeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAt_before(s)
	}
}

func (s *At_beforeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAt_before(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) At_before() (localctx IAt_beforeContext) {
	this := p
	_ = this

	localctx = NewAt_beforeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 938, SnowflakeParserRULE_at_before)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10769)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10744)
			p.Match(SnowflakeParserAT)
		}
		{
			p.SetState(10745)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(10758)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserTIMESTAMP:
			{
				p.SetState(10746)
				p.Match(SnowflakeParserTIMESTAMP)
			}
			{
				p.SetState(10747)
				p.Match(SnowflakeParserARROW)
			}
			{
				p.SetState(10748)
				p.String_()
			}


		case SnowflakeParserOFFSET:
			{
				p.SetState(10749)
				p.Match(SnowflakeParserOFFSET)
			}
			{
				p.SetState(10750)
				p.Match(SnowflakeParserARROW)
			}
			{
				p.SetState(10751)
				p.String_()
			}


		case SnowflakeParserSTATEMENT:
			{
				p.SetState(10752)
				p.Match(SnowflakeParserSTATEMENT)
			}
			{
				p.SetState(10753)
				p.Match(SnowflakeParserARROW)
			}
			{
				p.SetState(10754)
				p.Id_()
			}


		case SnowflakeParserSTREAM:
			{
				p.SetState(10755)
				p.Match(SnowflakeParserSTREAM)
			}
			{
				p.SetState(10756)
				p.Match(SnowflakeParserARROW)
			}
			{
				p.SetState(10757)
				p.String_()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(10760)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case SnowflakeParserBEFORE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10762)
			p.Match(SnowflakeParserBEFORE)
		}
		{
			p.SetState(10763)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10764)
			p.Match(SnowflakeParserSTATEMENT)
		}
		{
			p.SetState(10765)
			p.Match(SnowflakeParserARROW)
		}
		{
			p.SetState(10766)
			p.Id_()
		}
		{
			p.SetState(10767)
			p.Match(SnowflakeParserRR_BRACKET)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IEndContext is an interface to support dynamic dispatch.
type IEndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEndContext differentiates from other interfaces.
	IsEndContext()
}

type EndContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEndContext() *EndContext {
	var p = new(EndContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_end
	return p
}

func (*EndContext) IsEndContext() {}

func NewEndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EndContext {
	var p = new(EndContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_end

	return p
}

func (s *EndContext) GetParser() antlr.Parser { return s.parser }

func (s *EndContext) END() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEND, 0)
}

func (s *EndContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *EndContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTIMESTAMP, 0)
}

func (s *EndContext) ARROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserARROW, 0)
}

func (s *EndContext) String_() IStringContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *EndContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOFFSET, 0)
}

func (s *EndContext) STATEMENT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSTATEMENT, 0)
}

func (s *EndContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *EndContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *EndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *EndContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterEnd(s)
	}
}

func (s *EndContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitEnd(s)
	}
}

func (s *EndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitEnd(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) End() (localctx IEndContext) {
	this := p
	_ = this

	localctx = NewEndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 940, SnowflakeParserRULE_end)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10784)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserEND:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10771)
			p.Match(SnowflakeParserEND)
		}
		{
			p.SetState(10772)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10773)
			p.Match(SnowflakeParserTIMESTAMP)
		}
		{
			p.SetState(10774)
			p.Match(SnowflakeParserARROW)
		}
		{
			p.SetState(10775)
			p.String_()
		}


	case SnowflakeParserOFFSET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10776)
			p.Match(SnowflakeParserOFFSET)
		}
		{
			p.SetState(10777)
			p.Match(SnowflakeParserARROW)
		}
		{
			p.SetState(10778)
			p.String_()
		}


	case SnowflakeParserSTATEMENT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10779)
			p.Match(SnowflakeParserSTATEMENT)
		}
		{
			p.SetState(10780)
			p.Match(SnowflakeParserARROW)
		}
		{
			p.SetState(10781)
			p.Id_()
		}
		{
			p.SetState(10782)
			p.Match(SnowflakeParserRR_BRACKET)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IChangesContext is an interface to support dynamic dispatch.
type IChangesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChangesContext differentiates from other interfaces.
	IsChangesContext()
}

type ChangesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChangesContext() *ChangesContext {
	var p = new(ChangesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_changes
	return p
}

func (*ChangesContext) IsChangesContext() {}

func NewChangesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChangesContext {
	var p = new(ChangesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_changes

	return p
}

func (s *ChangesContext) GetParser() antlr.Parser { return s.parser }

func (s *ChangesContext) CHANGES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCHANGES, 0)
}

func (s *ChangesContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *ChangesContext) INFORMATION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserINFORMATION, 0)
}

func (s *ChangesContext) ASSOC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserASSOC, 0)
}

func (s *ChangesContext) Default_append_only() IDefault_append_onlyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_append_onlyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_append_onlyContext)
}

func (s *ChangesContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *ChangesContext) At_before() IAt_beforeContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAt_beforeContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAt_beforeContext)
}

func (s *ChangesContext) End() IEndContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEndContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ChangesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChangesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ChangesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterChanges(s)
	}
}

func (s *ChangesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitChanges(s)
	}
}

func (s *ChangesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitChanges(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Changes() (localctx IChangesContext) {
	this := p
	_ = this

	localctx = NewChangesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 942, SnowflakeParserRULE_changes)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10786)
		p.Match(SnowflakeParserCHANGES)
	}
	{
		p.SetState(10787)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(10788)
		p.Match(SnowflakeParserINFORMATION)
	}
	{
		p.SetState(10789)
		p.Match(SnowflakeParserASSOC)
	}
	{
		p.SetState(10790)
		p.Default_append_only()
	}
	{
		p.SetState(10791)
		p.Match(SnowflakeParserRR_BRACKET)
	}
	{
		p.SetState(10792)
		p.At_before()
	}
	p.SetState(10794)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1393, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10793)
			p.End()
		}


	}



	return localctx
}


// IDefault_append_onlyContext is an interface to support dynamic dispatch.
type IDefault_append_onlyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefault_append_onlyContext differentiates from other interfaces.
	IsDefault_append_onlyContext()
}

type Default_append_onlyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_append_onlyContext() *Default_append_onlyContext {
	var p = new(Default_append_onlyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_default_append_only
	return p
}

func (*Default_append_onlyContext) IsDefault_append_onlyContext() {}

func NewDefault_append_onlyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_append_onlyContext {
	var p = new(Default_append_onlyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_default_append_only

	return p
}

func (s *Default_append_onlyContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_append_onlyContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFAULT, 0)
}

func (s *Default_append_onlyContext) APPEND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAPPEND, 0)
}

func (s *Default_append_onlyContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserONLY, 0)
}

func (s *Default_append_onlyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_append_onlyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Default_append_onlyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDefault_append_only(s)
	}
}

func (s *Default_append_onlyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDefault_append_only(s)
	}
}

func (s *Default_append_onlyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDefault_append_only(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Default_append_only() (localctx IDefault_append_onlyContext) {
	this := p
	_ = this

	localctx = NewDefault_append_onlyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 944, SnowflakeParserRULE_default_append_only)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10799)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserDEFAULT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10796)
			p.Match(SnowflakeParserDEFAULT)
		}


	case SnowflakeParserAPPEND:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10797)
			p.Match(SnowflakeParserAPPEND)
		}
		{
			p.SetState(10798)
			p.Match(SnowflakeParserONLY)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IPartition_byContext is an interface to support dynamic dispatch.
type IPartition_byContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartition_byContext differentiates from other interfaces.
	IsPartition_byContext()
}

type Partition_byContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_byContext() *Partition_byContext {
	var p = new(Partition_byContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_partition_by
	return p
}

func (*Partition_byContext) IsPartition_byContext() {}

func NewPartition_byContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_byContext {
	var p = new(Partition_byContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_partition_by

	return p
}

func (s *Partition_byContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_byContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPARTITION, 0)
}

func (s *Partition_byContext) BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBY, 0)
}

func (s *Partition_byContext) Expr_list() IExpr_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Partition_byContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_byContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Partition_byContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterPartition_by(s)
	}
}

func (s *Partition_byContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitPartition_by(s)
	}
}

func (s *Partition_byContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitPartition_by(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Partition_by() (localctx IPartition_byContext) {
	this := p
	_ = this

	localctx = NewPartition_byContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 946, SnowflakeParserRULE_partition_by)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10801)
		p.Match(SnowflakeParserPARTITION)
	}
	{
		p.SetState(10802)
		p.Match(SnowflakeParserBY)
	}
	{
		p.SetState(10803)
		p.Expr_list()
	}



	return localctx
}


// IAliasContext is an interface to support dynamic dispatch.
type IAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAliasContext differentiates from other interfaces.
	IsAliasContext()
}

type AliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasContext() *AliasContext {
	var p = new(AliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_alias
	return p
}

func (*AliasContext) IsAliasContext() {}

func NewAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasContext {
	var p = new(AliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_alias

	return p
}

func (s *AliasContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAlias(s)
	}
}

func (s *AliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAlias(s)
	}
}

func (s *AliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAlias(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Alias() (localctx IAliasContext) {
	this := p
	_ = this

	localctx = NewAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 948, SnowflakeParserRULE_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10805)
		p.Id_()
	}



	return localctx
}


// IExpr_alias_listContext is an interface to support dynamic dispatch.
type IExpr_alias_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_alias_listContext differentiates from other interfaces.
	IsExpr_alias_listContext()
}

type Expr_alias_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_alias_listContext() *Expr_alias_listContext {
	var p = new(Expr_alias_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_expr_alias_list
	return p
}

func (*Expr_alias_listContext) IsExpr_alias_listContext() {}

func NewExpr_alias_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_alias_listContext {
	var p = new(Expr_alias_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_expr_alias_list

	return p
}

func (s *Expr_alias_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_alias_listContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_alias_listContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_alias_listContext) AllAlias() []IAliasContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAliasContext); ok {
			len++
		}
	}

	tst := make([]IAliasContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAliasContext); ok {
			tst[i] = t.(IAliasContext)
			i++
		}
	}

	return tst
}

func (s *Expr_alias_listContext) Alias(i int) IAliasContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *Expr_alias_listContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserAS)
}

func (s *Expr_alias_listContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, i)
}

func (s *Expr_alias_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Expr_alias_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Expr_alias_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_alias_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Expr_alias_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExpr_alias_list(s)
	}
}

func (s *Expr_alias_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExpr_alias_list(s)
	}
}

func (s *Expr_alias_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExpr_alias_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Expr_alias_list() (localctx IExpr_alias_listContext) {
	this := p
	_ = this

	localctx = NewExpr_alias_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 950, SnowflakeParserRULE_expr_alias_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10807)
		p.expr(0)
	}
	p.SetState(10809)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAS {
		{
			p.SetState(10808)
			p.Match(SnowflakeParserAS)
		}

	}
	{
		p.SetState(10811)
		p.Alias()
	}
	p.SetState(10821)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(10812)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(10813)
			p.expr(0)
		}
		p.SetState(10815)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserAS {
			{
				p.SetState(10814)
				p.Match(SnowflakeParserAS)
			}

		}
		{
			p.SetState(10817)
			p.Alias()
		}


		p.SetState(10823)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IMeasuresContext is an interface to support dynamic dispatch.
type IMeasuresContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeasuresContext differentiates from other interfaces.
	IsMeasuresContext()
}

type MeasuresContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeasuresContext() *MeasuresContext {
	var p = new(MeasuresContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_measures
	return p
}

func (*MeasuresContext) IsMeasuresContext() {}

func NewMeasuresContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MeasuresContext {
	var p = new(MeasuresContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_measures

	return p
}

func (s *MeasuresContext) GetParser() antlr.Parser { return s.parser }

func (s *MeasuresContext) MEASURES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMEASURES, 0)
}

func (s *MeasuresContext) Expr_alias_list() IExpr_alias_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_alias_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_alias_listContext)
}

func (s *MeasuresContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MeasuresContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *MeasuresContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterMeasures(s)
	}
}

func (s *MeasuresContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitMeasures(s)
	}
}

func (s *MeasuresContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitMeasures(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Measures() (localctx IMeasuresContext) {
	this := p
	_ = this

	localctx = NewMeasuresContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 952, SnowflakeParserRULE_measures)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10824)
		p.Match(SnowflakeParserMEASURES)
	}
	{
		p.SetState(10825)
		p.Expr_alias_list()
	}



	return localctx
}


// IMatch_optsContext is an interface to support dynamic dispatch.
type IMatch_optsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatch_optsContext differentiates from other interfaces.
	IsMatch_optsContext()
}

type Match_optsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatch_optsContext() *Match_optsContext {
	var p = new(Match_optsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_match_opts
	return p
}

func (*Match_optsContext) IsMatch_optsContext() {}

func NewMatch_optsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Match_optsContext {
	var p = new(Match_optsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_match_opts

	return p
}

func (s *Match_optsContext) GetParser() antlr.Parser { return s.parser }

func (s *Match_optsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSHOW, 0)
}

func (s *Match_optsContext) EMPTY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEMPTY, 0)
}

func (s *Match_optsContext) MATCHES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATCHES, 0)
}

func (s *Match_optsContext) OMIT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOMIT, 0)
}

func (s *Match_optsContext) WITH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWITH, 0)
}

func (s *Match_optsContext) UNMATCHED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNMATCHED, 0)
}

func (s *Match_optsContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROWS, 0)
}

func (s *Match_optsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Match_optsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Match_optsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterMatch_opts(s)
	}
}

func (s *Match_optsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitMatch_opts(s)
	}
}

func (s *Match_optsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitMatch_opts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Match_opts() (localctx IMatch_optsContext) {
	this := p
	_ = this

	localctx = NewMatch_optsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 954, SnowflakeParserRULE_match_opts)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10836)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserSHOW:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10827)
			p.Match(SnowflakeParserSHOW)
		}
		{
			p.SetState(10828)
			p.Match(SnowflakeParserEMPTY)
		}
		{
			p.SetState(10829)
			p.Match(SnowflakeParserMATCHES)
		}


	case SnowflakeParserOMIT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10830)
			p.Match(SnowflakeParserOMIT)
		}
		{
			p.SetState(10831)
			p.Match(SnowflakeParserEMPTY)
		}
		{
			p.SetState(10832)
			p.Match(SnowflakeParserMATCHES)
		}


	case SnowflakeParserWITH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10833)
			p.Match(SnowflakeParserWITH)
		}
		{
			p.SetState(10834)
			p.Match(SnowflakeParserUNMATCHED)
		}
		{
			p.SetState(10835)
			p.Match(SnowflakeParserROWS)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IRow_matchContext is an interface to support dynamic dispatch.
type IRow_matchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRow_matchContext differentiates from other interfaces.
	IsRow_matchContext()
}

type Row_matchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_matchContext() *Row_matchContext {
	var p = new(Row_matchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_row_match
	return p
}

func (*Row_matchContext) IsRow_matchContext() {}

func NewRow_matchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_matchContext {
	var p = new(Row_matchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_row_match

	return p
}

func (s *Row_matchContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_matchContext) ONE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserONE, 0)
}

func (s *Row_matchContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *Row_matchContext) PER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPER, 0)
}

func (s *Row_matchContext) MATCH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATCH, 0)
}

func (s *Row_matchContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *Row_matchContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROWS, 0)
}

func (s *Row_matchContext) Match_opts() IMatch_optsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatch_optsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatch_optsContext)
}

func (s *Row_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_matchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Row_matchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterRow_match(s)
	}
}

func (s *Row_matchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitRow_match(s)
	}
}

func (s *Row_matchContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitRow_match(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Row_match() (localctx IRow_matchContext) {
	this := p
	_ = this

	localctx = NewRow_matchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 956, SnowflakeParserRULE_row_match)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10846)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserONE:
		{
			p.SetState(10838)
			p.Match(SnowflakeParserONE)
		}
		{
			p.SetState(10839)
			p.Match(SnowflakeParserROW)
		}
		{
			p.SetState(10840)
			p.Match(SnowflakeParserPER)
		}
		{
			p.SetState(10841)
			p.Match(SnowflakeParserMATCH)
		}


	case SnowflakeParserALL:
		{
			p.SetState(10842)
			p.Match(SnowflakeParserALL)
		}
		{
			p.SetState(10843)
			p.Match(SnowflakeParserROWS)
		}
		{
			p.SetState(10844)
			p.Match(SnowflakeParserPER)
		}
		{
			p.SetState(10845)
			p.Match(SnowflakeParserMATCH)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(10849)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserOMIT || _la == SnowflakeParserSHOW || _la == SnowflakeParserWITH {
		{
			p.SetState(10848)
			p.Match_opts()
		}

	}



	return localctx
}


// IFirst_lastContext is an interface to support dynamic dispatch.
type IFirst_lastContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFirst_lastContext differentiates from other interfaces.
	IsFirst_lastContext()
}

type First_lastContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFirst_lastContext() *First_lastContext {
	var p = new(First_lastContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_first_last
	return p
}

func (*First_lastContext) IsFirst_lastContext() {}

func NewFirst_lastContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *First_lastContext {
	var p = new(First_lastContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_first_last

	return p
}

func (s *First_lastContext) GetParser() antlr.Parser { return s.parser }

func (s *First_lastContext) FIRST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFIRST, 0)
}

func (s *First_lastContext) LAST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLAST, 0)
}

func (s *First_lastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *First_lastContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *First_lastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFirst_last(s)
	}
}

func (s *First_lastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFirst_last(s)
	}
}

func (s *First_lastContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFirst_last(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) First_last() (localctx IFirst_lastContext) {
	this := p
	_ = this

	localctx = NewFirst_lastContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 958, SnowflakeParserRULE_first_last)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10851)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserFIRST || _la == SnowflakeParserLAST) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ISymbolContext is an interface to support dynamic dispatch.
type ISymbolContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSymbolContext differentiates from other interfaces.
	IsSymbolContext()
}

type SymbolContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySymbolContext() *SymbolContext {
	var p = new(SymbolContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_symbol
	return p
}

func (*SymbolContext) IsSymbolContext() {}

func NewSymbolContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SymbolContext {
	var p = new(SymbolContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_symbol

	return p
}

func (s *SymbolContext) GetParser() antlr.Parser { return s.parser }

func (s *SymbolContext) DUMMY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDUMMY, 0)
}

func (s *SymbolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SymbolContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SymbolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSymbol(s)
	}
}

func (s *SymbolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSymbol(s)
	}
}

func (s *SymbolContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSymbol(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Symbol() (localctx ISymbolContext) {
	this := p
	_ = this

	localctx = NewSymbolContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 960, SnowflakeParserRULE_symbol)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10853)
		p.Match(SnowflakeParserDUMMY)
	}



	return localctx
}


// IAfter_matchContext is an interface to support dynamic dispatch.
type IAfter_matchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAfter_matchContext differentiates from other interfaces.
	IsAfter_matchContext()
}

type After_matchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAfter_matchContext() *After_matchContext {
	var p = new(After_matchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_after_match
	return p
}

func (*After_matchContext) IsAfter_matchContext() {}

func NewAfter_matchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *After_matchContext {
	var p = new(After_matchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_after_match

	return p
}

func (s *After_matchContext) GetParser() antlr.Parser { return s.parser }

func (s *After_matchContext) AFTER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAFTER, 0)
}

func (s *After_matchContext) MATCH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATCH, 0)
}

func (s *After_matchContext) SKIP_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSKIP_, 0)
}

func (s *After_matchContext) PAST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPAST, 0)
}

func (s *After_matchContext) LAST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLAST, 0)
}

func (s *After_matchContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *After_matchContext) TO() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTO, 0)
}

func (s *After_matchContext) NEXT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNEXT, 0)
}

func (s *After_matchContext) Symbol() ISymbolContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolContext)
}

func (s *After_matchContext) First_last() IFirst_lastContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFirst_lastContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFirst_lastContext)
}

func (s *After_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *After_matchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *After_matchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterAfter_match(s)
	}
}

func (s *After_matchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitAfter_match(s)
	}
}

func (s *After_matchContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitAfter_match(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) After_match() (localctx IAfter_matchContext) {
	this := p
	_ = this

	localctx = NewAfter_matchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 962, SnowflakeParserRULE_after_match)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10855)
		p.Match(SnowflakeParserAFTER)
	}
	{
		p.SetState(10856)
		p.Match(SnowflakeParserMATCH)
	}
	{
		p.SetState(10857)
		p.Match(SnowflakeParserSKIP_)
	}
	p.SetState(10869)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1402, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(10858)
			p.Match(SnowflakeParserPAST)
		}
		{
			p.SetState(10859)
			p.Match(SnowflakeParserLAST)
		}
		{
			p.SetState(10860)
			p.Match(SnowflakeParserROW)
		}


	case 2:
		{
			p.SetState(10861)
			p.Match(SnowflakeParserTO)
		}
		{
			p.SetState(10862)
			p.Match(SnowflakeParserNEXT)
		}
		{
			p.SetState(10863)
			p.Match(SnowflakeParserROW)
		}


	case 3:
		{
			p.SetState(10864)
			p.Match(SnowflakeParserTO)
		}
		p.SetState(10866)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFIRST || _la == SnowflakeParserLAST {
			{
				p.SetState(10865)
				p.First_last()
			}

		}
		{
			p.SetState(10868)
			p.Symbol()
		}

	}



	return localctx
}


// ISymbol_listContext is an interface to support dynamic dispatch.
type ISymbol_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSymbol_listContext differentiates from other interfaces.
	IsSymbol_listContext()
}

type Symbol_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySymbol_listContext() *Symbol_listContext {
	var p = new(Symbol_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_symbol_list
	return p
}

func (*Symbol_listContext) IsSymbol_listContext() {}

func NewSymbol_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Symbol_listContext {
	var p = new(Symbol_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_symbol_list

	return p
}

func (s *Symbol_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Symbol_listContext) AllSymbol() []ISymbolContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISymbolContext); ok {
			len++
		}
	}

	tst := make([]ISymbolContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISymbolContext); ok {
			tst[i] = t.(ISymbolContext)
			i++
		}
	}

	return tst
}

func (s *Symbol_listContext) Symbol(i int) ISymbolContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolContext)
}

func (s *Symbol_listContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserAS)
}

func (s *Symbol_listContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAS, i)
}

func (s *Symbol_listContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Symbol_listContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Symbol_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Symbol_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Symbol_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Symbol_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Symbol_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSymbol_list(s)
	}
}

func (s *Symbol_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSymbol_list(s)
	}
}

func (s *Symbol_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSymbol_list(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Symbol_list() (localctx ISymbol_listContext) {
	this := p
	_ = this

	localctx = NewSymbol_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 964, SnowflakeParserRULE_symbol_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10871)
		p.Symbol()
	}
	{
		p.SetState(10872)
		p.Match(SnowflakeParserAS)
	}
	{
		p.SetState(10873)
		p.expr(0)
	}
	p.SetState(10881)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(10874)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(10875)
			p.Symbol()
		}
		{
			p.SetState(10876)
			p.Match(SnowflakeParserAS)
		}
		{
			p.SetState(10877)
			p.expr(0)
		}


		p.SetState(10883)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IDefineContext is an interface to support dynamic dispatch.
type IDefineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefineContext differentiates from other interfaces.
	IsDefineContext()
}

type DefineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefineContext() *DefineContext {
	var p = new(DefineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_define
	return p
}

func (*DefineContext) IsDefineContext() {}

func NewDefineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefineContext {
	var p = new(DefineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_define

	return p
}

func (s *DefineContext) GetParser() antlr.Parser { return s.parser }

func (s *DefineContext) DEFINE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDEFINE, 0)
}

func (s *DefineContext) Symbol_list() ISymbol_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbol_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbol_listContext)
}

func (s *DefineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DefineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterDefine(s)
	}
}

func (s *DefineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitDefine(s)
	}
}

func (s *DefineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitDefine(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Define() (localctx IDefineContext) {
	this := p
	_ = this

	localctx = NewDefineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 966, SnowflakeParserRULE_define)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10884)
		p.Match(SnowflakeParserDEFINE)
	}
	{
		p.SetState(10885)
		p.Symbol_list()
	}



	return localctx
}


// IMatch_recognizeContext is an interface to support dynamic dispatch.
type IMatch_recognizeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatch_recognizeContext differentiates from other interfaces.
	IsMatch_recognizeContext()
}

type Match_recognizeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatch_recognizeContext() *Match_recognizeContext {
	var p = new(Match_recognizeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_match_recognize
	return p
}

func (*Match_recognizeContext) IsMatch_recognizeContext() {}

func NewMatch_recognizeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Match_recognizeContext {
	var p = new(Match_recognizeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_match_recognize

	return p
}

func (s *Match_recognizeContext) GetParser() antlr.Parser { return s.parser }

func (s *Match_recognizeContext) MATCH_RECOGNIZE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserMATCH_RECOGNIZE, 0)
}

func (s *Match_recognizeContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Match_recognizeContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Match_recognizeContext) Partition_by() IPartition_byContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_byContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_byContext)
}

func (s *Match_recognizeContext) Order_by_clause() IOrder_by_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Match_recognizeContext) Measures() IMeasuresContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeasuresContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeasuresContext)
}

func (s *Match_recognizeContext) Row_match() IRow_matchContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_matchContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_matchContext)
}

func (s *Match_recognizeContext) After_match() IAfter_matchContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAfter_matchContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAfter_matchContext)
}

func (s *Match_recognizeContext) Pattern() IPatternContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *Match_recognizeContext) Define() IDefineContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefineContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefineContext)
}

func (s *Match_recognizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Match_recognizeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Match_recognizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterMatch_recognize(s)
	}
}

func (s *Match_recognizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitMatch_recognize(s)
	}
}

func (s *Match_recognizeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitMatch_recognize(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Match_recognize() (localctx IMatch_recognizeContext) {
	this := p
	_ = this

	localctx = NewMatch_recognizeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 968, SnowflakeParserRULE_match_recognize)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10887)
		p.Match(SnowflakeParserMATCH_RECOGNIZE)
	}
	{
		p.SetState(10888)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(10890)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserPARTITION {
		{
			p.SetState(10889)
			p.Partition_by()
		}

	}
	p.SetState(10893)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserORDER {
		{
			p.SetState(10892)
			p.Order_by_clause()
		}

	}
	p.SetState(10896)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserMEASURES {
		{
			p.SetState(10895)
			p.Measures()
		}

	}
	p.SetState(10899)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserALL || _la == SnowflakeParserONE {
		{
			p.SetState(10898)
			p.Row_match()
		}

	}
	p.SetState(10902)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAFTER {
		{
			p.SetState(10901)
			p.After_match()
		}

	}
	p.SetState(10905)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserPATTERN {
		{
			p.SetState(10904)
			p.Pattern()
		}

	}
	p.SetState(10908)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserDEFINE {
		{
			p.SetState(10907)
			p.Define()
		}

	}
	{
		p.SetState(10910)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IValContext is an interface to support dynamic dispatch.
type IValContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValContext differentiates from other interfaces.
	IsValContext()
}

type ValContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValContext() *ValContext {
	var p = new(ValContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_val
	return p
}

func (*ValContext) IsValContext() {}

func NewValContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValContext {
	var p = new(ValContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_val

	return p
}

func (s *ValContext) GetParser() antlr.Parser { return s.parser }

func (s *ValContext) DUMMY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDUMMY, 0)
}

func (s *ValContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ValContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterVal(s)
	}
}

func (s *ValContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitVal(s)
	}
}

func (s *ValContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitVal(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Val() (localctx IValContext) {
	this := p
	_ = this

	localctx = NewValContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 970, SnowflakeParserRULE_val)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10912)
		p.Match(SnowflakeParserDUMMY)
	}



	return localctx
}


// IPivot_unpivotContext is an interface to support dynamic dispatch.
type IPivot_unpivotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPivot_unpivotContext differentiates from other interfaces.
	IsPivot_unpivotContext()
}

type Pivot_unpivotContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_unpivotContext() *Pivot_unpivotContext {
	var p = new(Pivot_unpivotContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_pivot_unpivot
	return p
}

func (*Pivot_unpivotContext) IsPivot_unpivotContext() {}

func NewPivot_unpivotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_unpivotContext {
	var p = new(Pivot_unpivotContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_pivot_unpivot

	return p
}

func (s *Pivot_unpivotContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_unpivotContext) PIVOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserPIVOT, 0)
}

func (s *Pivot_unpivotContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserLR_BRACKET)
}

func (s *Pivot_unpivotContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, i)
}

func (s *Pivot_unpivotContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Pivot_unpivotContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Pivot_unpivotContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserRR_BRACKET)
}

func (s *Pivot_unpivotContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, i)
}

func (s *Pivot_unpivotContext) FOR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFOR, 0)
}

func (s *Pivot_unpivotContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *Pivot_unpivotContext) AllVal() []IValContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IValContext); ok {
			len++
		}
	}

	tst := make([]IValContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IValContext); ok {
			tst[i] = t.(IValContext)
			i++
		}
	}

	return tst
}

func (s *Pivot_unpivotContext) Val(i int) IValContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValContext)
}

func (s *Pivot_unpivotContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Pivot_unpivotContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Pivot_unpivotContext) UNPIVOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserUNPIVOT, 0)
}

func (s *Pivot_unpivotContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Pivot_unpivotContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Pivot_unpivotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_unpivotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Pivot_unpivotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterPivot_unpivot(s)
	}
}

func (s *Pivot_unpivotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitPivot_unpivot(s)
	}
}

func (s *Pivot_unpivotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitPivot_unpivot(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Pivot_unpivot() (localctx IPivot_unpivotContext) {
	this := p
	_ = this

	localctx = NewPivot_unpivotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 972, SnowflakeParserRULE_pivot_unpivot)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10946)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserPIVOT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10914)
			p.Match(SnowflakeParserPIVOT)
		}
		{
			p.SetState(10915)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10916)
			p.Id_()
		}
		{
			p.SetState(10917)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10918)
			p.Id_()
		}
		{
			p.SetState(10919)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		{
			p.SetState(10920)
			p.Match(SnowflakeParserFOR)
		}
		{
			p.SetState(10921)
			p.Id_()
		}
		{
			p.SetState(10922)
			p.Match(SnowflakeParserIN)
		}
		{
			p.SetState(10923)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10924)
			p.Val()
		}
		p.SetState(10929)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(10925)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(10926)
				p.Val()
			}


			p.SetState(10931)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(10932)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		{
			p.SetState(10933)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case SnowflakeParserUNPIVOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10935)
			p.Match(SnowflakeParserUNPIVOT)
		}
		{
			p.SetState(10936)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10937)
			p.Id_()
		}
		{
			p.SetState(10938)
			p.Match(SnowflakeParserFOR)
		}
		{
			p.SetState(10939)
			p.Column_name()
		}
		{
			p.SetState(10940)
			p.Match(SnowflakeParserIN)
		}
		{
			p.SetState(10941)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(10942)
			p.Column_list()
		}
		{
			p.SetState(10943)
			p.Match(SnowflakeParserRR_BRACKET)
		}
		{
			p.SetState(10944)
			p.Match(SnowflakeParserRR_BRACKET)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IColumn_alias_list_in_bracketsContext is an interface to support dynamic dispatch.
type IColumn_alias_list_in_bracketsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_alias_list_in_bracketsContext differentiates from other interfaces.
	IsColumn_alias_list_in_bracketsContext()
}

type Column_alias_list_in_bracketsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_alias_list_in_bracketsContext() *Column_alias_list_in_bracketsContext {
	var p = new(Column_alias_list_in_bracketsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_column_alias_list_in_brackets
	return p
}

func (*Column_alias_list_in_bracketsContext) IsColumn_alias_list_in_bracketsContext() {}

func NewColumn_alias_list_in_bracketsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_alias_list_in_bracketsContext {
	var p = new(Column_alias_list_in_bracketsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_column_alias_list_in_brackets

	return p
}

func (s *Column_alias_list_in_bracketsContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_alias_list_in_bracketsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Column_alias_list_in_bracketsContext) AllId_() []IId_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IId_Context); ok {
			len++
		}
	}

	tst := make([]IId_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IId_Context); ok {
			tst[i] = t.(IId_Context)
			i++
		}
	}

	return tst
}

func (s *Column_alias_list_in_bracketsContext) Id_(i int) IId_Context {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Column_alias_list_in_bracketsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Column_alias_list_in_bracketsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Column_alias_list_in_bracketsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Column_alias_list_in_bracketsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_alias_list_in_bracketsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_alias_list_in_bracketsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterColumn_alias_list_in_brackets(s)
	}
}

func (s *Column_alias_list_in_bracketsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitColumn_alias_list_in_brackets(s)
	}
}

func (s *Column_alias_list_in_bracketsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitColumn_alias_list_in_brackets(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Column_alias_list_in_brackets() (localctx IColumn_alias_list_in_bracketsContext) {
	this := p
	_ = this

	localctx = NewColumn_alias_list_in_bracketsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 974, SnowflakeParserRULE_column_alias_list_in_brackets)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10948)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(10949)
		p.Id_()
	}
	p.SetState(10954)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(10950)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(10951)
			p.Id_()
		}


		p.SetState(10956)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(10957)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IExpr_list_in_parenthesesContext is an interface to support dynamic dispatch.
type IExpr_list_in_parenthesesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_list_in_parenthesesContext differentiates from other interfaces.
	IsExpr_list_in_parenthesesContext()
}

type Expr_list_in_parenthesesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_list_in_parenthesesContext() *Expr_list_in_parenthesesContext {
	var p = new(Expr_list_in_parenthesesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_expr_list_in_parentheses
	return p
}

func (*Expr_list_in_parenthesesContext) IsExpr_list_in_parenthesesContext() {}

func NewExpr_list_in_parenthesesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_list_in_parenthesesContext {
	var p = new(Expr_list_in_parenthesesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_expr_list_in_parentheses

	return p
}

func (s *Expr_list_in_parenthesesContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_list_in_parenthesesContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Expr_list_in_parenthesesContext) Expr_list() IExpr_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Expr_list_in_parenthesesContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Expr_list_in_parenthesesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_list_in_parenthesesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Expr_list_in_parenthesesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterExpr_list_in_parentheses(s)
	}
}

func (s *Expr_list_in_parenthesesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitExpr_list_in_parentheses(s)
	}
}

func (s *Expr_list_in_parenthesesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitExpr_list_in_parentheses(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Expr_list_in_parentheses() (localctx IExpr_list_in_parenthesesContext) {
	this := p
	_ = this

	localctx = NewExpr_list_in_parenthesesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 976, SnowflakeParserRULE_expr_list_in_parentheses)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10959)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(10960)
		p.Expr_list()
	}
	{
		p.SetState(10961)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// IValuesContext is an interface to support dynamic dispatch.
type IValuesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValuesContext differentiates from other interfaces.
	IsValuesContext()
}

type ValuesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValuesContext() *ValuesContext {
	var p = new(ValuesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_values
	return p
}

func (*ValuesContext) IsValuesContext() {}

func NewValuesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValuesContext {
	var p = new(ValuesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_values

	return p
}

func (s *ValuesContext) GetParser() antlr.Parser { return s.parser }

func (s *ValuesContext) VALUES() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserVALUES, 0)
}

func (s *ValuesContext) AllExpr_list_in_parentheses() []IExpr_list_in_parenthesesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpr_list_in_parenthesesContext); ok {
			len++
		}
	}

	tst := make([]IExpr_list_in_parenthesesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpr_list_in_parenthesesContext); ok {
			tst[i] = t.(IExpr_list_in_parenthesesContext)
			i++
		}
	}

	return tst
}

func (s *ValuesContext) Expr_list_in_parentheses(i int) IExpr_list_in_parenthesesContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_list_in_parenthesesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_list_in_parenthesesContext)
}

func (s *ValuesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *ValuesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *ValuesContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *ValuesContext) Column_alias_list_in_brackets() IColumn_alias_list_in_bracketsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_alias_list_in_bracketsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_alias_list_in_bracketsContext)
}

func (s *ValuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValuesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ValuesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterValues(s)
	}
}

func (s *ValuesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitValues(s)
	}
}

func (s *ValuesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitValues(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Values() (localctx IValuesContext) {
	this := p
	_ = this

	localctx = NewValuesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 978, SnowflakeParserRULE_values)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10963)
		p.Match(SnowflakeParserVALUES)
	}
	{
		p.SetState(10964)
		p.Expr_list_in_parentheses()
	}
	p.SetState(10969)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(10965)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(10966)
			p.Expr_list_in_parentheses()
		}


		p.SetState(10971)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(10973)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserAS || _la == SnowflakeParserINT || _la == SnowflakeParserSTAGE || (int64((_la - 1001)) & ^0x3f) == 0 && ((int64(1) << (_la - 1001)) & 47244640257) != 0 {
		{
			p.SetState(10972)
			p.As_alias()
		}

	}
	p.SetState(10976)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserLR_BRACKET {
		{
			p.SetState(10975)
			p.Column_alias_list_in_brackets()
		}

	}



	return localctx
}


// ISample_methodContext is an interface to support dynamic dispatch.
type ISample_methodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSample_methodContext differentiates from other interfaces.
	IsSample_methodContext()
}

type Sample_methodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySample_methodContext() *Sample_methodContext {
	var p = new(Sample_methodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_sample_method
	return p
}

func (*Sample_methodContext) IsSample_methodContext() {}

func NewSample_methodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sample_methodContext {
	var p = new(Sample_methodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_sample_method

	return p
}

func (s *Sample_methodContext) GetParser() antlr.Parser { return s.parser }

func (s *Sample_methodContext) BERNOULLI() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBERNOULLI, 0)
}

func (s *Sample_methodContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *Sample_methodContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSYSTEM, 0)
}

func (s *Sample_methodContext) BLOCK() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBLOCK, 0)
}

func (s *Sample_methodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sample_methodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Sample_methodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSample_method(s)
	}
}

func (s *Sample_methodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSample_method(s)
	}
}

func (s *Sample_methodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSample_method(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Sample_method() (localctx ISample_methodContext) {
	this := p
	_ = this

	localctx = NewSample_methodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 980, SnowflakeParserRULE_sample_method)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10980)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserBERNOULLI, SnowflakeParserROW:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10978)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserBERNOULLI || _la == SnowflakeParserROW) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SnowflakeParserBLOCK, SnowflakeParserSYSTEM:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10979)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserBLOCK || _la == SnowflakeParserSYSTEM) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IRepeatable_seedContext is an interface to support dynamic dispatch.
type IRepeatable_seedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRepeatable_seedContext differentiates from other interfaces.
	IsRepeatable_seedContext()
}

type Repeatable_seedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeatable_seedContext() *Repeatable_seedContext {
	var p = new(Repeatable_seedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_repeatable_seed
	return p
}

func (*Repeatable_seedContext) IsRepeatable_seedContext() {}

func NewRepeatable_seedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Repeatable_seedContext {
	var p = new(Repeatable_seedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_repeatable_seed

	return p
}

func (s *Repeatable_seedContext) GetParser() antlr.Parser { return s.parser }

func (s *Repeatable_seedContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Repeatable_seedContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Repeatable_seedContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Repeatable_seedContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserREPEATABLE, 0)
}

func (s *Repeatable_seedContext) SEED() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSEED, 0)
}

func (s *Repeatable_seedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Repeatable_seedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Repeatable_seedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterRepeatable_seed(s)
	}
}

func (s *Repeatable_seedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitRepeatable_seed(s)
	}
}

func (s *Repeatable_seedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitRepeatable_seed(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Repeatable_seed() (localctx IRepeatable_seedContext) {
	this := p
	_ = this

	localctx = NewRepeatable_seedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 982, SnowflakeParserRULE_repeatable_seed)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10982)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserREPEATABLE || _la == SnowflakeParserSEED) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(10983)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	{
		p.SetState(10984)
		p.Num()
	}
	{
		p.SetState(10985)
		p.Match(SnowflakeParserRR_BRACKET)
	}



	return localctx
}


// ISample_optsContext is an interface to support dynamic dispatch.
type ISample_optsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSample_optsContext differentiates from other interfaces.
	IsSample_optsContext()
}

type Sample_optsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySample_optsContext() *Sample_optsContext {
	var p = new(Sample_optsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_sample_opts
	return p
}

func (*Sample_optsContext) IsSample_optsContext() {}

func NewSample_optsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sample_optsContext {
	var p = new(Sample_optsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_sample_opts

	return p
}

func (s *Sample_optsContext) GetParser() antlr.Parser { return s.parser }

func (s *Sample_optsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Sample_optsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Sample_optsContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Sample_optsContext) Repeatable_seed() IRepeatable_seedContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRepeatable_seedContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRepeatable_seedContext)
}

func (s *Sample_optsContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROWS, 0)
}

func (s *Sample_optsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sample_optsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Sample_optsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSample_opts(s)
	}
}

func (s *Sample_optsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSample_opts(s)
	}
}

func (s *Sample_optsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSample_opts(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Sample_opts() (localctx ISample_optsContext) {
	this := p
	_ = this

	localctx = NewSample_optsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 984, SnowflakeParserRULE_sample_opts)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10987)
		p.Match(SnowflakeParserLR_BRACKET)
	}
	p.SetState(10992)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1418, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(10988)
			p.Num()
		}


	case 2:
		{
			p.SetState(10989)
			p.Num()
		}
		{
			p.SetState(10990)
			p.Match(SnowflakeParserROWS)
		}


	}
	{
		p.SetState(10994)
		p.Match(SnowflakeParserRR_BRACKET)
	}
	p.SetState(10996)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserREPEATABLE || _la == SnowflakeParserSEED {
		{
			p.SetState(10995)
			p.Repeatable_seed()
		}

	}



	return localctx
}


// ISampleContext is an interface to support dynamic dispatch.
type ISampleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSampleContext differentiates from other interfaces.
	IsSampleContext()
}

type SampleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySampleContext() *SampleContext {
	var p = new(SampleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_sample
	return p
}

func (*SampleContext) IsSampleContext() {}

func NewSampleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SampleContext {
	var p = new(SampleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_sample

	return p
}

func (s *SampleContext) GetParser() antlr.Parser { return s.parser }

func (s *SampleContext) Sample_opts() ISample_optsContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISample_optsContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISample_optsContext)
}

func (s *SampleContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSAMPLE, 0)
}

func (s *SampleContext) TABLESAMPLE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserTABLESAMPLE, 0)
}

func (s *SampleContext) Sample_method() ISample_methodContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISample_methodContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISample_methodContext)
}

func (s *SampleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SampleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SampleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSample(s)
	}
}

func (s *SampleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSample(s)
	}
}

func (s *SampleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSample(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Sample() (localctx ISampleContext) {
	this := p
	_ = this

	localctx = NewSampleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 986, SnowflakeParserRULE_sample)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10998)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserSAMPLE || _la == SnowflakeParserTABLESAMPLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(11000)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserBERNOULLI || _la == SnowflakeParserBLOCK || _la == SnowflakeParserROW || _la == SnowflakeParserSYSTEM {
		{
			p.SetState(10999)
			p.Sample_method()
		}

	}
	{
		p.SetState(11002)
		p.Sample_opts()
	}



	return localctx
}


// ISearch_conditionContext is an interface to support dynamic dispatch.
type ISearch_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_conditionContext differentiates from other interfaces.
	IsSearch_conditionContext()
}

type Search_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_conditionContext() *Search_conditionContext {
	var p = new(Search_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_search_condition
	return p
}

func (*Search_conditionContext) IsSearch_conditionContext() {}

func NewSearch_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_conditionContext {
	var p = new(Search_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_search_condition

	return p
}

func (s *Search_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_conditionContext) Predicate() IPredicateContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPredicateContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Search_conditionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Search_conditionContext) AllSearch_condition() []ISearch_conditionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISearch_conditionContext); ok {
			len++
		}
	}

	tst := make([]ISearch_conditionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISearch_conditionContext); ok {
			tst[i] = t.(ISearch_conditionContext)
			i++
		}
	}

	return tst
}

func (s *Search_conditionContext) Search_condition(i int) ISearch_conditionContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISearch_conditionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Search_conditionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Search_conditionContext) AllNOT() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserNOT)
}

func (s *Search_conditionContext) NOT(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, i)
}

func (s *Search_conditionContext) AND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAND, 0)
}

func (s *Search_conditionContext) OR() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOR, 0)
}

func (s *Search_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Search_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSearch_condition(s)
	}
}

func (s *Search_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSearch_condition(s)
	}
}

func (s *Search_conditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSearch_condition(s)

	default:
		return t.VisitChildren(s)
	}
}





func (p *SnowflakeParser) Search_condition() (localctx ISearch_conditionContext) {
	return p.search_condition(0)
}

func (p *SnowflakeParser) search_condition(_p int) (localctx ISearch_conditionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewSearch_conditionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ISearch_conditionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 988
	p.EnterRecursionRule(localctx, 988, SnowflakeParserRULE_search_condition, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(11008)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserNOT {
		{
			p.SetState(11005)
			p.Match(SnowflakeParserNOT)
		}


		p.SetState(11010)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(11016)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1422, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(11011)
			p.Predicate()
		}


	case 2:
		{
			p.SetState(11012)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(11013)
			p.search_condition(0)
		}
		{
			p.SetState(11014)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(11026)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1424, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(11024)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1423, p.GetParserRuleContext()) {
			case 1:
				localctx = NewSearch_conditionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SnowflakeParserRULE_search_condition)
				p.SetState(11018)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(11019)
					p.Match(SnowflakeParserAND)
				}
				{
					p.SetState(11020)
					p.search_condition(3)
				}


			case 2:
				localctx = NewSearch_conditionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SnowflakeParserRULE_search_condition)
				p.SetState(11021)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(11022)
					p.Match(SnowflakeParserOR)
				}
				{
					p.SetState(11023)
					p.search_condition(2)
				}

			}

		}
		p.SetState(11028)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1424, p.GetParserRuleContext())
	}



	return localctx
}


// IComparison_operatorContext is an interface to support dynamic dispatch.
type IComparison_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparison_operatorContext differentiates from other interfaces.
	IsComparison_operatorContext()
}

type Comparison_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparison_operatorContext() *Comparison_operatorContext {
	var p = new(Comparison_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_comparison_operator
	return p
}

func (*Comparison_operatorContext) IsComparison_operatorContext() {}

func NewComparison_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comparison_operatorContext {
	var p = new(Comparison_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_comparison_operator

	return p
}

func (s *Comparison_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Comparison_operatorContext) EQ() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEQ, 0)
}

func (s *Comparison_operatorContext) GT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGT, 0)
}

func (s *Comparison_operatorContext) LT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLT, 0)
}

func (s *Comparison_operatorContext) LE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLE, 0)
}

func (s *Comparison_operatorContext) GE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGE, 0)
}

func (s *Comparison_operatorContext) LTGT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLTGT, 0)
}

func (s *Comparison_operatorContext) NE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNE, 0)
}

func (s *Comparison_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparison_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Comparison_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterComparison_operator(s)
	}
}

func (s *Comparison_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitComparison_operator(s)
	}
}

func (s *Comparison_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitComparison_operator(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Comparison_operator() (localctx IComparison_operatorContext) {
	this := p
	_ = this

	localctx = NewComparison_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 990, SnowflakeParserRULE_comparison_operator)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(11029)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la - 1050)) & ^0x3f) == 0 && ((int64(1) << (_la - 1050)) & 127) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// INull_not_nullContext is an interface to support dynamic dispatch.
type INull_not_nullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNull_not_nullContext differentiates from other interfaces.
	IsNull_not_nullContext()
}

type Null_not_nullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNull_not_nullContext() *Null_not_nullContext {
	var p = new(Null_not_nullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_null_not_null
	return p
}

func (*Null_not_nullContext) IsNull_not_nullContext() {}

func NewNull_not_nullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Null_not_nullContext {
	var p = new(Null_not_nullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_null_not_null

	return p
}

func (s *Null_not_nullContext) GetParser() antlr.Parser { return s.parser }

func (s *Null_not_nullContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULL_, 0)
}

func (s *Null_not_nullContext) NOT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, 0)
}

func (s *Null_not_nullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_not_nullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Null_not_nullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterNull_not_null(s)
	}
}

func (s *Null_not_nullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitNull_not_null(s)
	}
}

func (s *Null_not_nullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitNull_not_null(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Null_not_null() (localctx INull_not_nullContext) {
	this := p
	_ = this

	localctx = NewNull_not_nullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 992, SnowflakeParserRULE_null_not_null)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(11032)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserNOT {
		{
			p.SetState(11031)
			p.Match(SnowflakeParserNOT)
		}

	}
	{
		p.SetState(11034)
		p.Match(SnowflakeParserNULL_)
	}



	return localctx
}


// ISubqueryContext is an interface to support dynamic dispatch.
type ISubqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubqueryContext differentiates from other interfaces.
	IsSubqueryContext()
}

type SubqueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubqueryContext() *SubqueryContext {
	var p = new(SubqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_subquery
	return p
}

func (*SubqueryContext) IsSubqueryContext() {}

func NewSubqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubqueryContext {
	var p = new(SubqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_subquery

	return p
}

func (s *SubqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *SubqueryContext) Select_statement() ISelect_statementContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_statementContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *SubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SubqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterSubquery(s)
	}
}

func (s *SubqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitSubquery(s)
	}
}

func (s *SubqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitSubquery(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Subquery() (localctx ISubqueryContext) {
	this := p
	_ = this

	localctx = NewSubqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 994, SnowflakeParserRULE_subquery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(11036)
		p.Select_statement()
	}



	return localctx
}


// IPredicateContext is an interface to support dynamic dispatch.
type IPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredicateContext differentiates from other interfaces.
	IsPredicateContext()
}

type PredicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredicateContext() *PredicateContext {
	var p = new(PredicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_predicate
	return p
}

func (*PredicateContext) IsPredicateContext() {}

func NewPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredicateContext {
	var p = new(PredicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_predicate

	return p
}

func (s *PredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicateContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserEXISTS, 0)
}

func (s *PredicateContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *PredicateContext) Subquery() ISubqueryContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubqueryContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *PredicateContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *PredicateContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *PredicateContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PredicateContext) Comparison_operator() IComparison_operatorContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparison_operatorContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparison_operatorContext)
}

func (s *PredicateContext) ALL() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserALL, 0)
}

func (s *PredicateContext) SOME() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSOME, 0)
}

func (s *PredicateContext) ANY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserANY, 0)
}

func (s *PredicateContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBETWEEN, 0)
}

func (s *PredicateContext) AND() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserAND, 0)
}

func (s *PredicateContext) AllNOT() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserNOT)
}

func (s *PredicateContext) NOT(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNOT, i)
}

func (s *PredicateContext) IN() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIN, 0)
}

func (s *PredicateContext) Expr_list() IExpr_listContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_listContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *PredicateContext) LIKE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLIKE, 0)
}

func (s *PredicateContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserESCAPE, 0)
}

func (s *PredicateContext) IS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserIS, 0)
}

func (s *PredicateContext) Null_not_null() INull_not_nullContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_not_nullContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_not_nullContext)
}

func (s *PredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterPredicate(s)
	}
}

func (s *PredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitPredicate(s)
	}
}

func (s *PredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Predicate() (localctx IPredicateContext) {
	this := p
	_ = this

	localctx = NewPredicateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 996, SnowflakeParserRULE_predicate)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(11098)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1431, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(11038)
			p.Match(SnowflakeParserEXISTS)
		}
		{
			p.SetState(11039)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(11040)
			p.Subquery()
		}
		{
			p.SetState(11041)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(11043)
			p.expr(0)
		}
		{
			p.SetState(11044)
			p.Comparison_operator()
		}
		{
			p.SetState(11045)
			p.expr(0)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(11047)
			p.expr(0)
		}
		{
			p.SetState(11048)
			p.Comparison_operator()
		}
		{
			p.SetState(11049)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserALL || _la == SnowflakeParserANY || _la == SnowflakeParserSOME) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(11050)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(11051)
			p.Subquery()
		}
		{
			p.SetState(11052)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(11054)
			p.expr(0)
		}
		p.SetState(11058)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserNOT {
			{
				p.SetState(11055)
				p.Match(SnowflakeParserNOT)
			}


			p.SetState(11060)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(11061)
			p.Match(SnowflakeParserBETWEEN)
		}
		{
			p.SetState(11062)
			p.expr(0)
		}
		{
			p.SetState(11063)
			p.Match(SnowflakeParserAND)
		}
		{
			p.SetState(11064)
			p.expr(0)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(11066)
			p.expr(0)
		}
		p.SetState(11070)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserNOT {
			{
				p.SetState(11067)
				p.Match(SnowflakeParserNOT)
			}


			p.SetState(11072)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(11073)
			p.Match(SnowflakeParserIN)
		}
		{
			p.SetState(11074)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		p.SetState(11077)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserSELECT:
			{
				p.SetState(11075)
				p.Subquery()
			}


		case SnowflakeParserCASE, SnowflakeParserCAST, SnowflakeParserDEFAULT, SnowflakeParserDENSE_RANK, SnowflakeParserFALSE, SnowflakeParserINT, SnowflakeParserNTILE, SnowflakeParserNULL_, SnowflakeParserOVER, SnowflakeParserRANK, SnowflakeParserROW_NUMBER, SnowflakeParserSTAGE, SnowflakeParserTRUE, SnowflakeParserBIGINT, SnowflakeParserLISTAGG, SnowflakeParserDOUBLE_QUOTE_ID, SnowflakeParserDOUBLE_QUOTE_BLANK, SnowflakeParserID, SnowflakeParserSTRING, SnowflakeParserDECIMAL, SnowflakeParserFLOAT, SnowflakeParserREAL, SnowflakeParserDOT, SnowflakeParserLR_BRACKET, SnowflakeParserLSB, SnowflakeParserLCB, SnowflakeParserPLUS, SnowflakeParserMINUS:
			{
				p.SetState(11076)
				p.Expr_list()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(11079)
			p.Match(SnowflakeParserRR_BRACKET)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(11081)
			p.expr(0)
		}
		p.SetState(11085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserNOT {
			{
				p.SetState(11082)
				p.Match(SnowflakeParserNOT)
			}


			p.SetState(11087)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(11088)
			p.Match(SnowflakeParserLIKE)
		}
		{
			p.SetState(11089)
			p.expr(0)
		}
		p.SetState(11092)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1430, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(11090)
				p.Match(SnowflakeParserESCAPE)
			}
			{
				p.SetState(11091)
				p.expr(0)
			}


		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(11094)
			p.expr(0)
		}
		{
			p.SetState(11095)
			p.Match(SnowflakeParserIS)
		}
		{
			p.SetState(11096)
			p.Null_not_null()
		}

	}


	return localctx
}


// IWhere_clauseContext is an interface to support dynamic dispatch.
type IWhere_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhere_clauseContext differentiates from other interfaces.
	IsWhere_clauseContext()
}

type Where_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhere_clauseContext() *Where_clauseContext {
	var p = new(Where_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_where_clause
	return p
}

func (*Where_clauseContext) IsWhere_clauseContext() {}

func NewWhere_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Where_clauseContext {
	var p = new(Where_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_where_clause

	return p
}

func (s *Where_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Where_clauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserWHERE, 0)
}

func (s *Where_clauseContext) Search_condition() ISearch_conditionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISearch_conditionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Where_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Where_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Where_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterWhere_clause(s)
	}
}

func (s *Where_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitWhere_clause(s)
	}
}

func (s *Where_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitWhere_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Where_clause() (localctx IWhere_clauseContext) {
	this := p
	_ = this

	localctx = NewWhere_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 998, SnowflakeParserRULE_where_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(11100)
		p.Match(SnowflakeParserWHERE)
	}
	{
		p.SetState(11101)
		p.search_condition(0)
	}



	return localctx
}


// IGroup_itemContext is an interface to support dynamic dispatch.
type IGroup_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroup_itemContext differentiates from other interfaces.
	IsGroup_itemContext()
}

type Group_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_itemContext() *Group_itemContext {
	var p = new(Group_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_group_item
	return p
}

func (*Group_itemContext) IsGroup_itemContext() {}

func NewGroup_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_itemContext {
	var p = new(Group_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_group_item

	return p
}

func (s *Group_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_itemContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Group_itemContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Group_itemContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Group_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Group_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterGroup_item(s)
	}
}

func (s *Group_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitGroup_item(s)
	}
}

func (s *Group_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitGroup_item(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Group_item() (localctx IGroup_itemContext) {
	this := p
	_ = this

	localctx = NewGroup_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1000, SnowflakeParserRULE_group_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(11106)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1432, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(11103)
			p.Id_()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(11104)
			p.Num()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(11105)
			p.expr(0)
		}

	}


	return localctx
}


// IGroup_by_clauseContext is an interface to support dynamic dispatch.
type IGroup_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroup_by_clauseContext differentiates from other interfaces.
	IsGroup_by_clauseContext()
}

type Group_by_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_clauseContext() *Group_by_clauseContext {
	var p = new(Group_by_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_group_by_clause
	return p
}

func (*Group_by_clauseContext) IsGroup_by_clauseContext() {}

func NewGroup_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_clauseContext {
	var p = new(Group_by_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_group_by_clause

	return p
}

func (s *Group_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_clauseContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUP, 0)
}

func (s *Group_by_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBY, 0)
}

func (s *Group_by_clauseContext) AllGroup_item() []IGroup_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGroup_itemContext); ok {
			len++
		}
	}

	tst := make([]IGroup_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGroup_itemContext); ok {
			tst[i] = t.(IGroup_itemContext)
			i++
		}
	}

	return tst
}

func (s *Group_by_clauseContext) Group_item(i int) IGroup_itemContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_itemContext)
}

func (s *Group_by_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Group_by_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Group_by_clauseContext) Having_clause() IHaving_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHaving_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHaving_clauseContext)
}

func (s *Group_by_clauseContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLR_BRACKET, 0)
}

func (s *Group_by_clauseContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserRR_BRACKET, 0)
}

func (s *Group_by_clauseContext) CUBE() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCUBE, 0)
}

func (s *Group_by_clauseContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserGROUPING, 0)
}

func (s *Group_by_clauseContext) SETS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserSETS, 0)
}

func (s *Group_by_clauseContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROLLUP, 0)
}

func (s *Group_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Group_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterGroup_by_clause(s)
	}
}

func (s *Group_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitGroup_by_clause(s)
	}
}

func (s *Group_by_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitGroup_by_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Group_by_clause() (localctx IGroup_by_clauseContext) {
	this := p
	_ = this

	localctx = NewGroup_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1002, SnowflakeParserRULE_group_by_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(11140)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1437, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(11108)
			p.Match(SnowflakeParserGROUP)
		}
		{
			p.SetState(11109)
			p.Match(SnowflakeParserBY)
		}
		{
			p.SetState(11110)
			p.Group_item()
		}
		p.SetState(11115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(11111)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(11112)
				p.Group_item()
			}


			p.SetState(11117)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(11119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserHAVING {
			{
				p.SetState(11118)
				p.Having_clause()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(11121)
			p.Match(SnowflakeParserGROUP)
		}
		{
			p.SetState(11122)
			p.Match(SnowflakeParserBY)
		}
		p.SetState(11127)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SnowflakeParserCUBE:
			{
				p.SetState(11123)
				p.Match(SnowflakeParserCUBE)
			}


		case SnowflakeParserGROUPING:
			{
				p.SetState(11124)
				p.Match(SnowflakeParserGROUPING)
			}
			{
				p.SetState(11125)
				p.Match(SnowflakeParserSETS)
			}


		case SnowflakeParserROLLUP:
			{
				p.SetState(11126)
				p.Match(SnowflakeParserROLLUP)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(11129)
			p.Match(SnowflakeParserLR_BRACKET)
		}
		{
			p.SetState(11130)
			p.Group_item()
		}
		p.SetState(11135)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SnowflakeParserCOMMA {
			{
				p.SetState(11131)
				p.Match(SnowflakeParserCOMMA)
			}
			{
				p.SetState(11132)
				p.Group_item()
			}


			p.SetState(11137)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(11138)
			p.Match(SnowflakeParserRR_BRACKET)
		}

	}


	return localctx
}


// IHaving_clauseContext is an interface to support dynamic dispatch.
type IHaving_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHaving_clauseContext differentiates from other interfaces.
	IsHaving_clauseContext()
}

type Having_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHaving_clauseContext() *Having_clauseContext {
	var p = new(Having_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_having_clause
	return p
}

func (*Having_clauseContext) IsHaving_clauseContext() {}

func NewHaving_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Having_clauseContext {
	var p = new(Having_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_having_clause

	return p
}

func (s *Having_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Having_clauseContext) HAVING() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserHAVING, 0)
}

func (s *Having_clauseContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Having_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Having_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Having_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterHaving_clause(s)
	}
}

func (s *Having_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitHaving_clause(s)
	}
}

func (s *Having_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitHaving_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Having_clause() (localctx IHaving_clauseContext) {
	this := p
	_ = this

	localctx = NewHaving_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1004, SnowflakeParserRULE_having_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(11142)
		p.Match(SnowflakeParserHAVING)
	}
	{
		p.SetState(11143)
		p.expr(0)
	}



	return localctx
}


// IQualify_clauseContext is an interface to support dynamic dispatch.
type IQualify_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualify_clauseContext differentiates from other interfaces.
	IsQualify_clauseContext()
}

type Qualify_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualify_clauseContext() *Qualify_clauseContext {
	var p = new(Qualify_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_qualify_clause
	return p
}

func (*Qualify_clauseContext) IsQualify_clauseContext() {}

func NewQualify_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Qualify_clauseContext {
	var p = new(Qualify_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_qualify_clause

	return p
}

func (s *Qualify_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Qualify_clauseContext) QUALIFY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserQUALIFY, 0)
}

func (s *Qualify_clauseContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Qualify_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Qualify_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Qualify_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterQualify_clause(s)
	}
}

func (s *Qualify_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitQualify_clause(s)
	}
}

func (s *Qualify_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitQualify_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Qualify_clause() (localctx IQualify_clauseContext) {
	this := p
	_ = this

	localctx = NewQualify_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1006, SnowflakeParserRULE_qualify_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(11145)
		p.Match(SnowflakeParserQUALIFY)
	}
	{
		p.SetState(11146)
		p.expr(0)
	}



	return localctx
}


// IOrder_itemContext is an interface to support dynamic dispatch.
type IOrder_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrder_itemContext differentiates from other interfaces.
	IsOrder_itemContext()
}

type Order_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_itemContext() *Order_itemContext {
	var p = new(Order_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_order_item
	return p
}

func (*Order_itemContext) IsOrder_itemContext() {}

func NewOrder_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_itemContext {
	var p = new(Order_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_order_item

	return p
}

func (s *Order_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_itemContext) Id_() IId_Context {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IId_Context); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Order_itemContext) Num() INumContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Order_itemContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Order_itemContext) NULLS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNULLS, 0)
}

func (s *Order_itemContext) ASC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserASC, 0)
}

func (s *Order_itemContext) DESC() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserDESC, 0)
}

func (s *Order_itemContext) FIRST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFIRST, 0)
}

func (s *Order_itemContext) LAST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLAST, 0)
}

func (s *Order_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Order_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterOrder_item(s)
	}
}

func (s *Order_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitOrder_item(s)
	}
}

func (s *Order_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitOrder_item(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Order_item() (localctx IOrder_itemContext) {
	this := p
	_ = this

	localctx = NewOrder_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1008, SnowflakeParserRULE_order_item)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(11151)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1438, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(11148)
			p.Id_()
		}


	case 2:
		{
			p.SetState(11149)
			p.Num()
		}


	case 3:
		{
			p.SetState(11150)
			p.expr(0)
		}

	}
	p.SetState(11154)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1439, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(11153)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserASC || _la == SnowflakeParserDESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	}
	p.SetState(11158)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SnowflakeParserNULLS {
		{
			p.SetState(11156)
			p.Match(SnowflakeParserNULLS)
		}
		{
			p.SetState(11157)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SnowflakeParserFIRST || _la == SnowflakeParserLAST) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}



	return localctx
}


// IOrder_by_clauseContext is an interface to support dynamic dispatch.
type IOrder_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrder_by_clauseContext differentiates from other interfaces.
	IsOrder_by_clauseContext()
}

type Order_by_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_clauseContext() *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_order_by_clause
	return p
}

func (*Order_by_clauseContext) IsOrder_by_clauseContext() {}

func NewOrder_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_order_by_clause

	return p
}

func (s *Order_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_clauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserORDER, 0)
}

func (s *Order_by_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserBY, 0)
}

func (s *Order_by_clauseContext) AllOrder_item() []IOrder_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrder_itemContext); ok {
			len++
		}
	}

	tst := make([]IOrder_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrder_itemContext); ok {
			tst[i] = t.(IOrder_itemContext)
			i++
		}
	}

	return tst
}

func (s *Order_by_clauseContext) Order_item(i int) IOrder_itemContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_itemContext)
}

func (s *Order_by_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SnowflakeParserCOMMA)
}

func (s *Order_by_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SnowflakeParserCOMMA, i)
}

func (s *Order_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Order_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitOrder_by_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Order_by_clause() (localctx IOrder_by_clauseContext) {
	this := p
	_ = this

	localctx = NewOrder_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1010, SnowflakeParserRULE_order_by_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(11160)
		p.Match(SnowflakeParserORDER)
	}
	{
		p.SetState(11161)
		p.Match(SnowflakeParserBY)
	}
	{
		p.SetState(11162)
		p.Order_item()
	}
	p.SetState(11167)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SnowflakeParserCOMMA {
		{
			p.SetState(11163)
			p.Match(SnowflakeParserCOMMA)
		}
		{
			p.SetState(11164)
			p.Order_item()
		}


		p.SetState(11169)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IRow_rowsContext is an interface to support dynamic dispatch.
type IRow_rowsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRow_rowsContext differentiates from other interfaces.
	IsRow_rowsContext()
}

type Row_rowsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_rowsContext() *Row_rowsContext {
	var p = new(Row_rowsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_row_rows
	return p
}

func (*Row_rowsContext) IsRow_rowsContext() {}

func NewRow_rowsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_rowsContext {
	var p = new(Row_rowsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_row_rows

	return p
}

func (s *Row_rowsContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_rowsContext) ROW() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROW, 0)
}

func (s *Row_rowsContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserROWS, 0)
}

func (s *Row_rowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_rowsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Row_rowsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterRow_rows(s)
	}
}

func (s *Row_rowsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitRow_rows(s)
	}
}

func (s *Row_rowsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitRow_rows(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Row_rows() (localctx IRow_rowsContext) {
	this := p
	_ = this

	localctx = NewRow_rowsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1012, SnowflakeParserRULE_row_rows)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(11170)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserROW || _la == SnowflakeParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IFirst_nextContext is an interface to support dynamic dispatch.
type IFirst_nextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFirst_nextContext differentiates from other interfaces.
	IsFirst_nextContext()
}

type First_nextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFirst_nextContext() *First_nextContext {
	var p = new(First_nextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_first_next
	return p
}

func (*First_nextContext) IsFirst_nextContext() {}

func NewFirst_nextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *First_nextContext {
	var p = new(First_nextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_first_next

	return p
}

func (s *First_nextContext) GetParser() antlr.Parser { return s.parser }

func (s *First_nextContext) FIRST() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFIRST, 0)
}

func (s *First_nextContext) NEXT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserNEXT, 0)
}

func (s *First_nextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *First_nextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *First_nextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterFirst_next(s)
	}
}

func (s *First_nextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitFirst_next(s)
	}
}

func (s *First_nextContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitFirst_next(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) First_next() (localctx IFirst_nextContext) {
	this := p
	_ = this

	localctx = NewFirst_nextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1014, SnowflakeParserRULE_first_next)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(11172)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SnowflakeParserFIRST || _la == SnowflakeParserNEXT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ILimit_clauseContext is an interface to support dynamic dispatch.
type ILimit_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLimit_clauseContext differentiates from other interfaces.
	IsLimit_clauseContext()
}

type Limit_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimit_clauseContext() *Limit_clauseContext {
	var p = new(Limit_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SnowflakeParserRULE_limit_clause
	return p
}

func (*Limit_clauseContext) IsLimit_clauseContext() {}

func NewLimit_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Limit_clauseContext {
	var p = new(Limit_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SnowflakeParserRULE_limit_clause

	return p
}

func (s *Limit_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Limit_clauseContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserLIMIT, 0)
}

func (s *Limit_clauseContext) AllNum() []INumContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumContext); ok {
			len++
		}
	}

	tst := make([]INumContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumContext); ok {
			tst[i] = t.(INumContext)
			i++
		}
	}

	return tst
}

func (s *Limit_clauseContext) Num(i int) INumContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumContext)
}

func (s *Limit_clauseContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserOFFSET, 0)
}

func (s *Limit_clauseContext) FETCH() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserFETCH, 0)
}

func (s *Limit_clauseContext) AllRow_rows() []IRow_rowsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRow_rowsContext); ok {
			len++
		}
	}

	tst := make([]IRow_rowsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRow_rowsContext); ok {
			tst[i] = t.(IRow_rowsContext)
			i++
		}
	}

	return tst
}

func (s *Limit_clauseContext) Row_rows(i int) IRow_rowsContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_rowsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_rowsContext)
}

func (s *Limit_clauseContext) First_next() IFirst_nextContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFirst_nextContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFirst_nextContext)
}

func (s *Limit_clauseContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SnowflakeParserONLY, 0)
}

func (s *Limit_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Limit_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Limit_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.EnterLimit_clause(s)
	}
}

func (s *Limit_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SnowflakeParserListener); ok {
		listenerT.ExitLimit_clause(s)
	}
}

func (s *Limit_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SnowflakeParserVisitor:
		return t.VisitLimit_clause(s)

	default:
		return t.VisitChildren(s)
	}
}




func (p *SnowflakeParser) Limit_clause() (localctx ILimit_clauseContext) {
	this := p
	_ = this

	localctx = NewLimit_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1016, SnowflakeParserRULE_limit_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(11198)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SnowflakeParserLIMIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(11174)
			p.Match(SnowflakeParserLIMIT)
		}
		{
			p.SetState(11175)
			p.Num()
		}
		p.SetState(11178)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOFFSET {
			{
				p.SetState(11176)
				p.Match(SnowflakeParserOFFSET)
			}
			{
				p.SetState(11177)
				p.Num()
			}

		}


	case SnowflakeParserFETCH, SnowflakeParserOFFSET, SnowflakeParserROW, SnowflakeParserROWS:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(11182)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserOFFSET {
			{
				p.SetState(11180)
				p.Match(SnowflakeParserOFFSET)
			}
			{
				p.SetState(11181)
				p.Num()
			}

		}
		p.SetState(11185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserROW || _la == SnowflakeParserROWS {
			{
				p.SetState(11184)
				p.Row_rows()
			}

		}
		{
			p.SetState(11187)
			p.Match(SnowflakeParserFETCH)
		}
		p.SetState(11189)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserFIRST || _la == SnowflakeParserNEXT {
			{
				p.SetState(11188)
				p.First_next()
			}

		}
		{
			p.SetState(11191)
			p.Num()
		}
		p.SetState(11193)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserROW || _la == SnowflakeParserROWS {
			{
				p.SetState(11192)
				p.Row_rows()
			}

		}
		p.SetState(11196)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SnowflakeParserONLY {
			{
				p.SetState(11195)
				p.Match(SnowflakeParserONLY)
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


func (p *SnowflakeParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 418:
			var t *ExprContext = nil
			if localctx != nil { t = localctx.(*ExprContext) }
			return p.Expr_Sempred(t, predIndex)

	case 494:
			var t *Search_conditionContext = nil
			if localctx != nil { t = localctx.(*Search_conditionContext) }
			return p.Search_condition_Sempred(t, predIndex)


	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SnowflakeParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
			return p.Precpred(p.GetParserRuleContext(), 10)

	case 1:
			return p.Precpred(p.GetParserRuleContext(), 9)

	case 2:
			return p.Precpred(p.GetParserRuleContext(), 6)

	case 3:
			return p.Precpred(p.GetParserRuleContext(), 5)

	case 4:
			return p.Precpred(p.GetParserRuleContext(), 15)

	case 5:
			return p.Precpred(p.GetParserRuleContext(), 8)

	case 6:
			return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SnowflakeParser) Search_condition_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 7:
			return p.Precpred(p.GetParserRuleContext(), 2)

	case 8:
			return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

